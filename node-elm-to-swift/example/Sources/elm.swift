import Foundation

// using enum to create a namespace can't be instantiated or extend
public enum Elm {

    // in theory Optional.none and Optional.some exist
    // and they even correctly say
    //     Optional<Optional<Int>>.none == Optional.some(Optional<Int>.none))
    //     is false
    // Since they are
    //   - both displayed as nil
    //   - Optional.some(x) has the same type as x (hand-wave)
    // I'm a bit worried about how shaky to use they might be though
    public enum Maybe_Maybe<A: Sendable>: Sendable {
        case Nothing
        case Just(_ value: A)
    }

    public indirect enum List_List<A: Sendable>: Sendable {
        case Empty
        case Cons(_ head: A, _ tail: List_List<A>)
    }

    public enum Basics_Order: Sendable {
        case LT
        case EQ
        case GT
    }

    static func debug_toString<A>(_ data: A) -> String {
        String(reflecting: data)
    }

    static func debug_log<A>(_ tag: String, _ data: A) -> A {
        print(tag, data)
        return data
    }

    static func debug_todo<A>(_ message: String) -> A {
        fatalError("TODO " + message)
    }

    static func basics_identity<A>(_ a: A) -> A {
        a
    }

    static func basics_always<Ignored, Kept>(_ kept: Kept, _: Ignored) -> Kept {
        kept
    }

    static func basics_not(_ bool: Bool) -> Bool {
        !bool
    }

    static func basics_or(_ a: Bool, _ b: Bool) -> Bool {
        a || b
    }

    static func basics_and(_ a: Bool, _ b: Bool) -> Bool {
        a && b
    }

    static func basics_eq<A>(_ a: A, _ b: A) -> Bool {
        if let a = a as? AnyHashable,
            let b = b as? AnyHashable
        {
            return a == b
        } else {
            fatalError("== on non-AnyHashable types")
        }

    }

    static func basics_neq<A>(_ a: A, _ b: A) -> Bool {
        guard let a = a as? AnyHashable,
            let b = b as? AnyHashable
        else { fatalError("== on non-AnyHashable types") }
        return a != b
    }

    static func basics_lt(_ a: Double, _ b: Double) -> Bool {
        a < b
    }

    static func basics_gt(_ a: Double, _ b: Double) -> Bool {
        a > b
    }

    static func basics_le(_ a: Double, _ b: Double) -> Bool {
        a <= b
    }

    static func basics_ge(_ a: Double, _ b: Double) -> Bool {
        a >= b
    }

    static func basics_compare<A: Comparable>(_ a: A, _ b: A) -> Basics_Order {
        if a < b {
            .LT
        } else if a > b {
            .GT
        } else {
            .EQ
        }
    }

    static func basics_compare<T: RawRepresentable>(_ a: T, _ b: T) -> Basics_Order
    where T.RawValue: Comparable {
        if a.rawValue < b.rawValue {
            .LT
        } else if a.rawValue > b.rawValue {
            .GT
        } else {
            .EQ
        }
    }


    static func basics_compare<A: Comparable>(_ aList: List_List<A>, _ bList: List_List<A>)
        -> Basics_Order
    {
        switch (aList, bList) {
        case (.Empty, .Empty): .EQ
        case (.Empty, .Cons(_, _)): .LT
        case (.Cons(_, _), .Empty): .GT
        case let (.Cons(aHead, aTail), .Cons(bHead, bTail)):
            if aHead < bHead {
                .LT
            } else if aHead > bHead {
                .GT
            } else {
                basics_compare(aTail, bTail)
            }
        }
    }

    static func basics_min(_ a: Double, _ b: Double) -> Double {
        Double.minimum(a, b)
    }

    static func basics_max(_ a: Double, _ b: Double) -> Double {
        Double.maximum(a, b)
    }

    static func basics_negate(_ float: Double) -> Double {
        -float
    }

    static func basics_abs(_ float: Double) -> Double {
        abs(float)
    }

    static func basics_sqrt(_ float: Double) -> Double {
        float.squareRoot()
    }

    static func basics_truncate(_ float: Double) -> Double {
        float.rounded(.towardZero)
    }

    static func basics_round(_ float: Double) -> Double {
        float.rounded()
    }

    static func basics_floor(_ float: Double) -> Double {
        float.rounded(.down)
    }

    static func basics_ceiling(_ float: Double) -> Double {
        float.rounded(.up)
    }

    static func basics_isInfinite(_ float: Double) -> Bool {
        float.isInfinite
    }

    static func basics_isNaN(_ float: Double) -> Bool {
        float.isNaN
    }

    static func basics_add(_ a: Double, _ b: Double) -> Double {
        a + b
    }

    static func basics_sub(_ base: Double, _ toSubtract: Double) -> Double {
        base - toSubtract
    }

    static func basics_mul(_ a: Double, _ b: Double) -> Double {
        a * b
    }

    static func basics_idiv(_ toDivide: Double, _ divisor: Double) -> Double {
        (toDivide / divisor).rounded(.towardZero)
    }

    static func basics_fdiv(_ toDivide: Double, _ divisor: Double) -> Double {
        toDivide / divisor
    }

    static func basics_remainderBy(_ divisor: Double, _ toDivide: Double) -> Double {
        toDivide.truncatingRemainder(dividingBy: divisor)
    }

    static func basics_modBy(_ divisor: Double, _ toDivide: Double) -> Double {
        toDivide.remainder(dividingBy: divisor)
    }

    static func basics_pow(_ base: Double, _ exponent: Double) -> Double {
        pow(base, exponent)
    }

    static func char_toCode(_ char: Character) -> Double {
        if let code = char.utf16.first {
            Double(code)
        } else {
            Double.nan
        }
    }

    static func char_fromCode(_ charCode: Double) -> Character {
        return if let scalar = UnicodeScalar(Int(charCode)) {
            Character(scalar)
        } else {
            "\0"
        }
    }

    static func char_isHexDigit(_ char: Character) -> Bool {
        char.isHexDigit
    }

    static func char_toUpper(_ char: Character) -> Character {
        if let uppercasedChar = char.uppercased().first {
            uppercasedChar
        } else {
            "\0"
        }
    }

    static func char_toLower(_ char: Character) -> Character {
        if let lowercasedChar = char.lowercased().first {
            lowercasedChar
        } else {
            "\0"
        }
    }

    static func string_fromChar(_ char: Character) -> String {
        String(char)
    }

    static func string_fromFloat(_ float: Double) -> String {
        String(float)
    }

    static func string_toInt(_ str: String) -> Maybe_Maybe<Double> {
        if let parseResult = Int(str) {
            .Just(Double(parseResult))
        } else {
            .Nothing
        }
    }

    static func string_toFloat(_ str: String) -> Maybe_Maybe<Double> {
        if let parseResult = Double(str) {
            .Just(parseResult)
        } else {
            .Nothing
        }
    }

    static func string_toList(_ str: String) -> List_List<Character> {
        var chars: List_List<Character> = .Empty
        for char in str.reversed() {
            chars = .Cons(char, chars)
        }
        return chars
    }

    static func string_fromList(_ chars: List_List<Character>) -> String {
        var remainingChars = chars
        var stringBuffer = String()
        while true {
            switch remainingChars {
            case .Empty:
                return stringBuffer
            case .Cons(let head, let tail):
                stringBuffer.append(head)
                remainingChars = tail
            }
        }
    }

    static func string_length(_ str: String) -> Double {
        Double(str.utf16.count)
    }

    static func string_isEmpty(_ str: String) -> Bool {
        str.isEmpty
    }

    static func string_cons(_ headChar: Character, _ tailString: String) -> String {
        String(headChar) + tailString
    }

    static func string_append(_ earlier: String, _ later: String) -> String {
        earlier + later
    }

    static func string_contains(_ sub: String, _ str: String) -> Bool {
        str.contains(sub)
    }

    static func string_startsWith(_ start: String, _ str: String) -> Bool {
        str.hasPrefix(start)
    }

    static func string_endsWith(_ end: String, _ str: String) -> Bool {
        str.hasSuffix(end)
    }

    static func string_concat(_ segments: List_List<String>) -> String {
        var remainingSegments = segments
        var stringBuffer = String()
        while true {
            switch remainingSegments {
            case .Empty:
                return stringBuffer
            case .Cons(let head, let tail):
                stringBuffer.append(contentsOf: head)
                remainingSegments = tail
            }
        }
    }

    static func string_join(_ inBetween: String, _ segments: List_List<String>) -> String {
        switch segments {
        case .Empty:
            return ""
        case .Cons(let headSegment, let tailSegments):
            var remainingCharacters = tailSegments
            var stringBuffer = String()
            stringBuffer.append(contentsOf: headSegment)
            while true {
                switch remainingCharacters {
                case .Empty:
                    return stringBuffer
                case .Cons(let head, let tail):
                    stringBuffer.append(contentsOf: inBetween)
                    stringBuffer.append(contentsOf: head)
                    remainingCharacters = tail
                }
            }
        }
    }

    static func string_reverse(_ str: String) -> String {
        String(decoding: Array(str.utf16).reversed(), as: UTF16.self)
    }

    static func string_dropLeft(_ countToSkip: Double, _ str: String) -> String {
        String(decoding: Array(str.utf16.dropFirst(Int(countToSkip))), as: UTF16.self)
    }

    static func string_dropRight(_ countToSkip: Double, _ str: String) -> String {
        String(decoding: Array(str.utf16.dropLast(Int(countToSkip))), as: UTF16.self)
    }

    static func string_left(_ countToTake: Double, _ str: String) -> String {
        String(decoding: Array(str.utf16.prefix(Int(countToTake))), as: UTF16.self)
    }

    static func string_right(_ countToTake: Double, _ str: String) -> String {
        String(decoding: Array(str.utf16.suffix(Int(countToTake))), as: UTF16.self)
    }

    static func string_padRight(_ desiredLength: Double, _ padChar: String, _ str: String) -> String
    {
        str + String(repeating: padChar, count: Int(desiredLength) - str.utf16.count)
    }

    static func string_padLeft(_ desiredLength: Double, _ padChar: String, _ str: String) -> String
    {
        String(repeating: padChar, count: max(0, Int(desiredLength) - str.utf16.count)) + str
    }

    static func string_repeat(_ count: Double, _ segment: String) -> String {
        String(repeating: segment, count: Int(count))
    }

    static func string_replace(_ toReplace: String, _ replacement: String, _ str: String) -> String
    {
        str.replacing(toReplace, with: replacement)
    }

    static func string_toLower(_ str: String) -> String {
        str.lowercased()
    }

    static func string_toUpper(_ str: String) -> String {
        str.uppercased()
    }

    static func string_trimLeft(_ str: String) -> String {
        String(
            str.trimmingPrefix(while: { character in
                character.isWhitespace || character.isNewline
            })
        )
    }

    static func string_trimRight(_ str: String) -> String {
        let startToRestoreAfterTrimming =
            str.prefix(while: { character in
                character.isWhitespace || character.isNewline
            })
        return String(startToRestoreAfterTrimming)
            + String(str.trimmingCharacters(in: .whitespacesAndNewlines))
    }

    static func string_trim(_ str: String) -> String {
        str.trimmingCharacters(in: .whitespacesAndNewlines)
    }

    static func string_map(_ characterChange: (Character) -> Character, _ str: String) -> String {
        String(str.map(characterChange))
    }

    static func string_filter(_ keepCharacter: (Character) -> Bool, _ str: String) -> String {
        str.filter(keepCharacter)
    }

    static func string_lines(_ str: String) -> List_List<String> {
        arrayToList_List(str.components(separatedBy: .newlines))
    }

    static func string_split(_ separator: String, _ str: String) -> List_List<String> {
        arrayToList_List(str.split(separator: separator).map({ sub in String(sub) }))
    }

    static func string_all(_ isExpected: (Character) -> Bool, _ str: String) -> Bool {
        str.allSatisfy(isExpected)
    }

    static func string_any(_ isOdd: (Character) -> Bool, _ str: String) -> Bool {
        return str.contains(where: isOdd)
    }

    static func string_slice(_ start: Double, _ end: Double, _ str: String) -> String {
        if start >= 0 && start + 1 == end {
            return String(
                str.utf16[
                    str.utf16.index(
                        str.utf16.startIndex, offsetBy: Int(start))
                ])
        } else {
            // likely slow. Check, then find something faster
            let realStartIndexInclusive =
                if start >= 0 {
                    Int(start)
                } else {
                    str.count + Int(start)
                }
            let realEndIndexExclusive =
                if end >= 0 {
                    Int(end)
                } else {
                    str.count + Int(end)
                }
            return String(
                decoding: str.utf16[
                    str.utf16.index(
                        str.utf16.startIndex, offsetBy: realStartIndexInclusive
                    )..<str.utf16.index(
                        str.utf16.startIndex, offsetBy: realEndIndexExclusive
                    )
                ],
                as: UTF16.self
            )
        }
    }

    static func string_foldl<Folded>(
        _ reduce: (Character, Folded) -> Folded,
        _ initialFolded: Folded,
        _ str: String
    ) -> Folded {
        str.reduce(
            initialFolded,
            { (soFar, char) in
                reduce(char, soFar)
            }
        )
    }

    static func string_foldr<Folded>(
        _ reduce: (Character, Folded) -> Folded,
        _ initialFolded: Folded,
        _ str: String
    ) -> Folded {
        str.reversed().reduce(
            initialFolded,
            { (soFar, char) in
                reduce(char, soFar)
            }
        )
    }

    private static func arrayToList_List<A>(_ array: [A]) -> List_List<A> {
        var soFar: List_List<A> = .Empty
        for element in array.reversed() {
            soFar = .Cons(element, soFar)
        }
        return soFar
    }

    private static func list_ListToArray<A>(_ fullList: List_List<A>) -> [A] {
        var soFar: [A] = Array()
        var remainingList = fullList
        while true {
            switch remainingList {
            case .Empty:
                return soFar
            case .Cons(let remainingHead, let remainingTail):
                soFar.append(remainingHead)
                remainingList = remainingTail
            }
        }
    }

    static func list_singleton<A>(_ onlyElement: A) -> List_List<A> {
        .Cons(onlyElement, .Empty)
    }

    static func list_isEmpty<A>(_ list: List_List<A>) -> Bool {
        switch list {
        case .Empty: true
        case .Cons(_, _): false
        }
    }

    static func list_length<A>(_ list: List_List<A>) -> Double {
        list_foldl({ (_, soFar) in soFar + 1 }, 0, list)
    }

    static func list_foldl<A, Folded>(
        _ reduce: (A, Folded) -> Folded,
        _ initialFolded: Folded,
        _ list: List_List<A>
    ) -> Folded {
        var foldedSoFar = initialFolded
        var remainingList = list
        while true {
            switch remainingList {
            case .Empty:
                return foldedSoFar
            case .Cons(let head, let tail):
                foldedSoFar = reduce(head, initialFolded)
                remainingList = tail
            }
        }
    }

    static func list_foldr<A, Folded>(
        _ reduce: (A, Folded) -> Folded,
        _ initialFolded: Folded,
        _ list: List_List<A>
    ) -> Folded {
        list_foldl(reduce, initialFolded, list_reverse(list))
    }

    static func list_reverse<A>(_ list: List_List<A>) -> List_List<A> {
        list_foldl(List_List.Cons, .Empty, list)
    }

    static func list_all<A>(_ isExpected: (A) -> Bool, _ list: List_List<A>) -> Bool {
        var remainingList = list
        while true {
            switch remainingList {
            case .Empty:
                return true
            case .Cons(let head, let tail):
                if !isExpected(head) {
                    return false
                } else {
                    remainingList = tail
                }
            }
        }
    }

    static func list_any<A>(_ isOdd: (A) -> Bool, _ list: List_List<A>) -> Bool {
        var remainingList = list
        while true {
            switch remainingList {
            case .Empty:
                return false
            case .Cons(let head, let tail):
                if isOdd(head) {
                    return true
                } else {
                    remainingList = tail
                }
            }
        }
    }

    static func list_member<A>(_ needle: (A), _ list: List_List<A>) -> Bool {
        list_any({ element in basics_eq(element, needle) }, list)
    }

    static func list_drop<A>(_ countToSkip: Double, _ list: List_List<A>) -> List_List<A> {
        var remainingCountToSkip = countToSkip
        var remainingList = list
        while remainingCountToSkip >= 1 {
            switch remainingList {
            case .Empty:
                return remainingList
            case .Cons(_, let tail):
                remainingList = tail
                remainingCountToSkip -= 1
            }
        }
        return remainingList
    }

    static func list_take<A>(_ countToTake: Double, _ list: List_List<A>) -> List_List<A> {
        var remainingCountToTake = countToTake
        var remainingList = list
        var takenElementsArraySoFar: [A] = []
        while remainingCountToTake >= 1 {
            switch remainingList {
            case .Empty:
                return arrayToList_List(takenElementsArraySoFar)
            case .Cons(let head, let tail):
                takenElementsArraySoFar.append(head)
                remainingList = tail
                remainingCountToTake -= 1
            }
        }
        return arrayToList_List(takenElementsArraySoFar)
    }

    static func list_intersperse<A>(_ inBetween: A, _ list: List_List<A>) -> List_List<A> {
        switch list {
        case .Empty: .Empty
        case .Cons(let head, let tail):
            list_foldr(
                { (element, soFar) in
                    .Cons(element, .Cons(inBetween, soFar))
                },
                list_singleton(head),
                tail
            )
        }
    }

    static func list_map<A, B>(_ elementChange: (A) -> B, _ list: List_List<A>) -> List_List<B> {
        list_foldr(
            { (element, soFar) in
                .Cons(elementChange(element), soFar)
            },
            .Empty,
            list
        )
    }

    static func list_indexedMap<A, B>(
        _ indexedElementChange: (Double, A) -> B,
        _ list: List_List<A>
    )
        -> List_List<B>
    {
        list_foldr(
            { (element, soFar: (index: Double, list: List_List<B>)) in
                (
                    index: soFar.index + 1,
                    list: .Cons(indexedElementChange(soFar.index, element), soFar.list)
                )
            },
            (index: list_length(list), list: .Empty),
            list
        ).list
    }

    static func list_map2<A, B, C>(
        _ combineAb: (A, B) -> C,
        _ aList: List_List<A>,
        _ bList: List_List<B>
    ) -> List_List<C> {
        var remainingAList = aList
        var remainingBList = bList
        var combinedArraySoFar: [C] = []
        while true {
            switch (a: remainingAList, b: remainingBList) {
            case (a: .Empty, b: .Empty):
                return arrayToList_List(combinedArraySoFar)
            case (a: .Empty, b: .Cons(_, _)):
                return arrayToList_List(combinedArraySoFar)
            case (a: .Cons(_, _), b: .Empty):
                return arrayToList_List(combinedArraySoFar)
            case (a: .Cons(let aHead, let aTail), b: .Cons(let bHead, let bTail)):
                remainingAList = aTail
                remainingBList = bTail
                combinedArraySoFar.append(combineAb(aHead, bHead))
            }
        }
    }

    static func list_zip<A, B>(_ aList: List_List<A>, _ bList: List_List<B>)
        -> List_List<(first: A, second: B)>
    {
        list_map2({ (a, b) in (first: a, second: b) }, aList, bList)
    }

    static func list_unzip<A, B>(_ abList: List_List<(first: A, second: B)>)
        -> (first: List_List<A>, second: List_List<B>)
    {
        (
            first: list_map({ ab in ab.first }, abList),
            second: list_map({ ab in ab.second }, abList)
        )
    }

    static func list_filter<A>(_ keepElement: (A) -> Bool, _ list: List_List<A>) -> List_List<A> {
        list_foldr(
            { (element, soFar) in
                if keepElement(element) {
                    soFar
                } else {
                    .Cons(element, soFar)
                }
            },
            .Empty,
            list
        )
    }

    static func list_filterMap<A, B>(
        _ element_toMaybe_Maybe: (A) -> Maybe_Maybe<B>,
        _ list: List_List<A>
    ) -> List_List<B> {
        list_foldr(
            { (element, soFar) in
                switch element_toMaybe_Maybe(element) {
                case .Nothing:
                    soFar
                case .Just(let value):
                    .Cons(value, soFar)
                }
            },
            .Empty,
            list
        )
    }

    static func list_append<A>(_ earlier: List_List<A>, _ later: List_List<A>) -> List_List<A> {
        list_foldr(
            { (earlierElement, soFar) in
                .Cons(earlierElement, soFar)
            },
            later,
            earlier
        )
    }

    static func list_concatMap<A, B>(_ elementToList: (A) -> List_List<B>, _ list: List_List<A>)
        -> List_List<B>
    {
        return list_foldr(
            { (element, soFar) in
                list_append(elementToList(element), soFar)
            },
            .Empty,
            list
        )
    }

    static func list_concat<A>(_ list: List_List<List_List<A>>) -> List_List<A> {
        list_foldr(
            { (element, soFar) in
                list_append(element, soFar)
            },
            .Empty,
            list
        )
    }

    static func list_repeat<A>(_ count: Double, _ element: A) -> List_List<A> {
        if count <= 0 {
            return .Empty
        } else {
            var soFar = List_List<A>.Empty
            for _ in 1...Int(count) {
                soFar = .Cons(element, soFar)
            }
            return soFar
        }
    }

    static func list_range(_ start: Double, _ end: Double) -> List_List<Double> {
        if start > end {
            return .Empty
        } else {
            var soFar: List_List<Double> = .Empty
            for i in (Int(end)...Int(start)).reversed() {
                soFar = .Cons(Double(i), soFar)
            }
            return soFar
        }
    }
    static func list_sum(_ list: List_List<Double>) -> Double {
        list_foldl(basics_add, 0, list)
    }

    static func list_product(_ list: List_List<Double>) -> Double {
        list_foldl(basics_mul, 1, list)
    }

    static func list_maximum(_ list: List_List<Double>) -> Maybe_Maybe<Double> {
        return switch list {
        case .Empty:
            .Nothing
        case .Cons(let head, let tail):
            .Just(list_foldl(Double.maximum, head, tail))
        }
    }

    static func list_minimum(_ list: List_List<Double>) -> Maybe_Maybe<Double> {
        return switch list {
        case .Empty:
            .Nothing
        case .Cons(let head, let tail):
            .Just(list_foldl(Double.minimum, head, tail))
        }
    }

    static func list_sortWith<A>(_ elementCompare: (A, A) -> Basics_Order, _ list: List_List<A>)
        -> List_List<A>
    {
        var asArray = list_ListToArray(list)
        asArray.sort(by: { (a, b) in elementCompare(a, b) == .LT })  // mutate
        return arrayToList_List(asArray)
    }

    static func list_sortBy<A, Comp>(_ elementToComparable: (A) -> Comp, _ list: List_List<A>)
        -> List_List<A>
    where Comp: Comparable {
        var asArray = list_ListToArray(list)
        asArray.sort(by: { (a, b) in elementToComparable(a) < elementToComparable(b) })  // mutate
        return arrayToList_List(asArray)
    }

    static func list_sort<Comp>(_ list: List_List<Comp>)
        -> List_List<Comp>
    where Comp: Comparable {
        var asArray = list_ListToArray(list)
        asArray.sort(by: { (a, b) in a < b })  // mutate
        return arrayToList_List(asArray)
    }


public typealias ElmDependency_Version =
    String;

public typealias ElmSyntaxComments_Comment =
    String;

public typealias ElmSyntaxDocumentation_Documentation =
    String;

public typealias ElmSyntaxExposing_ExposedType =
    (name: String,
     open_: Maybe_Maybe<ElmSyntaxRange_Range>
    );

public typealias ElmSyntaxExpression_Case =
    (first: ElmSyntaxNode_Node<ElmSyntaxPattern_Pattern>,
     second: ElmSyntaxNode_Node<ElmSyntaxExpression_Expression>
    );

public typealias ElmSyntaxExpression_CaseBlock =
    (cases: ElmSyntaxExpression_Cases,
     expression: ElmSyntaxNode_Node<ElmSyntaxExpression_Expression>
    );

public typealias ElmSyntaxExpression_Cases =
    List_List<ElmSyntaxExpression_Case>;

public typealias ElmSyntaxExpression_Function =
    (declaration: ElmSyntaxNode_Node<ElmSyntaxExpression_FunctionImplementation>,
     documentation: Maybe_Maybe<ElmSyntaxNode_Node<ElmSyntaxDocumentation_Documentation>>,
     signature: Maybe_Maybe<ElmSyntaxNode_Node<ElmSyntaxSignature_Signature>>
    );

public typealias ElmSyntaxExpression_FunctionImplementation =
    (arguments: List_List<ElmSyntaxNode_Node<ElmSyntaxPattern_Pattern>>,
     expression: ElmSyntaxNode_Node<ElmSyntaxExpression_Expression>,
     name: ElmSyntaxNode_Node<String>
    );

public typealias ElmSyntaxExpression_Lambda =
    (args: List_List<ElmSyntaxNode_Node<ElmSyntaxPattern_Pattern>>,
     expression: ElmSyntaxNode_Node<ElmSyntaxExpression_Expression>
    );

public typealias ElmSyntaxExpression_LetBlock =
    (declarations: List_List<ElmSyntaxNode_Node<ElmSyntaxExpression_LetDeclaration>>,
     expression: ElmSyntaxNode_Node<ElmSyntaxExpression_Expression>
    );

public typealias ElmSyntaxExpression_RecordSetter =
    (first: ElmSyntaxNode_Node<String>,
     second: ElmSyntaxNode_Node<ElmSyntaxExpression_Expression>
    );

public typealias ElmSyntaxFile_File =
    (comments: List_List<ElmSyntaxNode_Node<ElmSyntaxComments_Comment>>,
     declarations: List_List<ElmSyntaxNode_Node<ElmSyntaxDeclaration_Declaration>>,
     imports: List_List<ElmSyntaxNode_Node<ElmSyntaxImport_Import>>,
     moduleDefinition: ElmSyntaxNode_Node<ElmSyntaxModule_Module>
    );

public typealias ElmSyntaxImport_Import =
    (exposingList: Maybe_Maybe<ElmSyntaxNode_Node<ElmSyntaxExposing_Exposing>>,
     moduleAlias: Maybe_Maybe<ElmSyntaxNode_Node<ElmSyntaxModuleName_ModuleName>>,
     moduleName: ElmSyntaxNode_Node<ElmSyntaxModuleName_ModuleName>
    );

public typealias ElmSyntaxInfix_Infix =
    (direction: ElmSyntaxNode_Node<ElmSyntaxInfix_InfixDirection>,
     function: ElmSyntaxNode_Node<String>,
     operator_: ElmSyntaxNode_Node<String>,
     precedence: ElmSyntaxNode_Node<Double>
    );

public typealias ElmSyntaxModuleName_ModuleName =
    List_List<String>;

public typealias ElmSyntaxModule_DefaultModuleData =
    (exposingList: ElmSyntaxNode_Node<ElmSyntaxExposing_Exposing>,
     moduleName: ElmSyntaxNode_Node<ElmSyntaxModuleName_ModuleName>
    );

public typealias ElmSyntaxModule_EffectModuleData =
    (command: Maybe_Maybe<ElmSyntaxNode_Node<String>>,
     exposingList: ElmSyntaxNode_Node<ElmSyntaxExposing_Exposing>,
     moduleName: ElmSyntaxNode_Node<ElmSyntaxModuleName_ModuleName>,
     subscription: Maybe_Maybe<ElmSyntaxNode_Node<String>>
    );

public typealias ElmSyntaxParserLenient_Comments =
    Maybe_Maybe<ElmSyntaxParserLenient_RopeFilled<ElmSyntaxNode_Node<String>>>;

public typealias ElmSyntaxParserLenient_InfixOperatorInfo =
    (extensionRightParser: ElmSyntaxParserLenient_Parser<ElmSyntaxParserLenient_WithComments<ElmSyntaxParserLenient_ExtensionRight>>,
     leftPrecedence: Double,
     symbol: String
    );

public typealias ElmSyntaxParserLenient_Parser<A> =
    ParserFast_Parser<A>;

public typealias ElmSyntaxParserLenient_Rope<A> =
    Maybe_Maybe<ElmSyntaxParserLenient_RopeFilled<A>>;

public typealias ElmSyntaxParserLenient_WithComments<Res> =
    (comments: ElmSyntaxParserLenient_Comments,
     syntax: Res
    );

public typealias ElmSyntaxPattern_QualifiedNameRef =
    (moduleName: List_List<String>,
     name: String
    );

public typealias ElmSyntaxPrint_Print =
    @Sendable ((indent: Double,
        unusedDummyFieldToMakeSwiftHappy: ()
       )
    ) ->
    String;

public typealias ElmSyntaxRange_Location =
    (column: Double,
     row: Double
    );

public typealias ElmSyntaxRange_Range =
    (end: ElmSyntaxRange_Location,
     start: ElmSyntaxRange_Location
    );

public typealias ElmSyntaxSignature_Signature =
    (name: ElmSyntaxNode_Node<String>,
     typeAnnotation: ElmSyntaxNode_Node<ElmSyntaxTypeAnnotation_TypeAnnotation>
    );

public typealias ElmSyntaxTypeAlias_TypeAlias =
    (documentation: Maybe_Maybe<ElmSyntaxNode_Node<ElmSyntaxDocumentation_Documentation>>,
     generics: List_List<ElmSyntaxNode_Node<String>>,
     name: ElmSyntaxNode_Node<String>,
     typeAnnotation: ElmSyntaxNode_Node<ElmSyntaxTypeAnnotation_TypeAnnotation>
    );

public typealias ElmSyntaxTypeAnnotation_RecordDefinition =
    List_List<ElmSyntaxNode_Node<ElmSyntaxTypeAnnotation_RecordField>>;

public typealias ElmSyntaxTypeAnnotation_RecordField =
    (first: ElmSyntaxNode_Node<String>,
     second: ElmSyntaxNode_Node<ElmSyntaxTypeAnnotation_TypeAnnotation>
    );

public typealias ElmSyntaxType_Type =
    (constructors: List_List<ElmSyntaxNode_Node<ElmSyntaxType_ValueConstructor>>,
     documentation: Maybe_Maybe<ElmSyntaxNode_Node<ElmSyntaxDocumentation_Documentation>>,
     generics: List_List<ElmSyntaxNode_Node<String>>,
     name: ElmSyntaxNode_Node<String>
    );

public typealias ElmSyntaxType_ValueConstructor =
    (arguments: List_List<ElmSyntaxNode_Node<ElmSyntaxTypeAnnotation_TypeAnnotation>>,
     name: ElmSyntaxNode_Node<String>
    );

public typealias ParserFast_State =
    (col: Double,
     indent: List_List<Double>,
     offset: Double,
     row: Double,
     src: String
    );

public indirect enum ElmSyntaxDeclaration_Declaration: Sendable {
    case AliasDeclaration(_ value0: ElmSyntaxTypeAlias_TypeAlias);
    case CustomTypeDeclaration(_ value0: ElmSyntaxType_Type);
    case Destructuring(_ value0: ElmSyntaxNode_Node<ElmSyntaxPattern_Pattern>, _ value1: ElmSyntaxNode_Node<ElmSyntaxExpression_Expression>);
    case FunctionDeclaration(_ value0: ElmSyntaxExpression_Function);
    case InfixDeclaration(_ value0: ElmSyntaxInfix_Infix);
    case PortDeclaration(_ value0: ElmSyntaxSignature_Signature);
}

public indirect enum ElmSyntaxExposing_Exposing: Sendable {
    case All(_ value0: ElmSyntaxRange_Range);
    case Explicit(_ value0: List_List<ElmSyntaxNode_Node<ElmSyntaxExposing_TopLevelExpose>>);
}

public indirect enum ElmSyntaxExposing_TopLevelExpose: Sendable {
    case FunctionExpose(_ value0: String);
    case InfixExpose(_ value0: String);
    case TypeExpose(_ value0: ElmSyntaxExposing_ExposedType);
    case TypeOrAliasExpose(_ value0: String);
}

public indirect enum ElmSyntaxExpression_Expression: Sendable {
    case Application(_ value0: List_List<ElmSyntaxNode_Node<ElmSyntaxExpression_Expression>>);
    case CaseExpression(_ value0: ElmSyntaxExpression_CaseBlock);
    case CharLiteral(_ value0: Character);
    case Floatable(_ value0: Double);
    case FunctionOrValue(_ value0: ElmSyntaxModuleName_ModuleName, _ value1: String);
    case GLSLExpression(_ value0: String);
    case Hex(_ value0: Double);
    case IfBlock(_ value0: ElmSyntaxNode_Node<ElmSyntaxExpression_Expression>, _ value1: ElmSyntaxNode_Node<ElmSyntaxExpression_Expression>, _ value2: ElmSyntaxNode_Node<ElmSyntaxExpression_Expression>);
    case Integer(_ value0: Double);
    case LambdaExpression(_ value0: ElmSyntaxExpression_Lambda);
    case LetExpression(_ value0: ElmSyntaxExpression_LetBlock);
    case ListExpr(_ value0: List_List<ElmSyntaxNode_Node<ElmSyntaxExpression_Expression>>);
    case Literal(_ value0: String);
    case Negation(_ value0: ElmSyntaxNode_Node<ElmSyntaxExpression_Expression>);
    case Operator(_ value0: String);
    case OperatorApplication(_ value0: String, _ value1: ElmSyntaxInfix_InfixDirection, _ value2: ElmSyntaxNode_Node<ElmSyntaxExpression_Expression>, _ value3: ElmSyntaxNode_Node<ElmSyntaxExpression_Expression>);
    case ParenthesizedExpression(_ value0: ElmSyntaxNode_Node<ElmSyntaxExpression_Expression>);
    case PrefixOperator(_ value0: String);
    case RecordAccess(_ value0: ElmSyntaxNode_Node<ElmSyntaxExpression_Expression>, _ value1: ElmSyntaxNode_Node<String>);
    case RecordAccessFunction(_ value0: String);
    case RecordExpr(_ value0: List_List<ElmSyntaxNode_Node<ElmSyntaxExpression_RecordSetter>>);
    case RecordUpdateExpression(_ value0: ElmSyntaxNode_Node<String>, _ value1: List_List<ElmSyntaxNode_Node<ElmSyntaxExpression_RecordSetter>>);
    case TupledExpression(_ value0: List_List<ElmSyntaxNode_Node<ElmSyntaxExpression_Expression>>);
    case UnitExpr;
}

public indirect enum ElmSyntaxExpression_LetDeclaration: Sendable {
    case LetDestructuring(_ value0: ElmSyntaxNode_Node<ElmSyntaxPattern_Pattern>, _ value1: ElmSyntaxNode_Node<ElmSyntaxExpression_Expression>);
    case LetFunction(_ value0: ElmSyntaxExpression_Function);
}

public indirect enum ElmSyntaxInfix_InfixDirection: Sendable {
    case Left;
    case Non;
    case Right;
}

public indirect enum ElmSyntaxModule_Module: Sendable {
    case EffectModule(_ value0: ElmSyntaxModule_EffectModuleData);
    case NormalModule(_ value0: ElmSyntaxModule_DefaultModuleData);
    case PortModule(_ value0: ElmSyntaxModule_DefaultModuleData);
}

public indirect enum ElmSyntaxNode_Node<A: Sendable>: Sendable {
    case Node(_ value0: ElmSyntaxRange_Range, _ value1: A);
}

public indirect enum ElmSyntaxParserLenient_DeclarationAfterDocumentation: Sendable {
    case FunctionDeclarationAfterDocumentation(
        _ value0:
            (arguments: List_List<ElmSyntaxNode_Node<ElmSyntaxPattern_Pattern>>,
             expression: ElmSyntaxNode_Node<ElmSyntaxExpression_Expression>,
             signature:
                Maybe_Maybe<
                    (implementationName: ElmSyntaxNode_Node<String>,
                     typeAnnotation: ElmSyntaxNode_Node<ElmSyntaxTypeAnnotation_TypeAnnotation>
                    )
                >,
             startName: ElmSyntaxNode_Node<String>
            )
    );
    case PortDeclarationAfterDocumentation(
        _ value0:
            (name: ElmSyntaxNode_Node<String>,
             startLocation: ElmSyntaxRange_Location,
             typeAnnotation: ElmSyntaxNode_Node<ElmSyntaxTypeAnnotation_TypeAnnotation>
            )
    );
    case TypeAliasDeclarationAfterDocumentation(
        _ value0:
            (name: ElmSyntaxNode_Node<String>,
             parameters: List_List<ElmSyntaxNode_Node<String>>,
             typeAnnotation: ElmSyntaxNode_Node<ElmSyntaxTypeAnnotation_TypeAnnotation>
            )
    );
    case TypeDeclarationAfterDocumentation(
        _ value0:
            (headVariant: ElmSyntaxNode_Node<ElmSyntaxType_ValueConstructor>,
             name: ElmSyntaxNode_Node<String>,
             parameters: List_List<ElmSyntaxNode_Node<String>>,
             tailVariantsReverse: List_List<ElmSyntaxNode_Node<ElmSyntaxType_ValueConstructor>>
            )
    );
}

public indirect enum ElmSyntaxParserLenient_ExtensionRight: Sendable {
    case ExtendRightByOperation(
        _ value0:
            (direction: ElmSyntaxInfix_InfixDirection,
             expression: ElmSyntaxNode_Node<ElmSyntaxExpression_Expression>,
             symbol: String
            )
    );
}

public indirect enum ElmSyntaxParserLenient_RecordFieldsOrExtensionAfterName: Sendable {
    case FieldsAfterName(
        _ value0:
            (firstFieldValue: ElmSyntaxNode_Node<ElmSyntaxTypeAnnotation_TypeAnnotation>,
             tailFields: List_List<ElmSyntaxNode_Node<ElmSyntaxTypeAnnotation_RecordField>>
            )
    );
    case RecordExtensionExpressionAfterName(_ value0: ElmSyntaxNode_Node<ElmSyntaxTypeAnnotation_RecordDefinition>);
}

public indirect enum ElmSyntaxParserLenient_RecordFieldsOrUpdateAfterName: Sendable {
    case FieldsFirstValue(_ value0: ElmSyntaxNode_Node<ElmSyntaxExpression_Expression>);
    case FieldsFirstValuePunned(_ value0: ());
    case RecordUpdateFirstSetter(_ value0: ElmSyntaxNode_Node<ElmSyntaxExpression_RecordSetter>);
}

public indirect enum ElmSyntaxParserLenient_RopeFilled<A: Sendable>: Sendable {
    case RopeBranch2(_ value0: ElmSyntaxParserLenient_RopeFilled<A>, _ value1: ElmSyntaxParserLenient_RopeFilled<A>);
    case RopeLeaf(_ value0: A, _ value1: ());
}

public indirect enum ElmSyntaxParserLenient_Tupled: Sendable {
    case TupledParenthesized(_ value0: (), _ value1: ());
    case TupledTwoOrThree(_ value0: ElmSyntaxNode_Node<ElmSyntaxExpression_Expression>, _ value1: Maybe_Maybe<ElmSyntaxNode_Node<ElmSyntaxExpression_Expression>>);
}

public indirect enum ElmSyntaxParserLenient_TypeOrTypeAliasDeclarationWithoutDocumentation: Sendable {
    case TypeAliasDeclarationWithoutDocumentation(
        _ value0:
            (name: ElmSyntaxNode_Node<String>,
             parameters: List_List<ElmSyntaxNode_Node<String>>,
             typeAnnotation: ElmSyntaxNode_Node<ElmSyntaxTypeAnnotation_TypeAnnotation>
            )
    );
    case TypeDeclarationWithoutDocumentation(
        _ value0:
            (headVariant: ElmSyntaxNode_Node<ElmSyntaxType_ValueConstructor>,
             name: ElmSyntaxNode_Node<String>,
             parameters: List_List<ElmSyntaxNode_Node<String>>,
             tailVariantsReverse: List_List<ElmSyntaxNode_Node<ElmSyntaxType_ValueConstructor>>
            )
    );
}

public indirect enum ElmSyntaxPattern_Pattern: Sendable {
    case AllPattern;
    case AsPattern(_ value0: ElmSyntaxNode_Node<ElmSyntaxPattern_Pattern>, _ value1: ElmSyntaxNode_Node<String>);
    case CharPattern(_ value0: Character);
    case FloatPattern(_ value0: Double);
    case HexPattern(_ value0: Double);
    case IntPattern(_ value0: Double);
    case ListPattern(_ value0: List_List<ElmSyntaxNode_Node<ElmSyntaxPattern_Pattern>>);
    case NamedPattern(_ value0: ElmSyntaxPattern_QualifiedNameRef, _ value1: List_List<ElmSyntaxNode_Node<ElmSyntaxPattern_Pattern>>);
    case ParenthesizedPattern(_ value0: ElmSyntaxNode_Node<ElmSyntaxPattern_Pattern>);
    case RecordPattern(_ value0: List_List<ElmSyntaxNode_Node<String>>);
    case StringPattern(_ value0: String);
    case TuplePattern(_ value0: List_List<ElmSyntaxNode_Node<ElmSyntaxPattern_Pattern>>);
    case UnConsPattern(_ value0: ElmSyntaxNode_Node<ElmSyntaxPattern_Pattern>, _ value1: ElmSyntaxNode_Node<ElmSyntaxPattern_Pattern>);
    case UnitPattern;
    case VarPattern(_ value0: String);
}

public indirect enum ElmSyntaxTypeAnnotation_TypeAnnotation: Sendable {
    case FunctionTypeAnnotation(_ value0: ElmSyntaxNode_Node<ElmSyntaxTypeAnnotation_TypeAnnotation>, _ value1: ElmSyntaxNode_Node<ElmSyntaxTypeAnnotation_TypeAnnotation>);
    case GenericRecord(_ value0: ElmSyntaxNode_Node<String>, _ value1: ElmSyntaxNode_Node<ElmSyntaxTypeAnnotation_RecordDefinition>);
    case GenericType(_ value0: String);
    case Record(_ value0: ElmSyntaxTypeAnnotation_RecordDefinition);
    case Tupled(_ value0: List_List<ElmSyntaxNode_Node<ElmSyntaxTypeAnnotation_TypeAnnotation>>);
    case Typed(
        _ value0:
            ElmSyntaxNode_Node<
                (first: ElmSyntaxModuleName_ModuleName,
                 second: String
                )
            >,
        _ value1: List_List<ElmSyntaxNode_Node<ElmSyntaxTypeAnnotation_TypeAnnotation>>
    );
    case Unit;
}

public indirect enum ParserFast_Base: Sendable {
    case Decimal;
    case Hexadecimal;
}

public indirect enum ParserFast_PStep<Value: Sendable>: Sendable {
    case Bad(_ value0: Bool, _ value1: ());
    case Good(_ value0: Value, _ value1: ParserFast_State);
}

public indirect enum ParserFast_Parser<A: Sendable>: Sendable {
    case Parser(_ value0: @Sendable (ParserFast_State) -> ParserFast_PStep<A>);
}

public indirect enum ParserFast_Step<State: Sendable, A: Sendable>: Sendable {
    case Done(_ value0: A);
    case Loop(_ value0: State);
}

public indirect enum Print_LineSpread: Sendable {
    case MultipleLines;
    case SingleLine;
}

public indirect enum Print_Print: Sendable {
    case Exact(_ value0: String, _ value1: ());
    case FollowedBy(_ value0: Print_Print, _ value1: Print_Print);
    case Linebreak(_ value0: (), _ value1: ());
    case LinebreakIndented(_ value0: (), _ value1: ());
    case WithIndentAtNextMultipleOf4(_ value0: Print_Print, _ value1: ());
    case WithIndentIncreasedBy(_ value0: Double, _ value1: Print_Print);
}

public indirect enum Result_Result<Error: Sendable, Value: Sendable>: Sendable {
    case Err(_ value0: Error);
    case Ok(_ value0: Value);
}

public indirect enum Unicode_Category: Sendable {
    case LetterLowercase;
    case LetterModifier;
    case LetterOther;
    case LetterTitlecase;
    case LetterUppercase;
    case MarkEnclosing;
    case MarkNonSpacing;
    case MarkSpacingCombining;
    case NumberDecimalDigit;
    case NumberLetter;
    case NumberOther;
    case OtherControl;
    case OtherFormat;
    case OtherNotAssigned;
    case OtherPrivateUse;
    case OtherSurrogate;
    case PunctuationClose;
    case PunctuationConnector;
    case PunctuationDash;
    case PunctuationFinalQuote;
    case PunctuationInitialQuote;
    case PunctuationOpen;
    case PunctuationOther;
    case SeparatorLine;
    case SeparatorParagraph;
    case SeparatorSpace;
    case SymbolCurrency;
    case SymbolMath;
    case SymbolModifier;
    case SymbolOther;
}

static public func charExtra_charCodeIsDigit(_ code: Double) -> Bool {
        basics_and(basics_le(code, 57.0), basics_le(48.0, code))
    }

    static public func charExtra_charCodeIsLower(_ code: Double) -> Bool {
        basics_and(basics_le(97.0, code), basics_le(code, 122.0))
    }

    static public func charExtra_charCodeIsUpper(_ code: Double) -> Bool {
        basics_and(basics_le(code, 90.0), basics_le(65.0, code))
    }

    static public func charExtra_isLatinAlphaNumOrUnderscoreFast(_ c: Character) -> Bool {
        ({ () in let code:Double =
            char_toCode(c);

         return basics_or(charExtra_charCodeIsLower(code), basics_or(charExtra_charCodeIsUpper(code), basics_or(charExtra_charCodeIsDigit(code), basics_eq(code, 95.0))))
        }())
    }

    static public func charExtra_isUtf16Surrogate(_ c: Character) -> Bool {
        basics_isNaN(basics_identity(char_toCode(c)))
    }

    static public func charExtra_unicodeIsAlphaNumOrUnderscoreFast(_ c: Character) -> Bool {
        ({ () in let code:Double =
            char_toCode(c);

         return basics_or(
            charExtra_charCodeIsLower(code),
            basics_or(
                charExtra_charCodeIsUpper(code),
                basics_or(
                    charExtra_charCodeIsDigit(code),
                    basics_or(
                        basics_eq(code, 95.0),
                        basics_and(
                            basics_and(basics_neq(code, 32.0), basics_neq(code, 10.0)),
                            ({ () in return switch basics_lt(code, 256.0) {
                                case true:
                                    basics_or(basics_and(basics_le(48.0, code), basics_le(code, 57.0)), basics_or(basics_and(basics_le(65.0, code), basics_le(code, 90.0)), basics_or(basics_and(basics_le(97.0, code), basics_le(code, 122.0)), basics_or(basics_eq(code, 170.0), basics_or(basics_and(basics_le(178.0, code), basics_le(code, 179.0)), basics_or(basics_eq(code, 181.0), basics_or(basics_and(basics_le(185.0, code), basics_le(code, 186.0)), basics_or(basics_and(basics_le(188.0, code), basics_le(code, 190.0)), basics_or(basics_and(basics_le(192.0, code), basics_le(code, 214.0)), basics_or(basics_and(basics_le(216.0, code), basics_le(code, 246.0)), basics_and(basics_le(248.0, code), basics_le(code, 255.0))))))))))));

                                case false:
                                    ({ () in return switch basics_lt(code, 43700.0) {
                                        case true:
                                            ({ () in return switch basics_lt(code, 4347.0) {
                                                case true:
                                                    ({ () in return switch basics_lt(code, 2868.0) {
                                                        case true:
                                                            ({ () in return switch basics_lt(code, 2364.0) {
                                                                case true:
                                                                    ({ () in return switch basics_lt(code, 1648.0) {
                                                                        case true:
                                                                            ({ () in return switch basics_lt(code, 930.0) {
                                                                                case true:
                                                                                    basics_or(basics_and(basics_le(256.0, code), basics_le(code, 705.0)), basics_or(basics_and(basics_le(710.0, code), basics_le(code, 721.0)), basics_or(basics_and(basics_le(736.0, code), basics_le(code, 740.0)), basics_or(basics_and(basics_le(880.0, code), basics_le(code, 884.0)), basics_or(basics_and(basics_le(886.0, code), basics_le(code, 887.0)), basics_or(basics_and(basics_le(890.0, code), basics_le(code, 893.0)), basics_or(basics_eq(code, 895.0), basics_or(basics_eq(code, 902.0), basics_or(basics_and(basics_le(904.0, code), basics_le(code, 906.0)), basics_or(basics_eq(code, 908.0), basics_or(basics_and(basics_le(910.0, code), basics_le(code, 929.0)), basics_and(basics_eq(basics_modBy(2.0, code), 0.0), basics_and(basics_le(748.0, code), basics_le(code, 750.0))))))))))))));

                                                                                case false:
                                                                                    basics_or(basics_and(basics_le(931.0, code), basics_le(code, 1013.0)), basics_or(basics_and(basics_le(1015.0, code), basics_le(code, 1153.0)), basics_or(basics_and(basics_le(1162.0, code), basics_le(code, 1327.0)), basics_or(basics_and(basics_le(1329.0, code), basics_le(code, 1366.0)), basics_or(basics_eq(code, 1369.0), basics_or(basics_and(basics_le(1376.0, code), basics_le(code, 1416.0)), basics_or(basics_and(basics_le(1488.0, code), basics_le(code, 1514.0)), basics_or(basics_and(basics_le(1519.0, code), basics_le(code, 1522.0)), basics_or(basics_and(basics_le(1568.0, code), basics_le(code, 1610.0)), basics_or(basics_and(basics_le(1632.0, code), basics_le(code, 1641.0)), basics_and(basics_le(1646.0, code), basics_le(code, 1647.0))))))))))));
                                                                             }
                                                                            }());

                                                                        case false:
                                                                            ({ () in return switch basics_lt(code, 2041.0) {
                                                                                case true:
                                                                                    basics_or(basics_and(basics_le(1649.0, code), basics_le(code, 1747.0)), basics_or(basics_eq(code, 1749.0), basics_or(basics_and(basics_le(1765.0, code), basics_le(code, 1766.0)), basics_or(basics_and(basics_le(1774.0, code), basics_le(code, 1788.0)), basics_or(basics_eq(code, 1791.0), basics_or(basics_eq(code, 1808.0), basics_or(basics_and(basics_le(1810.0, code), basics_le(code, 1839.0)), basics_or(basics_and(basics_le(1869.0, code), basics_le(code, 1957.0)), basics_or(basics_eq(code, 1969.0), basics_or(basics_and(basics_le(1984.0, code), basics_le(code, 2026.0)), basics_and(basics_le(2036.0, code), basics_le(code, 2037.0))))))))))));

                                                                                case false:
                                                                                    basics_or(basics_eq(code, 2042.0), basics_or(basics_and(basics_le(2048.0, code), basics_le(code, 2069.0)), basics_or(basics_eq(code, 2074.0), basics_or(basics_eq(code, 2084.0), basics_or(basics_eq(code, 2088.0), basics_or(basics_and(basics_le(2112.0, code), basics_le(code, 2136.0)), basics_or(basics_and(basics_le(2144.0, code), basics_le(code, 2154.0)), basics_or(basics_and(basics_le(2160.0, code), basics_le(code, 2183.0)), basics_or(basics_and(basics_le(2185.0, code), basics_le(code, 2190.0)), basics_or(basics_and(basics_le(2208.0, code), basics_le(code, 2249.0)), basics_and(basics_le(2308.0, code), basics_le(code, 2361.0))))))))))));
                                                                             }
                                                                            }());
                                                                     }
                                                                    }());

                                                                case false:
                                                                    ({ () in return switch basics_lt(code, 2609.0) {
                                                                        case true:
                                                                            ({ () in return switch basics_lt(code, 2492.0) {
                                                                                case true:
                                                                                    basics_or(basics_eq(code, 2365.0), basics_or(basics_eq(code, 2384.0), basics_or(basics_and(basics_le(2392.0, code), basics_le(code, 2401.0)), basics_or(basics_and(basics_le(2406.0, code), basics_le(code, 2415.0)), basics_or(basics_and(basics_le(2417.0, code), basics_le(code, 2432.0)), basics_or(basics_and(basics_le(2437.0, code), basics_le(code, 2444.0)), basics_or(basics_and(basics_le(2447.0, code), basics_le(code, 2448.0)), basics_or(basics_and(basics_le(2451.0, code), basics_le(code, 2472.0)), basics_or(basics_and(basics_le(2474.0, code), basics_le(code, 2480.0)), basics_or(basics_eq(code, 2482.0), basics_and(basics_le(2486.0, code), basics_le(code, 2489.0))))))))))));

                                                                                case false:
                                                                                    basics_or(basics_eq(code, 2493.0), basics_or(basics_eq(code, 2510.0), basics_or(basics_and(basics_le(2524.0, code), basics_le(code, 2525.0)), basics_or(basics_and(basics_le(2527.0, code), basics_le(code, 2529.0)), basics_or(basics_and(basics_le(2534.0, code), basics_le(code, 2545.0)), basics_or(basics_and(basics_le(2548.0, code), basics_le(code, 2553.0)), basics_or(basics_eq(code, 2556.0), basics_or(basics_and(basics_le(2565.0, code), basics_le(code, 2570.0)), basics_or(basics_and(basics_le(2575.0, code), basics_le(code, 2576.0)), basics_or(basics_and(basics_le(2579.0, code), basics_le(code, 2600.0)), basics_and(basics_le(2602.0, code), basics_le(code, 2608.0))))))))))));
                                                                             }
                                                                            }());

                                                                        case false:
                                                                            ({ () in return switch basics_lt(code, 2737.0) {
                                                                                case true:
                                                                                    basics_or(basics_and(basics_le(2610.0, code), basics_le(code, 2611.0)), basics_or(basics_and(basics_le(2613.0, code), basics_le(code, 2614.0)), basics_or(basics_and(basics_le(2616.0, code), basics_le(code, 2617.0)), basics_or(basics_and(basics_le(2649.0, code), basics_le(code, 2652.0)), basics_or(basics_eq(code, 2654.0), basics_or(basics_and(basics_le(2662.0, code), basics_le(code, 2671.0)), basics_or(basics_and(basics_le(2674.0, code), basics_le(code, 2676.0)), basics_or(basics_and(basics_le(2693.0, code), basics_le(code, 2701.0)), basics_or(basics_and(basics_le(2703.0, code), basics_le(code, 2705.0)), basics_or(basics_and(basics_le(2707.0, code), basics_le(code, 2728.0)), basics_and(basics_le(2730.0, code), basics_le(code, 2736.0))))))))))));

                                                                                case false:
                                                                                    basics_or(basics_and(basics_le(2738.0, code), basics_le(code, 2739.0)), basics_or(basics_and(basics_le(2741.0, code), basics_le(code, 2745.0)), basics_or(basics_eq(code, 2749.0), basics_or(basics_eq(code, 2768.0), basics_or(basics_and(basics_le(2784.0, code), basics_le(code, 2785.0)), basics_or(basics_and(basics_le(2790.0, code), basics_le(code, 2799.0)), basics_or(basics_eq(code, 2809.0), basics_or(basics_and(basics_le(2821.0, code), basics_le(code, 2828.0)), basics_or(basics_and(basics_le(2831.0, code), basics_le(code, 2832.0)), basics_or(basics_and(basics_le(2835.0, code), basics_le(code, 2856.0)), basics_or(basics_and(basics_le(2858.0, code), basics_le(code, 2864.0)), basics_and(basics_le(2866.0, code), basics_le(code, 2867.0)))))))))))));
                                                                             }
                                                                            }());
                                                                     }
                                                                    }());
                                                             }
                                                            }());

                                                        case false:
                                                            ({ () in return switch basics_lt(code, 3411.0) {
                                                                case true:
                                                                    ({ () in return switch basics_lt(code, 3132.0) {
                                                                        case true:
                                                                            ({ () in return switch basics_lt(code, 2971.0) {
                                                                                case true:
                                                                                    basics_or(basics_and(basics_le(2869.0, code), basics_le(code, 2873.0)), basics_or(basics_eq(code, 2877.0), basics_or(basics_and(basics_le(2908.0, code), basics_le(code, 2909.0)), basics_or(basics_and(basics_le(2911.0, code), basics_le(code, 2913.0)), basics_or(basics_and(basics_le(2918.0, code), basics_le(code, 2927.0)), basics_or(basics_and(basics_le(2929.0, code), basics_le(code, 2935.0)), basics_or(basics_eq(code, 2947.0), basics_or(basics_and(basics_le(2949.0, code), basics_le(code, 2954.0)), basics_or(basics_and(basics_le(2958.0, code), basics_le(code, 2960.0)), basics_or(basics_and(basics_le(2962.0, code), basics_le(code, 2965.0)), basics_and(basics_le(2969.0, code), basics_le(code, 2970.0))))))))))));

                                                                                case false:
                                                                                    basics_or(basics_eq(code, 2972.0), basics_or(basics_and(basics_le(2974.0, code), basics_le(code, 2975.0)), basics_or(basics_and(basics_le(2979.0, code), basics_le(code, 2980.0)), basics_or(basics_and(basics_le(2984.0, code), basics_le(code, 2986.0)), basics_or(basics_and(basics_le(2990.0, code), basics_le(code, 3001.0)), basics_or(basics_eq(code, 3024.0), basics_or(basics_and(basics_le(3046.0, code), basics_le(code, 3058.0)), basics_or(basics_and(basics_le(3077.0, code), basics_le(code, 3084.0)), basics_or(basics_and(basics_le(3086.0, code), basics_le(code, 3088.0)), basics_or(basics_and(basics_le(3090.0, code), basics_le(code, 3112.0)), basics_and(basics_le(3114.0, code), basics_le(code, 3129.0))))))))))));
                                                                             }
                                                                            }());

                                                                        case false:
                                                                            ({ () in return switch basics_lt(code, 3252.0) {
                                                                                case true:
                                                                                    basics_or(basics_eq(code, 3133.0), basics_or(basics_and(basics_le(3160.0, code), basics_le(code, 3162.0)), basics_or(basics_eq(code, 3165.0), basics_or(basics_and(basics_le(3168.0, code), basics_le(code, 3169.0)), basics_or(basics_and(basics_le(3174.0, code), basics_le(code, 3183.0)), basics_or(basics_and(basics_le(3192.0, code), basics_le(code, 3198.0)), basics_or(basics_eq(code, 3200.0), basics_or(basics_and(basics_le(3205.0, code), basics_le(code, 3212.0)), basics_or(basics_and(basics_le(3214.0, code), basics_le(code, 3216.0)), basics_or(basics_and(basics_le(3218.0, code), basics_le(code, 3240.0)), basics_and(basics_le(3242.0, code), basics_le(code, 3251.0))))))))))));

                                                                                case false:
                                                                                    basics_or(basics_and(basics_le(3253.0, code), basics_le(code, 3257.0)), basics_or(basics_eq(code, 3261.0), basics_or(basics_and(basics_le(3293.0, code), basics_le(code, 3294.0)), basics_or(basics_and(basics_le(3296.0, code), basics_le(code, 3297.0)), basics_or(basics_and(basics_le(3302.0, code), basics_le(code, 3311.0)), basics_or(basics_and(basics_le(3313.0, code), basics_le(code, 3314.0)), basics_or(basics_and(basics_le(3332.0, code), basics_le(code, 3340.0)), basics_or(basics_and(basics_le(3342.0, code), basics_le(code, 3344.0)), basics_or(basics_and(basics_le(3346.0, code), basics_le(code, 3386.0)), basics_or(basics_eq(code, 3389.0), basics_eq(code, 3406.0)))))))))));
                                                                             }
                                                                            }());
                                                                     }
                                                                    }());

                                                                case false:
                                                                    ({ () in return switch basics_lt(code, 3775.0) {
                                                                        case true:
                                                                            ({ () in return switch basics_lt(code, 3633.0) {
                                                                                case true:
                                                                                    basics_or(basics_and(basics_le(3412.0, code), basics_le(code, 3414.0)), basics_or(basics_and(basics_le(3416.0, code), basics_le(code, 3425.0)), basics_or(basics_and(basics_le(3430.0, code), basics_le(code, 3448.0)), basics_or(basics_and(basics_le(3450.0, code), basics_le(code, 3455.0)), basics_or(basics_and(basics_le(3461.0, code), basics_le(code, 3478.0)), basics_or(basics_and(basics_le(3482.0, code), basics_le(code, 3505.0)), basics_or(basics_and(basics_le(3507.0, code), basics_le(code, 3515.0)), basics_or(basics_eq(code, 3517.0), basics_or(basics_and(basics_le(3520.0, code), basics_le(code, 3526.0)), basics_or(basics_and(basics_le(3558.0, code), basics_le(code, 3567.0)), basics_and(basics_le(3585.0, code), basics_le(code, 3632.0))))))))))));

                                                                                case false:
                                                                                    basics_or(basics_and(basics_le(3634.0, code), basics_le(code, 3635.0)), basics_or(basics_and(basics_le(3648.0, code), basics_le(code, 3654.0)), basics_or(basics_and(basics_le(3664.0, code), basics_le(code, 3673.0)), basics_or(basics_and(basics_le(3713.0, code), basics_le(code, 3714.0)), basics_or(basics_eq(code, 3716.0), basics_or(basics_and(basics_le(3718.0, code), basics_le(code, 3722.0)), basics_or(basics_and(basics_le(3724.0, code), basics_le(code, 3747.0)), basics_or(basics_eq(code, 3749.0), basics_or(basics_and(basics_le(3751.0, code), basics_le(code, 3760.0)), basics_or(basics_and(basics_le(3762.0, code), basics_le(code, 3763.0)), basics_eq(code, 3773.0)))))))))));
                                                                             }
                                                                            }());

                                                                        case false:
                                                                            ({ () in return switch basics_lt(code, 4175.0) {
                                                                                case true:
                                                                                    basics_or(basics_and(basics_le(3776.0, code), basics_le(code, 3780.0)), basics_or(basics_eq(code, 3782.0), basics_or(basics_and(basics_le(3792.0, code), basics_le(code, 3801.0)), basics_or(basics_and(basics_le(3804.0, code), basics_le(code, 3807.0)), basics_or(basics_eq(code, 3840.0), basics_or(basics_and(basics_le(3872.0, code), basics_le(code, 3891.0)), basics_or(basics_and(basics_le(3904.0, code), basics_le(code, 3911.0)), basics_or(basics_and(basics_le(3913.0, code), basics_le(code, 3948.0)), basics_or(basics_and(basics_le(3976.0, code), basics_le(code, 3980.0)), basics_or(basics_and(basics_le(4096.0, code), basics_le(code, 4138.0)), basics_and(basics_le(4159.0, code), basics_le(code, 4169.0))))))))))));

                                                                                case false:
                                                                                    basics_or(basics_and(basics_le(4176.0, code), basics_le(code, 4181.0)), basics_or(basics_and(basics_le(4186.0, code), basics_le(code, 4189.0)), basics_or(basics_eq(code, 4193.0), basics_or(basics_and(basics_le(4197.0, code), basics_le(code, 4198.0)), basics_or(basics_and(basics_le(4206.0, code), basics_le(code, 4208.0)), basics_or(basics_and(basics_le(4213.0, code), basics_le(code, 4225.0)), basics_or(basics_eq(code, 4238.0), basics_or(basics_and(basics_le(4240.0, code), basics_le(code, 4249.0)), basics_or(basics_and(basics_le(4256.0, code), basics_le(code, 4293.0)), basics_or(basics_eq(code, 4295.0), basics_or(basics_eq(code, 4301.0), basics_and(basics_le(4304.0, code), basics_le(code, 4346.0)))))))))))));
                                                                             }
                                                                            }());
                                                                     }
                                                                    }());
                                                             }
                                                            }());
                                                     }
                                                    }());

                                                case false:
                                                    ({ () in return switch basics_lt(code, 8454.0) {
                                                        case true:
                                                            ({ () in return switch basics_lt(code, 6527.0) {
                                                                case true:
                                                                    ({ () in return switch basics_lt(code, 5760.0) {
                                                                        case true:
                                                                            ({ () in return switch basics_lt(code, 4801.0) {
                                                                                case true:
                                                                                    basics_or(basics_and(basics_le(4348.0, code), basics_le(code, 4680.0)), basics_or(basics_and(basics_le(4682.0, code), basics_le(code, 4685.0)), basics_or(basics_and(basics_le(4688.0, code), basics_le(code, 4694.0)), basics_or(basics_eq(code, 4696.0), basics_or(basics_and(basics_le(4698.0, code), basics_le(code, 4701.0)), basics_or(basics_and(basics_le(4704.0, code), basics_le(code, 4744.0)), basics_or(basics_and(basics_le(4746.0, code), basics_le(code, 4749.0)), basics_or(basics_and(basics_le(4752.0, code), basics_le(code, 4784.0)), basics_or(basics_and(basics_le(4786.0, code), basics_le(code, 4789.0)), basics_or(basics_and(basics_le(4792.0, code), basics_le(code, 4798.0)), basics_eq(code, 4800.0)))))))))));

                                                                                case false:
                                                                                    basics_or(basics_and(basics_le(4802.0, code), basics_le(code, 4805.0)), basics_or(basics_and(basics_le(4808.0, code), basics_le(code, 4822.0)), basics_or(basics_and(basics_le(4824.0, code), basics_le(code, 4880.0)), basics_or(basics_and(basics_le(4882.0, code), basics_le(code, 4885.0)), basics_or(basics_and(basics_le(4888.0, code), basics_le(code, 4954.0)), basics_or(basics_and(basics_le(4969.0, code), basics_le(code, 4988.0)), basics_or(basics_and(basics_le(4992.0, code), basics_le(code, 5007.0)), basics_or(basics_and(basics_le(5024.0, code), basics_le(code, 5109.0)), basics_or(basics_and(basics_le(5112.0, code), basics_le(code, 5117.0)), basics_or(basics_and(basics_le(5121.0, code), basics_le(code, 5740.0)), basics_and(basics_le(5743.0, code), basics_le(code, 5759.0))))))))))));
                                                                             }
                                                                            }());

                                                                        case false:
                                                                            ({ () in return switch basics_lt(code, 6111.0) {
                                                                                case true:
                                                                                    basics_or(basics_and(basics_le(5761.0, code), basics_le(code, 5786.0)), basics_or(basics_and(basics_le(5792.0, code), basics_le(code, 5866.0)), basics_or(basics_and(basics_le(5870.0, code), basics_le(code, 5880.0)), basics_or(basics_and(basics_le(5888.0, code), basics_le(code, 5905.0)), basics_or(basics_and(basics_le(5919.0, code), basics_le(code, 5937.0)), basics_or(basics_and(basics_le(5952.0, code), basics_le(code, 5969.0)), basics_or(basics_and(basics_le(5984.0, code), basics_le(code, 5996.0)), basics_or(basics_and(basics_le(5998.0, code), basics_le(code, 6000.0)), basics_or(basics_and(basics_le(6016.0, code), basics_le(code, 6067.0)), basics_or(basics_eq(code, 6103.0), basics_eq(code, 6108.0)))))))))));

                                                                                case false:
                                                                                    basics_or(basics_and(basics_le(6112.0, code), basics_le(code, 6121.0)), basics_or(basics_and(basics_le(6128.0, code), basics_le(code, 6137.0)), basics_or(basics_and(basics_le(6160.0, code), basics_le(code, 6169.0)), basics_or(basics_and(basics_le(6176.0, code), basics_le(code, 6264.0)), basics_or(basics_and(basics_le(6272.0, code), basics_le(code, 6276.0)), basics_or(basics_and(basics_le(6279.0, code), basics_le(code, 6312.0)), basics_or(basics_eq(code, 6314.0), basics_or(basics_and(basics_le(6320.0, code), basics_le(code, 6389.0)), basics_or(basics_and(basics_le(6400.0, code), basics_le(code, 6430.0)), basics_or(basics_and(basics_le(6470.0, code), basics_le(code, 6509.0)), basics_and(basics_le(6512.0, code), basics_le(code, 6516.0))))))))))));
                                                                             }
                                                                            }());
                                                                     }
                                                                    }());

                                                                case false:
                                                                    ({ () in return switch basics_lt(code, 7417.0) {
                                                                        case true:
                                                                            ({ () in return switch basics_lt(code, 7042.0) {
                                                                                case true:
                                                                                    basics_or(basics_and(basics_le(6528.0, code), basics_le(code, 6571.0)), basics_or(basics_and(basics_le(6576.0, code), basics_le(code, 6601.0)), basics_or(basics_and(basics_le(6608.0, code), basics_le(code, 6618.0)), basics_or(basics_and(basics_le(6656.0, code), basics_le(code, 6678.0)), basics_or(basics_and(basics_le(6688.0, code), basics_le(code, 6740.0)), basics_or(basics_and(basics_le(6784.0, code), basics_le(code, 6793.0)), basics_or(basics_and(basics_le(6800.0, code), basics_le(code, 6809.0)), basics_or(basics_eq(code, 6823.0), basics_or(basics_and(basics_le(6917.0, code), basics_le(code, 6963.0)), basics_or(basics_and(basics_le(6981.0, code), basics_le(code, 6988.0)), basics_and(basics_le(6992.0, code), basics_le(code, 7001.0))))))))))));

                                                                                case false:
                                                                                    basics_or(basics_and(basics_le(7043.0, code), basics_le(code, 7072.0)), basics_or(basics_and(basics_le(7086.0, code), basics_le(code, 7141.0)), basics_or(basics_and(basics_le(7168.0, code), basics_le(code, 7203.0)), basics_or(basics_and(basics_le(7232.0, code), basics_le(code, 7241.0)), basics_or(basics_and(basics_le(7245.0, code), basics_le(code, 7293.0)), basics_or(basics_and(basics_le(7296.0, code), basics_le(code, 7304.0)), basics_or(basics_and(basics_le(7312.0, code), basics_le(code, 7354.0)), basics_or(basics_and(basics_le(7357.0, code), basics_le(code, 7359.0)), basics_or(basics_and(basics_le(7401.0, code), basics_le(code, 7404.0)), basics_or(basics_and(basics_le(7406.0, code), basics_le(code, 7411.0)), basics_and(basics_le(7413.0, code), basics_le(code, 7414.0))))))))))));
                                                                             }
                                                                            }());

                                                                        case false:
                                                                            ({ () in return switch basics_lt(code, 8129.0) {
                                                                                case true:
                                                                                    basics_or(basics_eq(code, 7418.0), basics_or(basics_and(basics_le(7424.0, code), basics_le(code, 7615.0)), basics_or(basics_and(basics_le(7680.0, code), basics_le(code, 7957.0)), basics_or(basics_and(basics_le(7960.0, code), basics_le(code, 7965.0)), basics_or(basics_and(basics_le(7968.0, code), basics_le(code, 8005.0)), basics_or(basics_and(basics_le(8008.0, code), basics_le(code, 8013.0)), basics_or(basics_and(basics_le(8016.0, code), basics_le(code, 8023.0)), basics_or(basics_and(basics_le(8032.0, code), basics_le(code, 8061.0)), basics_or(basics_and(basics_le(8064.0, code), basics_le(code, 8116.0)), basics_or(basics_and(basics_le(8118.0, code), basics_le(code, 8124.0)), basics_or(basics_eq(code, 8126.0), basics_and(basics_eq(basics_modBy(2.0, code), 1.0), basics_and(basics_le(8025.0, code), basics_le(code, 8031.0))))))))))))));

                                                                                case false:
                                                                                    basics_or(basics_and(basics_le(8130.0, code), basics_le(code, 8132.0)), basics_or(basics_and(basics_le(8134.0, code), basics_le(code, 8140.0)), basics_or(basics_and(basics_le(8144.0, code), basics_le(code, 8147.0)), basics_or(basics_and(basics_le(8150.0, code), basics_le(code, 8155.0)), basics_or(basics_and(basics_le(8160.0, code), basics_le(code, 8172.0)), basics_or(basics_and(basics_le(8178.0, code), basics_le(code, 8180.0)), basics_or(basics_and(basics_le(8182.0, code), basics_le(code, 8188.0)), basics_or(basics_and(basics_le(8304.0, code), basics_le(code, 8305.0)), basics_or(basics_and(basics_le(8308.0, code), basics_le(code, 8313.0)), basics_or(basics_and(basics_le(8319.0, code), basics_le(code, 8329.0)), basics_or(basics_and(basics_le(8336.0, code), basics_le(code, 8348.0)), basics_eq(code, 8450.0))))))))))));
                                                                             }
                                                                            }());
                                                                     }
                                                                    }());
                                                             }
                                                            }());

                                                        case false:
                                                            ({ () in return switch basics_lt(code, 12783.0) {
                                                                case true:
                                                                    ({ () in return switch basics_lt(code, 11647.0) {
                                                                        case true:
                                                                            ({ () in return switch basics_lt(code, 9449.0) {
                                                                                case true:
                                                                                    basics_or(basics_eq(code, 8455.0), basics_or(basics_and(basics_le(8458.0, code), basics_le(code, 8467.0)), basics_or(basics_eq(code, 8469.0), basics_or(basics_and(basics_le(8473.0, code), basics_le(code, 8477.0)), basics_or(basics_and(basics_le(8490.0, code), basics_le(code, 8493.0)), basics_or(basics_and(basics_le(8495.0, code), basics_le(code, 8505.0)), basics_or(basics_and(basics_le(8508.0, code), basics_le(code, 8511.0)), basics_or(basics_and(basics_le(8517.0, code), basics_le(code, 8521.0)), basics_or(basics_eq(code, 8526.0), basics_or(basics_and(basics_le(8528.0, code), basics_le(code, 8585.0)), basics_or(basics_and(basics_le(9312.0, code), basics_le(code, 9371.0)), basics_and(basics_eq(basics_modBy(2.0, code), 0.0), basics_and(basics_le(8484.0, code), basics_le(code, 8488.0))))))))))))));

                                                                                case false:
                                                                                    basics_or(basics_and(basics_le(9450.0, code), basics_le(code, 9471.0)), basics_or(basics_and(basics_le(10102.0, code), basics_le(code, 10131.0)), basics_or(basics_and(basics_le(11264.0, code), basics_le(code, 11492.0)), basics_or(basics_and(basics_le(11499.0, code), basics_le(code, 11502.0)), basics_or(basics_and(basics_le(11506.0, code), basics_le(code, 11507.0)), basics_or(basics_eq(code, 11517.0), basics_or(basics_and(basics_le(11520.0, code), basics_le(code, 11557.0)), basics_or(basics_eq(code, 11559.0), basics_or(basics_eq(code, 11565.0), basics_or(basics_and(basics_le(11568.0, code), basics_le(code, 11623.0)), basics_eq(code, 11631.0)))))))))));
                                                                             }
                                                                            }());

                                                                        case false:
                                                                            ({ () in return switch basics_lt(code, 12320.0) {
                                                                                case true:
                                                                                    basics_or(basics_and(basics_le(11648.0, code), basics_le(code, 11670.0)), basics_or(basics_and(basics_le(11680.0, code), basics_le(code, 11686.0)), basics_or(basics_and(basics_le(11688.0, code), basics_le(code, 11694.0)), basics_or(basics_and(basics_le(11696.0, code), basics_le(code, 11702.0)), basics_or(basics_and(basics_le(11704.0, code), basics_le(code, 11710.0)), basics_or(basics_and(basics_le(11712.0, code), basics_le(code, 11718.0)), basics_or(basics_and(basics_le(11720.0, code), basics_le(code, 11726.0)), basics_or(basics_and(basics_le(11728.0, code), basics_le(code, 11734.0)), basics_or(basics_and(basics_le(11736.0, code), basics_le(code, 11742.0)), basics_or(basics_eq(code, 11823.0), basics_and(basics_le(12293.0, code), basics_le(code, 12295.0))))))))))));

                                                                                case false:
                                                                                    basics_or(basics_and(basics_le(12321.0, code), basics_le(code, 12329.0)), basics_or(basics_and(basics_le(12337.0, code), basics_le(code, 12341.0)), basics_or(basics_and(basics_le(12344.0, code), basics_le(code, 12348.0)), basics_or(basics_and(basics_le(12353.0, code), basics_le(code, 12438.0)), basics_or(basics_and(basics_le(12445.0, code), basics_le(code, 12447.0)), basics_or(basics_and(basics_le(12449.0, code), basics_le(code, 12538.0)), basics_or(basics_and(basics_le(12540.0, code), basics_le(code, 12543.0)), basics_or(basics_and(basics_le(12549.0, code), basics_le(code, 12591.0)), basics_or(basics_and(basics_le(12593.0, code), basics_le(code, 12686.0)), basics_or(basics_and(basics_le(12690.0, code), basics_le(code, 12693.0)), basics_and(basics_le(12704.0, code), basics_le(code, 12735.0))))))))))));
                                                                             }
                                                                            }());
                                                                     }
                                                                    }());

                                                                case false:
                                                                    ({ () in return switch basics_lt(code, 43019.0) {
                                                                        case true:
                                                                            ({ () in return switch basics_lt(code, 42559.0) {
                                                                                case true:
                                                                                    basics_or(basics_and(basics_le(12784.0, code), basics_le(code, 12799.0)), basics_or(basics_and(basics_le(12832.0, code), basics_le(code, 12841.0)), basics_or(basics_and(basics_le(12872.0, code), basics_le(code, 12879.0)), basics_or(basics_and(basics_le(12881.0, code), basics_le(code, 12895.0)), basics_or(basics_and(basics_le(12928.0, code), basics_le(code, 12937.0)), basics_or(basics_and(basics_le(12977.0, code), basics_le(code, 12991.0)), basics_or(basics_and(basics_le(13312.0, code), basics_le(code, 19903.0)), basics_or(basics_and(basics_le(19968.0, code), basics_le(code, 42124.0)), basics_or(basics_and(basics_le(42192.0, code), basics_le(code, 42237.0)), basics_or(basics_and(basics_le(42240.0, code), basics_le(code, 42508.0)), basics_and(basics_le(42512.0, code), basics_le(code, 42539.0))))))))))));

                                                                                case false:
                                                                                    basics_or(basics_and(basics_le(42560.0, code), basics_le(code, 42606.0)), basics_or(basics_and(basics_le(42623.0, code), basics_le(code, 42653.0)), basics_or(basics_and(basics_le(42656.0, code), basics_le(code, 42735.0)), basics_or(basics_and(basics_le(42775.0, code), basics_le(code, 42783.0)), basics_or(basics_and(basics_le(42786.0, code), basics_le(code, 42888.0)), basics_or(basics_and(basics_le(42891.0, code), basics_le(code, 42954.0)), basics_or(basics_and(basics_le(42960.0, code), basics_le(code, 42961.0)), basics_or(basics_and(basics_le(42966.0, code), basics_le(code, 42969.0)), basics_or(basics_and(basics_le(42994.0, code), basics_le(code, 43009.0)), basics_or(basics_and(basics_le(43011.0, code), basics_le(code, 43013.0)), basics_or(basics_and(basics_le(43015.0, code), basics_le(code, 43018.0)), basics_and(basics_eq(basics_modBy(2.0, code), 1.0), basics_and(basics_le(42963.0, code), basics_le(code, 42965.0))))))))))))));
                                                                             }
                                                                            }());

                                                                        case false:
                                                                            ({ () in return switch basics_lt(code, 43395.0) {
                                                                                case true:
                                                                                    basics_or(basics_and(basics_le(43020.0, code), basics_le(code, 43042.0)), basics_or(basics_and(basics_le(43056.0, code), basics_le(code, 43061.0)), basics_or(basics_and(basics_le(43072.0, code), basics_le(code, 43123.0)), basics_or(basics_and(basics_le(43138.0, code), basics_le(code, 43187.0)), basics_or(basics_and(basics_le(43216.0, code), basics_le(code, 43225.0)), basics_or(basics_and(basics_le(43250.0, code), basics_le(code, 43255.0)), basics_or(basics_eq(code, 43259.0), basics_or(basics_and(basics_le(43261.0, code), basics_le(code, 43262.0)), basics_or(basics_and(basics_le(43264.0, code), basics_le(code, 43301.0)), basics_or(basics_and(basics_le(43312.0, code), basics_le(code, 43334.0)), basics_and(basics_le(43360.0, code), basics_le(code, 43388.0))))))))))));

                                                                                case false:
                                                                                    basics_or(basics_and(basics_le(43396.0, code), basics_le(code, 43442.0)), basics_or(basics_and(basics_le(43471.0, code), basics_le(code, 43481.0)), basics_or(basics_and(basics_le(43488.0, code), basics_le(code, 43492.0)), basics_or(basics_and(basics_le(43494.0, code), basics_le(code, 43518.0)), basics_or(basics_and(basics_le(43520.0, code), basics_le(code, 43560.0)), basics_or(basics_and(basics_le(43584.0, code), basics_le(code, 43586.0)), basics_or(basics_and(basics_le(43588.0, code), basics_le(code, 43595.0)), basics_or(basics_and(basics_le(43600.0, code), basics_le(code, 43609.0)), basics_or(basics_and(basics_le(43616.0, code), basics_le(code, 43638.0)), basics_or(basics_eq(code, 43642.0), basics_or(basics_and(basics_le(43646.0, code), basics_le(code, 43695.0)), basics_eq(code, 43697.0))))))))))));
                                                                             }
                                                                            }());
                                                                     }
                                                                    }());
                                                             }
                                                            }());
                                                     }
                                                    }());
                                             }
                                            }());

                                        case false:
                                            ({ () in return switch basics_lt(code, 71351.0) {
                                                case true:
                                                    ({ () in return switch basics_lt(code, 67671.0) {
                                                        case true:
                                                            ({ () in return switch basics_lt(code, 65548.0) {
                                                                case true:
                                                                    ({ () in return switch basics_lt(code, 64286.0) {
                                                                        case true:
                                                                            ({ () in return switch basics_lt(code, 43867.0) {
                                                                                case true:
                                                                                    basics_or(basics_and(basics_le(43701.0, code), basics_le(code, 43702.0)), basics_or(basics_and(basics_le(43705.0, code), basics_le(code, 43709.0)), basics_or(basics_and(basics_le(43739.0, code), basics_le(code, 43741.0)), basics_or(basics_and(basics_le(43744.0, code), basics_le(code, 43754.0)), basics_or(basics_and(basics_le(43762.0, code), basics_le(code, 43764.0)), basics_or(basics_and(basics_le(43777.0, code), basics_le(code, 43782.0)), basics_or(basics_and(basics_le(43785.0, code), basics_le(code, 43790.0)), basics_or(basics_and(basics_le(43793.0, code), basics_le(code, 43798.0)), basics_or(basics_and(basics_le(43808.0, code), basics_le(code, 43814.0)), basics_or(basics_and(basics_le(43816.0, code), basics_le(code, 43822.0)), basics_or(basics_and(basics_le(43824.0, code), basics_le(code, 43866.0)), basics_and(basics_eq(basics_modBy(2.0, code), 0.0), basics_and(basics_le(43712.0, code), basics_le(code, 43714.0))))))))))))));

                                                                                case false:
                                                                                    basics_or(basics_and(basics_le(43868.0, code), basics_le(code, 43881.0)), basics_or(basics_and(basics_le(43888.0, code), basics_le(code, 44002.0)), basics_or(basics_and(basics_le(44016.0, code), basics_le(code, 44025.0)), basics_or(basics_and(basics_le(44032.0, code), basics_le(code, 55203.0)), basics_or(basics_and(basics_le(55216.0, code), basics_le(code, 55238.0)), basics_or(basics_and(basics_le(55243.0, code), basics_le(code, 55291.0)), basics_or(basics_and(basics_le(63744.0, code), basics_le(code, 64109.0)), basics_or(basics_and(basics_le(64112.0, code), basics_le(code, 64217.0)), basics_or(basics_and(basics_le(64256.0, code), basics_le(code, 64262.0)), basics_or(basics_and(basics_le(64275.0, code), basics_le(code, 64279.0)), basics_eq(code, 64285.0)))))))))));
                                                                             }
                                                                            }());

                                                                        case false:
                                                                            ({ () in return switch basics_lt(code, 65135.0) {
                                                                                case true:
                                                                                    basics_or(basics_and(basics_le(64287.0, code), basics_le(code, 64296.0)), basics_or(basics_and(basics_le(64298.0, code), basics_le(code, 64310.0)), basics_or(basics_and(basics_le(64312.0, code), basics_le(code, 64316.0)), basics_or(basics_eq(code, 64318.0), basics_or(basics_and(basics_le(64320.0, code), basics_le(code, 64321.0)), basics_or(basics_and(basics_le(64323.0, code), basics_le(code, 64324.0)), basics_or(basics_and(basics_le(64326.0, code), basics_le(code, 64433.0)), basics_or(basics_and(basics_le(64467.0, code), basics_le(code, 64829.0)), basics_or(basics_and(basics_le(64848.0, code), basics_le(code, 64911.0)), basics_or(basics_and(basics_le(64914.0, code), basics_le(code, 64967.0)), basics_and(basics_le(65008.0, code), basics_le(code, 65019.0))))))))))));

                                                                                case false:
                                                                                    basics_or(basics_and(basics_le(65136.0, code), basics_le(code, 65140.0)), basics_or(basics_and(basics_le(65142.0, code), basics_le(code, 65276.0)), basics_or(basics_and(basics_le(65296.0, code), basics_le(code, 65305.0)), basics_or(basics_and(basics_le(65313.0, code), basics_le(code, 65338.0)), basics_or(basics_and(basics_le(65345.0, code), basics_le(code, 65370.0)), basics_or(basics_and(basics_le(65382.0, code), basics_le(code, 65470.0)), basics_or(basics_and(basics_le(65474.0, code), basics_le(code, 65479.0)), basics_or(basics_and(basics_le(65482.0, code), basics_le(code, 65487.0)), basics_or(basics_and(basics_le(65490.0, code), basics_le(code, 65495.0)), basics_or(basics_and(basics_le(65498.0, code), basics_le(code, 65500.0)), basics_and(basics_le(65536.0, code), basics_le(code, 65547.0))))))))))));
                                                                             }
                                                                            }());
                                                                     }
                                                                    }());

                                                                case false:
                                                                    ({ () in return switch basics_lt(code, 66775.0) {
                                                                        case true:
                                                                            ({ () in return switch basics_lt(code, 66272.0) {
                                                                                case true:
                                                                                    basics_or(basics_and(basics_le(65549.0, code), basics_le(code, 65574.0)), basics_or(basics_and(basics_le(65576.0, code), basics_le(code, 65594.0)), basics_or(basics_and(basics_le(65596.0, code), basics_le(code, 65597.0)), basics_or(basics_and(basics_le(65599.0, code), basics_le(code, 65613.0)), basics_or(basics_and(basics_le(65616.0, code), basics_le(code, 65629.0)), basics_or(basics_and(basics_le(65664.0, code), basics_le(code, 65786.0)), basics_or(basics_and(basics_le(65799.0, code), basics_le(code, 65843.0)), basics_or(basics_and(basics_le(65856.0, code), basics_le(code, 65912.0)), basics_or(basics_and(basics_le(65930.0, code), basics_le(code, 65931.0)), basics_or(basics_and(basics_le(66176.0, code), basics_le(code, 66204.0)), basics_and(basics_le(66208.0, code), basics_le(code, 66256.0))))))))))));

                                                                                case false:
                                                                                    basics_or(basics_and(basics_le(66273.0, code), basics_le(code, 66299.0)), basics_or(basics_and(basics_le(66304.0, code), basics_le(code, 66339.0)), basics_or(basics_and(basics_le(66349.0, code), basics_le(code, 66378.0)), basics_or(basics_and(basics_le(66384.0, code), basics_le(code, 66421.0)), basics_or(basics_and(basics_le(66432.0, code), basics_le(code, 66461.0)), basics_or(basics_and(basics_le(66464.0, code), basics_le(code, 66499.0)), basics_or(basics_and(basics_le(66504.0, code), basics_le(code, 66511.0)), basics_or(basics_and(basics_le(66513.0, code), basics_le(code, 66517.0)), basics_or(basics_and(basics_le(66560.0, code), basics_le(code, 66717.0)), basics_or(basics_and(basics_le(66720.0, code), basics_le(code, 66729.0)), basics_and(basics_le(66736.0, code), basics_le(code, 66771.0))))))))))));
                                                                             }
                                                                            }());

                                                                        case false:
                                                                            ({ () in return switch basics_lt(code, 67071.0) {
                                                                                case true:
                                                                                    basics_or(basics_and(basics_le(66776.0, code), basics_le(code, 66811.0)), basics_or(basics_and(basics_le(66816.0, code), basics_le(code, 66855.0)), basics_or(basics_and(basics_le(66864.0, code), basics_le(code, 66915.0)), basics_or(basics_and(basics_le(66928.0, code), basics_le(code, 66938.0)), basics_or(basics_and(basics_le(66940.0, code), basics_le(code, 66954.0)), basics_or(basics_and(basics_le(66956.0, code), basics_le(code, 66962.0)), basics_or(basics_and(basics_le(66964.0, code), basics_le(code, 66965.0)), basics_or(basics_and(basics_le(66967.0, code), basics_le(code, 66977.0)), basics_or(basics_and(basics_le(66979.0, code), basics_le(code, 66993.0)), basics_or(basics_and(basics_le(66995.0, code), basics_le(code, 67001.0)), basics_and(basics_le(67003.0, code), basics_le(code, 67004.0))))))))))));

                                                                                case false:
                                                                                    basics_or(basics_and(basics_le(67072.0, code), basics_le(code, 67382.0)), basics_or(basics_and(basics_le(67392.0, code), basics_le(code, 67413.0)), basics_or(basics_and(basics_le(67424.0, code), basics_le(code, 67431.0)), basics_or(basics_and(basics_le(67456.0, code), basics_le(code, 67461.0)), basics_or(basics_and(basics_le(67463.0, code), basics_le(code, 67504.0)), basics_or(basics_and(basics_le(67506.0, code), basics_le(code, 67514.0)), basics_or(basics_and(basics_le(67584.0, code), basics_le(code, 67589.0)), basics_or(basics_eq(code, 67592.0), basics_or(basics_and(basics_le(67594.0, code), basics_le(code, 67637.0)), basics_or(basics_and(basics_le(67639.0, code), basics_le(code, 67640.0)), basics_or(basics_eq(code, 67644.0), basics_and(basics_le(67647.0, code), basics_le(code, 67669.0)))))))))))));
                                                                             }
                                                                            }());
                                                                     }
                                                                    }());
                                                             }
                                                            }());

                                                        case false:
                                                            ({ () in return switch basics_lt(code, 69871.0) {
                                                                case true:
                                                                    ({ () in return switch basics_lt(code, 68471.0) {
                                                                        case true:
                                                                            ({ () in return switch basics_lt(code, 68116.0) {
                                                                                case true:
                                                                                    basics_or(basics_and(basics_le(67672.0, code), basics_le(code, 67702.0)), basics_or(basics_and(basics_le(67705.0, code), basics_le(code, 67742.0)), basics_or(basics_and(basics_le(67751.0, code), basics_le(code, 67759.0)), basics_or(basics_and(basics_le(67808.0, code), basics_le(code, 67826.0)), basics_or(basics_and(basics_le(67828.0, code), basics_le(code, 67829.0)), basics_or(basics_and(basics_le(67835.0, code), basics_le(code, 67867.0)), basics_or(basics_and(basics_le(67872.0, code), basics_le(code, 67897.0)), basics_or(basics_and(basics_le(67968.0, code), basics_le(code, 68023.0)), basics_or(basics_and(basics_le(68028.0, code), basics_le(code, 68047.0)), basics_or(basics_and(basics_le(68050.0, code), basics_le(code, 68096.0)), basics_and(basics_le(68112.0, code), basics_le(code, 68115.0))))))))))));

                                                                                case false:
                                                                                    basics_or(basics_and(basics_le(68117.0, code), basics_le(code, 68119.0)), basics_or(basics_and(basics_le(68121.0, code), basics_le(code, 68149.0)), basics_or(basics_and(basics_le(68160.0, code), basics_le(code, 68168.0)), basics_or(basics_and(basics_le(68192.0, code), basics_le(code, 68222.0)), basics_or(basics_and(basics_le(68224.0, code), basics_le(code, 68255.0)), basics_or(basics_and(basics_le(68288.0, code), basics_le(code, 68295.0)), basics_or(basics_and(basics_le(68297.0, code), basics_le(code, 68324.0)), basics_or(basics_and(basics_le(68331.0, code), basics_le(code, 68335.0)), basics_or(basics_and(basics_le(68352.0, code), basics_le(code, 68405.0)), basics_or(basics_and(basics_le(68416.0, code), basics_le(code, 68437.0)), basics_and(basics_le(68440.0, code), basics_le(code, 68466.0))))))))))));
                                                                             }
                                                                            }());

                                                                        case false:
                                                                            ({ () in return switch basics_lt(code, 69423.0) {
                                                                                case true:
                                                                                    basics_or(basics_and(basics_le(68472.0, code), basics_le(code, 68497.0)), basics_or(basics_and(basics_le(68521.0, code), basics_le(code, 68527.0)), basics_or(basics_and(basics_le(68608.0, code), basics_le(code, 68680.0)), basics_or(basics_and(basics_le(68736.0, code), basics_le(code, 68786.0)), basics_or(basics_and(basics_le(68800.0, code), basics_le(code, 68850.0)), basics_or(basics_and(basics_le(68858.0, code), basics_le(code, 68899.0)), basics_or(basics_and(basics_le(68912.0, code), basics_le(code, 68921.0)), basics_or(basics_and(basics_le(69216.0, code), basics_le(code, 69246.0)), basics_or(basics_and(basics_le(69248.0, code), basics_le(code, 69289.0)), basics_or(basics_and(basics_le(69296.0, code), basics_le(code, 69297.0)), basics_and(basics_le(69376.0, code), basics_le(code, 69415.0))))))))))));

                                                                                case false:
                                                                                    basics_or(basics_and(basics_le(69424.0, code), basics_le(code, 69445.0)), basics_or(basics_and(basics_le(69457.0, code), basics_le(code, 69460.0)), basics_or(basics_and(basics_le(69488.0, code), basics_le(code, 69505.0)), basics_or(basics_and(basics_le(69552.0, code), basics_le(code, 69579.0)), basics_or(basics_and(basics_le(69600.0, code), basics_le(code, 69622.0)), basics_or(basics_and(basics_le(69635.0, code), basics_le(code, 69687.0)), basics_or(basics_and(basics_le(69714.0, code), basics_le(code, 69743.0)), basics_or(basics_and(basics_le(69745.0, code), basics_le(code, 69746.0)), basics_or(basics_eq(code, 69749.0), basics_or(basics_and(basics_le(69763.0, code), basics_le(code, 69807.0)), basics_and(basics_le(69840.0, code), basics_le(code, 69864.0))))))))))));
                                                                             }
                                                                            }());
                                                                     }
                                                                    }());

                                                                case false:
                                                                    ({ () in return switch basics_lt(code, 70404.0) {
                                                                        case true:
                                                                            ({ () in return switch basics_lt(code, 70112.0) {
                                                                                case true:
                                                                                    basics_or(basics_and(basics_le(69872.0, code), basics_le(code, 69881.0)), basics_or(basics_and(basics_le(69891.0, code), basics_le(code, 69926.0)), basics_or(basics_and(basics_le(69942.0, code), basics_le(code, 69951.0)), basics_or(basics_eq(code, 69956.0), basics_or(basics_eq(code, 69959.0), basics_or(basics_and(basics_le(69968.0, code), basics_le(code, 70002.0)), basics_or(basics_eq(code, 70006.0), basics_or(basics_and(basics_le(70019.0, code), basics_le(code, 70066.0)), basics_or(basics_and(basics_le(70081.0, code), basics_le(code, 70084.0)), basics_or(basics_and(basics_le(70096.0, code), basics_le(code, 70106.0)), basics_eq(code, 70108.0)))))))))));

                                                                                case false:
                                                                                    basics_or(basics_and(basics_le(70113.0, code), basics_le(code, 70132.0)), basics_or(basics_and(basics_le(70144.0, code), basics_le(code, 70161.0)), basics_or(basics_and(basics_le(70163.0, code), basics_le(code, 70187.0)), basics_or(basics_and(basics_le(70207.0, code), basics_le(code, 70208.0)), basics_or(basics_and(basics_le(70272.0, code), basics_le(code, 70278.0)), basics_or(basics_eq(code, 70280.0), basics_or(basics_and(basics_le(70282.0, code), basics_le(code, 70285.0)), basics_or(basics_and(basics_le(70287.0, code), basics_le(code, 70301.0)), basics_or(basics_and(basics_le(70303.0, code), basics_le(code, 70312.0)), basics_or(basics_and(basics_le(70320.0, code), basics_le(code, 70366.0)), basics_and(basics_le(70384.0, code), basics_le(code, 70393.0))))))))))));
                                                                             }
                                                                            }());

                                                                        case false:
                                                                            ({ () in return switch basics_lt(code, 70735.0) {
                                                                                case true:
                                                                                    basics_or(basics_and(basics_le(70405.0, code), basics_le(code, 70412.0)), basics_or(basics_and(basics_le(70415.0, code), basics_le(code, 70416.0)), basics_or(basics_and(basics_le(70419.0, code), basics_le(code, 70440.0)), basics_or(basics_and(basics_le(70442.0, code), basics_le(code, 70448.0)), basics_or(basics_and(basics_le(70450.0, code), basics_le(code, 70451.0)), basics_or(basics_and(basics_le(70453.0, code), basics_le(code, 70457.0)), basics_or(basics_eq(code, 70461.0), basics_or(basics_eq(code, 70480.0), basics_or(basics_and(basics_le(70493.0, code), basics_le(code, 70497.0)), basics_or(basics_and(basics_le(70656.0, code), basics_le(code, 70708.0)), basics_and(basics_le(70727.0, code), basics_le(code, 70730.0))))))))))));

                                                                                case false:
                                                                                    basics_or(basics_and(basics_le(70736.0, code), basics_le(code, 70745.0)), basics_or(basics_and(basics_le(70751.0, code), basics_le(code, 70753.0)), basics_or(basics_and(basics_le(70784.0, code), basics_le(code, 70831.0)), basics_or(basics_and(basics_le(70852.0, code), basics_le(code, 70853.0)), basics_or(basics_eq(code, 70855.0), basics_or(basics_and(basics_le(70864.0, code), basics_le(code, 70873.0)), basics_or(basics_and(basics_le(71040.0, code), basics_le(code, 71086.0)), basics_or(basics_and(basics_le(71128.0, code), basics_le(code, 71131.0)), basics_or(basics_and(basics_le(71168.0, code), basics_le(code, 71215.0)), basics_or(basics_eq(code, 71236.0), basics_or(basics_and(basics_le(71248.0, code), basics_le(code, 71257.0)), basics_and(basics_le(71296.0, code), basics_le(code, 71338.0)))))))))))));
                                                                             }
                                                                            }());
                                                                     }
                                                                    }());
                                                             }
                                                            }());
                                                     }
                                                    }());

                                                case false:
                                                    ({ () in return switch basics_lt(code, 119893.0) {
                                                        case true:
                                                            ({ () in return switch basics_lt(code, 73727.0) {
                                                                case true:
                                                                    ({ () in return switch basics_lt(code, 72703.0) {
                                                                        case true:
                                                                            ({ () in return switch basics_lt(code, 71959.0) {
                                                                                case true:
                                                                                    basics_or(basics_eq(code, 71352.0), basics_or(basics_and(basics_le(71360.0, code), basics_le(code, 71369.0)), basics_or(basics_and(basics_le(71424.0, code), basics_le(code, 71450.0)), basics_or(basics_and(basics_le(71472.0, code), basics_le(code, 71483.0)), basics_or(basics_and(basics_le(71488.0, code), basics_le(code, 71494.0)), basics_or(basics_and(basics_le(71680.0, code), basics_le(code, 71723.0)), basics_or(basics_and(basics_le(71840.0, code), basics_le(code, 71922.0)), basics_or(basics_and(basics_le(71935.0, code), basics_le(code, 71942.0)), basics_or(basics_eq(code, 71945.0), basics_or(basics_and(basics_le(71948.0, code), basics_le(code, 71955.0)), basics_and(basics_le(71957.0, code), basics_le(code, 71958.0))))))))))));

                                                                                case false:
                                                                                    basics_or(basics_and(basics_le(71960.0, code), basics_le(code, 71983.0)), basics_or(basics_and(basics_le(72016.0, code), basics_le(code, 72025.0)), basics_or(basics_and(basics_le(72096.0, code), basics_le(code, 72103.0)), basics_or(basics_and(basics_le(72106.0, code), basics_le(code, 72144.0)), basics_or(basics_eq(code, 72192.0), basics_or(basics_and(basics_le(72203.0, code), basics_le(code, 72242.0)), basics_or(basics_eq(code, 72250.0), basics_or(basics_eq(code, 72272.0), basics_or(basics_and(basics_le(72284.0, code), basics_le(code, 72329.0)), basics_or(basics_eq(code, 72349.0), basics_or(basics_and(basics_le(72368.0, code), basics_le(code, 72440.0)), basics_and(basics_eq(basics_modBy(2.0, code), 1.0), basics_or(basics_and(basics_le(71999.0, code), basics_le(code, 72001.0)), basics_and(basics_le(72161.0, code), basics_le(code, 72163.0)))))))))))))));
                                                                             }
                                                                            }());

                                                                        case false:
                                                                            ({ () in return switch basics_lt(code, 73062.0) {
                                                                                case true:
                                                                                    basics_or(basics_and(basics_le(72704.0, code), basics_le(code, 72712.0)), basics_or(basics_and(basics_le(72714.0, code), basics_le(code, 72750.0)), basics_or(basics_eq(code, 72768.0), basics_or(basics_and(basics_le(72784.0, code), basics_le(code, 72812.0)), basics_or(basics_and(basics_le(72818.0, code), basics_le(code, 72847.0)), basics_or(basics_and(basics_le(72960.0, code), basics_le(code, 72966.0)), basics_or(basics_and(basics_le(72968.0, code), basics_le(code, 72969.0)), basics_or(basics_and(basics_le(72971.0, code), basics_le(code, 73008.0)), basics_or(basics_eq(code, 73030.0), basics_or(basics_and(basics_le(73040.0, code), basics_le(code, 73049.0)), basics_and(basics_le(73056.0, code), basics_le(code, 73061.0))))))))))));

                                                                                case false:
                                                                                    basics_or(basics_and(basics_le(73063.0, code), basics_le(code, 73064.0)), basics_or(basics_and(basics_le(73066.0, code), basics_le(code, 73097.0)), basics_or(basics_eq(code, 73112.0), basics_or(basics_and(basics_le(73120.0, code), basics_le(code, 73129.0)), basics_or(basics_and(basics_le(73440.0, code), basics_le(code, 73458.0)), basics_or(basics_eq(code, 73474.0), basics_or(basics_and(basics_le(73476.0, code), basics_le(code, 73488.0)), basics_or(basics_and(basics_le(73490.0, code), basics_le(code, 73523.0)), basics_or(basics_and(basics_le(73552.0, code), basics_le(code, 73561.0)), basics_or(basics_eq(code, 73648.0), basics_and(basics_le(73664.0, code), basics_le(code, 73684.0))))))))))));
                                                                             }
                                                                            }());
                                                                     }
                                                                    }());

                                                                case false:
                                                                    ({ () in return switch basics_lt(code, 94098.0) {
                                                                        case true:
                                                                            ({ () in return switch basics_lt(code, 92863.0) {
                                                                                case true:
                                                                                    basics_or(basics_and(basics_le(73728.0, code), basics_le(code, 74649.0)), basics_or(basics_and(basics_le(74752.0, code), basics_le(code, 74862.0)), basics_or(basics_and(basics_le(74880.0, code), basics_le(code, 75075.0)), basics_or(basics_and(basics_le(77712.0, code), basics_le(code, 77808.0)), basics_or(basics_and(basics_le(77824.0, code), basics_le(code, 78895.0)), basics_or(basics_and(basics_le(78913.0, code), basics_le(code, 78918.0)), basics_or(basics_and(basics_le(82944.0, code), basics_le(code, 83526.0)), basics_or(basics_and(basics_le(92160.0, code), basics_le(code, 92728.0)), basics_or(basics_and(basics_le(92736.0, code), basics_le(code, 92766.0)), basics_or(basics_and(basics_le(92768.0, code), basics_le(code, 92777.0)), basics_and(basics_le(92784.0, code), basics_le(code, 92862.0))))))))))));

                                                                                case false:
                                                                                    basics_or(basics_and(basics_le(92864.0, code), basics_le(code, 92873.0)), basics_or(basics_and(basics_le(92880.0, code), basics_le(code, 92909.0)), basics_or(basics_and(basics_le(92928.0, code), basics_le(code, 92975.0)), basics_or(basics_and(basics_le(92992.0, code), basics_le(code, 92995.0)), basics_or(basics_and(basics_le(93008.0, code), basics_le(code, 93017.0)), basics_or(basics_and(basics_le(93019.0, code), basics_le(code, 93025.0)), basics_or(basics_and(basics_le(93027.0, code), basics_le(code, 93047.0)), basics_or(basics_and(basics_le(93053.0, code), basics_le(code, 93071.0)), basics_or(basics_and(basics_le(93760.0, code), basics_le(code, 93846.0)), basics_or(basics_and(basics_le(93952.0, code), basics_le(code, 94026.0)), basics_eq(code, 94032.0)))))))))));
                                                                             }
                                                                            }());

                                                                        case false:
                                                                            ({ () in return switch basics_lt(code, 110927.0) {
                                                                                case true:
                                                                                    basics_or(basics_and(basics_le(94099.0, code), basics_le(code, 94111.0)), basics_or(basics_and(basics_le(94176.0, code), basics_le(code, 94177.0)), basics_or(basics_eq(code, 94179.0), basics_or(basics_and(basics_le(94208.0, code), basics_le(code, 100343.0)), basics_or(basics_and(basics_le(100352.0, code), basics_le(code, 101589.0)), basics_or(basics_and(basics_le(101632.0, code), basics_le(code, 101640.0)), basics_or(basics_and(basics_le(110576.0, code), basics_le(code, 110579.0)), basics_or(basics_and(basics_le(110581.0, code), basics_le(code, 110587.0)), basics_or(basics_and(basics_le(110589.0, code), basics_le(code, 110590.0)), basics_or(basics_and(basics_le(110592.0, code), basics_le(code, 110882.0)), basics_eq(code, 110898.0)))))))))));

                                                                                case false:
                                                                                    basics_or(basics_and(basics_le(110928.0, code), basics_le(code, 110930.0)), basics_or(basics_eq(code, 110933.0), basics_or(basics_and(basics_le(110948.0, code), basics_le(code, 110951.0)), basics_or(basics_and(basics_le(110960.0, code), basics_le(code, 111355.0)), basics_or(basics_and(basics_le(113664.0, code), basics_le(code, 113770.0)), basics_or(basics_and(basics_le(113776.0, code), basics_le(code, 113788.0)), basics_or(basics_and(basics_le(113792.0, code), basics_le(code, 113800.0)), basics_or(basics_and(basics_le(113808.0, code), basics_le(code, 113817.0)), basics_or(basics_and(basics_le(119488.0, code), basics_le(code, 119507.0)), basics_or(basics_and(basics_le(119520.0, code), basics_le(code, 119539.0)), basics_or(basics_and(basics_le(119648.0, code), basics_le(code, 119672.0)), basics_and(basics_le(119808.0, code), basics_le(code, 119892.0)))))))))))));
                                                                             }
                                                                            }());
                                                                     }
                                                                    }());
                                                             }
                                                            }());

                                                        case false:
                                                            ({ () in return switch basics_lt(code, 124911.0) {
                                                                case true:
                                                                    ({ () in return switch basics_lt(code, 120597.0) {
                                                                        case true:
                                                                            ({ () in return switch basics_lt(code, 120085.0) {
                                                                                case true:
                                                                                    basics_or(basics_and(basics_le(119894.0, code), basics_le(code, 119964.0)), basics_or(basics_and(basics_le(119966.0, code), basics_le(code, 119967.0)), basics_or(basics_eq(code, 119970.0), basics_or(basics_and(basics_le(119973.0, code), basics_le(code, 119974.0)), basics_or(basics_and(basics_le(119977.0, code), basics_le(code, 119980.0)), basics_or(basics_and(basics_le(119982.0, code), basics_le(code, 119993.0)), basics_or(basics_eq(code, 119995.0), basics_or(basics_and(basics_le(119997.0, code), basics_le(code, 120003.0)), basics_or(basics_and(basics_le(120005.0, code), basics_le(code, 120069.0)), basics_or(basics_and(basics_le(120071.0, code), basics_le(code, 120074.0)), basics_and(basics_le(120077.0, code), basics_le(code, 120084.0))))))))))));

                                                                                case false:
                                                                                    basics_or(basics_and(basics_le(120086.0, code), basics_le(code, 120092.0)), basics_or(basics_and(basics_le(120094.0, code), basics_le(code, 120121.0)), basics_or(basics_and(basics_le(120123.0, code), basics_le(code, 120126.0)), basics_or(basics_and(basics_le(120128.0, code), basics_le(code, 120132.0)), basics_or(basics_eq(code, 120134.0), basics_or(basics_and(basics_le(120138.0, code), basics_le(code, 120144.0)), basics_or(basics_and(basics_le(120146.0, code), basics_le(code, 120485.0)), basics_or(basics_and(basics_le(120488.0, code), basics_le(code, 120512.0)), basics_or(basics_and(basics_le(120514.0, code), basics_le(code, 120538.0)), basics_or(basics_and(basics_le(120540.0, code), basics_le(code, 120570.0)), basics_and(basics_le(120572.0, code), basics_le(code, 120596.0))))))))))));
                                                                             }
                                                                            }());

                                                                        case false:
                                                                            ({ () in return switch basics_lt(code, 123135.0) {
                                                                                case true:
                                                                                    basics_or(basics_and(basics_le(120598.0, code), basics_le(code, 120628.0)), basics_or(basics_and(basics_le(120630.0, code), basics_le(code, 120654.0)), basics_or(basics_and(basics_le(120656.0, code), basics_le(code, 120686.0)), basics_or(basics_and(basics_le(120688.0, code), basics_le(code, 120712.0)), basics_or(basics_and(basics_le(120714.0, code), basics_le(code, 120744.0)), basics_or(basics_and(basics_le(120746.0, code), basics_le(code, 120770.0)), basics_or(basics_and(basics_le(120772.0, code), basics_le(code, 120779.0)), basics_or(basics_and(basics_le(120782.0, code), basics_le(code, 120831.0)), basics_or(basics_and(basics_le(122624.0, code), basics_le(code, 122654.0)), basics_or(basics_and(basics_le(122661.0, code), basics_le(code, 122666.0)), basics_and(basics_le(122928.0, code), basics_le(code, 122989.0))))))))))));

                                                                                case false:
                                                                                    basics_or(basics_and(basics_le(123136.0, code), basics_le(code, 123180.0)), basics_or(basics_and(basics_le(123191.0, code), basics_le(code, 123197.0)), basics_or(basics_and(basics_le(123200.0, code), basics_le(code, 123209.0)), basics_or(basics_eq(code, 123214.0), basics_or(basics_and(basics_le(123536.0, code), basics_le(code, 123565.0)), basics_or(basics_and(basics_le(123584.0, code), basics_le(code, 123627.0)), basics_or(basics_and(basics_le(123632.0, code), basics_le(code, 123641.0)), basics_or(basics_and(basics_le(124112.0, code), basics_le(code, 124139.0)), basics_or(basics_and(basics_le(124144.0, code), basics_le(code, 124153.0)), basics_or(basics_and(basics_le(124896.0, code), basics_le(code, 124902.0)), basics_or(basics_and(basics_le(124904.0, code), basics_le(code, 124907.0)), basics_and(basics_le(124909.0, code), basics_le(code, 124910.0)))))))))))));
                                                                             }
                                                                            }());
                                                                     }
                                                                    }());

                                                                case false:
                                                                    ({ () in return switch basics_lt(code, 126560.0) {
                                                                        case true:
                                                                            ({ () in return switch basics_lt(code, 126463.0) {
                                                                                case true:
                                                                                    basics_or(basics_and(basics_le(124912.0, code), basics_le(code, 124926.0)), basics_or(basics_and(basics_le(124928.0, code), basics_le(code, 125124.0)), basics_or(basics_and(basics_le(125127.0, code), basics_le(code, 125135.0)), basics_or(basics_and(basics_le(125184.0, code), basics_le(code, 125251.0)), basics_or(basics_eq(code, 125259.0), basics_or(basics_and(basics_le(125264.0, code), basics_le(code, 125273.0)), basics_or(basics_and(basics_le(126065.0, code), basics_le(code, 126123.0)), basics_or(basics_and(basics_le(126125.0, code), basics_le(code, 126127.0)), basics_or(basics_and(basics_le(126129.0, code), basics_le(code, 126132.0)), basics_or(basics_and(basics_le(126209.0, code), basics_le(code, 126253.0)), basics_and(basics_le(126255.0, code), basics_le(code, 126269.0))))))))))));

                                                                                case false:
                                                                                    basics_or(basics_and(basics_le(126464.0, code), basics_le(code, 126467.0)), basics_or(basics_and(basics_le(126469.0, code), basics_le(code, 126495.0)), basics_or(basics_and(basics_le(126497.0, code), basics_le(code, 126498.0)), basics_or(basics_eq(code, 126500.0), basics_or(basics_eq(code, 126503.0), basics_or(basics_and(basics_le(126505.0, code), basics_le(code, 126514.0)), basics_or(basics_and(basics_le(126516.0, code), basics_le(code, 126519.0)), basics_or(basics_eq(code, 126530.0), basics_or(basics_and(basics_le(126541.0, code), basics_le(code, 126543.0)), basics_or(basics_and(basics_le(126545.0, code), basics_le(code, 126546.0)), basics_or(basics_eq(code, 126548.0), basics_and(basics_eq(basics_modBy(2.0, code), 1.0), basics_or(basics_and(basics_le(126521.0, code), basics_le(code, 126523.0)), basics_or(basics_and(basics_le(126535.0, code), basics_le(code, 126539.0)), basics_and(basics_le(126551.0, code), basics_le(code, 126559.0))))))))))))))));
                                                                             }
                                                                            }());

                                                                        case false:
                                                                            ({ () in return switch basics_lt(code, 126634.0) {
                                                                                case true:
                                                                                    basics_or(basics_and(basics_le(126561.0, code), basics_le(code, 126562.0)), basics_or(basics_eq(code, 126564.0), basics_or(basics_and(basics_le(126567.0, code), basics_le(code, 126570.0)), basics_or(basics_and(basics_le(126572.0, code), basics_le(code, 126578.0)), basics_or(basics_and(basics_le(126580.0, code), basics_le(code, 126583.0)), basics_or(basics_and(basics_le(126585.0, code), basics_le(code, 126588.0)), basics_or(basics_eq(code, 126590.0), basics_or(basics_and(basics_le(126592.0, code), basics_le(code, 126601.0)), basics_or(basics_and(basics_le(126603.0, code), basics_le(code, 126619.0)), basics_or(basics_and(basics_le(126625.0, code), basics_le(code, 126627.0)), basics_and(basics_le(126629.0, code), basics_le(code, 126633.0))))))))))));

                                                                                case false:
                                                                                    basics_or(basics_and(basics_le(126635.0, code), basics_le(code, 126651.0)), basics_or(basics_and(basics_le(127232.0, code), basics_le(code, 127244.0)), basics_or(basics_and(basics_le(130032.0, code), basics_le(code, 130041.0)), basics_or(basics_and(basics_le(131072.0, code), basics_le(code, 173791.0)), basics_or(basics_and(basics_le(173824.0, code), basics_le(code, 177977.0)), basics_or(basics_and(basics_le(177984.0, code), basics_le(code, 178205.0)), basics_or(basics_and(basics_le(178208.0, code), basics_le(code, 183969.0)), basics_or(basics_and(basics_le(183984.0, code), basics_le(code, 191456.0)), basics_or(basics_and(basics_le(191472.0, code), basics_le(code, 192093.0)), basics_or(basics_and(basics_le(194560.0, code), basics_le(code, 195101.0)), basics_or(basics_and(basics_le(196608.0, code), basics_le(code, 201546.0)), basics_and(basics_le(201552.0, code), basics_le(code, 205743.0)))))))))))));
                                                                             }
                                                                            }());
                                                                     }
                                                                    }());
                                                             }
                                                            }());
                                                     }
                                                    }());
                                             }
                                            }());
                                     }
                                    }());
                             }
                            }())
                        )
                    )
                )
            )
         )
        }())
    }

    static public func charExtra_unicodeIsLowerFast(_ c: Character) -> Bool {
        ({ () in let code:Double =
            char_toCode(c);

         let cString:String =
            string_fromChar(c);

         return basics_or(
            charExtra_charCodeIsLower(code),
            ({ () in return switch basics_and(basics_eq(string_toLower(cString), string_append(cString, "")), basics_neq(string_toUpper(cString), string_append(cString, ""))) {
                case true:
                    basics_or(basics_le(code, 836.0), basics_or(basics_and(basics_le(838.0, code), basics_le(code, 8559.0)), basics_or(basics_and(basics_le(8576.0, code), basics_le(code, 9423.0)), basics_and(basics_le(9450.0, code), basics_le(code, 983040.0)))));

                case false:
                    ({ () in return switch basics_lt(code, 43001.0) {
                        case true:
                            ({ () in return switch basics_lt(code, 8457.0) {
                                case true:
                                    ({ () in return switch basics_lt(code, 590.0) {
                                        case true:
                                            basics_or(basics_and(basics_le(311.0, code), basics_le(code, 312.0)), basics_or(basics_and(basics_le(396.0, code), basics_le(code, 397.0)), basics_or(basics_and(basics_le(409.0, code), basics_le(code, 411.0)), basics_or(basics_and(basics_le(426.0, code), basics_le(code, 427.0)), basics_or(basics_and(basics_le(441.0, code), basics_le(code, 442.0)), basics_or(basics_and(basics_le(445.0, code), basics_le(code, 447.0)), basics_or(basics_eq(code, 545.0), basics_and(basics_le(563.0, code), basics_le(code, 569.0)))))))));

                                        case false:
                                            basics_or(basics_and(basics_le(591.0, code), basics_le(code, 659.0)), basics_or(basics_and(basics_le(661.0, code), basics_le(code, 687.0)), basics_or(basics_and(basics_le(1019.0, code), basics_le(code, 1020.0)), basics_or(basics_and(basics_le(1376.0, code), basics_le(code, 1416.0)), basics_or(basics_and(basics_le(7424.0, code), basics_le(code, 7467.0)), basics_or(basics_and(basics_le(7531.0, code), basics_le(code, 7543.0)), basics_or(basics_and(basics_le(7545.0, code), basics_le(code, 7578.0)), basics_or(basics_and(basics_le(7829.0, code), basics_le(code, 7837.0)), basics_eq(code, 7839.0)))))))));
                                     }
                                    }());

                                case false:
                                    ({ () in return switch basics_lt(code, 11376.0) {
                                        case true:
                                            basics_or(basics_eq(code, 8458.0), basics_or(basics_and(basics_le(8462.0, code), basics_le(code, 8463.0)), basics_or(basics_eq(code, 8467.0), basics_or(basics_eq(code, 8495.0), basics_or(basics_eq(code, 8500.0), basics_or(basics_eq(code, 8505.0), basics_or(basics_and(basics_le(8508.0, code), basics_le(code, 8509.0)), basics_and(basics_le(8518.0, code), basics_le(code, 8521.0)))))))));

                                        case false:
                                            basics_or(basics_eq(code, 11377.0), basics_or(basics_and(basics_le(11379.0, code), basics_le(code, 11380.0)), basics_or(basics_and(basics_le(11382.0, code), basics_le(code, 11387.0)), basics_or(basics_and(basics_le(11491.0, code), basics_le(code, 11492.0)), basics_or(basics_and(basics_le(42799.0, code), basics_le(code, 42801.0)), basics_or(basics_and(basics_le(42865.0, code), basics_le(code, 42872.0)), basics_or(basics_eq(code, 42894.0), basics_or(basics_and(basics_le(42899.0, code), basics_le(code, 42901.0)), basics_or(basics_eq(code, 42927.0), basics_and(basics_eq(basics_modBy(2.0, code), 1.0), basics_and(basics_le(42963.0, code), basics_le(code, 42965.0))))))))))));
                                     }
                                    }());
                             }
                            }());

                        case false:
                            ({ () in return switch basics_lt(code, 120353.0) {
                                case true:
                                    ({ () in return switch basics_lt(code, 119994.0) {
                                        case true:
                                            basics_or(basics_eq(code, 43002.0), basics_or(basics_and(basics_le(43824.0, code), basics_le(code, 43866.0)), basics_or(basics_and(basics_le(43872.0, code), basics_le(code, 43880.0)), basics_or(basics_and(basics_le(119834.0, code), basics_le(code, 119859.0)), basics_or(basics_and(basics_le(119886.0, code), basics_le(code, 119892.0)), basics_or(basics_and(basics_le(119894.0, code), basics_le(code, 119911.0)), basics_or(basics_and(basics_le(119938.0, code), basics_le(code, 119963.0)), basics_and(basics_le(119990.0, code), basics_le(code, 119993.0)))))))));

                                        case false:
                                            basics_or(basics_eq(code, 119995.0), basics_or(basics_and(basics_le(119997.0, code), basics_le(code, 120003.0)), basics_or(basics_and(basics_le(120005.0, code), basics_le(code, 120015.0)), basics_or(basics_and(basics_le(120042.0, code), basics_le(code, 120067.0)), basics_or(basics_and(basics_le(120094.0, code), basics_le(code, 120119.0)), basics_or(basics_and(basics_le(120146.0, code), basics_le(code, 120171.0)), basics_or(basics_and(basics_le(120198.0, code), basics_le(code, 120223.0)), basics_or(basics_and(basics_le(120250.0, code), basics_le(code, 120275.0)), basics_and(basics_le(120302.0, code), basics_le(code, 120327.0))))))))));
                                     }
                                    }());

                                case false:
                                    ({ () in return switch basics_lt(code, 120655.0) {
                                        case true:
                                            basics_or(basics_and(basics_le(120354.0, code), basics_le(code, 120379.0)), basics_or(basics_and(basics_le(120406.0, code), basics_le(code, 120431.0)), basics_or(basics_and(basics_le(120458.0, code), basics_le(code, 120485.0)), basics_or(basics_and(basics_le(120514.0, code), basics_le(code, 120538.0)), basics_or(basics_and(basics_le(120540.0, code), basics_le(code, 120545.0)), basics_or(basics_and(basics_le(120572.0, code), basics_le(code, 120596.0)), basics_or(basics_and(basics_le(120598.0, code), basics_le(code, 120603.0)), basics_and(basics_le(120630.0, code), basics_le(code, 120654.0)))))))));

                                        case false:
                                            basics_or(basics_and(basics_le(120656.0, code), basics_le(code, 120661.0)), basics_or(basics_and(basics_le(120688.0, code), basics_le(code, 120712.0)), basics_or(basics_and(basics_le(120714.0, code), basics_le(code, 120719.0)), basics_or(basics_and(basics_le(120746.0, code), basics_le(code, 120770.0)), basics_or(basics_and(basics_le(120772.0, code), basics_le(code, 120777.0)), basics_or(basics_eq(code, 120779.0), basics_or(basics_and(basics_le(122624.0, code), basics_le(code, 122633.0)), basics_or(basics_and(basics_le(122635.0, code), basics_le(code, 122654.0)), basics_and(basics_le(122661.0, code), basics_le(code, 122666.0))))))))));
                                     }
                                    }());
                             }
                            }());
                     }
                    }());
             }
            }())
         )
        }())
    }

    static public func charExtra_unicodeIsUpperFast(_ c: Character) -> Bool {
        ({ () in let code:Double =
            char_toCode(c);

         return basics_or(
            charExtra_charCodeIsUpper(code),
            ({ () in let cString:String =
                string_fromChar(c);

             return ({ () in return switch basics_and(basics_eq(string_toUpper(cString), string_append(cString, "")), basics_neq(string_toLower(cString), string_append(cString, ""))) {
                case true:
                    basics_or(basics_le(code, 8543.0), basics_or(basics_and(basics_le(8560.0, code), basics_le(code, 9397.0)), basics_and(basics_le(9424.0, code), basics_le(code, 983040.0))));

                case false:
                    ({ () in return switch basics_lt(code, 120015.0) {
                        case true:
                            ({ () in return switch basics_lt(code, 8509.0) {
                                case true:
                                    basics_or(basics_and(basics_le(978.0, code), basics_le(code, 980.0)), basics_or(basics_eq(code, 8450.0), basics_or(basics_eq(code, 8455.0), basics_or(basics_and(basics_le(8459.0, code), basics_le(code, 8461.0)), basics_or(basics_and(basics_le(8464.0, code), basics_le(code, 8466.0)), basics_or(basics_eq(code, 8469.0), basics_or(basics_and(basics_le(8473.0, code), basics_le(code, 8477.0)), basics_or(basics_eq(code, 8484.0), basics_or(basics_eq(code, 8488.0), basics_or(basics_and(basics_le(8490.0, code), basics_le(code, 8493.0)), basics_and(basics_le(8496.0, code), basics_le(code, 8499.0))))))))))));

                                case false:
                                    basics_or(basics_and(basics_le(8510.0, code), basics_le(code, 8511.0)), basics_or(basics_eq(code, 8517.0), basics_or(basics_and(basics_le(119808.0, code), basics_le(code, 119833.0)), basics_or(basics_and(basics_le(119860.0, code), basics_le(code, 119885.0)), basics_or(basics_and(basics_le(119912.0, code), basics_le(code, 119937.0)), basics_or(basics_eq(code, 119964.0), basics_or(basics_and(basics_le(119966.0, code), basics_le(code, 119967.0)), basics_or(basics_eq(code, 119970.0), basics_or(basics_and(basics_le(119973.0, code), basics_le(code, 119974.0)), basics_or(basics_and(basics_le(119977.0, code), basics_le(code, 119980.0)), basics_and(basics_le(119982.0, code), basics_le(code, 119989.0))))))))))));
                             }
                            }());

                        case false:
                            ({ () in return switch basics_lt(code, 120223.0) {
                                case true:
                                    basics_or(basics_and(basics_le(120016.0, code), basics_le(code, 120041.0)), basics_or(basics_and(basics_le(120068.0, code), basics_le(code, 120069.0)), basics_or(basics_and(basics_le(120071.0, code), basics_le(code, 120074.0)), basics_or(basics_and(basics_le(120077.0, code), basics_le(code, 120084.0)), basics_or(basics_and(basics_le(120086.0, code), basics_le(code, 120092.0)), basics_or(basics_and(basics_le(120120.0, code), basics_le(code, 120121.0)), basics_or(basics_and(basics_le(120123.0, code), basics_le(code, 120126.0)), basics_or(basics_and(basics_le(120128.0, code), basics_le(code, 120132.0)), basics_or(basics_eq(code, 120134.0), basics_or(basics_and(basics_le(120138.0, code), basics_le(code, 120144.0)), basics_and(basics_le(120172.0, code), basics_le(code, 120197.0))))))))))));

                                case false:
                                    basics_or(basics_and(basics_le(120224.0, code), basics_le(code, 120249.0)), basics_or(basics_and(basics_le(120276.0, code), basics_le(code, 120301.0)), basics_or(basics_and(basics_le(120328.0, code), basics_le(code, 120353.0)), basics_or(basics_and(basics_le(120380.0, code), basics_le(code, 120405.0)), basics_or(basics_and(basics_le(120432.0, code), basics_le(code, 120457.0)), basics_or(basics_and(basics_le(120488.0, code), basics_le(code, 120512.0)), basics_or(basics_and(basics_le(120546.0, code), basics_le(code, 120570.0)), basics_or(basics_and(basics_le(120604.0, code), basics_le(code, 120628.0)), basics_or(basics_and(basics_le(120662.0, code), basics_le(code, 120686.0)), basics_or(basics_and(basics_le(120720.0, code), basics_le(code, 120744.0)), basics_eq(code, 120778.0)))))))))));
                             }
                            }());
                     }
                    }());
              }
             }())
            }())
         )
        }())
    }

    static public func elmSyntaxExposing_exposesFunction(_ s: String, _ exposure: ElmSyntaxExposing_Exposing) -> Bool {
        ({ () in return switch exposure {
            case ElmSyntaxExposing_Exposing.All(_):
                true;

            case let ElmSyntaxExposing_Exposing.Explicit(l):
                list_any(
                    { (generated_value) in
                        ({ () in return switch (generated_value: generated_value, unusedDummyFieldToMakeSwiftHappy: ()) {
                            case let (generated_value: ElmSyntaxNode_Node.Node(_, value), unusedDummyFieldToMakeSwiftHappy: ()):
                                ({ () in return switch value {
                                    case let ElmSyntaxExposing_TopLevelExpose.FunctionExpose(fun):
                                        basics_eq(fun, s);

                                    case _:
                                        false;
                                 }
                                }());
                         }
                        }())
                    },
                    l
                );
         }
        }())
    }

    static public func elmSyntaxExposing_operator(_ t: ElmSyntaxExposing_TopLevelExpose) -> Maybe_Maybe<String> {
        ({ () in return switch t {
            case let ElmSyntaxExposing_TopLevelExpose.InfixExpose(s):
                Maybe_Maybe.Just(s);

            case _:
                Maybe_Maybe.Nothing;
         }
        }())
    }

    static public func elmSyntaxExposing_operators(_ l: List_List<ElmSyntaxExposing_TopLevelExpose>) -> List_List<String> {
        list_filterMap(elmSyntaxExposing_operator, l)
    }

    static public func elmSyntaxExpression_functionRange(_ function: ElmSyntaxExpression_Function) -> ElmSyntaxRange_Range {
        ({ () in let declarationRange:ElmSyntaxRange_Range =
            elmSyntaxNode_range(function.declaration);

         let startRange:ElmSyntaxRange_Range =
            ({ () in return switch function.documentation {
                case let Maybe_Maybe.Just(ElmSyntaxNode_Node.Node(range, _)):
                    range;

                case Maybe_Maybe.Nothing:
                    ({ () in return switch function.signature {
                        case let Maybe_Maybe.Just(ElmSyntaxNode_Node.Node(range, _)):
                            range;

                        case Maybe_Maybe.Nothing:
                            declarationRange;
                     }
                    }());
             }
            }());

         return (end: declarationRange.end, start: startRange.start)
        }())
    }

    static public func elmSyntaxExpression_isCase(_ e: ElmSyntaxExpression_Expression) -> Bool {
        ({ () in return switch e {
            case ElmSyntaxExpression_Expression.CaseExpression(_):
                true;

            case _:
                false;
         }
        }())
    }

    static public func elmSyntaxExpression_isIfElse(_ e: ElmSyntaxExpression_Expression) -> Bool {
        ({ () in return switch e {
            case ElmSyntaxExpression_Expression.IfBlock(_, _, _):
                true;

            case _:
                false;
         }
        }())
    }

    static public func elmSyntaxExpression_isLambda(_ e: ElmSyntaxExpression_Expression) -> Bool {
        ({ () in return switch e {
            case ElmSyntaxExpression_Expression.LambdaExpression(_):
                true;

            case _:
                false;
         }
        }())
    }

    static public func elmSyntaxExpression_isLet(_ e: ElmSyntaxExpression_Expression) -> Bool {
        ({ () in return switch e {
            case ElmSyntaxExpression_Expression.LetExpression(_):
                true;

            case _:
                false;
         }
        }())
    }

    static public func elmSyntaxExpression_isOperatorApplication(_ e: ElmSyntaxExpression_Expression) -> Bool {
        ({ () in return switch e {
            case ElmSyntaxExpression_Expression.OperatorApplication(_, _, _, _):
                true;

            case _:
                false;
         }
        }())
    }

    static public func elmSyntaxModule_exposingList(_ m: ElmSyntaxModule_Module) -> ElmSyntaxExposing_Exposing {
        ({ () in return switch m {
            case let ElmSyntaxModule_Module.NormalModule(x):
                elmSyntaxNode_value(x.exposingList);

            case let ElmSyntaxModule_Module.PortModule(x):
                elmSyntaxNode_value(x.exposingList);

            case let ElmSyntaxModule_Module.EffectModule(x):
                elmSyntaxNode_value(x.exposingList);
         }
        }())
    }

    static public func elmSyntaxModule_isEffectModule(_ m: ElmSyntaxModule_Module) -> Bool {
        ({ () in return switch m {
            case ElmSyntaxModule_Module.EffectModule(_):
                true;

            case _:
                false;
         }
        }())
    }

    static public func elmSyntaxModule_isPortModule(_ m: ElmSyntaxModule_Module) -> Bool {
        ({ () in return switch m {
            case ElmSyntaxModule_Module.PortModule(_):
                true;

            case _:
                false;
         }
        }())
    }

    static public func elmSyntaxModule_moduleName(_ m: ElmSyntaxModule_Module) -> ElmSyntaxModuleName_ModuleName {
        ({ () in return switch m {
            case let ElmSyntaxModule_Module.NormalModule(x):
                elmSyntaxNode_value(x.moduleName);

            case let ElmSyntaxModule_Module.PortModule(x):
                elmSyntaxNode_value(x.moduleName);

            case let ElmSyntaxModule_Module.EffectModule(x):
                elmSyntaxNode_value(x.moduleName);
         }
        }())
    }

    static public func elmSyntaxNode_combine<A: Sendable, B: Sendable, C: Sendable>(_ f: @Sendable (ElmSyntaxNode_Node<A>, ElmSyntaxNode_Node<B>) -> C, _ generated_start_generated_a1: ElmSyntaxNode_Node<A>, _ generated_end_generated_b1: ElmSyntaxNode_Node<B>) -> ElmSyntaxNode_Node<C> {
        ({ () in return switch (generated_end_generated_b1: generated_end_generated_b1, generated_start_generated_a1: generated_start_generated_a1) {
            case let (generated_end_generated_b1: ElmSyntaxNode_Node.Node((end: end, unusedDummyFieldToMakeSwiftHappy: ()), generated_b1), generated_start_generated_a1: ElmSyntaxNode_Node.Node((start: start, unusedDummyFieldToMakeSwiftHappy: ()), generated_a1)):
                ({ () in let b =
                    ElmSyntaxNode_Node.Node((end: end, unusedDummyFieldToMakeSwiftHappy: ()), generated_b1);

                 let a =
                    ElmSyntaxNode_Node.Node((start: start, unusedDummyFieldToMakeSwiftHappy: ()), generated_a1);

                 return ElmSyntaxNode_Node.Node((end: end, start: start), f(a, b))
                }());
         }
        }())
    }

    static public func elmSyntaxNode_empty<A: Sendable>(_ a: A) -> ElmSyntaxNode_Node<A> {
        ElmSyntaxNode_Node.Node(elmSyntaxRange_empty, a)
    }

    static public func elmSyntaxNode_map<A: Sendable, B: Sendable>(_ f: @Sendable (A) -> B, _ generated_r_a: ElmSyntaxNode_Node<A>) -> ElmSyntaxNode_Node<B> {
        ({ () in return switch (generated_r_a: generated_r_a, unusedDummyFieldToMakeSwiftHappy: ()) {
            case let (generated_r_a: ElmSyntaxNode_Node.Node(r, a), unusedDummyFieldToMakeSwiftHappy: ()):
                ElmSyntaxNode_Node.Node(r, f(a));
         }
        }())
    }

    static public func elmSyntaxNode_range<A: Sendable>(_ generated_r: ElmSyntaxNode_Node<A>) -> ElmSyntaxRange_Range {
        ({ () in return switch (generated_r: generated_r, unusedDummyFieldToMakeSwiftHappy: ()) {
            case let (generated_r: ElmSyntaxNode_Node.Node(r, _), unusedDummyFieldToMakeSwiftHappy: ()):
                r;
         }
        }())
    }

    static public func elmSyntaxNode_value<A: Sendable>(_ generated_v: ElmSyntaxNode_Node<A>) -> A {
        ({ () in return switch (generated_v: generated_v, unusedDummyFieldToMakeSwiftHappy: ()) {
            case let (generated_v: ElmSyntaxNode_Node.Node(_, v), unusedDummyFieldToMakeSwiftHappy: ()):
                v;
         }
        }())
    }

    static public let elmSyntaxParserLenient_allPattern:ElmSyntaxParserLenient_Parser<ElmSyntaxParserLenient_WithComments<ElmSyntaxNode_Node<ElmSyntaxPattern_Pattern>>> =
        parserFast_symbolWithRange(
            "_",
            { (range) in
                (comments: elmSyntaxParserLenient_ropeEmpty(), syntax: ElmSyntaxNode_Node.Node(range, ElmSyntaxPattern_Pattern.AllPattern))
            }
        );

    static public let elmSyntaxParserLenient_allowedPrefixOperatorFollowedByClosingParensOneOf:ElmSyntaxParserLenient_Parser<ElmSyntaxParserLenient_WithComments<ElmSyntaxNode_Node<ElmSyntaxExpression_Expression>>> =
        parserFast_whileAtMost3WithoutLinebreakAnd2PartUtf16ValidateMapWithRangeBacktrackableFollowedBySymbol(
            { (operatorRange, operator_) in
                (comments: elmSyntaxParserLenient_ropeEmpty(), syntax: ElmSyntaxNode_Node.Node((end: (column: basics_add(operatorRange.end.column, 1.0), row: operatorRange.end.row), start: (column: basics_sub(operatorRange.start.column, 1.0), row: operatorRange.start.row)), ElmSyntaxExpression_Expression.PrefixOperator(operator_)))
            },
            elmSyntaxParserLenient_isOperatorSymbolCharAsString,
            elmSyntaxParserLenient_isAllowedOperatorToken,
            ")"
        );

    static public func elmSyntaxParserLenient_applyExtensionRight(_ generated_operation: ElmSyntaxParserLenient_ExtensionRight, _ leftNode: ElmSyntaxNode_Node<ElmSyntaxExpression_Expression>) -> ElmSyntaxNode_Node<ElmSyntaxExpression_Expression> {
        ({ () in return switch (generated_operation: generated_operation, unusedDummyFieldToMakeSwiftHappy: ()) {
            case let (generated_operation: ElmSyntaxParserLenient_ExtensionRight.ExtendRightByOperation(operation), unusedDummyFieldToMakeSwiftHappy: ()):
                ({ () in return switch leftNode {
                    case let ElmSyntaxNode_Node.Node(leftRange, _):
                        ({ () in return switch operation.expression {
                            case let ElmSyntaxNode_Node.Node(rightExpressionRange, _):
                                ElmSyntaxNode_Node.Node((end: rightExpressionRange.end, start: leftRange.start), ElmSyntaxExpression_Expression.OperatorApplication(operation.symbol, operation.direction, leftNode, operation.expression));
                         }
                        }());
                 }
                }());
         }
        }())
    }

    static public let elmSyntaxParserLenient_caseOrUnqualifiedReferenceExpressionMaybeApplied:ElmSyntaxParserLenient_Parser<ElmSyntaxParserLenient_WithComments<ElmSyntaxNode_Node<ElmSyntaxExpression_Expression>>> =
        parserFast_oneOf2(elmSyntaxParserLenient_expressionCaseOfFollowedByOptimisticLayout, elmSyntaxParserLenient_followedByMultiArgumentApplication(elmSyntaxParserLenient_expressionUnqualifiedFunctionReferenceFollowedByRecordAccess));

    static public let elmSyntaxParserLenient_caseStatementFollowedByWhitespaceAndComments:ElmSyntaxParserLenient_Parser<ElmSyntaxParserLenient_WithComments<ElmSyntaxExpression_Case>> =
        elmSyntaxParserLenient_topIndentedFollowedBy(
            parserFast_map4(
                { (patternResult, commentsBeforeArrowRight, commentsAfterArrowRight, expr) in
                    (comments: elmSyntaxParserLenient_ropePrependTo(expr.comments, elmSyntaxParserLenient_ropePrependTo(commentsAfterArrowRight, elmSyntaxParserLenient_ropePrependTo(commentsBeforeArrowRight, patternResult.comments))), syntax: (first: patternResult.syntax, second: expr.syntax))
                },
                elmSyntaxParserLenient_pattern,
                elmSyntaxParserLenient_whitespaceAndComments,
                parserFast_symbolFollowedBy("->", elmSyntaxParserLenient_whitespaceAndComments),
                elmSyntaxParserLenient_expressionFollowedByWhitespaceAndComments
            )
        );

    static public let elmSyntaxParserLenient_caseStatementsFollowedByWhitespaceAndComments:
        ElmSyntaxParserLenient_Parser<
            ElmSyntaxParserLenient_WithComments<
                (first: ElmSyntaxExpression_Case,
                 second: List_List<ElmSyntaxExpression_Case>
                )
            >
        > =
        parserFast_map5(
            { (firstCasePatternResult, commentsAfterFirstCasePattern, commentsAfterFirstCaseArrowRight, firstCaseExpressionResult, lastToSecondCase) in
                (comments: elmSyntaxParserLenient_ropePrependTo(lastToSecondCase.comments, elmSyntaxParserLenient_ropePrependTo(firstCaseExpressionResult.comments, elmSyntaxParserLenient_ropePrependTo(commentsAfterFirstCaseArrowRight, elmSyntaxParserLenient_ropePrependTo(commentsAfterFirstCasePattern, firstCasePatternResult.comments)))), syntax: (first: (first: firstCasePatternResult.syntax, second: firstCaseExpressionResult.syntax), second: lastToSecondCase.syntax))
            },
            elmSyntaxParserLenient_pattern,
            elmSyntaxParserLenient_whitespaceAndComments,
            parserFast_oneOf2OrSucceed(parserFast_symbolFollowedBy("->", elmSyntaxParserLenient_whitespaceAndComments), parserFast_symbolFollowedBy(".", elmSyntaxParserLenient_whitespaceAndComments), elmSyntaxParserLenient_ropeEmpty()),
            elmSyntaxParserLenient_expressionFollowedByWhitespaceAndComments,
            elmSyntaxParserLenient_manyWithCommentsReverse(elmSyntaxParserLenient_caseStatementFollowedByWhitespaceAndComments)
        );

    static public let elmSyntaxParserLenient_charLiteralExpressionOptimisticLayout:ElmSyntaxParserLenient_Parser<ElmSyntaxParserLenient_WithComments<ElmSyntaxNode_Node<ElmSyntaxExpression_Expression>>> =
        elmSyntaxParserLenient_followedByOptimisticLayout(elmSyntaxParserLenient_expressionChar);

    static public let elmSyntaxParserLenient_charPattern:ElmSyntaxParserLenient_Parser<ElmSyntaxParserLenient_WithComments<ElmSyntaxNode_Node<ElmSyntaxPattern_Pattern>>> =
        elmSyntaxParserLenient_characterLiteralMapWithRange(
            { (range, char) in
                (comments: elmSyntaxParserLenient_ropeEmpty(), syntax: ElmSyntaxNode_Node.Node(range, ElmSyntaxPattern_Pattern.CharPattern(char)))
            }
        );

    static public func elmSyntaxParserLenient_charToHex(_ c: Character) -> Double {
        ({ () in return switch c {
            case "0":
                0.0;

            case "1":
                1.0;

            case "2":
                2.0;

            case "3":
                3.0;

            case "4":
                4.0;

            case "5":
                5.0;

            case "6":
                6.0;

            case "7":
                7.0;

            case "8":
                8.0;

            case "9":
                9.0;

            case "a":
                10.0;

            case "b":
                11.0;

            case "c":
                12.0;

            case "d":
                13.0;

            case "e":
                14.0;

            case "f":
                15.0;

            case "A":
                10.0;

            case "B":
                11.0;

            case "C":
                12.0;

            case "D":
                13.0;

            case "E":
                14.0;

            case _:
                15.0;
         }
        }())
    }

    static public func elmSyntaxParserLenient_characterLiteralMapWithRange<Res: Sendable>(_ rangeAndCharToRes: @Sendable (ElmSyntaxRange_Range, Character) -> Res) -> ElmSyntaxParserLenient_Parser<Res> {
        parserFast_symbolFollowedBy(
            "'",
            parserFast_followedBySymbol(
                "'",
                parserFast_oneOf2MapWithStartRowColumnAndEndRowColumn(
                    { (startRow, startColumn, char, endRow, endColumn) in
                        rangeAndCharToRes((end: (column: basics_add(endColumn, 1.0), row: endRow), start: (column: basics_sub(startColumn, 1.0), row: startRow)), char)
                    },
                    parserFast_symbolFollowedBy("\\", elmSyntaxParserLenient_escapedCharValueMap(basics_identity)),
                    { (startRow, startColumn, char, endRow, endColumn) in
                        rangeAndCharToRes((end: (column: basics_add(endColumn, 1.0), row: endRow), start: (column: basics_sub(startColumn, 1.0), row: startRow)), char)
                    },
                    parserFast_anyChar
                )
            )
        )
    }

    static public let elmSyntaxParserLenient_choiceTypeDefinitionAfterDocumentationAfterTypePrefix:ElmSyntaxParserLenient_Parser<ElmSyntaxParserLenient_WithComments<ElmSyntaxParserLenient_DeclarationAfterDocumentation>> =
        parserFast_map7(
            { (name, commentsAfterName, parameters, commentsAfterEqual, commentsBeforeHeadVariant, headVariant, tailVariantsReverse) in
                (comments: elmSyntaxParserLenient_ropePrependTo(tailVariantsReverse.comments, elmSyntaxParserLenient_ropePrependTo(headVariant.comments, elmSyntaxParserLenient_ropePrependTo(commentsBeforeHeadVariant, elmSyntaxParserLenient_ropePrependTo(commentsAfterEqual, elmSyntaxParserLenient_ropePrependTo(parameters.comments, commentsAfterName))))), syntax: ElmSyntaxParserLenient_DeclarationAfterDocumentation.TypeDeclarationAfterDocumentation((headVariant: headVariant.syntax, name: name, parameters: parameters.syntax, tailVariantsReverse: tailVariantsReverse.syntax)))
            },
            elmSyntaxParserLenient_nameUppercaseNode,
            elmSyntaxParserLenient_whitespaceAndComments,
            elmSyntaxParserLenient_typeGenericListEquals,
            elmSyntaxParserLenient_whitespaceAndComments,
            parserFast_orSucceed(parserFast_symbolFollowedBy("|", elmSyntaxParserLenient_whitespaceAndComments), elmSyntaxParserLenient_ropeEmpty()),
            elmSyntaxParserLenient_variantDeclarationFollowedByWhitespaceAndComments,
            elmSyntaxParserLenient_manyWithCommentsReverse(
                parserFast_symbolFollowedBy(
                    "|",
                    parserFast_map3(
                        { (commentsBeforePipe, commentsWithExtraPipe, variantResult) in
                            (comments: elmSyntaxParserLenient_ropePrependTo(variantResult.comments, elmSyntaxParserLenient_ropePrependTo(commentsWithExtraPipe, commentsBeforePipe)), syntax: variantResult.syntax)
                        },
                        elmSyntaxParserLenient_whitespaceAndComments,
                        parserFast_orSucceed(parserFast_symbolFollowedBy("|", elmSyntaxParserLenient_whitespaceAndComments), elmSyntaxParserLenient_ropeEmpty()),
                        elmSyntaxParserLenient_variantDeclarationFollowedByWhitespaceAndComments
                    )
                )
            )
        );

    static public let elmSyntaxParserLenient_choiceTypeDefinitionWithoutDocumentationAfterTypePrefix:ElmSyntaxParserLenient_Parser<ElmSyntaxParserLenient_WithComments<ElmSyntaxParserLenient_TypeOrTypeAliasDeclarationWithoutDocumentation>> =
        parserFast_map7(
            { (name, commentsAfterName, parameters, commentsAfterEqual, commentsBeforeHeadVariant, headVariant, tailVariantsReverse) in
                (comments: elmSyntaxParserLenient_ropePrependTo(tailVariantsReverse.comments, elmSyntaxParserLenient_ropePrependTo(headVariant.comments, elmSyntaxParserLenient_ropePrependTo(commentsBeforeHeadVariant, elmSyntaxParserLenient_ropePrependTo(commentsAfterEqual, elmSyntaxParserLenient_ropePrependTo(parameters.comments, commentsAfterName))))), syntax: ElmSyntaxParserLenient_TypeOrTypeAliasDeclarationWithoutDocumentation.TypeDeclarationWithoutDocumentation((headVariant: headVariant.syntax, name: name, parameters: parameters.syntax, tailVariantsReverse: tailVariantsReverse.syntax)))
            },
            elmSyntaxParserLenient_nameUppercaseNode,
            elmSyntaxParserLenient_whitespaceAndComments,
            elmSyntaxParserLenient_typeGenericListEquals,
            elmSyntaxParserLenient_whitespaceAndComments,
            parserFast_orSucceed(parserFast_symbolFollowedBy("|", elmSyntaxParserLenient_whitespaceAndComments), elmSyntaxParserLenient_ropeEmpty()),
            elmSyntaxParserLenient_variantDeclarationFollowedByWhitespaceAndComments,
            elmSyntaxParserLenient_manyWithCommentsReverse(
                parserFast_symbolFollowedBy(
                    "|",
                    parserFast_map3(
                        { (commentsBeforePipe, commentsWithExtraPipe, variantResult) in
                            (comments: elmSyntaxParserLenient_ropePrependTo(variantResult.comments, elmSyntaxParserLenient_ropePrependTo(commentsWithExtraPipe, commentsBeforePipe)), syntax: variantResult.syntax)
                        },
                        elmSyntaxParserLenient_whitespaceAndComments,
                        parserFast_orSucceed(parserFast_symbolFollowedBy("|", elmSyntaxParserLenient_whitespaceAndComments), elmSyntaxParserLenient_ropeEmpty()),
                        elmSyntaxParserLenient_variantDeclarationFollowedByWhitespaceAndComments
                    )
                )
            )
        );

    static public func elmSyntaxParserLenient_commentsToList(_ comments: ElmSyntaxParserLenient_Comments) -> List_List<ElmSyntaxNode_Node<String>> {
        elmSyntaxParserLenient_ropeToList(comments)
    }

    static public let elmSyntaxParserLenient_composablePattern:ElmSyntaxParserLenient_Parser<ElmSyntaxParserLenient_WithComments<ElmSyntaxNode_Node<ElmSyntaxPattern_Pattern>>> =
        parserFast_oneOf9(elmSyntaxParserLenient_varPattern, elmSyntaxParserLenient_qualifiedPatternWithConsumeArgs, elmSyntaxParserLenient_allPattern, elmSyntaxParserLenient_parensPattern, elmSyntaxParserLenient_recordPattern, elmSyntaxParserLenient_stringPattern, elmSyntaxParserLenient_listPattern, elmSyntaxParserLenient_numberPart, elmSyntaxParserLenient_charPattern);

    static public let elmSyntaxParserLenient_declaration:
        ElmSyntaxParserLenient_Parser<
            (comments: ElmSyntaxParserLenient_Comments,
             syntax: ElmSyntaxNode_Node<ElmSyntaxDeclaration_Declaration>
            )
        > =
        parserFast_oneOf5(elmSyntaxParserLenient_functionDeclarationWithoutDocumentation, elmSyntaxParserLenient_declarationWithDocumentation, elmSyntaxParserLenient_typeOrTypeAliasDefinitionWithoutDocumentation, elmSyntaxParserLenient_portDeclarationWithoutDocumentation, elmSyntaxParserLenient_infixDeclaration);

    static public func elmSyntaxParserLenient_declarationIsPort(_ syntaxDeclaration: ElmSyntaxDeclaration_Declaration) -> Bool {
        ({ () in return switch syntaxDeclaration {
            case ElmSyntaxDeclaration_Declaration.PortDeclaration(_):
                true;

            case ElmSyntaxDeclaration_Declaration.FunctionDeclaration(_):
                false;

            case ElmSyntaxDeclaration_Declaration.AliasDeclaration(_):
                false;

            case ElmSyntaxDeclaration_Declaration.CustomTypeDeclaration(_):
                false;

            case ElmSyntaxDeclaration_Declaration.InfixDeclaration(_):
                false;

            case ElmSyntaxDeclaration_Declaration.Destructuring(_, _):
                false;
         }
        }())
    }

    static public let elmSyntaxParserLenient_declarationWithDocumentation:ElmSyntaxParserLenient_Parser<ElmSyntaxParserLenient_WithComments<ElmSyntaxNode_Node<ElmSyntaxDeclaration_Declaration>>> =
        parserFast_validate(
            { (result) in
                ({ () in return switch result.syntax {
                    case let ElmSyntaxNode_Node.Node(_, decl):
                        ({ () in return switch decl {
                            case let ElmSyntaxDeclaration_Declaration.FunctionDeclaration(letFunctionDeclaration):
                                ({ () in return switch letFunctionDeclaration.signature {
                                    case Maybe_Maybe.Nothing:
                                        true;

                                    case let Maybe_Maybe.Just(ElmSyntaxNode_Node.Node(_, signature)):
                                        ({ () in return switch letFunctionDeclaration.declaration {
                                            case let ElmSyntaxNode_Node.Node(_, implementation):
                                                ({ () in return switch implementation.name {
                                                    case let ElmSyntaxNode_Node.Node(_, implementationName):
                                                        ({ () in return switch signature.name {
                                                            case let ElmSyntaxNode_Node.Node(_, signatureName):
                                                                basics_eq(implementationName, signatureName);
                                                         }
                                                        }());
                                                 }
                                                }());
                                         }
                                        }());
                                 }
                                }());

                            case _:
                                true;
                         }
                        }());
                 }
                }())
            },
            parserFast_map2(
                { (documentation, afterDocumentation) in
                    ({ () in let start:ElmSyntaxRange_Location =
                        elmSyntaxNode_range(documentation).start;

                     return ({ () in return switch afterDocumentation.syntax {
                        case let ElmSyntaxParserLenient_DeclarationAfterDocumentation.FunctionDeclarationAfterDocumentation(functionDeclarationAfterDocumentation):
                            ({ () in return switch functionDeclarationAfterDocumentation.signature {
                                case let Maybe_Maybe.Just(signature):
                                    ({ () in return switch signature.implementationName {
                                        case let ElmSyntaxNode_Node.Node(implementationNameRange, _):
                                            ({ () in return switch functionDeclarationAfterDocumentation.expression {
                                                case let ElmSyntaxNode_Node.Node(expressionRange, _):
                                                    (comments: afterDocumentation.comments,
                                                     syntax:
                                                        ElmSyntaxNode_Node.Node(
                                                            (end: expressionRange.end, start: start),
                                                            ElmSyntaxDeclaration_Declaration.FunctionDeclaration(
                                                                (declaration: ElmSyntaxNode_Node.Node((end: expressionRange.end, start: implementationNameRange.start), (arguments: functionDeclarationAfterDocumentation.arguments, expression: functionDeclarationAfterDocumentation.expression, name: signature.implementationName)),
                                                                 documentation: Maybe_Maybe.Just(documentation),
                                                                 signature:
                                                                    Maybe_Maybe.Just(
                                                                        elmSyntaxNode_combine(
                                                                            { (name, value) in
                                                                                (name: name, typeAnnotation: value)
                                                                            },
                                                                            functionDeclarationAfterDocumentation.startName,
                                                                            signature.typeAnnotation
                                                                        )
                                                                    )
                                                                )
                                                            )
                                                        )
                                                    );
                                             }
                                            }());
                                     }
                                    }());

                                case Maybe_Maybe.Nothing:
                                    ({ () in return switch functionDeclarationAfterDocumentation.startName {
                                        case let ElmSyntaxNode_Node.Node(startNameRange, _):
                                            ({ () in return switch functionDeclarationAfterDocumentation.expression {
                                                case let ElmSyntaxNode_Node.Node(expressionRange, _):
                                                    (comments: afterDocumentation.comments, syntax: ElmSyntaxNode_Node.Node((end: expressionRange.end, start: start), ElmSyntaxDeclaration_Declaration.FunctionDeclaration((declaration: ElmSyntaxNode_Node.Node((end: expressionRange.end, start: startNameRange.start), (arguments: functionDeclarationAfterDocumentation.arguments, expression: functionDeclarationAfterDocumentation.expression, name: functionDeclarationAfterDocumentation.startName)), documentation: Maybe_Maybe.Just(documentation), signature: Maybe_Maybe.Nothing))));
                                             }
                                            }());
                                     }
                                    }());
                             }
                            }());

                        case let ElmSyntaxParserLenient_DeclarationAfterDocumentation.TypeDeclarationAfterDocumentation(typeDeclarationAfterDocumentation):
                            ({ () in let end:ElmSyntaxRange_Location =
                                ({ () in return switch typeDeclarationAfterDocumentation.tailVariantsReverse {
                                    case let List_List.Cons(ElmSyntaxNode_Node.Node(range, _), _):
                                        range.end;

                                    case List_List.Empty:
                                        ({ () in return switch typeDeclarationAfterDocumentation.headVariant {
                                            case let ElmSyntaxNode_Node.Node(headVariantRange, _):
                                                headVariantRange.end;
                                         }
                                        }());
                                 }
                                }());

                             return (comments: afterDocumentation.comments, syntax: ElmSyntaxNode_Node.Node((end: end, start: start), ElmSyntaxDeclaration_Declaration.CustomTypeDeclaration((constructors: List_List.Cons(typeDeclarationAfterDocumentation.headVariant, list_reverse(typeDeclarationAfterDocumentation.tailVariantsReverse)), documentation: Maybe_Maybe.Just(documentation), generics: typeDeclarationAfterDocumentation.parameters, name: typeDeclarationAfterDocumentation.name))))
                            }());

                        case let ElmSyntaxParserLenient_DeclarationAfterDocumentation.TypeAliasDeclarationAfterDocumentation(typeAliasDeclarationAfterDocumentation):
                            ({ () in return switch typeAliasDeclarationAfterDocumentation.typeAnnotation {
                                case let ElmSyntaxNode_Node.Node(typeAnnotationRange, _):
                                    (comments: afterDocumentation.comments, syntax: ElmSyntaxNode_Node.Node((end: typeAnnotationRange.end, start: start), ElmSyntaxDeclaration_Declaration.AliasDeclaration((documentation: Maybe_Maybe.Just(documentation), generics: typeAliasDeclarationAfterDocumentation.parameters, name: typeAliasDeclarationAfterDocumentation.name, typeAnnotation: typeAliasDeclarationAfterDocumentation.typeAnnotation))));
                             }
                            }());

                        case let ElmSyntaxParserLenient_DeclarationAfterDocumentation.PortDeclarationAfterDocumentation(portDeclarationAfterName):
                            ({ () in return switch portDeclarationAfterName.typeAnnotation {
                                case let ElmSyntaxNode_Node.Node(typeAnnotationRange, _):
                                    (comments: elmSyntaxParserLenient_ropeFilledPrependTo(afterDocumentation.comments, elmSyntaxParserLenient_ropeOne(documentation)), syntax: ElmSyntaxNode_Node.Node((end: typeAnnotationRange.end, start: portDeclarationAfterName.startLocation), ElmSyntaxDeclaration_Declaration.PortDeclaration((name: portDeclarationAfterName.name, typeAnnotation: portDeclarationAfterName.typeAnnotation))));
                             }
                            }());
                      }
                     }())
                    }())
                },
                elmSyntaxParserLenient_documentationComment,
                elmSyntaxParserLenient_whitespaceAndCommentsEndsTopIndentedFollowedByWithComments(parserFast_oneOf3(elmSyntaxParserLenient_functionAfterDocumentation, elmSyntaxParserLenient_typeOrTypeAliasDefinitionAfterDocumentation, elmSyntaxParserLenient_portDeclarationAfterDocumentation))
            )
        );

    static public let elmSyntaxParserLenient_declarations:
        ElmSyntaxParserLenient_Parser<
            (comments: ElmSyntaxParserLenient_Comments,
             syntax: List_List<ElmSyntaxNode_Node<ElmSyntaxDeclaration_Declaration>>
            )
        > =
        elmSyntaxParserLenient_manyWithComments(
            elmSyntaxParserLenient_topIndentedFollowedBy(
                parserFast_map2(
                    { (declarationParsed, commentsAfter) in
                        (comments: elmSyntaxParserLenient_ropePrependTo(commentsAfter, declarationParsed.comments), syntax: declarationParsed.syntax)
                    },
                    elmSyntaxParserLenient_declaration,
                    elmSyntaxParserLenient_whitespaceAndComments
                )
            )
        );

    static public let elmSyntaxParserLenient_documentationComment:ElmSyntaxParserLenient_Parser<ElmSyntaxNode_Node<ElmSyntaxDocumentation_Documentation>> =
        parserFast_nestableMultiCommentMapWithRange(ElmSyntaxNode_Node.Node, (first: "{", second: "-"), (first: "-", second: "}"));

    static public let elmSyntaxParserLenient_effectModuleDefinition:ElmSyntaxParserLenient_Parser<ElmSyntaxParserLenient_WithComments<ElmSyntaxNode_Node<ElmSyntaxModule_Module>>> =
        parserFast_map7WithRange(
            { (range, commentsAfterEffect, commentsAfterModule, name, commentsAfterName, whereClauses, commentsAfterWhereClauses, exp) in
                (comments: elmSyntaxParserLenient_ropePrependTo(exp.comments, elmSyntaxParserLenient_ropePrependTo(commentsAfterWhereClauses, elmSyntaxParserLenient_ropePrependTo(whereClauses.comments, elmSyntaxParserLenient_ropePrependTo(commentsAfterName, elmSyntaxParserLenient_ropePrependTo(commentsAfterModule, commentsAfterEffect))))), syntax: ElmSyntaxNode_Node.Node(range, ElmSyntaxModule_Module.EffectModule((command: whereClauses.syntax.command, exposingList: exp.syntax, moduleName: name, subscription: whereClauses.syntax.subscription))))
            },
            parserFast_keywordFollowedBy("effect", elmSyntaxParserLenient_whitespaceAndComments),
            parserFast_keywordFollowedBy("module", elmSyntaxParserLenient_whitespaceAndComments),
            elmSyntaxParserLenient_moduleName,
            elmSyntaxParserLenient_whitespaceAndComments,
            elmSyntaxParserLenient_effectWhereClauses,
            elmSyntaxParserLenient_whitespaceAndComments,
            elmSyntaxParserLenient_exposeDefinition
        );

    static public let elmSyntaxParserLenient_effectWhereClause:
        ElmSyntaxParserLenient_Parser<
            ElmSyntaxParserLenient_WithComments<
                (first: String,
                 second: ElmSyntaxNode_Node<String>
                )
            >
        > =
        parserFast_map4(
            { (fnName, commentsAfterFnName, commentsAfterEqual, fnTypeName) in
                (comments: elmSyntaxParserLenient_ropePrependTo(commentsAfterEqual, commentsAfterFnName), syntax: (first: fnName, second: fnTypeName))
            },
            elmSyntaxParserLenient_nameLowercaseUnderscoreSuffixingKeywords,
            elmSyntaxParserLenient_whitespaceAndComments,
            parserFast_symbolFollowedBy("=", elmSyntaxParserLenient_whitespaceAndComments),
            elmSyntaxParserLenient_nameUppercaseNode
        );

    static public let elmSyntaxParserLenient_effectWhereClauses:
        ElmSyntaxParserLenient_Parser<
            ElmSyntaxParserLenient_WithComments<
                (command: Maybe_Maybe<ElmSyntaxNode_Node<String>>,
                 subscription: Maybe_Maybe<ElmSyntaxNode_Node<String>>
                )
            >
        > =
        parserFast_map2(
            { (commentsBefore, whereResult) in
                (comments: elmSyntaxParserLenient_ropePrependTo(whereResult.comments, commentsBefore), syntax: whereResult.syntax)
            },
            parserFast_keywordFollowedBy("where", elmSyntaxParserLenient_whitespaceAndComments),
            elmSyntaxParserLenient_whereBlock
        );

    static public func elmSyntaxParserLenient_endsTopIndented<A: Sendable>(_ parser: ElmSyntaxParserLenient_Parser<A>) -> ElmSyntaxParserLenient_Parser<A> {
        parserFast_validateEndColumnIndentation(
            { (column, indent) in
                ({ () in return switch indent {
                    case List_List.Empty:
                        basics_eq(column, 1.0);

                    case let List_List.Cons(highestIndent, _):
                        basics_eq(basics_sub(column, highestIndent), 0.0);
                 }
                }())
            },
            parser
        )
    }

    static public func elmSyntaxParserLenient_escapedCharValueMap<Res: Sendable>(_ charToRes: @Sendable (Character) -> Res) -> ElmSyntaxParserLenient_Parser<Res> {
        parserFast_oneOf7(
            parserFast_symbol("'", charToRes("'")),
            parserFast_symbol("\"", charToRes("\"")),
            parserFast_symbol("n", charToRes("\n")),
            parserFast_symbol("t", charToRes("\t")),
            parserFast_symbol("r", charToRes("\r")),
            parserFast_symbol("\\", charToRes("\\")),
            parserFast_symbolFollowedBy(
                "u{",
                parserFast_followedBySymbol(
                    "}",
                    parserFast_ifFollowedByWhileMapWithoutLinebreak(
                        { (hex) in
                            charToRes(char_fromCode(elmSyntaxParserLenient_hexStringToInt(hex)))
                        },
                        char_isHexDigit,
                        char_isHexDigit
                    )
                )
            )
        )
    }

    static public let elmSyntaxParserLenient_expose:
        ElmSyntaxParserLenient_Parser<
            (comments: ElmSyntaxParserLenient_Comments,
             syntax: ElmSyntaxNode_Node<ElmSyntaxExposing_TopLevelExpose>
            )
        > =
        parserFast_oneOf3(elmSyntaxParserLenient_functionExpose, elmSyntaxParserLenient_typeExpose, elmSyntaxParserLenient_infixExpose);

    static public let elmSyntaxParserLenient_exposeDefinition:ElmSyntaxParserLenient_Parser<ElmSyntaxParserLenient_WithComments<ElmSyntaxNode_Node<ElmSyntaxExposing_Exposing>>> =
        parserFast_map2WithRange(
            { (range, commentsAfterExposing, exposingListInnerResult) in
                (comments: elmSyntaxParserLenient_ropePrependTo(exposingListInnerResult.comments, commentsAfterExposing), syntax: ElmSyntaxNode_Node.Node(range, exposingListInnerResult.syntax))
            },
            parserFast_symbolFollowedBy("exposing", elmSyntaxParserLenient_whitespaceAndComments),
            elmSyntaxParserLenient_exposing_
        );

    static public func elmSyntaxParserLenient_exposingWithinParensExplicitFollowedByWhitespaceAndCommentsMap<Syntax: Sendable>(_ exposingToSyntax: @Sendable (ElmSyntaxExposing_Exposing) -> Syntax) -> ParserFast_Parser<ElmSyntaxParserLenient_WithComments<Syntax>> {
        parserFast_map4(
            { (commentsBeforeHeadElement, headElement, commentsAfterHeadElement, tailElements) in
                (comments: elmSyntaxParserLenient_ropePrependTo(tailElements.comments, elmSyntaxParserLenient_ropePrependTo(commentsAfterHeadElement, elmSyntaxParserLenient_ropePrependTo(headElement.comments, commentsBeforeHeadElement))), syntax: exposingToSyntax(ElmSyntaxExposing_Exposing.Explicit(List_List.Cons(headElement.syntax, tailElements.syntax))))
            },
            parserFast_orSucceed(parserFast_symbolFollowedBy(",", elmSyntaxParserLenient_whitespaceAndComments), elmSyntaxParserLenient_ropeEmpty()),
            elmSyntaxParserLenient_expose,
            elmSyntaxParserLenient_whitespaceAndComments,
            elmSyntaxParserLenient_manyWithComments(
                parserFast_symbolFollowedBy(
                    ",",
                    parserFast_map4(
                        { (commentsBefore, commentsWithExtraComma, result, commentsAfter) in
                            (comments: elmSyntaxParserLenient_ropePrependTo(commentsAfter, elmSyntaxParserLenient_ropePrependTo(result.comments, elmSyntaxParserLenient_ropePrependTo(commentsWithExtraComma, commentsBefore))), syntax: result.syntax)
                        },
                        elmSyntaxParserLenient_whitespaceAndComments,
                        parserFast_orSucceed(parserFast_symbolFollowedBy(",", elmSyntaxParserLenient_whitespaceAndComments), elmSyntaxParserLenient_ropeEmpty()),
                        elmSyntaxParserLenient_expose,
                        elmSyntaxParserLenient_whitespaceAndComments
                    )
                )
            )
        )
    }

    static public let elmSyntaxParserLenient_exposing_:
        ElmSyntaxParserLenient_Parser<
            (comments: ElmSyntaxParserLenient_Comments,
             syntax: ElmSyntaxExposing_Exposing
            )
        > =
        parserFast_followedBySymbol(
            ")",
            parserFast_symbolFollowedBy(
                "(",
                parserFast_map2(
                    { (commentsBefore, inner) in
                        (comments: elmSyntaxParserLenient_ropePrependTo(inner.comments, commentsBefore), syntax: inner.syntax)
                    },
                    elmSyntaxParserLenient_whitespaceAndComments,
                    parserFast_oneOf3(
                        parserFast_mapWithRange(
                            { (range, comments) in
                                (comments: comments, syntax: ElmSyntaxExposing_Exposing.All(range))
                            },
                            parserFast_symbolFollowedBy("...", elmSyntaxParserLenient_whitespaceAndComments)
                        ),
                        parserFast_mapWithRange(
                            { (range, comments) in
                                (comments: comments, syntax: ElmSyntaxExposing_Exposing.All(range))
                            },
                            parserFast_symbolFollowedBy("..", elmSyntaxParserLenient_whitespaceAndComments)
                        ),
                        elmSyntaxParserLenient_exposingWithinParensExplicitFollowedByWhitespaceAndCommentsMap(basics_identity)
                    )
                )
            )
        );

    static public let elmSyntaxParserLenient_expression:
        ElmSyntaxParserLenient_Parser<
            (comments: ElmSyntaxParserLenient_Comments,
             syntax: ElmSyntaxNode_Node<ElmSyntaxExpression_Expression>
            )
        > =
        elmSyntaxParserLenient_expressionFollowedByWhitespaceAndComments;

    static public let elmSyntaxParserLenient_expressionAfterOpeningSquareBracket:ElmSyntaxParserLenient_Parser<ElmSyntaxParserLenient_WithComments<ElmSyntaxNode_Node<ElmSyntaxExpression_Expression>>> =
        parserFast_oneOf2(
            elmSyntaxParserLenient_glslExpressionAfterOpeningSquareBracket,
            parserFast_map2WithRange(
                { (range, commentsBefore, elements) in
                    (comments: elmSyntaxParserLenient_ropePrependTo(elements.comments, commentsBefore), syntax: ElmSyntaxNode_Node.Node((end: range.end, start: (column: basics_sub(range.start.column, 1.0), row: range.start.row)), elements.syntax))
                },
                elmSyntaxParserLenient_whitespaceAndComments,
                parserFast_oneOf2(
                    parserFast_symbol("]", (comments: elmSyntaxParserLenient_ropeEmpty(), syntax: ElmSyntaxExpression_Expression.ListExpr(List_List.Empty))),
                    parserFast_followedBySymbol(
                        "]",
                        parserFast_map3(
                            { (commentsBeforeHead, head, tail) in
                                (comments: elmSyntaxParserLenient_ropePrependTo(tail.comments, elmSyntaxParserLenient_ropePrependTo(head.comments, commentsBeforeHead)), syntax: ElmSyntaxExpression_Expression.ListExpr(List_List.Cons(head.syntax, tail.syntax)))
                            },
                            parserFast_orSucceed(parserFast_symbolFollowedBy(",", elmSyntaxParserLenient_whitespaceAndComments), elmSyntaxParserLenient_ropeEmpty()),
                            elmSyntaxParserLenient_expressionFollowedByWhitespaceAndComments,
                            elmSyntaxParserLenient_manyWithComments(
                                parserFast_symbolFollowedBy(
                                    ",",
                                    parserFast_map3(
                                        { (commentsBefore, commentsWithExtraComma, expressionResult) in
                                            (comments: elmSyntaxParserLenient_ropePrependTo(expressionResult.comments, elmSyntaxParserLenient_ropePrependTo(commentsWithExtraComma, commentsBefore)), syntax: expressionResult.syntax)
                                        },
                                        elmSyntaxParserLenient_whitespaceAndComments,
                                        parserFast_orSucceed(parserFast_symbolFollowedBy(",", elmSyntaxParserLenient_whitespaceAndComments), elmSyntaxParserLenient_ropeEmpty()),
                                        elmSyntaxParserLenient_expressionFollowedByWhitespaceAndComments
                                    )
                                )
                            )
                        )
                    )
                )
            )
        );

    static public let elmSyntaxParserLenient_expressionCaseOfFollowedByOptimisticLayout:ElmSyntaxParserLenient_Parser<ElmSyntaxParserLenient_WithComments<ElmSyntaxNode_Node<ElmSyntaxExpression_Expression>>> =
        parserFast_map4WithStartLocation(
            { (start, commentsAfterCase, casedExpressionResult, commentsAfterOf, casesResult) in
                ({ () in return switch casesResult.syntax {
                    case let (first: firstCase, second: lastToSecondCase):
                        (comments: elmSyntaxParserLenient_ropePrependTo(casesResult.comments, elmSyntaxParserLenient_ropePrependTo(commentsAfterOf, elmSyntaxParserLenient_ropePrependTo(casedExpressionResult.comments, commentsAfterCase))),
                         syntax:
                            ElmSyntaxNode_Node.Node(
                                (end:
                                    ({ () in return switch lastToSecondCase {
                                        case let List_List.Cons((first: _, second: ElmSyntaxNode_Node.Node(lastCaseExpressionRange, _)), _):
                                            lastCaseExpressionRange.end;

                                        case List_List.Empty:
                                            ({ () in return switch firstCase {
                                                case let (first: _, second: ElmSyntaxNode_Node.Node(firstCaseExpressionRange, _)):
                                                    firstCaseExpressionRange.end;
                                             }
                                            }());
                                     }
                                    }()),
                                 start: start
                                ),
                                ElmSyntaxExpression_Expression.CaseExpression((cases: List_List.Cons(firstCase, list_reverse(lastToSecondCase)), expression: casedExpressionResult.syntax))
                            )
                        );
                 }
                }())
            },
            parserFast_keywordFollowedBy("case", elmSyntaxParserLenient_whitespaceAndComments),
            elmSyntaxParserLenient_expressionFollowedByWhitespaceAndComments,
            parserFast_keywordFollowedBy("of", elmSyntaxParserLenient_whitespaceAndComments),
            parserFast_withIndentSetToColumn(elmSyntaxParserLenient_caseStatementsFollowedByWhitespaceAndComments)
        );

    static public let elmSyntaxParserLenient_expressionChar:ElmSyntaxParserLenient_Parser<ElmSyntaxParserLenient_WithComments<ElmSyntaxNode_Node<ElmSyntaxExpression_Expression>>> =
        elmSyntaxParserLenient_characterLiteralMapWithRange(
            { (range, char) in
                (comments: elmSyntaxParserLenient_ropeEmpty(), syntax: ElmSyntaxNode_Node.Node(range, ElmSyntaxExpression_Expression.CharLiteral(char)))
            }
        );

    static public let elmSyntaxParserLenient_expressionFollowedByWhitespaceAndComments:ElmSyntaxParserLenient_Parser<ElmSyntaxParserLenient_WithComments<ElmSyntaxNode_Node<ElmSyntaxExpression_Expression>>> =
        parserFast_map2(
            { (expressionResult, maybeCases) in
                ({ () in return switch maybeCases {
                    case Maybe_Maybe.Nothing:
                        expressionResult;

                    case let Maybe_Maybe.Just(cases):
                        (comments: elmSyntaxParserLenient_ropePrependTo(cases.comments, expressionResult.comments), syntax: ElmSyntaxNode_Node.Node((end: cases.end, start: elmSyntaxNode_range(expressionResult.syntax).start), ElmSyntaxExpression_Expression.CaseExpression((cases: cases.cases, expression: expressionResult.syntax))));
                 }
                }())
            },
            parserFast_loopWhileSucceedsOntoResultFromParser(
                elmSyntaxParserLenient_infixOperatorAndThen(
                    (afterCommitting:
                        { (generated_record) in
                            generated_record.extensionRightParser
                        },
                     validateRightPrecedence: Maybe_Maybe.Just
                    )
                ),
                elmSyntaxParserLenient_subExpressionMaybeAppliedFollowedByWhitespaceAndComments,
                { (extensionRightResult, leftNodeWithComments) in
                    (comments: elmSyntaxParserLenient_ropePrependTo(extensionRightResult.comments, leftNodeWithComments.comments), syntax: elmSyntaxParserLenient_applyExtensionRight(extensionRightResult.syntax, leftNodeWithComments.syntax))
                },
                basics_identity
            ),
            parserFast_orSucceed(
                parserFast_keywordFollowedBy(
                    "case",
                    parserFast_map2(
                        { (commentsAfterCase, casesResult) in
                            ({ () in return switch casesResult.syntax {
                                case let (first: firstCase, second: lastToSecondCase):
                                    Maybe_Maybe.Just(
                                        (cases: List_List.Cons(firstCase, list_reverse(lastToSecondCase)),
                                         comments: elmSyntaxParserLenient_ropePrependTo(casesResult.comments, commentsAfterCase),
                                         end:
                                            ({ () in return switch lastToSecondCase {
                                                case let List_List.Cons((first: _, second: ElmSyntaxNode_Node.Node(lastCaseExpressionRange, _)), _):
                                                    lastCaseExpressionRange.end;

                                                case List_List.Empty:
                                                    ({ () in return switch firstCase {
                                                        case let (first: _, second: ElmSyntaxNode_Node.Node(firstCaseExpressionRange, _)):
                                                            firstCaseExpressionRange.end;
                                                     }
                                                    }());
                                             }
                                            }())
                                        )
                                    );
                             }
                            }())
                        },
                        elmSyntaxParserLenient_whitespaceAndComments,
                        parserFast_withIndentSetToColumn(
                            parserFast_lazy(
                                { (_) in
                                    elmSyntaxParserLenient_caseStatementsFollowedByWhitespaceAndComments
                                }
                            )
                        )
                    )
                ),
                Maybe_Maybe.Nothing
            )
        );

    static public let elmSyntaxParserLenient_expressionIfThenElseFollowedByOptimisticLayout:ElmSyntaxParserLenient_Parser<ElmSyntaxParserLenient_WithComments<ElmSyntaxNode_Node<ElmSyntaxExpression_Expression>>> =
        parserFast_map6WithStartLocation(
            { (start, commentsAfterIf, condition, commentsAfterThen, ifTrue, commentsAfterElse, ifFalse) in
                ({ () in return switch ifFalse.syntax {
                    case let ElmSyntaxNode_Node.Node(ifFalseRange, _):
                        (comments: elmSyntaxParserLenient_ropePrependTo(ifFalse.comments, elmSyntaxParserLenient_ropePrependTo(commentsAfterElse, elmSyntaxParserLenient_ropePrependTo(ifTrue.comments, elmSyntaxParserLenient_ropePrependTo(commentsAfterThen, elmSyntaxParserLenient_ropePrependTo(condition.comments, commentsAfterIf))))), syntax: ElmSyntaxNode_Node.Node((end: ifFalseRange.end, start: start), ElmSyntaxExpression_Expression.IfBlock(condition.syntax, ifTrue.syntax, ifFalse.syntax)));
                 }
                }())
            },
            parserFast_keywordFollowedBy("if", elmSyntaxParserLenient_whitespaceAndComments),
            elmSyntaxParserLenient_expressionFollowedByWhitespaceAndComments,
            parserFast_oneOf2(parserFast_keywordFollowedBy("then", elmSyntaxParserLenient_whitespaceAndComments), parserFast_keywordFollowedBy("->", elmSyntaxParserLenient_whitespaceAndComments)),
            elmSyntaxParserLenient_expressionFollowedByWhitespaceAndComments,
            parserFast_keywordFollowedBy("else", elmSyntaxParserLenient_whitespaceAndComments),
            elmSyntaxParserLenient_expressionFollowedByWhitespaceAndComments
        );

    static public let elmSyntaxParserLenient_expressionLambdaFollowedByWhitespaceAndComments:ElmSyntaxParserLenient_Parser<ElmSyntaxParserLenient_WithComments<ElmSyntaxNode_Node<ElmSyntaxExpression_Expression>>> =
        parserFast_map6WithStartLocation(
            { (start, commentsAfterBackslash, firstArg, commentsAfterFirstArg, secondUpArgs, commentsAfterArrow, expressionResult) in
                ({ () in return switch expressionResult.syntax {
                    case let ElmSyntaxNode_Node.Node(expressionRange, _):
                        (comments: elmSyntaxParserLenient_ropePrependTo(expressionResult.comments, elmSyntaxParserLenient_ropePrependTo(commentsAfterArrow, elmSyntaxParserLenient_ropePrependTo(secondUpArgs.comments, elmSyntaxParserLenient_ropePrependTo(commentsAfterFirstArg, elmSyntaxParserLenient_ropePrependTo(firstArg.comments, commentsAfterBackslash))))), syntax: ElmSyntaxNode_Node.Node((end: expressionRange.end, start: start), ElmSyntaxExpression_Expression.LambdaExpression((args: List_List.Cons(firstArg.syntax, secondUpArgs.syntax), expression: expressionResult.syntax))));
                 }
                }())
            },
            parserFast_symbolFollowedBy("\\", elmSyntaxParserLenient_whitespaceAndComments),
            elmSyntaxParserLenient_patternNotSpaceSeparated,
            elmSyntaxParserLenient_whitespaceAndComments,
            elmSyntaxParserLenient_untilWithComments(
                parserFast_oneOf3(parserFast_symbol("->", ()), parserFast_symbol("=>", ()), parserFast_symbol(".", ())),
                parserFast_map2(
                    { (patternResult, commentsAfter) in
                        (comments: elmSyntaxParserLenient_ropePrependTo(commentsAfter, patternResult.comments), syntax: patternResult.syntax)
                    },
                    elmSyntaxParserLenient_patternNotSpaceSeparated,
                    elmSyntaxParserLenient_whitespaceAndComments
                )
            ),
            elmSyntaxParserLenient_whitespaceAndComments,
            elmSyntaxParserLenient_expressionFollowedByWhitespaceAndComments
        );

    static public let elmSyntaxParserLenient_expressionListOrGlsl:ElmSyntaxParserLenient_Parser<ElmSyntaxParserLenient_WithComments<ElmSyntaxNode_Node<ElmSyntaxExpression_Expression>>> =
        parserFast_symbolFollowedBy("[", elmSyntaxParserLenient_expressionAfterOpeningSquareBracket);

    static public let elmSyntaxParserLenient_expressionNegation:ElmSyntaxParserLenient_Parser<ElmSyntaxParserLenient_WithComments<ElmSyntaxNode_Node<ElmSyntaxExpression_Expression>>> =
        parserFast_symbolBacktrackableFollowedBy(
            "-",
            parserFast_offsetSourceAndThen(
                { (offset, source) in
                    ({ () in return switch string_slice(basics_sub(offset, 2.0), basics_sub(offset, 1.0), source) {
                        case " ":
                            elmSyntaxParserLenient_negationAfterMinus;

                        case "(":
                            elmSyntaxParserLenient_negationAfterMinus;

                        case ")":
                            elmSyntaxParserLenient_negationAfterMinus;

                        case "}":
                            elmSyntaxParserLenient_negationAfterMinus;

                        case ">":
                            elmSyntaxParserLenient_negationAfterMinus;

                        case "=":
                            elmSyntaxParserLenient_negationAfterMinus;

                        case ",":
                            elmSyntaxParserLenient_negationAfterMinus;

                        case "n":
                            ({ () in return switch basics_and(basics_eq(string_slice(basics_sub(offset, 3.0), basics_sub(offset, 2.0), source), "i"), basics_not(string_all(charExtra_isLatinAlphaNumOrUnderscoreFast, string_slice(basics_sub(offset, 4.0), basics_sub(offset, 3.0), source)))) {
                                case true:
                                    elmSyntaxParserLenient_negationAfterMinus;

                                case false:
                                    parserFast_problem();
                             }
                            }());

                        case _:
                            parserFast_problem();
                     }
                    }())
                }
            )
        );

    static public let elmSyntaxParserLenient_expressionNumber:ElmSyntaxParserLenient_Parser<ElmSyntaxParserLenient_WithComments<ElmSyntaxNode_Node<ElmSyntaxExpression_Expression>>> =
        parserFast_floatOrIntegerDecimalOrHexadecimalMapWithRange(
            { (range, n) in
                (comments: elmSyntaxParserLenient_ropeEmpty(), syntax: ElmSyntaxNode_Node.Node(range, ElmSyntaxExpression_Expression.Floatable(n)))
            },
            { (range, n) in
                (comments: elmSyntaxParserLenient_ropeEmpty(), syntax: ElmSyntaxNode_Node.Node(range, ElmSyntaxExpression_Expression.Integer(n)))
            },
            { (range, n) in
                (comments: elmSyntaxParserLenient_ropeEmpty(), syntax: ElmSyntaxNode_Node.Node(range, ElmSyntaxExpression_Expression.Hex(n)))
            }
        );

    static public let elmSyntaxParserLenient_expressionParenthesizedOrTupleOrTripleAfterOpeningParens:ElmSyntaxParserLenient_Parser<ElmSyntaxParserLenient_WithComments<ElmSyntaxNode_Node<ElmSyntaxExpression_Expression>>> =
        elmSyntaxParserLenient_followedByMultiRecordAccess(
            parserFast_map3WithRange(
                { (rangeAfterOpeningParens, commentsBeforeFirstPart, firstPart, tailParts) in
                    (comments: elmSyntaxParserLenient_ropePrependTo(tailParts.comments, elmSyntaxParserLenient_ropePrependTo(firstPart.comments, commentsBeforeFirstPart)),
                     syntax:
                        ({ () in return switch tailParts.syntax {
                            case ElmSyntaxParserLenient_Tupled.TupledParenthesized(_, _):
                                ElmSyntaxNode_Node.Node((end: rangeAfterOpeningParens.end, start: (column: basics_sub(rangeAfterOpeningParens.start.column, 1.0), row: rangeAfterOpeningParens.start.row)), ElmSyntaxExpression_Expression.ParenthesizedExpression(firstPart.syntax));

                            case let ElmSyntaxParserLenient_Tupled.TupledTwoOrThree(secondPart, maybeThirdPart):
                                ElmSyntaxNode_Node.Node(
                                    (end: rangeAfterOpeningParens.end, start: (column: basics_sub(rangeAfterOpeningParens.start.column, 1.0), row: rangeAfterOpeningParens.start.row)),
                                    ({ () in return switch maybeThirdPart {
                                        case Maybe_Maybe.Nothing:
                                            ElmSyntaxExpression_Expression.TupledExpression(List_List.Cons(firstPart.syntax, List_List.Cons(secondPart, List_List.Empty)));

                                        case let Maybe_Maybe.Just(thirdPart):
                                            ElmSyntaxExpression_Expression.TupledExpression(List_List.Cons(firstPart.syntax, List_List.Cons(secondPart, List_List.Cons(thirdPart, List_List.Empty))));
                                     }
                                    }())
                                );
                         }
                        }())
                    )
                },
                elmSyntaxParserLenient_whitespaceAndComments,
                elmSyntaxParserLenient_expressionFollowedByWhitespaceAndComments,
                parserFast_oneOf2(
                    parserFast_symbol(")", (comments: elmSyntaxParserLenient_ropeEmpty(), syntax: ElmSyntaxParserLenient_Tupled.TupledParenthesized((), ()))),
                    parserFast_symbolFollowedBy(
                        ",",
                        parserFast_map3(
                            { (commentsBefore, partResult, maybeThirdPart) in
                                (comments: elmSyntaxParserLenient_ropePrependTo(maybeThirdPart.comments, elmSyntaxParserLenient_ropePrependTo(partResult.comments, commentsBefore)), syntax: ElmSyntaxParserLenient_Tupled.TupledTwoOrThree(partResult.syntax, maybeThirdPart.syntax))
                            },
                            elmSyntaxParserLenient_whitespaceAndComments,
                            elmSyntaxParserLenient_expressionFollowedByWhitespaceAndComments,
                            parserFast_oneOf2(
                                parserFast_symbol(")", (comments: elmSyntaxParserLenient_ropeEmpty(), syntax: Maybe_Maybe.Nothing)),
                                parserFast_symbolFollowedBy(
                                    ",",
                                    parserFast_followedBySymbol(
                                        ")",
                                        parserFast_map2(
                                            { (commentsBefore, partResult) in
                                                (comments: elmSyntaxParserLenient_ropePrependTo(partResult.comments, commentsBefore), syntax: Maybe_Maybe.Just(partResult.syntax))
                                            },
                                            elmSyntaxParserLenient_whitespaceAndComments,
                                            elmSyntaxParserLenient_expressionFollowedByWhitespaceAndComments
                                        )
                                    )
                                )
                            )
                        )
                    )
                )
            )
        );

    static public let elmSyntaxParserLenient_expressionQualifiedOrVariantOrRecordConstructorReferenceFollowedByRecordAccess:ElmSyntaxParserLenient_Parser<ElmSyntaxParserLenient_WithComments<ElmSyntaxNode_Node<ElmSyntaxExpression_Expression>>> =
        elmSyntaxParserLenient_followedByMultiRecordAccess(
            parserFast_map2WithRange(
                { (range, firstName, after) in
                    (comments: elmSyntaxParserLenient_ropeEmpty(),
                     syntax:
                        ElmSyntaxNode_Node.Node(
                            range,
                            ({ () in return switch after {
                                case Maybe_Maybe.Nothing:
                                    ElmSyntaxExpression_Expression.FunctionOrValue(List_List.Empty, firstName);

                                case let Maybe_Maybe.Just((first: qualificationAfter, second: unqualified)):
                                    ElmSyntaxExpression_Expression.FunctionOrValue(List_List.Cons(firstName, qualificationAfter), unqualified);
                             }
                            }())
                        )
                    )
                },
                elmSyntaxParserLenient_nameUppercase,
                elmSyntaxParserLenient_maybeDotReferenceExpressionTuple
            )
        );

    static public let elmSyntaxParserLenient_expressionRecordAccessFunction:ElmSyntaxParserLenient_Parser<ElmSyntaxParserLenient_WithComments<ElmSyntaxNode_Node<ElmSyntaxExpression_Expression>>> =
        parserFast_symbolFollowedBy(
            ".",
            elmSyntaxParserLenient_nameLowercaseMapWithRange(
                { (range, field) in
                    (comments: elmSyntaxParserLenient_ropeEmpty(), syntax: ElmSyntaxNode_Node.Node(elmSyntaxParserLenient_rangeMoveStartLeftByOneColumn(range), ElmSyntaxExpression_Expression.RecordAccessFunction(string_append(".", field))))
                }
            )
        );

    static public let elmSyntaxParserLenient_expressionRecordFollowedByRecordAccess:ElmSyntaxParserLenient_Parser<ElmSyntaxParserLenient_WithComments<ElmSyntaxNode_Node<ElmSyntaxExpression_Expression>>> =
        parserFast_symbolFollowedBy(
            "{",
            elmSyntaxParserLenient_followedByMultiRecordAccess(
                parserFast_map2WithRange(
                    { (range, commentsBefore, afterCurly) in
                        (comments: elmSyntaxParserLenient_ropePrependTo(afterCurly.comments, commentsBefore), syntax: ElmSyntaxNode_Node.Node(elmSyntaxParserLenient_rangeMoveStartLeftByOneColumn(range), afterCurly.syntax))
                    },
                    elmSyntaxParserLenient_whitespaceAndComments,
                    elmSyntaxParserLenient_recordContentsFollowedByCurlyEnd
                )
            )
        );

    static public let elmSyntaxParserLenient_expressionStartingWithParensOpeningIfNecessaryFollowedByRecordAccess:ElmSyntaxParserLenient_Parser<ElmSyntaxParserLenient_WithComments<ElmSyntaxNode_Node<ElmSyntaxExpression_Expression>>> =
        parserFast_symbolFollowedBy(
            "(",
            parserFast_oneOf3(
                parserFast_symbolWithEndLocation(
                    ")",
                    { (end) in
                        (comments: elmSyntaxParserLenient_ropeEmpty(), syntax: ElmSyntaxNode_Node.Node((end: end, start: (column: basics_sub(end.column, 2.0), row: end.row)), ElmSyntaxExpression_Expression.UnitExpr))
                    }
                ),
                elmSyntaxParserLenient_allowedPrefixOperatorFollowedByClosingParensOneOf,
                elmSyntaxParserLenient_expressionParenthesizedOrTupleOrTripleAfterOpeningParens
            )
        );

    static public let elmSyntaxParserLenient_expressionString:ElmSyntaxParserLenient_Parser<ElmSyntaxParserLenient_WithComments<ElmSyntaxNode_Node<ElmSyntaxExpression_Expression>>> =
        elmSyntaxParserLenient_singleOrTripleQuotedStringLiteralMapWithRange(
            { (range, string) in
                (comments: elmSyntaxParserLenient_ropeEmpty(), syntax: ElmSyntaxNode_Node.Node(range, ElmSyntaxExpression_Expression.Literal(string)))
            }
        );

    static public let elmSyntaxParserLenient_expressionUnqualifiedFunctionReferenceFollowedByRecordAccess:ElmSyntaxParserLenient_Parser<ElmSyntaxParserLenient_WithComments<ElmSyntaxNode_Node<ElmSyntaxExpression_Expression>>> =
        elmSyntaxParserLenient_followedByMultiRecordAccess(
            elmSyntaxParserLenient_nameLowercaseMapWithRange(
                { (range, unqualified) in
                    (comments: elmSyntaxParserLenient_ropeEmpty(), syntax: ElmSyntaxNode_Node.Node(range, ElmSyntaxExpression_Expression.FunctionOrValue(List_List.Empty, unqualified)))
                }
            )
        );

    static public func elmSyntaxParserLenient_extendedSubExpressionFollowedByWhitespaceAndComments(_ info:
        (afterCommitting: @Sendable (ElmSyntaxParserLenient_InfixOperatorInfo) -> ElmSyntaxParserLenient_Parser<ElmSyntaxParserLenient_WithComments<ElmSyntaxParserLenient_ExtensionRight>>,
         direction: ElmSyntaxInfix_InfixDirection,
         symbol: String,
         validateRightPrecedence: @Sendable (ElmSyntaxParserLenient_InfixOperatorInfo) -> Maybe_Maybe<ElmSyntaxParserLenient_InfixOperatorInfo>
        )) -> ElmSyntaxParserLenient_Parser<ElmSyntaxParserLenient_WithComments<ElmSyntaxNode_Node<ElmSyntaxExpression_Expression>>> {
        parserFast_loopWhileSucceedsOntoResultFromParser(
            elmSyntaxParserLenient_infixOperatorAndThen((afterCommitting: info.afterCommitting, validateRightPrecedence: info.validateRightPrecedence)),
            elmSyntaxParserLenient_subExpressionMaybeAppliedFollowedByWhitespaceAndComments,
            { (extensionRightResult, leftNodeWithComments) in
                (comments: elmSyntaxParserLenient_ropePrependTo(extensionRightResult.comments, leftNodeWithComments.comments), syntax: elmSyntaxParserLenient_applyExtensionRight(extensionRightResult.syntax, leftNodeWithComments.syntax))
            },
            basics_identity
        )
    }

    static public func elmSyntaxParserLenient_extensionRightParser(_ extensionRightInfo:
        (afterCommitting: @Sendable (ElmSyntaxParserLenient_InfixOperatorInfo) -> ElmSyntaxParserLenient_Parser<ElmSyntaxParserLenient_WithComments<ElmSyntaxParserLenient_ExtensionRight>>,
         direction: ElmSyntaxInfix_InfixDirection,
         symbol: String,
         validateRightPrecedence: @Sendable (ElmSyntaxParserLenient_InfixOperatorInfo) -> Maybe_Maybe<ElmSyntaxParserLenient_InfixOperatorInfo>
        )) -> ElmSyntaxParserLenient_Parser<ElmSyntaxParserLenient_WithComments<ElmSyntaxParserLenient_ExtensionRight>> {
        parserFast_map2(
            { (commentsBefore, right) in
                (comments: elmSyntaxParserLenient_ropePrependTo(right.comments, commentsBefore), syntax: ElmSyntaxParserLenient_ExtensionRight.ExtendRightByOperation((direction: extensionRightInfo.direction, expression: right.syntax, symbol: extensionRightInfo.symbol)))
            },
            elmSyntaxParserLenient_whitespaceAndComments,
            parserFast_lazy(
                { (_) in
                    elmSyntaxParserLenient_extendedSubExpressionFollowedByWhitespaceAndComments(extensionRightInfo)
                }
            )
        )
    }

    static public func elmSyntaxParserLenient_followedByMultiArgumentApplication(_ appliedExpressionParser: ElmSyntaxParserLenient_Parser<ElmSyntaxParserLenient_WithComments<ElmSyntaxNode_Node<ElmSyntaxExpression_Expression>>>) -> ElmSyntaxParserLenient_Parser<ElmSyntaxParserLenient_WithComments<ElmSyntaxNode_Node<ElmSyntaxExpression_Expression>>> {
        parserFast_map3(
            { (leftExpressionResult, commentsBeforeExtension, maybeArgsReverse) in
                (comments: elmSyntaxParserLenient_ropePrependTo(maybeArgsReverse.comments, elmSyntaxParserLenient_ropePrependTo(commentsBeforeExtension, leftExpressionResult.comments)),
                 syntax:
                    ({ () in return switch maybeArgsReverse.syntax {
                        case List_List.Empty:
                            leftExpressionResult.syntax;

                        case let List_List.Cons(ElmSyntaxNode_Node.Node(lastArgRange, _), _):
                            ({ () in return switch leftExpressionResult.syntax {
                                case let ElmSyntaxNode_Node.Node(leftRange, _):
                                    ElmSyntaxNode_Node.Node((end: lastArgRange.end, start: leftRange.start), ElmSyntaxExpression_Expression.Application(List_List.Cons(leftExpressionResult.syntax, list_reverse(maybeArgsReverse.syntax))));
                             }
                            }());
                     }
                    }())
                )
            },
            appliedExpressionParser,
            elmSyntaxParserLenient_whitespaceAndComments,
            elmSyntaxParserLenient_manyWithCommentsReverse(
                elmSyntaxParserLenient_positivelyIndentedFollowedBy(
                    parserFast_map2(
                        { (arg, commentsAfter) in
                            (comments: elmSyntaxParserLenient_ropePrependTo(commentsAfter, arg.comments), syntax: arg.syntax)
                        },
                        elmSyntaxParserLenient_subExpression,
                        elmSyntaxParserLenient_whitespaceAndComments
                    )
                )
            )
        )
    }

    static public func elmSyntaxParserLenient_followedByMultiRecordAccess(_ beforeRecordAccesses: ElmSyntaxParserLenient_Parser<ElmSyntaxParserLenient_WithComments<ElmSyntaxNode_Node<ElmSyntaxExpression_Expression>>>) -> ElmSyntaxParserLenient_Parser<ElmSyntaxParserLenient_WithComments<ElmSyntaxNode_Node<ElmSyntaxExpression_Expression>>> {
        parserFast_loopWhileSucceedsOntoResultFromParser(
            parserFast_symbolFollowedBy(".", elmSyntaxParserLenient_nameLowercaseNodeUnderscoreSuffixingKeywords),
            beforeRecordAccesses,
            { (fieldNode, leftResult) in
                ({ () in return switch fieldNode {
                    case let ElmSyntaxNode_Node.Node(fieldRange, _):
                        ({ () in return switch leftResult.syntax {
                            case let ElmSyntaxNode_Node.Node(leftRange, _):
                                (comments: leftResult.comments, syntax: ElmSyntaxNode_Node.Node((end: fieldRange.end, start: leftRange.start), ElmSyntaxExpression_Expression.RecordAccess(leftResult.syntax, fieldNode)));
                         }
                        }());
                 }
                }())
            },
            basics_identity
        )
    }

    static public func elmSyntaxParserLenient_followedByOptimisticLayout<A: Sendable>(_ parser: ElmSyntaxParserLenient_Parser<ElmSyntaxParserLenient_WithComments<A>>) -> ElmSyntaxParserLenient_Parser<ElmSyntaxParserLenient_WithComments<A>> {
        parserFast_map2(
            { (result, commentsAfter) in
                (comments: elmSyntaxParserLenient_ropePrependTo(commentsAfter, result.comments), syntax: result.syntax)
            },
            parser,
            elmSyntaxParserLenient_whitespaceAndComments
        )
    }

    static public let elmSyntaxParserLenient_fromMultilineCommentNodeOrEmptyOnProblem:ElmSyntaxParserLenient_Parser<ElmSyntaxParserLenient_Comments> =
        parserFast_map2OrSucceed(
            { (comment, commentsAfter) in
                elmSyntaxParserLenient_ropeFilledPrependTo(commentsAfter, elmSyntaxParserLenient_ropeOne(comment))
            },
            parserFast_followedBySkipWhileWhitespace(elmSyntaxParserLenient_multiLineComment),
            elmSyntaxParserLenient_whitespaceAndCommentsOrEmptyLoop,
            elmSyntaxParserLenient_ropeEmpty()
        );

    static public let elmSyntaxParserLenient_fromSingleLineCommentNode:ElmSyntaxParserLenient_Parser<ElmSyntaxParserLenient_Comments> =
        parserFast_map2(
            { (content, commentsAfter) in
                elmSyntaxParserLenient_ropeFilledPrependTo(commentsAfter, elmSyntaxParserLenient_ropeOne(content))
            },
            parserFast_followedBySkipWhileWhitespace(elmSyntaxParserLenient_singleLineComment),
            elmSyntaxParserLenient_whitespaceAndCommentsOrEmptyLoop
        );

    static public let elmSyntaxParserLenient_functionAfterDocumentation:ElmSyntaxParserLenient_Parser<ElmSyntaxParserLenient_WithComments<ElmSyntaxParserLenient_DeclarationAfterDocumentation>> =
        parserFast_oneOf2(
            parserFast_map6(
                { (startName, commentsAfterStartName, maybeSignature, arguments, commentsAfterEqual, result) in
                    (comments: elmSyntaxParserLenient_ropePrependTo(result.comments, elmSyntaxParserLenient_ropePrependTo(commentsAfterEqual, elmSyntaxParserLenient_ropePrependTo(arguments.comments, elmSyntaxParserLenient_ropePrependTo(maybeSignature.comments, commentsAfterStartName)))), syntax: ElmSyntaxParserLenient_DeclarationAfterDocumentation.FunctionDeclarationAfterDocumentation((arguments: arguments.syntax, expression: result.syntax, signature: maybeSignature.syntax, startName: startName)))
                },
                elmSyntaxParserLenient_nameLowercaseNode,
                elmSyntaxParserLenient_whitespaceAndComments,
                parserFast_map4OrSucceed(
                    { (commentsBeforeTypeAnnotation, typeAnnotationResult, implementationName, afterImplementationName) in
                        (comments: elmSyntaxParserLenient_ropePrependTo(afterImplementationName, elmSyntaxParserLenient_ropePrependTo(implementationName.comments, elmSyntaxParserLenient_ropePrependTo(typeAnnotationResult.comments, commentsBeforeTypeAnnotation))), syntax: Maybe_Maybe.Just((implementationName: implementationName.syntax, typeAnnotation: typeAnnotationResult.syntax)))
                    },
                    parserFast_symbolFollowedBy(":", elmSyntaxParserLenient_whitespaceAndComments),
                    elmSyntaxParserLenient_type_,
                    elmSyntaxParserLenient_whitespaceAndCommentsEndsTopIndentedFollowedBy(elmSyntaxParserLenient_nameLowercaseNode),
                    elmSyntaxParserLenient_whitespaceAndComments,
                    (comments: elmSyntaxParserLenient_ropeEmpty(), syntax: Maybe_Maybe.Nothing)
                ),
                elmSyntaxParserLenient_parameterPatternsEquals,
                elmSyntaxParserLenient_whitespaceAndComments,
                elmSyntaxParserLenient_expressionFollowedByWhitespaceAndComments
            ),
            parserFast_map8WithStartLocation(
                { (start, commentsBeforeTypeAnnotation, typeAnnotationResult, commentsBetweenTypeAndName, nameNode, afterImplementationName, arguments, commentsAfterEqual, result) in
                    (comments: elmSyntaxParserLenient_ropePrependTo(result.comments, elmSyntaxParserLenient_ropePrependTo(commentsAfterEqual, elmSyntaxParserLenient_ropePrependTo(arguments.comments, elmSyntaxParserLenient_ropePrependTo(afterImplementationName, elmSyntaxParserLenient_ropePrependTo(commentsBetweenTypeAndName, elmSyntaxParserLenient_ropePrependTo(typeAnnotationResult.comments, commentsBeforeTypeAnnotation)))))), syntax: ElmSyntaxParserLenient_DeclarationAfterDocumentation.FunctionDeclarationAfterDocumentation((arguments: arguments.syntax, expression: result.syntax, signature: Maybe_Maybe.Just((implementationName: nameNode, typeAnnotation: typeAnnotationResult.syntax)), startName: ElmSyntaxNode_Node.Node((end: start, start: start), elmSyntaxNode_value(nameNode)))))
                },
                parserFast_symbolFollowedBy(":", elmSyntaxParserLenient_whitespaceAndComments),
                elmSyntaxParserLenient_type_,
                elmSyntaxParserLenient_whitespaceAndCommentsEndsTopIndented,
                elmSyntaxParserLenient_nameLowercaseNode,
                elmSyntaxParserLenient_whitespaceAndComments,
                elmSyntaxParserLenient_parameterPatternsEquals,
                elmSyntaxParserLenient_whitespaceAndComments,
                elmSyntaxParserLenient_expressionFollowedByWhitespaceAndComments
            )
        );

    static public let elmSyntaxParserLenient_functionDeclarationWithoutDocumentation:ElmSyntaxParserLenient_Parser<ElmSyntaxParserLenient_WithComments<ElmSyntaxNode_Node<ElmSyntaxDeclaration_Declaration>>> =
        parserFast_oneOf2(
            parserFast_validate(
                { (result) in
                    ({ () in return switch result.syntax {
                        case let ElmSyntaxNode_Node.Node(_, decl):
                            ({ () in return switch decl {
                                case let ElmSyntaxDeclaration_Declaration.FunctionDeclaration(letFunctionDeclaration):
                                    ({ () in return switch letFunctionDeclaration.signature {
                                        case Maybe_Maybe.Nothing:
                                            true;

                                        case let Maybe_Maybe.Just(ElmSyntaxNode_Node.Node(_, signature)):
                                            ({ () in return switch letFunctionDeclaration.declaration {
                                                case let ElmSyntaxNode_Node.Node(_, implementation):
                                                    ({ () in return switch implementation.name {
                                                        case let ElmSyntaxNode_Node.Node(_, implementationName):
                                                            ({ () in return switch signature.name {
                                                                case let ElmSyntaxNode_Node.Node(_, signatureName):
                                                                    basics_eq(implementationName, signatureName);
                                                             }
                                                            }());
                                                     }
                                                    }());
                                             }
                                            }());
                                     }
                                    }());

                                case ElmSyntaxDeclaration_Declaration.AliasDeclaration(_):
                                    true;

                                case ElmSyntaxDeclaration_Declaration.CustomTypeDeclaration(_):
                                    true;

                                case ElmSyntaxDeclaration_Declaration.PortDeclaration(_):
                                    true;

                                case ElmSyntaxDeclaration_Declaration.InfixDeclaration(_):
                                    true;

                                case ElmSyntaxDeclaration_Declaration.Destructuring(_, _):
                                    true;
                             }
                            }());
                     }
                    }())
                },
                parserFast_map6WithStartLocation(
                    { (startNameStart, startNameNode, commentsAfterStartName, maybeSignature, arguments, commentsAfterEqual, result) in
                        ({ () in return switch result.syntax {
                            case let ElmSyntaxNode_Node.Node(expressionRange, _):
                                ({ () in return switch maybeSignature {
                                    case Maybe_Maybe.Nothing:
                                        (comments: elmSyntaxParserLenient_ropePrependTo(result.comments, elmSyntaxParserLenient_ropePrependTo(commentsAfterEqual, elmSyntaxParserLenient_ropePrependTo(arguments.comments, commentsAfterStartName))), syntax: ElmSyntaxNode_Node.Node((end: expressionRange.end, start: startNameStart), ElmSyntaxDeclaration_Declaration.FunctionDeclaration((declaration: ElmSyntaxNode_Node.Node((end: expressionRange.end, start: startNameStart), (arguments: arguments.syntax, expression: result.syntax, name: startNameNode)), documentation: Maybe_Maybe.Nothing, signature: Maybe_Maybe.Nothing))));

                                    case let Maybe_Maybe.Just(signature):
                                        ({ () in return switch signature.implementationName {
                                            case let ElmSyntaxNode_Node.Node(implementationNameRange, _):
                                                (comments: elmSyntaxParserLenient_ropePrependTo(result.comments, elmSyntaxParserLenient_ropePrependTo(commentsAfterEqual, elmSyntaxParserLenient_ropePrependTo(arguments.comments, elmSyntaxParserLenient_ropePrependTo(signature.comments, commentsAfterStartName)))),
                                                 syntax:
                                                    ElmSyntaxNode_Node.Node(
                                                        (end: expressionRange.end, start: startNameStart),
                                                        ElmSyntaxDeclaration_Declaration.FunctionDeclaration(
                                                            (declaration: ElmSyntaxNode_Node.Node((end: expressionRange.end, start: implementationNameRange.start), (arguments: arguments.syntax, expression: result.syntax, name: signature.implementationName)),
                                                             documentation: Maybe_Maybe.Nothing,
                                                             signature:
                                                                Maybe_Maybe.Just(
                                                                    elmSyntaxNode_combine(
                                                                        { (name, typeAnnotation) in
                                                                            (name: name, typeAnnotation: typeAnnotation)
                                                                        },
                                                                        startNameNode,
                                                                        signature.typeAnnotation
                                                                    )
                                                                )
                                                            )
                                                        )
                                                    )
                                                );
                                         }
                                        }());
                                 }
                                }());
                         }
                        }())
                    },
                    elmSyntaxParserLenient_functionNameNotInfixNode,
                    elmSyntaxParserLenient_whitespaceAndComments,
                    parserFast_map4OrSucceed(
                        { (commentsBeforeTypeAnnotation, typeAnnotationResult, implementationName, afterImplementationName) in
                            Maybe_Maybe.Just((comments: elmSyntaxParserLenient_ropePrependTo(afterImplementationName, elmSyntaxParserLenient_ropePrependTo(implementationName.comments, elmSyntaxParserLenient_ropePrependTo(typeAnnotationResult.comments, commentsBeforeTypeAnnotation))), implementationName: implementationName.syntax, typeAnnotation: typeAnnotationResult.syntax))
                        },
                        parserFast_symbolFollowedBy(":", elmSyntaxParserLenient_whitespaceAndComments),
                        elmSyntaxParserLenient_type_,
                        elmSyntaxParserLenient_whitespaceAndCommentsEndsTopIndentedFollowedBy(elmSyntaxParserLenient_nameLowercaseNode),
                        elmSyntaxParserLenient_whitespaceAndComments,
                        Maybe_Maybe.Nothing
                    ),
                    elmSyntaxParserLenient_parameterPatternsEquals,
                    elmSyntaxParserLenient_whitespaceAndComments,
                    elmSyntaxParserLenient_expressionFollowedByWhitespaceAndComments
                )
            ),
            parserFast_map8WithStartLocation(
                { (start, commentsBeforeTypeAnnotation, typeAnnotationResult, commentsBetweenTypeAndName, nameNode, afterImplementationName, arguments, commentsAfterEqual, result) in
                    (comments: elmSyntaxParserLenient_ropePrependTo(result.comments, elmSyntaxParserLenient_ropePrependTo(commentsAfterEqual, elmSyntaxParserLenient_ropePrependTo(arguments.comments, elmSyntaxParserLenient_ropePrependTo(afterImplementationName, elmSyntaxParserLenient_ropePrependTo(commentsBetweenTypeAndName, elmSyntaxParserLenient_ropePrependTo(typeAnnotationResult.comments, commentsBeforeTypeAnnotation)))))), syntax: ElmSyntaxNode_Node.Node((end: elmSyntaxNode_range(result.syntax).end, start: start), ElmSyntaxDeclaration_Declaration.FunctionDeclaration((declaration: ElmSyntaxNode_Node.Node((end: elmSyntaxNode_range(result.syntax).end, start: elmSyntaxNode_range(nameNode).start), (arguments: arguments.syntax, expression: result.syntax, name: nameNode)), documentation: Maybe_Maybe.Nothing, signature: Maybe_Maybe.Just(ElmSyntaxNode_Node.Node((end: elmSyntaxNode_range(typeAnnotationResult.syntax).end, start: start), (name: ElmSyntaxNode_Node.Node((end: start, start: start), elmSyntaxNode_value(nameNode)), typeAnnotation: typeAnnotationResult.syntax)))))))
                },
                parserFast_symbolFollowedBy(":", elmSyntaxParserLenient_whitespaceAndComments),
                elmSyntaxParserLenient_type_,
                elmSyntaxParserLenient_whitespaceAndCommentsEndsTopIndented,
                elmSyntaxParserLenient_nameLowercaseNode,
                elmSyntaxParserLenient_whitespaceAndComments,
                elmSyntaxParserLenient_parameterPatternsEquals,
                elmSyntaxParserLenient_whitespaceAndComments,
                elmSyntaxParserLenient_expressionFollowedByWhitespaceAndComments
            )
        );

    static public let elmSyntaxParserLenient_functionExpose:ElmSyntaxParserLenient_Parser<ElmSyntaxParserLenient_WithComments<ElmSyntaxNode_Node<ElmSyntaxExposing_TopLevelExpose>>> =
        elmSyntaxParserLenient_nameLowercaseMapWithRange(
            { (range, name) in
                (comments: elmSyntaxParserLenient_ropeEmpty(), syntax: ElmSyntaxNode_Node.Node(range, ElmSyntaxExposing_TopLevelExpose.FunctionExpose(name)))
            }
        );

    static public let elmSyntaxParserLenient_functionNameNotInfixNode:ElmSyntaxParserLenient_Parser<ElmSyntaxNode_Node<String>> =
        parserFast_ifFollowedByWhileValidateMapWithRangeWithoutLinebreak(
            ElmSyntaxNode_Node.Node,
            charExtra_unicodeIsLowerFast,
            charExtra_unicodeIsAlphaNumOrUnderscoreFast,
            { (name) in
                ({ () in return switch name {
                    case "infix":
                        false;

                    case let nameNotInfix:
                        elmSyntaxParserLenient_isNotReserved(nameNotInfix);
                 }
                }())
            }
        );

    static public let elmSyntaxParserLenient_glslExpressionAfterOpeningSquareBracket:ElmSyntaxParserLenient_Parser<ElmSyntaxParserLenient_WithComments<ElmSyntaxNode_Node<ElmSyntaxExpression_Expression>>> =
        parserFast_symbolFollowedBy(
            "glsl|",
            parserFast_mapWithRange(
                { (range, s) in
                    (comments: elmSyntaxParserLenient_ropeEmpty(), syntax: ElmSyntaxNode_Node.Node((end: (column: basics_add(range.end.column, 2.0), row: range.end.row), start: (column: basics_sub(range.start.column, 6.0), row: range.start.row)), ElmSyntaxExpression_Expression.GLSLExpression(s)))
                },
                parserFast_loopUntil(
                    parserFast_symbol("|]", ()),
                    parserFast_oneOf2(
                        parserFast_symbol("|", "|"),
                        parserFast_while(
                            { (c) in
                                ({ () in return switch c {
                                    case "|":
                                        false;

                                    case _:
                                        true;
                                 }
                                }())
                            }
                        )
                    ),
                    "",
                    { (extension_, soFar) in
                        string_append(soFar, string_append(extension_, ""))
                    },
                    basics_identity
                )
            )
        );

    static public func elmSyntaxParserLenient_hexStringToInt(_ string: String) -> Double {
        string_foldr(
            { (c, soFar) in
                (exponent: basics_add(soFar.exponent, 1.0), result: basics_add(soFar.result, basics_mul(basics_pow(16.0, soFar.exponent), elmSyntaxParserLenient_charToHex(c))))
            },
            (exponent: 0.0, result: 0.0),
            string
        ).result
    }

    static public func elmSyntaxParserLenient_ifKeywordUnderscoreSuffix(_ name: String) -> String {
        ({ () in return switch name {
            case "module":
                "module_";

            case "exposing":
                "exposing_";

            case "import":
                "import_";

            case "as":
                "as_";

            case "if":
                "if_";

            case "then":
                "then_";

            case "else":
                "else_";

            case "let":
                "let_";

            case "in":
                "in_";

            case "case":
                "case_";

            case "of":
                "of_";

            case "port":
                "port_";

            case "type":
                "type_";

            case "where":
                "where_";

            case _:
                name;
         }
        }())
    }

    static public let elmSyntaxParserLenient_ifOrUnqualifiedReferenceExpressionMaybeApplied:ElmSyntaxParserLenient_Parser<ElmSyntaxParserLenient_WithComments<ElmSyntaxNode_Node<ElmSyntaxExpression_Expression>>> =
        parserFast_oneOf2(elmSyntaxParserLenient_expressionIfThenElseFollowedByOptimisticLayout, elmSyntaxParserLenient_followedByMultiArgumentApplication(elmSyntaxParserLenient_expressionUnqualifiedFunctionReferenceFollowedByRecordAccess));

    static public let elmSyntaxParserLenient_import_:
        ElmSyntaxParserLenient_Parser<
            (comments: ElmSyntaxParserLenient_Comments,
             syntax: ElmSyntaxNode_Node<ElmSyntaxImport_Import>
            )
        > =
        parserFast_map5WithStartLocation(
            { (start, commentsAfterImport, mod, commentsAfterModuleName, maybeModuleAlias, maybeExposingResult) in
                ({ () in let commentsBeforeAlias:ElmSyntaxParserLenient_Comments =
                    elmSyntaxParserLenient_ropePrependTo(commentsAfterModuleName, commentsAfterImport);

                 return ({ () in return switch maybeModuleAlias {
                    case Maybe_Maybe.Nothing:
                        ({ () in return switch maybeExposingResult.syntax {
                            case Maybe_Maybe.Nothing:
                                ({ () in return switch mod {
                                    case let ElmSyntaxNode_Node.Node(modRange, _):
                                        (comments: elmSyntaxParserLenient_ropePrependTo(maybeExposingResult.comments, commentsBeforeAlias), syntax: ElmSyntaxNode_Node.Node((end: modRange.end, start: start), (exposingList: Maybe_Maybe.Nothing, moduleAlias: Maybe_Maybe.Nothing, moduleName: mod)));
                                 }
                                }());

                            case let Maybe_Maybe.Just(exposingListValue):
                                ({ () in return switch exposingListValue {
                                    case let ElmSyntaxNode_Node.Node(exposingRange, _):
                                        (comments: elmSyntaxParserLenient_ropePrependTo(maybeExposingResult.comments, commentsBeforeAlias), syntax: ElmSyntaxNode_Node.Node((end: exposingRange.end, start: start), (exposingList: Maybe_Maybe.Just(exposingListValue), moduleAlias: Maybe_Maybe.Nothing, moduleName: mod)));
                                 }
                                }());
                         }
                        }());

                    case let Maybe_Maybe.Just(moduleAliasResult):
                        ({ () in return switch maybeExposingResult.syntax {
                            case Maybe_Maybe.Nothing:
                                ({ () in return switch moduleAliasResult.syntax {
                                    case let ElmSyntaxNode_Node.Node(aliasRange, _):
                                        (comments: elmSyntaxParserLenient_ropePrependTo(maybeExposingResult.comments, elmSyntaxParserLenient_ropePrependTo(moduleAliasResult.comments, commentsBeforeAlias)), syntax: ElmSyntaxNode_Node.Node((end: aliasRange.end, start: start), (exposingList: Maybe_Maybe.Nothing, moduleAlias: Maybe_Maybe.Just(moduleAliasResult.syntax), moduleName: mod)));
                                 }
                                }());

                            case let Maybe_Maybe.Just(exposingListValue):
                                ({ () in return switch exposingListValue {
                                    case let ElmSyntaxNode_Node.Node(exposingRange, _):
                                        (comments: elmSyntaxParserLenient_ropePrependTo(maybeExposingResult.comments, elmSyntaxParserLenient_ropePrependTo(moduleAliasResult.comments, commentsBeforeAlias)), syntax: ElmSyntaxNode_Node.Node((end: exposingRange.end, start: start), (exposingList: Maybe_Maybe.Just(exposingListValue), moduleAlias: Maybe_Maybe.Just(moduleAliasResult.syntax), moduleName: mod)));
                                 }
                                }());
                         }
                        }());
                  }
                 }())
                }())
            },
            parserFast_keywordFollowedBy("import", elmSyntaxParserLenient_whitespaceAndComments),
            elmSyntaxParserLenient_moduleName,
            elmSyntaxParserLenient_whitespaceAndComments,
            parserFast_map3OrSucceed(
                { (commentsBefore, moduleAliasNode, commentsAfter) in
                    Maybe_Maybe.Just((comments: elmSyntaxParserLenient_ropePrependTo(commentsAfter, commentsBefore), syntax: moduleAliasNode))
                },
                parserFast_keywordFollowedBy("as", elmSyntaxParserLenient_whitespaceAndComments),
                elmSyntaxParserLenient_nameUppercaseMapWithRange(
                    { (range, moduleAlias) in
                        ElmSyntaxNode_Node.Node(range, List_List.Cons(moduleAlias, List_List.Empty))
                    }
                ),
                elmSyntaxParserLenient_whitespaceAndComments,
                Maybe_Maybe.Nothing
            ),
            parserFast_map2OrSucceed(
                { (exposingResult, commentsAfter) in
                    (comments: elmSyntaxParserLenient_ropePrependTo(commentsAfter, exposingResult.comments), syntax: exposingResult.syntax)
                },
                parserFast_map2WithRange(
                    { (range, commentsAfterExposing, exposingListInnerResult) in
                        (comments: elmSyntaxParserLenient_ropePrependTo(exposingListInnerResult.comments, commentsAfterExposing),
                         syntax:
                            ({ () in return switch exposingListInnerResult.syntax {
                                case Maybe_Maybe.Nothing:
                                    Maybe_Maybe.Nothing;

                                case let Maybe_Maybe.Just(exposingListInner):
                                    Maybe_Maybe.Just(ElmSyntaxNode_Node.Node(range, exposingListInner));
                             }
                            }())
                        )
                    },
                    parserFast_symbolFollowedBy("exposing", elmSyntaxParserLenient_whitespaceAndComments),
                    parserFast_symbolFollowedBy(
                        "(",
                        parserFast_map2(
                            { (commentsBefore, inner) in
                                (comments: elmSyntaxParserLenient_ropePrependTo(inner.comments, commentsBefore), syntax: inner.syntax)
                            },
                            elmSyntaxParserLenient_whitespaceAndComments,
                            parserFast_oneOf4(
                                parserFast_followedBySymbol(
                                    ")",
                                    parserFast_mapWithRange(
                                        { (range, comments) in
                                            (comments: comments, syntax: Maybe_Maybe.Just(ElmSyntaxExposing_Exposing.All(range)))
                                        },
                                        parserFast_symbolFollowedBy("...", elmSyntaxParserLenient_whitespaceAndComments)
                                    )
                                ),
                                parserFast_followedBySymbol(
                                    ")",
                                    parserFast_mapWithRange(
                                        { (range, comments) in
                                            (comments: comments, syntax: Maybe_Maybe.Just(ElmSyntaxExposing_Exposing.All(range)))
                                        },
                                        parserFast_symbolFollowedBy("..", elmSyntaxParserLenient_whitespaceAndComments)
                                    )
                                ),
                                parserFast_symbol(")", (comments: elmSyntaxParserLenient_ropeEmpty(), syntax: Maybe_Maybe.Nothing)),
                                parserFast_followedBySymbol(")", elmSyntaxParserLenient_exposingWithinParensExplicitFollowedByWhitespaceAndCommentsMap(Maybe_Maybe.Just))
                            )
                        )
                    )
                ),
                elmSyntaxParserLenient_whitespaceAndComments,
                (comments: elmSyntaxParserLenient_ropeEmpty(), syntax: Maybe_Maybe.Nothing)
            )
        );

    static public let elmSyntaxParserLenient_infixDeclaration:ElmSyntaxParserLenient_Parser<ElmSyntaxParserLenient_WithComments<ElmSyntaxNode_Node<ElmSyntaxDeclaration_Declaration>>> =
        parserFast_map9WithRange(
            { (range, commentsAfterInfix, direction, commentsAfterDirection, precedence, commentsAfterPrecedence, operator_, commentsAfterOperator, commentsAfterEqual, fn) in
                (comments: elmSyntaxParserLenient_ropePrependTo(commentsAfterEqual, elmSyntaxParserLenient_ropePrependTo(commentsAfterOperator, elmSyntaxParserLenient_ropePrependTo(commentsAfterPrecedence, elmSyntaxParserLenient_ropePrependTo(commentsAfterDirection, commentsAfterInfix)))), syntax: ElmSyntaxNode_Node.Node(range, ElmSyntaxDeclaration_Declaration.InfixDeclaration((direction: direction, function: fn, operator_: operator_, precedence: precedence))))
            },
            parserFast_keywordFollowedBy("infix", elmSyntaxParserLenient_whitespaceAndComments),
            elmSyntaxParserLenient_infixDirection,
            elmSyntaxParserLenient_whitespaceAndComments,
            parserFast_integerDecimalMapWithRange(ElmSyntaxNode_Node.Node),
            elmSyntaxParserLenient_whitespaceAndComments,
            parserFast_symbolFollowedBy(
                "(",
                parserFast_whileAtMost3WithoutLinebreakAnd2PartUtf16ValidateMapWithRangeBacktrackableFollowedBySymbol(
                    { (operatorRange, operator_) in
                        ElmSyntaxNode_Node.Node((end: (column: basics_add(operatorRange.end.column, 1.0), row: operatorRange.end.row), start: (column: basics_sub(operatorRange.start.column, 1.0), row: operatorRange.start.row)), operator_)
                    },
                    elmSyntaxParserLenient_isOperatorSymbolCharAsString,
                    elmSyntaxParserLenient_isAllowedOperatorToken,
                    ")"
                )
            ),
            elmSyntaxParserLenient_whitespaceAndComments,
            parserFast_symbolFollowedBy("=", elmSyntaxParserLenient_whitespaceAndComments),
            elmSyntaxParserLenient_nameLowercaseNode
        );

    static public let elmSyntaxParserLenient_infixDirection:ElmSyntaxParserLenient_Parser<ElmSyntaxNode_Node<ElmSyntaxInfix_InfixDirection>> =
        parserFast_oneOf3(parserFast_mapWithRange(ElmSyntaxNode_Node.Node, parserFast_keyword("right", ElmSyntaxInfix_InfixDirection.Right)), parserFast_mapWithRange(ElmSyntaxNode_Node.Node, parserFast_keyword("left", ElmSyntaxInfix_InfixDirection.Left)), parserFast_mapWithRange(ElmSyntaxNode_Node.Node, parserFast_keyword("non", ElmSyntaxInfix_InfixDirection.Non)));

    static public let elmSyntaxParserLenient_infixExpose:ElmSyntaxParserLenient_Parser<ElmSyntaxParserLenient_WithComments<ElmSyntaxNode_Node<ElmSyntaxExposing_TopLevelExpose>>> =
        parserFast_map2WithRange(
            { (range, infixName, _) in
                (comments: elmSyntaxParserLenient_ropeEmpty(), syntax: ElmSyntaxNode_Node.Node(range, ElmSyntaxExposing_TopLevelExpose.InfixExpose(infixName)))
            },
            parserFast_symbolFollowedBy(
                "(",
                parserFast_ifFollowedByWhileWithoutLinebreak(
                    { (c) in
                        ({ () in return switch c {
                            case ")":
                                false;

                            case "\n":
                                false;

                            case " ":
                                false;

                            case _:
                                true;
                         }
                        }())
                    },
                    { (c) in
                        ({ () in return switch c {
                            case ")":
                                false;

                            case "\n":
                                false;

                            case " ":
                                false;

                            case _:
                                true;
                         }
                        }())
                    }
                )
            ),
            parserFast_symbol(")", ())
        );

    static public func elmSyntaxParserLenient_infixLeft(_ leftPrecedence: Double, _ symbol: String) -> ElmSyntaxParserLenient_InfixOperatorInfo {
        (extensionRightParser:
            elmSyntaxParserLenient_extensionRightParser(
                (afterCommitting:
                    { (generated_record) in
                        generated_record.extensionRightParser
                    },
                 direction: ElmSyntaxInfix_InfixDirection.Left,
                 symbol: symbol,
                 validateRightPrecedence:
                    { (rightInfo) in
                        ({ () in return switch basics_gt(rightInfo.leftPrecedence, leftPrecedence) {
                            case true:
                                Maybe_Maybe.Just(rightInfo);

                            case false:
                                Maybe_Maybe.Nothing;
                         }
                        }())
                    }
                )
            ),
         leftPrecedence: leftPrecedence,
         symbol: symbol
        )
    }

    static public func elmSyntaxParserLenient_infixNonAssociative(_ leftPrecedence: Double, _ symbol: String) -> ElmSyntaxParserLenient_InfixOperatorInfo {
        (extensionRightParser:
            elmSyntaxParserLenient_extensionRightParser(
                (afterCommitting:
                    { (rightInfo) in
                        ({ () in return switch basics_eq(rightInfo.leftPrecedence, leftPrecedence) {
                            case true:
                                parserFast_problem();

                            case false:
                                rightInfo.extensionRightParser;
                         }
                        }())
                    },
                 direction: ElmSyntaxInfix_InfixDirection.Non,
                 symbol: symbol,
                 validateRightPrecedence:
                    { (rightInfo) in
                        ({ () in return switch basics_ge(rightInfo.leftPrecedence, leftPrecedence) {
                            case true:
                                Maybe_Maybe.Just(rightInfo);

                            case false:
                                Maybe_Maybe.Nothing;
                         }
                        }())
                    }
                )
            ),
         leftPrecedence: leftPrecedence,
         symbol: symbol
        )
    }

    static public func elmSyntaxParserLenient_infixOperatorAndThen(_ extensionRightConstraints:
        (afterCommitting: @Sendable (ElmSyntaxParserLenient_InfixOperatorInfo) -> ElmSyntaxParserLenient_Parser<ElmSyntaxParserLenient_WithComments<ElmSyntaxParserLenient_ExtensionRight>>,
         validateRightPrecedence: @Sendable (ElmSyntaxParserLenient_InfixOperatorInfo) -> Maybe_Maybe<ElmSyntaxParserLenient_InfixOperatorInfo>
        )) -> ElmSyntaxParserLenient_Parser<ElmSyntaxParserLenient_WithComments<ElmSyntaxParserLenient_ExtensionRight>> {
        ({ () in let toResult:@Sendable (ElmSyntaxParserLenient_InfixOperatorInfo) -> Maybe_Maybe<ElmSyntaxParserLenient_InfixOperatorInfo> =
            extensionRightConstraints.validateRightPrecedence;

         let subResult:Maybe_Maybe<ElmSyntaxParserLenient_InfixOperatorInfo> =
            toResult(elmSyntaxParserLenient_precedence6Sub);

         let slashResult:Maybe_Maybe<ElmSyntaxParserLenient_InfixOperatorInfo> =
            toResult(elmSyntaxParserLenient_precedence7Slash);

         let questionMarkResult:Maybe_Maybe<ElmSyntaxParserLenient_InfixOperatorInfo> =
            toResult(elmSyntaxParserLenient_precedence8QuestionMark);

         let powResult:Maybe_Maybe<ElmSyntaxParserLenient_InfixOperatorInfo> =
            toResult(elmSyntaxParserLenient_precedence8Pow);

         let orResult:Maybe_Maybe<ElmSyntaxParserLenient_InfixOperatorInfo> =
            toResult(elmSyntaxParserLenient_precedence2Or);

         let neqResult:Maybe_Maybe<ElmSyntaxParserLenient_InfixOperatorInfo> =
            toResult(elmSyntaxParserLenient_precedence4Neq);

         let mulResult:Maybe_Maybe<ElmSyntaxParserLenient_InfixOperatorInfo> =
            toResult(elmSyntaxParserLenient_precedence7Mul);

         let ltResult:Maybe_Maybe<ElmSyntaxParserLenient_InfixOperatorInfo> =
            toResult(elmSyntaxParserLenient_precedence4Lt);

         let leResult:Maybe_Maybe<ElmSyntaxParserLenient_InfixOperatorInfo> =
            toResult(elmSyntaxParserLenient_precedence4Le);

         let keepResult:Maybe_Maybe<ElmSyntaxParserLenient_InfixOperatorInfo> =
            toResult(elmSyntaxParserLenient_precedence5Keep);

         let ignoreResult:Maybe_Maybe<ElmSyntaxParserLenient_InfixOperatorInfo> =
            toResult(elmSyntaxParserLenient_precedence6Ignore);

         let idivResult:Maybe_Maybe<ElmSyntaxParserLenient_InfixOperatorInfo> =
            toResult(elmSyntaxParserLenient_precedence7Idiv);

         let gtResult:Maybe_Maybe<ElmSyntaxParserLenient_InfixOperatorInfo> =
            toResult(elmSyntaxParserLenient_precedence4Gt);

         let geResult:Maybe_Maybe<ElmSyntaxParserLenient_InfixOperatorInfo> =
            toResult(elmSyntaxParserLenient_precedence4Ge);

         let fdivResult:Maybe_Maybe<ElmSyntaxParserLenient_InfixOperatorInfo> =
            toResult(elmSyntaxParserLenient_precedence7Fdiv);

         let eqResult:Maybe_Maybe<ElmSyntaxParserLenient_InfixOperatorInfo> =
            toResult(elmSyntaxParserLenient_precedence4Eq);

         let consResult:Maybe_Maybe<ElmSyntaxParserLenient_InfixOperatorInfo> =
            toResult(elmSyntaxParserLenient_precedence5Cons);

         let composeRResult:Maybe_Maybe<ElmSyntaxParserLenient_InfixOperatorInfo> =
            toResult(elmSyntaxParserLenient_precedence9ComposeR);

         let composeLResult:Maybe_Maybe<ElmSyntaxParserLenient_InfixOperatorInfo> =
            toResult(elmSyntaxParserLenient_precedence9ComposeL);

         let appendResult:Maybe_Maybe<ElmSyntaxParserLenient_InfixOperatorInfo> =
            toResult(elmSyntaxParserLenient_precedence5append);

         let apRResult:Maybe_Maybe<ElmSyntaxParserLenient_InfixOperatorInfo> =
            toResult(elmSyntaxParserLenient_precedence1ApR);

         let apLResult:Maybe_Maybe<ElmSyntaxParserLenient_InfixOperatorInfo> =
            toResult(elmSyntaxParserLenient_precedence1ApL);

         let andResult:Maybe_Maybe<ElmSyntaxParserLenient_InfixOperatorInfo> =
            toResult(elmSyntaxParserLenient_precedence3And);

         let addResult:Maybe_Maybe<ElmSyntaxParserLenient_InfixOperatorInfo> =
            toResult(elmSyntaxParserLenient_precedence6Add);

         return parserFast_whileAtMost3WithoutLinebreakAnd2PartUtf16ToResultAndThen(
            elmSyntaxParserLenient_isOperatorSymbolCharAsString,
            { (operator_) in
                ({ () in return switch operator_ {
                    case "|>":
                        apRResult;

                    case "|":
                        apRResult;

                    case "++":
                        appendResult;

                    case "<|":
                        apLResult;

                    case ">>":
                        composeRResult;

                    case "==":
                        eqResult;

                    case "===":
                        eqResult;

                    case "*":
                        mulResult;

                    case "::":
                        consResult;

                    case "+":
                        addResult;

                    case "-":
                        subResult;

                    case "|.":
                        ignoreResult;

                    case "&&":
                        andResult;

                    case "|=":
                        keepResult;

                    case "<<":
                        composeLResult;

                    case "/=":
                        neqResult;

                    case "!=":
                        neqResult;

                    case "!==":
                        neqResult;

                    case "//":
                        idivResult;

                    case "/":
                        fdivResult;

                    case "</>":
                        slashResult;

                    case "||":
                        orResult;

                    case "<=":
                        leResult;

                    case ">=":
                        geResult;

                    case ">":
                        gtResult;

                    case "<?>":
                        questionMarkResult;

                    case "<":
                        ltResult;

                    case "^":
                        powResult;

                    case "**":
                        powResult;

                    case _:
                        Maybe_Maybe.Nothing;
                 }
                }())
            },
            extensionRightConstraints.afterCommitting
         )
        }())
    }

    static public func elmSyntaxParserLenient_infixRight(_ leftPrecedence: Double, _ symbol: String) -> ElmSyntaxParserLenient_InfixOperatorInfo {
        (extensionRightParser:
            elmSyntaxParserLenient_extensionRightParser(
                (afterCommitting:
                    { (generated_record) in
                        generated_record.extensionRightParser
                    },
                 direction: ElmSyntaxInfix_InfixDirection.Right,
                 symbol: symbol,
                 validateRightPrecedence:
                    { (rightInfo) in
                        ({ () in return switch basics_ge(rightInfo.leftPrecedence, leftPrecedence) {
                            case true:
                                Maybe_Maybe.Just(rightInfo);

                            case false:
                                Maybe_Maybe.Nothing;
                         }
                        }())
                    }
                )
            ),
         leftPrecedence: leftPrecedence,
         symbol: symbol
        )
    }

    static public func elmSyntaxParserLenient_isAllowedOperatorToken(_ operatorCandidateToValidate: String) -> Bool {
        ({ () in return switch operatorCandidateToValidate {
            case "==":
                true;

            case "/=":
                true;

            case "::":
                true;

            case "++":
                true;

            case "+":
                true;

            case "*":
                true;

            case "<|":
                true;

            case "|>":
                true;

            case "||":
                true;

            case "<=":
                true;

            case ">=":
                true;

            case "|=":
                true;

            case "|.":
                true;

            case "//":
                true;

            case "</>":
                true;

            case "<?>":
                true;

            case "^":
                true;

            case "<<":
                true;

            case ">>":
                true;

            case "<":
                true;

            case ">":
                true;

            case "/":
                true;

            case "&&":
                true;

            case "-":
                true;

            case _:
                false;
         }
        }())
    }

    static public func elmSyntaxParserLenient_isNotReserved(_ name: String) -> Bool {
        ({ () in return switch name {
            case "module":
                false;

            case "exposing":
                false;

            case "import":
                false;

            case "as":
                false;

            case "if":
                false;

            case "then":
                false;

            case "else":
                false;

            case "let":
                false;

            case "in":
                false;

            case "case":
                false;

            case "of":
                false;

            case "port":
                false;

            case "type":
                false;

            case "where":
                false;

            case _:
                true;
         }
        }())
    }

    static public func elmSyntaxParserLenient_isOperatorSymbolCharAsString(_ c: String) -> Bool {
        ({ () in return switch c {
            case "|":
                true;

            case "+":
                true;

            case "<":
                true;

            case ">":
                true;

            case "=":
                true;

            case "*":
                true;

            case ":":
                true;

            case "-":
                true;

            case "/":
                true;

            case "&":
                true;

            case ".":
                true;

            case "?":
                true;

            case "^":
                true;

            case "!":
                true;

            case _:
                false;
         }
        }())
    }

    static public let elmSyntaxParserLenient_letBlockElementFollowedByOptimisticLayout:ElmSyntaxParserLenient_Parser<ElmSyntaxParserLenient_WithComments<ElmSyntaxNode_Node<ElmSyntaxExpression_LetDeclaration>>> =
        elmSyntaxParserLenient_topIndentedFollowedBy(parserFast_oneOf2(elmSyntaxParserLenient_letFunctionFollowedByOptimisticLayout, elmSyntaxParserLenient_letDestructuringDeclarationFollowedByOptimisticLayout));

    static public let elmSyntaxParserLenient_letDeclarationsIn:ElmSyntaxParserLenient_Parser<ElmSyntaxParserLenient_WithComments<List_List<ElmSyntaxNode_Node<ElmSyntaxExpression_LetDeclaration>>>> =
        elmSyntaxParserLenient_topIndentedFollowedBy(
            parserFast_map3(
                { (headLetResult, commentsAfter, tailLetResult) in
                    (comments: elmSyntaxParserLenient_ropePrependTo(tailLetResult.comments, elmSyntaxParserLenient_ropePrependTo(commentsAfter, headLetResult.comments)), syntax: List_List.Cons(headLetResult.syntax, tailLetResult.syntax))
                },
                parserFast_oneOf2(elmSyntaxParserLenient_letFunctionFollowedByOptimisticLayout, elmSyntaxParserLenient_letDestructuringDeclarationFollowedByOptimisticLayout),
                elmSyntaxParserLenient_whitespaceAndComments,
                elmSyntaxParserLenient_untilWithComments(parserFast_keyword("in", ()), elmSyntaxParserLenient_letBlockElementFollowedByOptimisticLayout)
            )
        );

    static public let elmSyntaxParserLenient_letDestructuringDeclarationFollowedByOptimisticLayout:ElmSyntaxParserLenient_Parser<ElmSyntaxParserLenient_WithComments<ElmSyntaxNode_Node<ElmSyntaxExpression_LetDeclaration>>> =
        parserFast_map4(
            { (patternResult, commentsAfterPattern, commentsAfterEquals, expressionResult) in
                ({ () in return switch patternResult.syntax {
                    case let ElmSyntaxNode_Node.Node(patternRange, _):
                        ({ () in return switch expressionResult.syntax {
                            case let ElmSyntaxNode_Node.Node(destructuredExpressionRange, _):
                                (comments: elmSyntaxParserLenient_ropePrependTo(expressionResult.comments, elmSyntaxParserLenient_ropePrependTo(commentsAfterEquals, elmSyntaxParserLenient_ropePrependTo(commentsAfterPattern, patternResult.comments))), syntax: ElmSyntaxNode_Node.Node((end: destructuredExpressionRange.end, start: patternRange.start), ElmSyntaxExpression_LetDeclaration.LetDestructuring(patternResult.syntax, expressionResult.syntax)));
                         }
                        }());
                 }
                }())
            },
            elmSyntaxParserLenient_patternNotSpaceSeparated,
            elmSyntaxParserLenient_whitespaceAndComments,
            parserFast_symbolFollowedBy("=", elmSyntaxParserLenient_whitespaceAndComments),
            elmSyntaxParserLenient_expressionFollowedByWhitespaceAndComments
        );

    static public let elmSyntaxParserLenient_letExpressionFollowedByOptimisticLayout:ElmSyntaxParserLenient_Parser<ElmSyntaxParserLenient_WithComments<ElmSyntaxNode_Node<ElmSyntaxExpression_Expression>>> =
        parserFast_map3WithStartLocation(
            { (start, letDeclarationsResult, commentsAfterIn, expressionResult) in
                ({ () in return switch expressionResult.syntax {
                    case let ElmSyntaxNode_Node.Node(expressionRange, _):
                        (comments: elmSyntaxParserLenient_ropePrependTo(expressionResult.comments, elmSyntaxParserLenient_ropePrependTo(commentsAfterIn, letDeclarationsResult.comments)), syntax: ElmSyntaxNode_Node.Node((end: expressionRange.end, start: start), ElmSyntaxExpression_Expression.LetExpression((declarations: letDeclarationsResult.declarations, expression: expressionResult.syntax))));
                 }
                }())
            },
            parserFast_withIndentSetToColumn(
                parserFast_keywordFollowedBy(
                    "let",
                    parserFast_map2(
                        { (commentsAfterLet, letDeclarationsResult) in
                            (comments: elmSyntaxParserLenient_ropePrependTo(letDeclarationsResult.comments, commentsAfterLet), declarations: letDeclarationsResult.syntax)
                        },
                        elmSyntaxParserLenient_whitespaceAndComments,
                        parserFast_withIndentSetToColumn(elmSyntaxParserLenient_letDeclarationsIn)
                    )
                )
            ),
            elmSyntaxParserLenient_whitespaceAndComments,
            elmSyntaxParserLenient_expressionFollowedByWhitespaceAndComments
        );

    static public let elmSyntaxParserLenient_letFunctionFollowedByOptimisticLayout:ElmSyntaxParserLenient_Parser<ElmSyntaxParserLenient_WithComments<ElmSyntaxNode_Node<ElmSyntaxExpression_LetDeclaration>>> =
        parserFast_oneOf2(
            parserFast_validate(
                { (result) in
                    ({ () in return switch result.syntax {
                        case let ElmSyntaxNode_Node.Node(_, letDeclaration):
                            ({ () in return switch letDeclaration {
                                case ElmSyntaxExpression_LetDeclaration.LetDestructuring(_, _):
                                    true;

                                case let ElmSyntaxExpression_LetDeclaration.LetFunction(letFunctionDeclaration):
                                    ({ () in return switch letFunctionDeclaration.signature {
                                        case Maybe_Maybe.Nothing:
                                            true;

                                        case let Maybe_Maybe.Just(ElmSyntaxNode_Node.Node(_, signature)):
                                            ({ () in return switch letFunctionDeclaration.declaration {
                                                case let ElmSyntaxNode_Node.Node(_, implementation):
                                                    ({ () in return switch implementation.name {
                                                        case let ElmSyntaxNode_Node.Node(_, implementationName):
                                                            ({ () in return switch signature.name {
                                                                case let ElmSyntaxNode_Node.Node(_, signatureName):
                                                                    basics_eq(implementationName, signatureName);
                                                             }
                                                            }());
                                                     }
                                                    }());
                                             }
                                            }());
                                     }
                                    }());
                             }
                            }());
                     }
                    }())
                },
                parserFast_map6WithStartLocation(
                    { (startNameStart, startNameNode, commentsAfterStartName, maybeSignature, arguments, commentsAfterEqual, expressionResult) in
                        ({ () in return switch maybeSignature {
                            case Maybe_Maybe.Nothing:
                                ({ () in return switch expressionResult.syntax {
                                    case let ElmSyntaxNode_Node.Node(expressionRange, _):
                                        (comments: elmSyntaxParserLenient_ropePrependTo(expressionResult.comments, elmSyntaxParserLenient_ropePrependTo(commentsAfterEqual, elmSyntaxParserLenient_ropePrependTo(arguments.comments, commentsAfterStartName))), syntax: ElmSyntaxNode_Node.Node((end: expressionRange.end, start: startNameStart), ElmSyntaxExpression_LetDeclaration.LetFunction((declaration: ElmSyntaxNode_Node.Node((end: expressionRange.end, start: startNameStart), (arguments: arguments.syntax, expression: expressionResult.syntax, name: startNameNode)), documentation: Maybe_Maybe.Nothing, signature: Maybe_Maybe.Nothing))));
                                 }
                                }());

                            case let Maybe_Maybe.Just(signature):
                                ({ () in return switch signature.implementationName {
                                    case let ElmSyntaxNode_Node.Node(implementationNameRange, _):
                                        ({ () in return switch expressionResult.syntax {
                                            case let ElmSyntaxNode_Node.Node(expressionRange, _):
                                                (comments: elmSyntaxParserLenient_ropePrependTo(expressionResult.comments, elmSyntaxParserLenient_ropePrependTo(commentsAfterEqual, elmSyntaxParserLenient_ropePrependTo(arguments.comments, elmSyntaxParserLenient_ropePrependTo(signature.comments, commentsAfterStartName)))),
                                                 syntax:
                                                    ElmSyntaxNode_Node.Node(
                                                        (end: expressionRange.end, start: startNameStart),
                                                        ElmSyntaxExpression_LetDeclaration.LetFunction(
                                                            (declaration: ElmSyntaxNode_Node.Node((end: expressionRange.end, start: implementationNameRange.start), (arguments: arguments.syntax, expression: expressionResult.syntax, name: signature.implementationName)),
                                                             documentation: Maybe_Maybe.Nothing,
                                                             signature:
                                                                Maybe_Maybe.Just(
                                                                    elmSyntaxNode_combine(
                                                                        { (name, value) in
                                                                            (name: name, typeAnnotation: value)
                                                                        },
                                                                        startNameNode,
                                                                        signature.typeAnnotation
                                                                    )
                                                                )
                                                            )
                                                        )
                                                    )
                                                );
                                         }
                                        }());
                                 }
                                }());
                         }
                        }())
                    },
                    elmSyntaxParserLenient_nameLowercaseNodeUnderscoreSuffixingKeywords,
                    elmSyntaxParserLenient_whitespaceAndComments,
                    parserFast_map4OrSucceed(
                        { (commentsBeforeTypeAnnotation, typeAnnotationResult, implementationName, afterImplementationName) in
                            Maybe_Maybe.Just((comments: elmSyntaxParserLenient_ropePrependTo(afterImplementationName, elmSyntaxParserLenient_ropePrependTo(implementationName.comments, elmSyntaxParserLenient_ropePrependTo(typeAnnotationResult.comments, commentsBeforeTypeAnnotation))), implementationName: implementationName.syntax, typeAnnotation: typeAnnotationResult.syntax))
                        },
                        parserFast_symbolFollowedBy(":", elmSyntaxParserLenient_whitespaceAndComments),
                        elmSyntaxParserLenient_type_,
                        elmSyntaxParserLenient_whitespaceAndCommentsEndsTopIndentedFollowedBy(elmSyntaxParserLenient_nameLowercaseNodeUnderscoreSuffixingKeywords),
                        elmSyntaxParserLenient_whitespaceAndComments,
                        Maybe_Maybe.Nothing
                    ),
                    elmSyntaxParserLenient_parameterPatternsEquals,
                    elmSyntaxParserLenient_whitespaceAndComments,
                    elmSyntaxParserLenient_expressionFollowedByWhitespaceAndComments
                )
            ),
            parserFast_map8WithStartLocation(
                { (start, commentsBeforeTypeAnnotation, typeAnnotationResult, commentsBetweenTypeAndName, nameNode, afterImplementationName, arguments, commentsAfterEqual, result) in
                    (comments: elmSyntaxParserLenient_ropePrependTo(result.comments, elmSyntaxParserLenient_ropePrependTo(commentsAfterEqual, elmSyntaxParserLenient_ropePrependTo(arguments.comments, elmSyntaxParserLenient_ropePrependTo(afterImplementationName, elmSyntaxParserLenient_ropePrependTo(commentsBetweenTypeAndName, elmSyntaxParserLenient_ropePrependTo(typeAnnotationResult.comments, commentsBeforeTypeAnnotation)))))), syntax: ElmSyntaxNode_Node.Node((end: elmSyntaxNode_range(result.syntax).end, start: start), ElmSyntaxExpression_LetDeclaration.LetFunction((declaration: ElmSyntaxNode_Node.Node((end: elmSyntaxNode_range(result.syntax).end, start: elmSyntaxNode_range(nameNode).start), (arguments: arguments.syntax, expression: result.syntax, name: nameNode)), documentation: Maybe_Maybe.Nothing, signature: Maybe_Maybe.Just(ElmSyntaxNode_Node.Node((end: elmSyntaxNode_range(typeAnnotationResult.syntax).end, start: start), (name: ElmSyntaxNode_Node.Node((end: start, start: start), elmSyntaxNode_value(nameNode)), typeAnnotation: typeAnnotationResult.syntax)))))))
                },
                parserFast_symbolFollowedBy(":", elmSyntaxParserLenient_whitespaceAndComments),
                elmSyntaxParserLenient_type_,
                elmSyntaxParserLenient_whitespaceAndCommentsEndsTopIndented,
                elmSyntaxParserLenient_nameLowercaseNodeUnderscoreSuffixingKeywords,
                elmSyntaxParserLenient_whitespaceAndComments,
                elmSyntaxParserLenient_parameterPatternsEquals,
                elmSyntaxParserLenient_whitespaceAndComments,
                elmSyntaxParserLenient_expressionFollowedByWhitespaceAndComments
            )
        );

    static public let elmSyntaxParserLenient_letOrUnqualifiedReferenceExpressionMaybeApplied:ElmSyntaxParserLenient_Parser<ElmSyntaxParserLenient_WithComments<ElmSyntaxNode_Node<ElmSyntaxExpression_Expression>>> =
        parserFast_oneOf2(elmSyntaxParserLenient_letExpressionFollowedByOptimisticLayout, elmSyntaxParserLenient_followedByMultiArgumentApplication(elmSyntaxParserLenient_expressionUnqualifiedFunctionReferenceFollowedByRecordAccess));

    static public func elmSyntaxParserLenient_listFirstWhere<A: Sendable>(_ predicate: @Sendable (A) -> Bool, _ list: List_List<A>) -> Maybe_Maybe<A> {
        ({ () in return switch list {
            case List_List.Empty:
                Maybe_Maybe.Nothing;

            case let List_List.Cons(x, xs):
                ({ () in return switch predicate(x) {
                    case true:
                        Maybe_Maybe.Just(x);

                    case false:
                        elmSyntaxParserLenient_listFirstWhere(predicate, xs);
                 }
                }());
         }
        }())
    }

    static public let elmSyntaxParserLenient_listOrGlslExpressionOptimisticLayout:ElmSyntaxParserLenient_Parser<ElmSyntaxParserLenient_WithComments<ElmSyntaxNode_Node<ElmSyntaxExpression_Expression>>> =
        elmSyntaxParserLenient_followedByOptimisticLayout(elmSyntaxParserLenient_expressionListOrGlsl);

    static public let elmSyntaxParserLenient_listPattern:ElmSyntaxParserLenient_Parser<ElmSyntaxParserLenient_WithComments<ElmSyntaxNode_Node<ElmSyntaxPattern_Pattern>>> =
        parserFast_map2WithRange(
            { (range, commentsBeforeElements, maybeElements) in
                ({ () in return switch maybeElements {
                    case Maybe_Maybe.Nothing:
                        (comments: commentsBeforeElements, syntax: ElmSyntaxNode_Node.Node(range, elmSyntaxParserLenient_patternListEmpty));

                    case let Maybe_Maybe.Just(elements):
                        (comments: elmSyntaxParserLenient_ropePrependTo(elements.comments, commentsBeforeElements), syntax: ElmSyntaxNode_Node.Node(range, ElmSyntaxPattern_Pattern.ListPattern(elements.syntax)));
                 }
                }())
            },
            parserFast_symbolFollowedBy("[", elmSyntaxParserLenient_whitespaceAndComments),
            parserFast_oneOf2(
                parserFast_symbol("]", Maybe_Maybe.Nothing),
                parserFast_followedBySymbol(
                    "]",
                    parserFast_map4(
                        { (commentsBeforeHead, head, commentsAfterHead, tail) in
                            Maybe_Maybe.Just((comments: elmSyntaxParserLenient_ropePrependTo(commentsAfterHead, elmSyntaxParserLenient_ropePrependTo(tail.comments, elmSyntaxParserLenient_ropePrependTo(head.comments, commentsBeforeHead))), syntax: List_List.Cons(head.syntax, tail.syntax)))
                        },
                        parserFast_orSucceed(parserFast_symbolFollowedBy(",", elmSyntaxParserLenient_whitespaceAndComments), elmSyntaxParserLenient_ropeEmpty()),
                        elmSyntaxParserLenient_pattern,
                        elmSyntaxParserLenient_whitespaceAndComments,
                        elmSyntaxParserLenient_manyWithComments(
                            parserFast_symbolFollowedBy(
                                ",",
                                parserFast_map4(
                                    { (commentsBefore, commentsWithExtraComma, v, commentsAfter) in
                                        (comments: elmSyntaxParserLenient_ropePrependTo(commentsAfter, elmSyntaxParserLenient_ropePrependTo(v.comments, elmSyntaxParserLenient_ropePrependTo(commentsWithExtraComma, commentsBefore))), syntax: v.syntax)
                                    },
                                    elmSyntaxParserLenient_whitespaceAndComments,
                                    parserFast_orSucceed(parserFast_symbolFollowedBy(",", elmSyntaxParserLenient_whitespaceAndComments), elmSyntaxParserLenient_ropeEmpty()),
                                    elmSyntaxParserLenient_pattern,
                                    elmSyntaxParserLenient_whitespaceAndComments
                                )
                            )
                        )
                    )
                )
            )
        );

    static public let elmSyntaxParserLenient_literalExpressionOptimisticLayout:ElmSyntaxParserLenient_Parser<ElmSyntaxParserLenient_WithComments<ElmSyntaxNode_Node<ElmSyntaxExpression_Expression>>> =
        elmSyntaxParserLenient_followedByOptimisticLayout(elmSyntaxParserLenient_expressionString);

    static public func elmSyntaxParserLenient_manyWithComments<A: Sendable>(_ p: ParserFast_Parser<ElmSyntaxParserLenient_WithComments<A>>) -> ParserFast_Parser<ElmSyntaxParserLenient_WithComments<List_List<A>>> {
        parserFast_loopWhileSucceeds(
            p,
            (first: elmSyntaxParserLenient_ropeEmpty(), second: List_List.Empty),
            { (pResult, generated_commentsSoFar_itemsSoFar) in
                ({ () in return switch (generated_commentsSoFar_itemsSoFar: generated_commentsSoFar_itemsSoFar, unusedDummyFieldToMakeSwiftHappy: ()) {
                    case let (generated_commentsSoFar_itemsSoFar: (first: commentsSoFar, second: itemsSoFar), unusedDummyFieldToMakeSwiftHappy: ()):
                        (first: elmSyntaxParserLenient_ropePrependTo(pResult.comments, commentsSoFar), second: List_List.Cons(pResult.syntax, itemsSoFar));
                 }
                }())
            },
            { (generated_commentsSoFar_itemsSoFar) in
                ({ () in return switch (generated_commentsSoFar_itemsSoFar: generated_commentsSoFar_itemsSoFar, unusedDummyFieldToMakeSwiftHappy: ()) {
                    case let (generated_commentsSoFar_itemsSoFar: (first: commentsSoFar, second: itemsSoFar), unusedDummyFieldToMakeSwiftHappy: ()):
                        (comments: commentsSoFar, syntax: list_reverse(itemsSoFar));
                 }
                }())
            }
        )
    }

    static public func elmSyntaxParserLenient_manyWithCommentsReverse<A: Sendable>(_ p: ParserFast_Parser<ElmSyntaxParserLenient_WithComments<A>>) -> ParserFast_Parser<ElmSyntaxParserLenient_WithComments<List_List<A>>> {
        parserFast_loopWhileSucceeds(
            p,
            (comments: elmSyntaxParserLenient_ropeEmpty(), syntax: List_List.Empty),
            { (pResult, soFar) in
                (comments: elmSyntaxParserLenient_ropePrependTo(pResult.comments, soFar.comments), syntax: List_List.Cons(pResult.syntax, soFar.syntax))
            },
            { (result) in
                result
            }
        )
    }

    static public let elmSyntaxParserLenient_maybeDotNamesUppercaseTuple:
        ElmSyntaxParserLenient_Parser<
            Maybe_Maybe<
                (first: List_List<String>,
                 second: String
                )
            >
        > =
        parserFast_map2OrSucceed(
            { (firstName, afterFirstName) in
                ({ () in return switch afterFirstName {
                    case Maybe_Maybe.Nothing:
                        Maybe_Maybe.Just((first: List_List.Empty, second: firstName));

                    case let Maybe_Maybe.Just((first: qualificationAfter, second: unqualified)):
                        Maybe_Maybe.Just((first: List_List.Cons(firstName, qualificationAfter), second: unqualified));
                 }
                }())
            },
            parserFast_symbolFollowedBy(".", elmSyntaxParserLenient_nameUppercase),
            parserFast_lazy(
                { (_) in
                    elmSyntaxParserLenient_maybeDotNamesUppercaseTuple
                }
            ),
            Maybe_Maybe.Nothing
        );

    static public let elmSyntaxParserLenient_maybeDotReferenceExpressionTuple:
        ElmSyntaxParserLenient_Parser<
            Maybe_Maybe<
                (first: List_List<String>,
                 second: String
                )
            >
        > =
        parserFast_orSucceed(
            parserFast_symbolFollowedBy(
                ".",
                parserFast_oneOf2Map(
                    Maybe_Maybe.Just,
                    parserFast_map2(
                        { (firstName, after) in
                            ({ () in return switch after {
                                case Maybe_Maybe.Nothing:
                                    (first: List_List.Empty, second: firstName);

                                case let Maybe_Maybe.Just((first: qualificationAfter, second: unqualified)):
                                    (first: List_List.Cons(firstName, qualificationAfter), second: unqualified);
                             }
                            }())
                        },
                        elmSyntaxParserLenient_nameUppercase,
                        parserFast_lazy(
                            { (_) in
                                elmSyntaxParserLenient_maybeDotReferenceExpressionTuple
                            }
                        )
                    ),
                    { (name) in
                        Maybe_Maybe.Just((first: List_List.Empty, second: name))
                    },
                    elmSyntaxParserLenient_nameLowercaseUnderscoreSuffixingKeywords
                )
            ),
            Maybe_Maybe.Nothing
        );

    static public let elmSyntaxParserLenient_moduleHeader:
        ElmSyntaxParserLenient_Parser<
            (comments: ElmSyntaxParserLenient_Comments,
             syntax: ElmSyntaxNode_Node<ElmSyntaxModule_Module>
            )
        > =
        parserFast_oneOf3(elmSyntaxParserLenient_normalModuleDefinition, elmSyntaxParserLenient_portModuleDefinition, elmSyntaxParserLenient_effectModuleDefinition);

    static public let elmSyntaxParserLenient_moduleName:ElmSyntaxParserLenient_Parser<ElmSyntaxNode_Node<ElmSyntaxModuleName_ModuleName>> =
        parserFast_map2WithRange(
            { (range, head, tail) in
                ElmSyntaxNode_Node.Node(range, List_List.Cons(head, tail))
            },
            elmSyntaxParserLenient_nameUppercase,
            parserFast_loopWhileSucceedsRightToLeftStackUnsafe(parserFast_symbolFollowedBy(".", elmSyntaxParserLenient_nameUppercase), List_List.Empty, List_List.Cons)
        );

    static public let elmSyntaxParserLenient_module_:ElmSyntaxParserLenient_Parser<ElmSyntaxFile_File> =
        parserFast_map4(
            { (moduleHeaderResult, moduleComments, importsResult, declarationsResult) in
                ({ () in let moduleHeaderBasedOnExistingPorts:@Sendable (ElmSyntaxModule_DefaultModuleData) -> ElmSyntaxModule_Module =
                    { (existingModuleHeaderInfo) in
                        ({ () in return switch 
                            list_any(
                                { (declarationAndLateImports) in
                                    elmSyntaxParserLenient_declarationIsPort(elmSyntaxNode_value(declarationAndLateImports.declaration))
                                },
                                declarationsResult.syntax
                            )
                          {
                            case true:
                                ElmSyntaxModule_Module.PortModule(existingModuleHeaderInfo);

                            case false:
                                ElmSyntaxModule_Module.NormalModule(existingModuleHeaderInfo);
                         }
                        }())
                    };

                 let importStartLocation:ElmSyntaxRange_Location =
                    ({ () in return switch importsResult.syntax {
                        case let List_List.Cons(ElmSyntaxNode_Node.Node(import0Range, _), _):
                            import0Range.start;

                        case List_List.Empty:
                            ({ () in return switch declarationsResult.syntax {
                                case let List_List.Cons(declarationAndLateImports0, _):
                                    elmSyntaxNode_range(declarationAndLateImports0.declaration).start;

                                case List_List.Empty:
                                    (column: 1.0, row: 2.0);
                             }
                            }());
                     }
                    }());

                 return (comments: elmSyntaxParserLenient_commentsToList(elmSyntaxParserLenient_ropePrependTo(declarationsResult.comments, elmSyntaxParserLenient_ropePrependTo(importsResult.comments, elmSyntaxParserLenient_ropePrependTo(moduleComments, moduleHeaderResult.comments)))),
                  declarations:
                    list_map(
                        { (generated_record) in
                            generated_record.declaration
                        },
                        declarationsResult.syntax
                    ),
                  imports:
                    list_append(
                        list_map(
                            { (generated_lateImport) in
                                ({ () in return switch (generated_lateImport: generated_lateImport, unusedDummyFieldToMakeSwiftHappy: ()) {
                                    case let (generated_lateImport: ElmSyntaxNode_Node.Node(_, lateImport), unusedDummyFieldToMakeSwiftHappy: ()):
                                        ElmSyntaxNode_Node.Node((end: importStartLocation, start: importStartLocation), lateImport);
                                 }
                                }())
                            },
                            list_concatMap(
                                { (generated_record) in
                                    generated_record.lateImports
                                },
                                declarationsResult.syntax
                            )
                        ),
                        importsResult.syntax
                    ),
                  moduleDefinition:
                    elmSyntaxNode_map(
                        { (syntaxModuleHeader) in
                            ({ () in return switch syntaxModuleHeader {
                                case let ElmSyntaxModule_Module.EffectModule(effectModuleHeader):
                                    ElmSyntaxModule_Module.EffectModule(effectModuleHeader);

                                case let ElmSyntaxModule_Module.NormalModule(normalModuleHeader):
                                    moduleHeaderBasedOnExistingPorts(normalModuleHeader);

                                case let ElmSyntaxModule_Module.PortModule(normalModuleHeader):
                                    moduleHeaderBasedOnExistingPorts(normalModuleHeader);
                             }
                            }())
                        },
                        moduleHeaderResult.syntax
                    )
                 )
                }())
            },
            elmSyntaxParserLenient_whitespaceAndCommentsEndsTopIndentedFollowedByWithComments(elmSyntaxParserLenient_moduleHeader),
            elmSyntaxParserLenient_whitespaceAndCommentsEndsTopIndentedFollowedByComments(
                parserFast_map2OrSucceed(
                    { (moduleDocumentation, commentsAfter) in
                        elmSyntaxParserLenient_ropeFilledPrependTo(commentsAfter, elmSyntaxParserLenient_ropeOne(moduleDocumentation))
                    },
                    elmSyntaxParserLenient_documentationComment,
                    elmSyntaxParserLenient_whitespaceAndCommentsEndsTopIndented,
                    elmSyntaxParserLenient_ropeEmpty()
                )
            ),
            elmSyntaxParserLenient_manyWithComments(elmSyntaxParserLenient_import_),
            elmSyntaxParserLenient_manyWithComments(
                elmSyntaxParserLenient_topIndentedFollowedBy(
                    parserFast_map3(
                        { (declarationParsed, commentsAfter, lateImportsResult) in
                            (comments: elmSyntaxParserLenient_ropePrependTo(lateImportsResult.comments, elmSyntaxParserLenient_ropePrependTo(commentsAfter, declarationParsed.comments)), syntax: (declaration: declarationParsed.syntax, lateImports: lateImportsResult.syntax))
                        },
                        elmSyntaxParserLenient_declaration,
                        elmSyntaxParserLenient_whitespaceAndComments,
                        elmSyntaxParserLenient_manyWithComments(elmSyntaxParserLenient_import_)
                    )
                )
            )
        );

    static public let elmSyntaxParserLenient_multiLineComment:ElmSyntaxParserLenient_Parser<ElmSyntaxNode_Node<String>> =
        parserFast_offsetSourceAndThen(
            { (offset, source) in
                ({ () in return switch string_slice(basics_add(offset, 2.0), basics_add(offset, 3.0), source) {
                    case "|":
                        parserFast_problem();

                    case _:
                        elmSyntaxParserLenient_multiLineCommentNoCheck;
                 }
                }())
            }
        );

    static public let elmSyntaxParserLenient_multiLineCommentNoCheck:ElmSyntaxParserLenient_Parser<ElmSyntaxNode_Node<String>> =
        parserFast_nestableMultiCommentMapWithRange(ElmSyntaxNode_Node.Node, (first: "{", second: "-"), (first: "-", second: "}"));

    static public let elmSyntaxParserLenient_nameLowercase:ElmSyntaxParserLenient_Parser<String> =
        parserFast_ifFollowedByWhileValidateWithoutLinebreak(charExtra_unicodeIsLowerFast, charExtra_unicodeIsAlphaNumOrUnderscoreFast, elmSyntaxParserLenient_isNotReserved);

    static public func elmSyntaxParserLenient_nameLowercaseMapWithRange<Res: Sendable>(_ rangeAndNameToResult: @Sendable (ElmSyntaxRange_Range, String) -> Res) -> ElmSyntaxParserLenient_Parser<Res> {
        parserFast_ifFollowedByWhileValidateMapWithRangeWithoutLinebreak(rangeAndNameToResult, charExtra_unicodeIsLowerFast, charExtra_unicodeIsAlphaNumOrUnderscoreFast, elmSyntaxParserLenient_isNotReserved)
    }

    static public let elmSyntaxParserLenient_nameLowercaseNode:ElmSyntaxParserLenient_Parser<ElmSyntaxNode_Node<String>> =
        parserFast_ifFollowedByWhileValidateMapWithRangeWithoutLinebreak(ElmSyntaxNode_Node.Node, charExtra_unicodeIsLowerFast, charExtra_unicodeIsAlphaNumOrUnderscoreFast, elmSyntaxParserLenient_isNotReserved);

    static public let elmSyntaxParserLenient_nameLowercaseNodeUnderscoreSuffixingKeywords:ElmSyntaxParserLenient_Parser<ElmSyntaxNode_Node<String>> =
        parserFast_ifFollowedByWhileMapWithRangeWithoutLinebreak(
            { (range, name) in
                ElmSyntaxNode_Node.Node(range, elmSyntaxParserLenient_ifKeywordUnderscoreSuffix(name))
            },
            charExtra_unicodeIsLowerFast,
            charExtra_unicodeIsAlphaNumOrUnderscoreFast
        );

    static public let elmSyntaxParserLenient_nameLowercaseUnderscoreSuffixingKeywords:ElmSyntaxParserLenient_Parser<String> =
        parserFast_ifFollowedByWhileMapWithoutLinebreak(elmSyntaxParserLenient_ifKeywordUnderscoreSuffix, charExtra_unicodeIsLowerFast, charExtra_unicodeIsAlphaNumOrUnderscoreFast);

    static public let elmSyntaxParserLenient_nameUppercase:ElmSyntaxParserLenient_Parser<String> =
        parserFast_ifFollowedByWhileWithoutLinebreak(charExtra_unicodeIsUpperFast, charExtra_unicodeIsAlphaNumOrUnderscoreFast);

    static public func elmSyntaxParserLenient_nameUppercaseMapWithRange<Res: Sendable>(_ rangeAndNameToRes: @Sendable (ElmSyntaxRange_Range, String) -> Res) -> ElmSyntaxParserLenient_Parser<Res> {
        parserFast_ifFollowedByWhileMapWithRangeWithoutLinebreak(rangeAndNameToRes, charExtra_unicodeIsUpperFast, charExtra_unicodeIsAlphaNumOrUnderscoreFast)
    }

    static public let elmSyntaxParserLenient_nameUppercaseNode:ElmSyntaxParserLenient_Parser<ElmSyntaxNode_Node<String>> =
        parserFast_ifFollowedByWhileMapWithRangeWithoutLinebreak(ElmSyntaxNode_Node.Node, charExtra_unicodeIsUpperFast, charExtra_unicodeIsAlphaNumOrUnderscoreFast);

    static public let elmSyntaxParserLenient_negationAfterMinus:ElmSyntaxParserLenient_Parser<ElmSyntaxParserLenient_WithComments<ElmSyntaxNode_Node<ElmSyntaxExpression_Expression>>> =
        parserFast_map(
            { (subExpressionResult) in
                ({ () in return switch subExpressionResult.syntax {
                    case let ElmSyntaxNode_Node.Node(subExpressionRange, _):
                        (comments: subExpressionResult.comments, syntax: ElmSyntaxNode_Node.Node((end: subExpressionRange.end, start: (column: basics_sub(subExpressionRange.start.column, 1.0), row: subExpressionRange.start.row)), ElmSyntaxExpression_Expression.Negation(subExpressionResult.syntax)));
                 }
                }())
            },
            elmSyntaxParserLenient_subExpression
        );

    static public let elmSyntaxParserLenient_negationOperationOptimisticLayout:ElmSyntaxParserLenient_Parser<ElmSyntaxParserLenient_WithComments<ElmSyntaxNode_Node<ElmSyntaxExpression_Expression>>> =
        elmSyntaxParserLenient_followedByOptimisticLayout(elmSyntaxParserLenient_expressionNegation);

    static public let elmSyntaxParserLenient_normalModuleDefinition:ElmSyntaxParserLenient_Parser<ElmSyntaxParserLenient_WithComments<ElmSyntaxNode_Node<ElmSyntaxModule_Module>>> =
        parserFast_map4WithRange(
            { (range, commentsAfterModule, moduleNameNode, commentsAfterModuleName, exposingList) in
                (comments: elmSyntaxParserLenient_ropePrependTo(exposingList.comments, elmSyntaxParserLenient_ropePrependTo(commentsAfterModuleName, commentsAfterModule)), syntax: ElmSyntaxNode_Node.Node(range, ElmSyntaxModule_Module.NormalModule((exposingList: exposingList.syntax, moduleName: moduleNameNode))))
            },
            parserFast_keywordFollowedBy("module", elmSyntaxParserLenient_whitespaceAndComments),
            elmSyntaxParserLenient_moduleName,
            elmSyntaxParserLenient_whitespaceAndComments,
            elmSyntaxParserLenient_exposeDefinition
        );

    static public let elmSyntaxParserLenient_numberPart:ElmSyntaxParserLenient_Parser<ElmSyntaxParserLenient_WithComments<ElmSyntaxNode_Node<ElmSyntaxPattern_Pattern>>> =
        parserFast_integerDecimalOrHexadecimalMapWithRange(
            { (range, n) in
                (comments: elmSyntaxParserLenient_ropeEmpty(), syntax: ElmSyntaxNode_Node.Node(range, ElmSyntaxPattern_Pattern.IntPattern(n)))
            },
            { (range, n) in
                (comments: elmSyntaxParserLenient_ropeEmpty(), syntax: ElmSyntaxNode_Node.Node(range, ElmSyntaxPattern_Pattern.HexPattern(n)))
            }
        );

    static public let elmSyntaxParserLenient_parameterPatternsEquals:ElmSyntaxParserLenient_Parser<ElmSyntaxParserLenient_WithComments<List_List<ElmSyntaxNode_Node<ElmSyntaxPattern_Pattern>>>> =
        elmSyntaxParserLenient_untilWithComments(
            parserFast_oneOf2(parserFast_symbol("=", ()), parserFast_symbol("->", ())),
            parserFast_map2(
                { (patternResult, commentsAfterPattern) in
                    (comments: elmSyntaxParserLenient_ropePrependTo(commentsAfterPattern, patternResult.comments), syntax: patternResult.syntax)
                },
                elmSyntaxParserLenient_patternNotSpaceSeparated,
                elmSyntaxParserLenient_whitespaceAndComments
            )
        );

    static public let elmSyntaxParserLenient_parensPattern:ElmSyntaxParserLenient_Parser<ElmSyntaxParserLenient_WithComments<ElmSyntaxNode_Node<ElmSyntaxPattern_Pattern>>> =
        parserFast_symbolFollowedBy(
            "(",
            parserFast_map2WithRange(
                { (range, commentsBeforeHead, contentResult) in
                    (comments: elmSyntaxParserLenient_ropePrependTo(contentResult.comments, commentsBeforeHead), syntax: ElmSyntaxNode_Node.Node((end: range.end, start: (column: basics_sub(range.start.column, 1.0), row: range.start.row)), contentResult.syntax))
                },
                elmSyntaxParserLenient_whitespaceAndComments,
                parserFast_oneOf2(
                    parserFast_symbol(")", (comments: elmSyntaxParserLenient_ropeEmpty(), syntax: ElmSyntaxPattern_Pattern.UnitPattern)),
                    parserFast_map3(
                        { (headResult, commentsAfterHead, tailResult) in
                            (comments: elmSyntaxParserLenient_ropePrependTo(tailResult.comments, elmSyntaxParserLenient_ropePrependTo(commentsAfterHead, headResult.comments)),
                             syntax:
                                ({ () in return switch tailResult.syntax {
                                    case Maybe_Maybe.Nothing:
                                        ElmSyntaxPattern_Pattern.ParenthesizedPattern(headResult.syntax);

                                    case let Maybe_Maybe.Just(secondAndMaybeThirdPart):
                                        ({ () in return switch secondAndMaybeThirdPart.maybeThirdPart {
                                            case Maybe_Maybe.Nothing:
                                                ElmSyntaxPattern_Pattern.TuplePattern(List_List.Cons(headResult.syntax, List_List.Cons(secondAndMaybeThirdPart.secondPart, List_List.Empty)));

                                            case let Maybe_Maybe.Just(thirdPart):
                                                ElmSyntaxPattern_Pattern.TuplePattern(List_List.Cons(headResult.syntax, List_List.Cons(secondAndMaybeThirdPart.secondPart, List_List.Cons(thirdPart, List_List.Empty))));
                                         }
                                        }());
                                 }
                                }())
                            )
                        },
                        elmSyntaxParserLenient_pattern,
                        elmSyntaxParserLenient_whitespaceAndComments,
                        parserFast_oneOf2(
                            parserFast_symbol(")", (comments: elmSyntaxParserLenient_ropeEmpty(), syntax: Maybe_Maybe.Nothing)),
                            parserFast_symbolFollowedBy(
                                ",",
                                parserFast_map4(
                                    { (commentsBefore, secondPart, commentsAfter, maybeThirdPart) in
                                        (comments: elmSyntaxParserLenient_ropePrependTo(maybeThirdPart.comments, elmSyntaxParserLenient_ropePrependTo(commentsAfter, elmSyntaxParserLenient_ropePrependTo(secondPart.comments, commentsBefore))), syntax: Maybe_Maybe.Just((maybeThirdPart: maybeThirdPart.syntax, secondPart: secondPart.syntax)))
                                    },
                                    elmSyntaxParserLenient_whitespaceAndComments,
                                    elmSyntaxParserLenient_pattern,
                                    elmSyntaxParserLenient_whitespaceAndComments,
                                    parserFast_oneOf2(
                                        parserFast_symbol(")", (comments: elmSyntaxParserLenient_ropeEmpty(), syntax: Maybe_Maybe.Nothing)),
                                        parserFast_symbolFollowedBy(
                                            ",",
                                            parserFast_followedBySymbol(
                                                ")",
                                                parserFast_map3(
                                                    { (commentsBefore, thirdPart, commentsAfter) in
                                                        (comments: elmSyntaxParserLenient_ropePrependTo(commentsAfter, elmSyntaxParserLenient_ropePrependTo(thirdPart.comments, commentsBefore)), syntax: Maybe_Maybe.Just(thirdPart.syntax))
                                                    },
                                                    elmSyntaxParserLenient_whitespaceAndComments,
                                                    elmSyntaxParserLenient_pattern,
                                                    elmSyntaxParserLenient_whitespaceAndComments
                                                )
                                            )
                                        )
                                    )
                                )
                            )
                        )
                    )
                )
            )
        );

    static public let elmSyntaxParserLenient_pattern:
        ElmSyntaxParserLenient_Parser<
            (comments: ElmSyntaxParserLenient_Comments,
             syntax: ElmSyntaxNode_Node<ElmSyntaxPattern_Pattern>
            )
        > =
        parserFast_map2(
            { (leftMaybeConsed, maybeAsExtension) in
                ({ () in return switch maybeAsExtension {
                    case Maybe_Maybe.Nothing:
                        leftMaybeConsed;

                    case let Maybe_Maybe.Just(asExtension):
                        (comments: elmSyntaxParserLenient_ropePrependTo(asExtension.comments, leftMaybeConsed.comments), syntax: elmSyntaxNode_combine(ElmSyntaxPattern_Pattern.AsPattern, leftMaybeConsed.syntax, asExtension.syntax));
                 }
                }())
            },
            parserFast_loopWhileSucceedsOntoResultFromParserRightToLeftStackUnsafe(
                parserFast_map2(
                    { (startPatternResult, commentsAfter) in
                        (comments: elmSyntaxParserLenient_ropePrependTo(commentsAfter, startPatternResult.comments), syntax: startPatternResult.syntax)
                    },
                    parserFast_lazy(
                        { (_) in
                            elmSyntaxParserLenient_composablePattern
                        }
                    ),
                    elmSyntaxParserLenient_whitespaceAndComments
                ),
                parserFast_symbolFollowedBy(
                    "::",
                    parserFast_map3(
                        { (commentsAfterCons, patternResult, commentsAfterTailSubPattern) in
                            (comments: elmSyntaxParserLenient_ropePrependTo(commentsAfterTailSubPattern, elmSyntaxParserLenient_ropePrependTo(patternResult.comments, commentsAfterCons)), syntax: patternResult.syntax)
                        },
                        elmSyntaxParserLenient_whitespaceAndComments,
                        parserFast_lazy(
                            { (_) in
                                elmSyntaxParserLenient_composablePattern
                            }
                        ),
                        elmSyntaxParserLenient_whitespaceAndComments
                    )
                ),
                { (consed, afterCons) in
                    (comments: elmSyntaxParserLenient_ropePrependTo(afterCons.comments, consed.comments), syntax: elmSyntaxNode_combine(ElmSyntaxPattern_Pattern.UnConsPattern, consed.syntax, afterCons.syntax))
                }
            ),
            parserFast_orSucceed(
                parserFast_keywordFollowedBy(
                    "as",
                    parserFast_map2(
                        { (commentsAfterAs, name) in
                            Maybe_Maybe.Just((comments: commentsAfterAs, syntax: name))
                        },
                        elmSyntaxParserLenient_whitespaceAndComments,
                        elmSyntaxParserLenient_nameLowercaseNodeUnderscoreSuffixingKeywords
                    )
                ),
                Maybe_Maybe.Nothing
            )
        );

    static public let elmSyntaxParserLenient_patternListEmpty:ElmSyntaxPattern_Pattern =
        ElmSyntaxPattern_Pattern.ListPattern(List_List.Empty);

    static public let elmSyntaxParserLenient_patternNotSpaceSeparated:ElmSyntaxParserLenient_Parser<ElmSyntaxParserLenient_WithComments<ElmSyntaxNode_Node<ElmSyntaxPattern_Pattern>>> =
        parserFast_oneOf9(elmSyntaxParserLenient_varPattern, elmSyntaxParserLenient_qualifiedPatternWithoutConsumeArgs, elmSyntaxParserLenient_allPattern, elmSyntaxParserLenient_parensPattern, elmSyntaxParserLenient_recordPattern, elmSyntaxParserLenient_stringPattern, elmSyntaxParserLenient_listPattern, elmSyntaxParserLenient_numberPart, elmSyntaxParserLenient_charPattern);

    static public let elmSyntaxParserLenient_portDeclarationAfterDocumentation:ElmSyntaxParserLenient_Parser<ElmSyntaxParserLenient_WithComments<ElmSyntaxParserLenient_DeclarationAfterDocumentation>> =
        parserFast_map5(
            { (commentsAfterPort, nameNode, commentsAfterName, commentsAfterColon, typeAnnotationResult) in
                ({ () in return switch nameNode {
                    case let ElmSyntaxNode_Node.Node(nameRange, _):
                        (comments: elmSyntaxParserLenient_ropePrependTo(commentsAfterColon, elmSyntaxParserLenient_ropePrependTo(typeAnnotationResult.comments, elmSyntaxParserLenient_ropePrependTo(commentsAfterName, commentsAfterPort))), syntax: ElmSyntaxParserLenient_DeclarationAfterDocumentation.PortDeclarationAfterDocumentation((name: nameNode, startLocation: (column: 1.0, row: nameRange.start.row), typeAnnotation: typeAnnotationResult.syntax)));
                 }
                }())
            },
            parserFast_keywordFollowedBy("port", elmSyntaxParserLenient_whitespaceAndComments),
            elmSyntaxParserLenient_nameLowercaseNodeUnderscoreSuffixingKeywords,
            elmSyntaxParserLenient_whitespaceAndComments,
            parserFast_symbolFollowedBy(":", elmSyntaxParserLenient_whitespaceAndComments),
            elmSyntaxParserLenient_type_
        );

    static public let elmSyntaxParserLenient_portDeclarationWithoutDocumentation:ElmSyntaxParserLenient_Parser<ElmSyntaxParserLenient_WithComments<ElmSyntaxNode_Node<ElmSyntaxDeclaration_Declaration>>> =
        parserFast_map5(
            { (commentsAfterPort, nameNode, commentsAfterName, commentsAfterColon, typeAnnotationResult) in
                ({ () in return switch nameNode {
                    case let ElmSyntaxNode_Node.Node(nameRange, _):
                        ({ () in return switch typeAnnotationResult.syntax {
                            case let ElmSyntaxNode_Node.Node(typeRange, _):
                                (comments: elmSyntaxParserLenient_ropePrependTo(typeAnnotationResult.comments, elmSyntaxParserLenient_ropePrependTo(commentsAfterColon, elmSyntaxParserLenient_ropePrependTo(commentsAfterName, commentsAfterPort))), syntax: ElmSyntaxNode_Node.Node((end: typeRange.end, start: (column: 1.0, row: nameRange.start.row)), ElmSyntaxDeclaration_Declaration.PortDeclaration((name: nameNode, typeAnnotation: typeAnnotationResult.syntax))));
                         }
                        }());
                 }
                }())
            },
            parserFast_keywordFollowedBy("port", elmSyntaxParserLenient_whitespaceAndComments),
            elmSyntaxParserLenient_nameLowercaseNodeUnderscoreSuffixingKeywords,
            elmSyntaxParserLenient_whitespaceAndComments,
            parserFast_symbolFollowedBy(":", elmSyntaxParserLenient_whitespaceAndComments),
            elmSyntaxParserLenient_type_
        );

    static public let elmSyntaxParserLenient_portModuleDefinition:ElmSyntaxParserLenient_Parser<ElmSyntaxParserLenient_WithComments<ElmSyntaxNode_Node<ElmSyntaxModule_Module>>> =
        parserFast_map5WithRange(
            { (range, commentsAfterPort, commentsAfterModule, moduleNameNode, commentsAfterModuleName, exposingList) in
                (comments: elmSyntaxParserLenient_ropePrependTo(exposingList.comments, elmSyntaxParserLenient_ropePrependTo(commentsAfterModuleName, elmSyntaxParserLenient_ropePrependTo(commentsAfterModule, commentsAfterPort))), syntax: ElmSyntaxNode_Node.Node(range, ElmSyntaxModule_Module.PortModule((exposingList: exposingList.syntax, moduleName: moduleNameNode))))
            },
            parserFast_keywordFollowedBy("port", elmSyntaxParserLenient_whitespaceAndComments),
            parserFast_keywordFollowedBy("module", elmSyntaxParserLenient_whitespaceAndComments),
            elmSyntaxParserLenient_moduleName,
            elmSyntaxParserLenient_whitespaceAndComments,
            elmSyntaxParserLenient_exposeDefinition
        );

    static public func elmSyntaxParserLenient_positivelyIndentedFollowedBy<A: Sendable>(_ nextParser: ElmSyntaxParserLenient_Parser<A>) -> ElmSyntaxParserLenient_Parser<A> {
        parserFast_columnIndentAndThen(
            { (column, indent) in
                ({ () in return switch 
                    basics_and(
                        basics_gt(column, 1.0),
                        list_all(
                            { (nestedIndent) in
                                basics_neq(column, nestedIndent)
                            },
                            indent
                        )
                    )
                  {
                    case true:
                        nextParser;

                    case false:
                        parserFast_problem();
                 }
                }())
            }
        )
    }

    static public let elmSyntaxParserLenient_precedence1ApL:ElmSyntaxParserLenient_InfixOperatorInfo =
        elmSyntaxParserLenient_infixRight(1.0, "<|");

    static public let elmSyntaxParserLenient_precedence1ApR:ElmSyntaxParserLenient_InfixOperatorInfo =
        elmSyntaxParserLenient_infixLeft(1.0, "|>");

    static public let elmSyntaxParserLenient_precedence2Or:ElmSyntaxParserLenient_InfixOperatorInfo =
        elmSyntaxParserLenient_infixRight(2.0, "||");

    static public let elmSyntaxParserLenient_precedence3And:ElmSyntaxParserLenient_InfixOperatorInfo =
        elmSyntaxParserLenient_infixRight(3.0, "&&");

    static public let elmSyntaxParserLenient_precedence4Eq:ElmSyntaxParserLenient_InfixOperatorInfo =
        elmSyntaxParserLenient_infixNonAssociative(4.0, "==");

    static public let elmSyntaxParserLenient_precedence4Ge:ElmSyntaxParserLenient_InfixOperatorInfo =
        elmSyntaxParserLenient_infixNonAssociative(4.0, ">=");

    static public let elmSyntaxParserLenient_precedence4Gt:ElmSyntaxParserLenient_InfixOperatorInfo =
        elmSyntaxParserLenient_infixNonAssociative(4.0, ">");

    static public let elmSyntaxParserLenient_precedence4Le:ElmSyntaxParserLenient_InfixOperatorInfo =
        elmSyntaxParserLenient_infixNonAssociative(4.0, "<=");

    static public let elmSyntaxParserLenient_precedence4Lt:ElmSyntaxParserLenient_InfixOperatorInfo =
        elmSyntaxParserLenient_infixNonAssociative(4.0, "<");

    static public let elmSyntaxParserLenient_precedence4Neq:ElmSyntaxParserLenient_InfixOperatorInfo =
        elmSyntaxParserLenient_infixNonAssociative(4.0, "/=");

    static public let elmSyntaxParserLenient_precedence5Cons:ElmSyntaxParserLenient_InfixOperatorInfo =
        elmSyntaxParserLenient_infixRight(5.0, "::");

    static public let elmSyntaxParserLenient_precedence5Keep:ElmSyntaxParserLenient_InfixOperatorInfo =
        elmSyntaxParserLenient_infixLeft(5.0, "|=");

    static public let elmSyntaxParserLenient_precedence5append:ElmSyntaxParserLenient_InfixOperatorInfo =
        elmSyntaxParserLenient_infixRight(5.0, "++");

    static public let elmSyntaxParserLenient_precedence6Add:ElmSyntaxParserLenient_InfixOperatorInfo =
        elmSyntaxParserLenient_infixLeft(6.0, "+");

    static public let elmSyntaxParserLenient_precedence6Ignore:ElmSyntaxParserLenient_InfixOperatorInfo =
        elmSyntaxParserLenient_infixLeft(6.0, "|.");

    static public let elmSyntaxParserLenient_precedence6Sub:ElmSyntaxParserLenient_InfixOperatorInfo =
        elmSyntaxParserLenient_infixLeft(6.0, "-");

    static public let elmSyntaxParserLenient_precedence7Fdiv:ElmSyntaxParserLenient_InfixOperatorInfo =
        elmSyntaxParserLenient_infixLeft(7.0, "/");

    static public let elmSyntaxParserLenient_precedence7Idiv:ElmSyntaxParserLenient_InfixOperatorInfo =
        elmSyntaxParserLenient_infixLeft(7.0, "//");

    static public let elmSyntaxParserLenient_precedence7Mul:ElmSyntaxParserLenient_InfixOperatorInfo =
        elmSyntaxParserLenient_infixLeft(7.0, "*");

    static public let elmSyntaxParserLenient_precedence7Slash:ElmSyntaxParserLenient_InfixOperatorInfo =
        elmSyntaxParserLenient_infixRight(7.0, "</>");

    static public let elmSyntaxParserLenient_precedence8Pow:ElmSyntaxParserLenient_InfixOperatorInfo =
        elmSyntaxParserLenient_infixRight(8.0, "^");

    static public let elmSyntaxParserLenient_precedence8QuestionMark:ElmSyntaxParserLenient_InfixOperatorInfo =
        elmSyntaxParserLenient_infixLeft(8.0, "<?>");

    static public let elmSyntaxParserLenient_precedence9ComposeL:ElmSyntaxParserLenient_InfixOperatorInfo =
        elmSyntaxParserLenient_infixLeft(9.0, "<<");

    static public let elmSyntaxParserLenient_precedence9ComposeR:ElmSyntaxParserLenient_InfixOperatorInfo =
        elmSyntaxParserLenient_infixRight(9.0, ">>");

    static public let elmSyntaxParserLenient_qualifiedNameRefNode:ElmSyntaxParserLenient_Parser<ElmSyntaxNode_Node<ElmSyntaxPattern_QualifiedNameRef>> =
        parserFast_map2WithRange(
            { (range, firstName, after) in
                ElmSyntaxNode_Node.Node(
                    range,
                    ({ () in return switch after {
                        case Maybe_Maybe.Nothing:
                            (moduleName: List_List.Empty, name: firstName);

                        case let Maybe_Maybe.Just((first: qualificationAfter, second: unqualified)):
                            (moduleName: List_List.Cons(firstName, qualificationAfter), name: unqualified);
                     }
                    }())
                )
            },
            elmSyntaxParserLenient_nameUppercase,
            elmSyntaxParserLenient_maybeDotNamesUppercaseTuple
        );

    static public let elmSyntaxParserLenient_qualifiedPatternWithConsumeArgs:ElmSyntaxParserLenient_Parser<ElmSyntaxParserLenient_WithComments<ElmSyntaxNode_Node<ElmSyntaxPattern_Pattern>>> =
        parserFast_map3(
            { (generated_nameRange_name, afterStartName, argsReverse) in
                ({ () in return switch (generated_nameRange_name: generated_nameRange_name, unusedDummyFieldToMakeSwiftHappy: ()) {
                    case let (generated_nameRange_name: ElmSyntaxNode_Node.Node(nameRange, name), unusedDummyFieldToMakeSwiftHappy: ()):
                        ({ () in let range:ElmSyntaxRange_Range =
                            ({ () in return switch argsReverse.syntax {
                                case List_List.Empty:
                                    nameRange;

                                case let List_List.Cons(ElmSyntaxNode_Node.Node(lastArgRange, _), _):
                                    (end: lastArgRange.end, start: nameRange.start);
                             }
                            }());

                         return (comments: elmSyntaxParserLenient_ropePrependTo(argsReverse.comments, afterStartName), syntax: ElmSyntaxNode_Node.Node(range, ElmSyntaxPattern_Pattern.NamedPattern(name, list_reverse(argsReverse.syntax))))
                        }());
                 }
                }())
            },
            elmSyntaxParserLenient_qualifiedNameRefNode,
            elmSyntaxParserLenient_whitespaceAndComments,
            elmSyntaxParserLenient_manyWithCommentsReverse(
                parserFast_map2(
                    { (arg, commentsAfterArg) in
                        (comments: elmSyntaxParserLenient_ropePrependTo(commentsAfterArg, arg.comments), syntax: arg.syntax)
                    },
                    elmSyntaxParserLenient_patternNotSpaceSeparated,
                    elmSyntaxParserLenient_whitespaceAndComments
                )
            )
        );

    static public let elmSyntaxParserLenient_qualifiedPatternWithoutConsumeArgs:ElmSyntaxParserLenient_Parser<ElmSyntaxParserLenient_WithComments<ElmSyntaxNode_Node<ElmSyntaxPattern_Pattern>>> =
        parserFast_map2WithRange(
            { (range, firstName, after) in
                (comments: elmSyntaxParserLenient_ropeEmpty(),
                 syntax:
                    ElmSyntaxNode_Node.Node(
                        range,
                        ElmSyntaxPattern_Pattern.NamedPattern(
                            ({ () in return switch after {
                                case Maybe_Maybe.Nothing:
                                    (moduleName: List_List.Empty, name: firstName);

                                case let Maybe_Maybe.Just((first: qualificationAfter, second: unqualified)):
                                    (moduleName: List_List.Cons(firstName, qualificationAfter), name: unqualified);
                             }
                            }()),
                            List_List.Empty
                        )
                    )
                )
            },
            elmSyntaxParserLenient_nameUppercase,
            elmSyntaxParserLenient_maybeDotNamesUppercaseTuple
        );

    static public func elmSyntaxParserLenient_rangeMoveStartLeftByOneColumn(_ range: ElmSyntaxRange_Range) -> ElmSyntaxRange_Range {
        (end: range.end, start: (column: basics_sub(range.start.column, 1.0), row: range.start.row))
    }

    static public let elmSyntaxParserLenient_recordAccessFunctionExpressionMaybeApplied:ElmSyntaxParserLenient_Parser<ElmSyntaxParserLenient_WithComments<ElmSyntaxNode_Node<ElmSyntaxExpression_Expression>>> =
        elmSyntaxParserLenient_followedByMultiArgumentApplication(elmSyntaxParserLenient_expressionRecordAccessFunction);

    static public let elmSyntaxParserLenient_recordContentsFollowedByCurlyEnd:ElmSyntaxParserLenient_Parser<ElmSyntaxParserLenient_WithComments<ElmSyntaxExpression_Expression>> =
        parserFast_oneOf3(
            parserFast_map5(
                { (nameNode, commentsAfterName, afterNameBeforeFields, tailFields, commentsBeforeClosingCurly) in
                    (comments: elmSyntaxParserLenient_ropePrependTo(commentsBeforeClosingCurly, elmSyntaxParserLenient_ropePrependTo(tailFields.comments, elmSyntaxParserLenient_ropePrependTo(afterNameBeforeFields.comments, commentsAfterName))),
                     syntax:
                        ({ () in return switch afterNameBeforeFields.syntax {
                            case let ElmSyntaxParserLenient_RecordFieldsOrUpdateAfterName.RecordUpdateFirstSetter(firstField):
                                ElmSyntaxExpression_Expression.RecordUpdateExpression(nameNode, List_List.Cons(firstField, tailFields.syntax));

                            case let ElmSyntaxParserLenient_RecordFieldsOrUpdateAfterName.FieldsFirstValue(firstFieldValue):
                                ElmSyntaxExpression_Expression.RecordExpr(List_List.Cons(elmSyntaxNode_combine(tuple_pair, nameNode, firstFieldValue), tailFields.syntax));

                            case ElmSyntaxParserLenient_RecordFieldsOrUpdateAfterName.FieldsFirstValuePunned(_):
                                ElmSyntaxExpression_Expression.RecordExpr(List_List.Cons(ElmSyntaxNode_Node.Node(elmSyntaxNode_range(nameNode), (first: nameNode, second: ElmSyntaxNode_Node.Node((end: elmSyntaxNode_range(nameNode).end, start: elmSyntaxNode_range(nameNode).end), ElmSyntaxExpression_Expression.FunctionOrValue(List_List.Empty, elmSyntaxNode_value(nameNode))))), tailFields.syntax));
                         }
                        }())
                    )
                },
                elmSyntaxParserLenient_nameLowercaseNodeUnderscoreSuffixingKeywords,
                elmSyntaxParserLenient_whitespaceAndComments,
                parserFast_oneOf2(
                    parserFast_symbolFollowedBy(
                        "|",
                        parserFast_map2(
                            { (commentsBefore, setterResult) in
                                (comments: elmSyntaxParserLenient_ropePrependTo(setterResult.comments, commentsBefore), syntax: ElmSyntaxParserLenient_RecordFieldsOrUpdateAfterName.RecordUpdateFirstSetter(setterResult.syntax))
                            },
                            elmSyntaxParserLenient_whitespaceAndComments,
                            elmSyntaxParserLenient_recordSetterNodeFollowedByWhitespaceAndComments
                        )
                    ),
                    parserFast_map2(
                        { (commentsBefore, maybeValueResult) in
                            ({ () in return switch maybeValueResult {
                                case Maybe_Maybe.Nothing:
                                    (comments: commentsBefore, syntax: ElmSyntaxParserLenient_RecordFieldsOrUpdateAfterName.FieldsFirstValuePunned(()));

                                case let Maybe_Maybe.Just(expressionResult):
                                    (comments: elmSyntaxParserLenient_ropePrependTo(expressionResult.comments, commentsBefore), syntax: ElmSyntaxParserLenient_RecordFieldsOrUpdateAfterName.FieldsFirstValue(expressionResult.syntax));
                             }
                            }())
                        },
                        parserFast_oneOf2OrSucceed(parserFast_symbolFollowedBy(":", elmSyntaxParserLenient_whitespaceAndComments), parserFast_symbolFollowedBy("=", elmSyntaxParserLenient_whitespaceAndComments), elmSyntaxParserLenient_ropeEmpty()),
                        parserFast_mapOrSucceed(Maybe_Maybe.Just, elmSyntaxParserLenient_expressionFollowedByWhitespaceAndComments, Maybe_Maybe.Nothing)
                    )
                ),
                elmSyntaxParserLenient_recordFields,
                parserFast_followedBySymbol("}", elmSyntaxParserLenient_whitespaceAndComments)
            ),
            parserFast_symbol("}", (comments: elmSyntaxParserLenient_ropeEmpty(), syntax: ElmSyntaxExpression_Expression.RecordExpr(List_List.Empty))),
            parserFast_map2(
                { (recordFieldsResult, commentsAfterFields) in
                    (comments: elmSyntaxParserLenient_ropePrependTo(commentsAfterFields, recordFieldsResult.comments), syntax: ElmSyntaxExpression_Expression.RecordExpr(recordFieldsResult.syntax))
                },
                elmSyntaxParserLenient_recordFields,
                parserFast_followedBySymbol("}", elmSyntaxParserLenient_whitespaceAndComments)
            )
        );

    static public let elmSyntaxParserLenient_recordExpressionFollowedByRecordAccessMaybeApplied:ElmSyntaxParserLenient_Parser<ElmSyntaxParserLenient_WithComments<ElmSyntaxNode_Node<ElmSyntaxExpression_Expression>>> =
        elmSyntaxParserLenient_followedByMultiArgumentApplication(elmSyntaxParserLenient_expressionRecordFollowedByRecordAccess);

    static public let elmSyntaxParserLenient_recordFields:ElmSyntaxParserLenient_Parser<ElmSyntaxParserLenient_WithComments<List_List<ElmSyntaxNode_Node<ElmSyntaxExpression_RecordSetter>>>> =
        elmSyntaxParserLenient_manyWithComments(
            parserFast_symbolFollowedBy(
                ",",
                parserFast_map3(
                    { (commentsBefore, commentsWithExtraComma, setterResult) in
                        (comments: elmSyntaxParserLenient_ropePrependTo(setterResult.comments, elmSyntaxParserLenient_ropePrependTo(commentsWithExtraComma, commentsBefore)), syntax: setterResult.syntax)
                    },
                    elmSyntaxParserLenient_whitespaceAndComments,
                    parserFast_orSucceed(parserFast_symbolFollowedBy(",", elmSyntaxParserLenient_whitespaceAndComments), elmSyntaxParserLenient_ropeEmpty()),
                    elmSyntaxParserLenient_recordSetterNodeFollowedByWhitespaceAndComments
                )
            )
        );

    static public let elmSyntaxParserLenient_recordFieldsTypeAnnotation:ElmSyntaxParserLenient_Parser<ElmSyntaxParserLenient_WithComments<ElmSyntaxTypeAnnotation_RecordDefinition>> =
        parserFast_map4(
            { (commentsBefore, commentsWithExtraComma, head, tail) in
                (comments: elmSyntaxParserLenient_ropePrependTo(tail.comments, elmSyntaxParserLenient_ropePrependTo(head.comments, elmSyntaxParserLenient_ropePrependTo(commentsBefore, commentsWithExtraComma))), syntax: List_List.Cons(head.syntax, tail.syntax))
            },
            elmSyntaxParserLenient_whitespaceAndComments,
            parserFast_orSucceed(parserFast_symbolFollowedBy(",", elmSyntaxParserLenient_whitespaceAndComments), elmSyntaxParserLenient_ropeEmpty()),
            elmSyntaxParserLenient_typeRecordFieldDefinitionFollowedByWhitespaceAndComments,
            elmSyntaxParserLenient_manyWithComments(
                parserFast_symbolFollowedBy(
                    ",",
                    parserFast_map3(
                        { (commentsBefore, commentsWithExtraComma, field) in
                            (comments: elmSyntaxParserLenient_ropePrependTo(field.comments, elmSyntaxParserLenient_ropePrependTo(commentsWithExtraComma, commentsBefore)), syntax: field.syntax)
                        },
                        elmSyntaxParserLenient_whitespaceAndComments,
                        parserFast_orSucceed(parserFast_symbolFollowedBy(",", elmSyntaxParserLenient_whitespaceAndComments), elmSyntaxParserLenient_ropeEmpty()),
                        elmSyntaxParserLenient_typeRecordFieldDefinitionFollowedByWhitespaceAndComments
                    )
                )
            )
        );

    static public let elmSyntaxParserLenient_recordPattern:ElmSyntaxParserLenient_Parser<ElmSyntaxParserLenient_WithComments<ElmSyntaxNode_Node<ElmSyntaxPattern_Pattern>>> =
        parserFast_map2WithRange(
            { (range, commentsBeforeElements, elements) in
                (comments: elmSyntaxParserLenient_ropePrependTo(elements.comments, commentsBeforeElements), syntax: ElmSyntaxNode_Node.Node(range, ElmSyntaxPattern_Pattern.RecordPattern(elements.syntax)))
            },
            parserFast_symbolFollowedBy("{", elmSyntaxParserLenient_whitespaceAndComments),
            parserFast_oneOf2(
                parserFast_symbol("}", (comments: elmSyntaxParserLenient_ropeEmpty(), syntax: List_List.Empty)),
                parserFast_followedBySymbol(
                    "}",
                    parserFast_map4(
                        { (commentsBeforeHead, head, commentsAfterHead, tail) in
                            (comments: elmSyntaxParserLenient_ropePrependTo(tail.comments, elmSyntaxParserLenient_ropePrependTo(commentsAfterHead, commentsBeforeHead)), syntax: List_List.Cons(head, tail.syntax))
                        },
                        parserFast_orSucceed(parserFast_symbolFollowedBy(",", elmSyntaxParserLenient_whitespaceAndComments), elmSyntaxParserLenient_ropeEmpty()),
                        elmSyntaxParserLenient_nameLowercaseNodeUnderscoreSuffixingKeywords,
                        elmSyntaxParserLenient_whitespaceAndComments,
                        elmSyntaxParserLenient_manyWithComments(
                            parserFast_symbolFollowedBy(
                                ",",
                                parserFast_map4(
                                    { (commentsBeforeName, commentsWithExtraComma, name, afterName) in
                                        (comments: elmSyntaxParserLenient_ropePrependTo(afterName, elmSyntaxParserLenient_ropePrependTo(commentsWithExtraComma, commentsBeforeName)), syntax: name)
                                    },
                                    elmSyntaxParserLenient_whitespaceAndComments,
                                    parserFast_orSucceed(parserFast_symbolFollowedBy(",", elmSyntaxParserLenient_whitespaceAndComments), elmSyntaxParserLenient_ropeEmpty()),
                                    elmSyntaxParserLenient_nameLowercaseNodeUnderscoreSuffixingKeywords,
                                    elmSyntaxParserLenient_whitespaceAndComments
                                )
                            )
                        )
                    )
                )
            )
        );

    static public let elmSyntaxParserLenient_recordSetterNodeFollowedByWhitespaceAndComments:ElmSyntaxParserLenient_Parser<ElmSyntaxParserLenient_WithComments<ElmSyntaxNode_Node<ElmSyntaxExpression_RecordSetter>>> =
        parserFast_map4WithRange(
            { (range, nameNode, commentsAfterName, commentsAfterEquals, maybeValueResult) in
                ({ () in return switch maybeValueResult {
                    case Maybe_Maybe.Nothing:
                        (comments: elmSyntaxParserLenient_ropePrependTo(commentsAfterEquals, commentsAfterName), syntax: ElmSyntaxNode_Node.Node(range, (first: nameNode, second: ElmSyntaxNode_Node.Node((end: elmSyntaxNode_range(nameNode).end, start: elmSyntaxNode_range(nameNode).end), ElmSyntaxExpression_Expression.FunctionOrValue(List_List.Empty, elmSyntaxNode_value(nameNode))))));

                    case let Maybe_Maybe.Just(expressionResult):
                        (comments: elmSyntaxParserLenient_ropePrependTo(expressionResult.comments, elmSyntaxParserLenient_ropePrependTo(commentsAfterEquals, commentsAfterName)), syntax: ElmSyntaxNode_Node.Node(range, (first: nameNode, second: expressionResult.syntax)));
                 }
                }())
            },
            elmSyntaxParserLenient_nameLowercaseNodeUnderscoreSuffixingKeywords,
            elmSyntaxParserLenient_whitespaceAndComments,
            parserFast_oneOf2OrSucceed(parserFast_symbolFollowedBy(":", elmSyntaxParserLenient_whitespaceAndComments), parserFast_symbolFollowedBy("=", elmSyntaxParserLenient_whitespaceAndComments), elmSyntaxParserLenient_ropeEmpty()),
            parserFast_mapOrSucceed(Maybe_Maybe.Just, elmSyntaxParserLenient_expressionFollowedByWhitespaceAndComments, Maybe_Maybe.Nothing)
        );

    static public let elmSyntaxParserLenient_referenceOrNumberExpression:ElmSyntaxParserLenient_Parser<ElmSyntaxParserLenient_WithComments<ElmSyntaxNode_Node<ElmSyntaxExpression_Expression>>> =
        parserFast_oneOf3(elmSyntaxParserLenient_expressionQualifiedOrVariantOrRecordConstructorReferenceFollowedByRecordAccess, elmSyntaxParserLenient_expressionUnqualifiedFunctionReferenceFollowedByRecordAccess, elmSyntaxParserLenient_expressionNumber);

    static public let elmSyntaxParserLenient_referenceOrNumberExpressionMaybeApplied:ElmSyntaxParserLenient_Parser<ElmSyntaxParserLenient_WithComments<ElmSyntaxNode_Node<ElmSyntaxExpression_Expression>>> =
        parserFast_oneOf3(elmSyntaxParserLenient_followedByMultiArgumentApplication(elmSyntaxParserLenient_expressionQualifiedOrVariantOrRecordConstructorReferenceFollowedByRecordAccess), elmSyntaxParserLenient_followedByMultiArgumentApplication(elmSyntaxParserLenient_expressionUnqualifiedFunctionReferenceFollowedByRecordAccess), elmSyntaxParserLenient_followedByOptimisticLayout(elmSyntaxParserLenient_expressionNumber));

    static public func elmSyntaxParserLenient_ropeEmpty<A_: Sendable>() -> ElmSyntaxParserLenient_Rope<A_> {
        Maybe_Maybe.Nothing
    }

    static public func elmSyntaxParserLenient_ropeFilledPrependTo<A: Sendable>(_ right: ElmSyntaxParserLenient_Rope<A>, _ leftLikelyFilled: ElmSyntaxParserLenient_RopeFilled<A>) -> ElmSyntaxParserLenient_Rope<A> {
        Maybe_Maybe.Just(
            ({ () in return switch right {
                case Maybe_Maybe.Nothing:
                    leftLikelyFilled;

                case let Maybe_Maybe.Just(rightLikelyFilled):
                    ElmSyntaxParserLenient_RopeFilled.RopeBranch2(leftLikelyFilled, rightLikelyFilled);
             }
            }())
        )
    }

    static public func elmSyntaxParserLenient_ropeLikelyFilledToListInto<A: Sendable>(_ initialAcc: List_List<A>, _ ropeLikelyFilled: ElmSyntaxParserLenient_RopeFilled<A>) -> List_List<A> {
        ({ () in return switch ropeLikelyFilled {
            case let ElmSyntaxParserLenient_RopeFilled.RopeLeaf(onlyElement, _):
                List_List.Cons(onlyElement, initialAcc);

            case let ElmSyntaxParserLenient_RopeFilled.RopeBranch2(left, right):
                elmSyntaxParserLenient_ropeLikelyFilledToListInto(elmSyntaxParserLenient_ropeLikelyFilledToListInto(initialAcc, right), left);
         }
        }())
    }

    static public func elmSyntaxParserLenient_ropeOne<A: Sendable>(_ onlyElement: A) -> ElmSyntaxParserLenient_RopeFilled<A> {
        ElmSyntaxParserLenient_RopeFilled.RopeLeaf(onlyElement, ())
    }

    static public func elmSyntaxParserLenient_ropePrependTo<A: Sendable>(_ right: ElmSyntaxParserLenient_Rope<A>, _ left: ElmSyntaxParserLenient_Rope<A>) -> ElmSyntaxParserLenient_Rope<A> {
        ({ () in return switch left {
            case Maybe_Maybe.Nothing:
                right;

            case let Maybe_Maybe.Just(leftLikelyFilled):
                ({ () in return switch right {
                    case Maybe_Maybe.Nothing:
                        left;

                    case let Maybe_Maybe.Just(rightLikelyFilled):
                        Maybe_Maybe.Just(ElmSyntaxParserLenient_RopeFilled.RopeBranch2(leftLikelyFilled, rightLikelyFilled));
                 }
                }());
         }
        }())
    }

    static public func elmSyntaxParserLenient_ropePrependToFilled<A: Sendable>(_ rightLikelyFilled: ElmSyntaxParserLenient_RopeFilled<A>, _ left: ElmSyntaxParserLenient_Rope<A>) -> ElmSyntaxParserLenient_Rope<A> {
        Maybe_Maybe.Just(
            ({ () in return switch left {
                case Maybe_Maybe.Nothing:
                    rightLikelyFilled;

                case let Maybe_Maybe.Just(leftLikelyFilled):
                    ElmSyntaxParserLenient_RopeFilled.RopeBranch2(leftLikelyFilled, rightLikelyFilled);
             }
            }())
        )
    }

    static public func elmSyntaxParserLenient_ropeToList<A: Sendable>(_ rope: ElmSyntaxParserLenient_Rope<A>) -> List_List<A> {
        ({ () in return switch rope {
            case Maybe_Maybe.Nothing:
                List_List.Empty;

            case let Maybe_Maybe.Just(ropeLikelyFilled):
                elmSyntaxParserLenient_ropeLikelyFilledToListInto(List_List.Empty, ropeLikelyFilled);
         }
        }())
    }

    static public func elmSyntaxParserLenient_run<A: Sendable>(_ syntaxParser: ElmSyntaxParserLenient_Parser<A>, _ source: String) -> Maybe_Maybe<A> {
        parserFast_run(syntaxParser, source)
    }

    static public let elmSyntaxParserLenient_singleLineComment:ElmSyntaxParserLenient_Parser<ElmSyntaxNode_Node<String>> =
        parserFast_symbolFollowedBy(
            "--",
            parserFast_whileMapWithRange(
                { (c) in
                    ({ () in return switch c {
                        case "\r":
                            false;

                        case "\n":
                            false;

                        case _:
                            basics_not(charExtra_isUtf16Surrogate(c));
                     }
                    }())
                },
                { (range, content) in
                    ElmSyntaxNode_Node.Node((end: (column: range.end.column, row: range.start.row), start: (column: basics_sub(range.start.column, 2.0), row: range.start.row)), string_append("--", content))
                }
            )
        );

    static public func elmSyntaxParserLenient_singleOrTripleQuotedStringLiteralMapWithRange<Res: Sendable>(_ rangeAndStringToRes: @Sendable (ElmSyntaxRange_Range, String) -> Res) -> ElmSyntaxParserLenient_Parser<Res> {
        parserFast_symbolFollowedBy(
            "\"",
            parserFast_oneOf2MapWithStartRowColumnAndEndRowColumn(
                { (startRow, startColumn, string, endRow, endColumn) in
                    rangeAndStringToRes((end: (column: endColumn, row: endRow), start: (column: basics_sub(startColumn, 1.0), row: startRow)), string)
                },
                parserFast_symbolFollowedBy("\"\"", elmSyntaxParserLenient_tripleQuotedStringLiteralOfterTripleDoubleQuote),
                { (startRow, startColumn, string, endRow, endColumn) in
                    rangeAndStringToRes((end: (column: endColumn, row: endRow), start: (column: basics_sub(startColumn, 1.0), row: startRow)), string)
                },
                elmSyntaxParserLenient_singleQuotedStringLiteralAfterDoubleQuote
            )
        )
    }

    static public let elmSyntaxParserLenient_singleQuotedStringLiteralAfterDoubleQuote:ElmSyntaxParserLenient_Parser<String> =
        parserFast_loopUntil(
            parserFast_symbol("\"", ()),
            parserFast_oneOf2(
                parserFast_whileAtLeast1WithoutLinebreak(
                    { (c) in
                        ({ () in return switch c {
                            case "\"":
                                false;

                            case "\\":
                                false;

                            case _:
                                basics_not(charExtra_isUtf16Surrogate(c));
                         }
                        }())
                    }
                ),
                parserFast_symbolFollowedBy("\\", elmSyntaxParserLenient_escapedCharValueMap(string_fromChar))
            ),
            "",
            { (extension_, soFar) in
                string_append(soFar, string_append(extension_, ""))
            },
            basics_identity
        );

    static public let elmSyntaxParserLenient_stringPattern:ElmSyntaxParserLenient_Parser<ElmSyntaxParserLenient_WithComments<ElmSyntaxNode_Node<ElmSyntaxPattern_Pattern>>> =
        elmSyntaxParserLenient_singleOrTripleQuotedStringLiteralMapWithRange(
            { (range, string) in
                (comments: elmSyntaxParserLenient_ropeEmpty(), syntax: ElmSyntaxNode_Node.Node(range, ElmSyntaxPattern_Pattern.StringPattern(string)))
            }
        );

    static public let elmSyntaxParserLenient_subExpression:ElmSyntaxParserLenient_Parser<ElmSyntaxParserLenient_WithComments<ElmSyntaxNode_Node<ElmSyntaxExpression_Expression>>> =
        parserFast_offsetSourceAndThen(
            { (offset, source) in
                ({ () in return switch string_slice(offset, basics_add(offset, 1.0), source) {
                    case "\"":
                        elmSyntaxParserLenient_expressionString;

                    case "(":
                        elmSyntaxParserLenient_expressionStartingWithParensOpeningIfNecessaryFollowedByRecordAccess;

                    case "[":
                        elmSyntaxParserLenient_expressionListOrGlsl;

                    case "{":
                        elmSyntaxParserLenient_expressionRecordFollowedByRecordAccess;

                    case ".":
                        elmSyntaxParserLenient_expressionRecordAccessFunction;

                    case "-":
                        elmSyntaxParserLenient_expressionNegation;

                    case "'":
                        elmSyntaxParserLenient_expressionChar;

                    case _:
                        elmSyntaxParserLenient_referenceOrNumberExpression;
                 }
                }())
            }
        );

    static public let elmSyntaxParserLenient_subExpressionMaybeAppliedFollowedByWhitespaceAndComments:ElmSyntaxParserLenient_Parser<ElmSyntaxParserLenient_WithComments<ElmSyntaxNode_Node<ElmSyntaxExpression_Expression>>> =
        parserFast_offsetSourceAndThen(
            { (offset, source) in
                ({ () in return switch string_slice(offset, basics_add(offset, 1.0), source) {
                    case "\"":
                        elmSyntaxParserLenient_literalExpressionOptimisticLayout;

                    case "(":
                        elmSyntaxParserLenient_tupledExpressionIfNecessaryFollowedByRecordAccessMaybeApplied;

                    case "[":
                        elmSyntaxParserLenient_listOrGlslExpressionOptimisticLayout;

                    case "{":
                        elmSyntaxParserLenient_recordExpressionFollowedByRecordAccessMaybeApplied;

                    case "c":
                        elmSyntaxParserLenient_caseOrUnqualifiedReferenceExpressionMaybeApplied;

                    case "\\":
                        elmSyntaxParserLenient_expressionLambdaFollowedByWhitespaceAndComments;

                    case "l":
                        elmSyntaxParserLenient_letOrUnqualifiedReferenceExpressionMaybeApplied;

                    case "i":
                        elmSyntaxParserLenient_ifOrUnqualifiedReferenceExpressionMaybeApplied;

                    case ".":
                        elmSyntaxParserLenient_recordAccessFunctionExpressionMaybeApplied;

                    case "-":
                        elmSyntaxParserLenient_negationOperationOptimisticLayout;

                    case "'":
                        elmSyntaxParserLenient_charLiteralExpressionOptimisticLayout;

                    case _:
                        elmSyntaxParserLenient_referenceOrNumberExpressionMaybeApplied;
                 }
                }())
            }
        );

    static public func elmSyntaxParserLenient_topIndentedFollowedBy<A: Sendable>(_ nextParser: ElmSyntaxParserLenient_Parser<A>) -> ElmSyntaxParserLenient_Parser<A> {
        parserFast_columnIndentAndThen(
            { (column, indent) in
                ({ () in return switch indent {
                    case List_List.Empty:
                        ({ () in return switch basics_eq(column, 1.0) {
                            case true:
                                nextParser;

                            case false:
                                parserFast_problem();
                         }
                        }());

                    case let List_List.Cons(highestIndent, _):
                        ({ () in return switch basics_eq(basics_sub(column, highestIndent), 0.0) {
                            case true:
                                nextParser;

                            case false:
                                parserFast_problem();
                         }
                        }());
                 }
                }())
            }
        )
    }

    static public let elmSyntaxParserLenient_tripleQuotedStringLiteralOfterTripleDoubleQuote:ElmSyntaxParserLenient_Parser<String> =
        parserFast_loopUntil(
            parserFast_symbol("\"\"\"", ()),
            parserFast_oneOf3(
                parserFast_symbol("\"", "\""),
                parserFast_symbolFollowedBy("\\", elmSyntaxParserLenient_escapedCharValueMap(string_fromChar)),
                parserFast_while(
                    { (c) in
                        ({ () in return switch c {
                            case "\"":
                                false;

                            case "\\":
                                false;

                            case _:
                                basics_not(charExtra_isUtf16Surrogate(c));
                         }
                        }())
                    }
                )
            ),
            "",
            { (extension_, soFar) in
                string_append(soFar, string_append(extension_, ""))
            },
            basics_identity
        );

    static public let elmSyntaxParserLenient_tupledExpressionIfNecessaryFollowedByRecordAccessMaybeApplied:ElmSyntaxParserLenient_Parser<ElmSyntaxParserLenient_WithComments<ElmSyntaxNode_Node<ElmSyntaxExpression_Expression>>> =
        elmSyntaxParserLenient_followedByMultiArgumentApplication(elmSyntaxParserLenient_expressionStartingWithParensOpeningIfNecessaryFollowedByRecordAccess);

    static public let elmSyntaxParserLenient_typeAliasDefinitionAfterDocumentationAfterTypePrefix:ElmSyntaxParserLenient_Parser<ElmSyntaxParserLenient_WithComments<ElmSyntaxParserLenient_DeclarationAfterDocumentation>> =
        parserFast_map6(
            { (commentsAfterAlias, name, commentsAfterName, parameters, commentsAfterEquals, typeAnnotationResult) in
                (comments: elmSyntaxParserLenient_ropePrependTo(typeAnnotationResult.comments, elmSyntaxParserLenient_ropePrependTo(commentsAfterEquals, elmSyntaxParserLenient_ropePrependTo(parameters.comments, elmSyntaxParserLenient_ropePrependTo(commentsAfterName, commentsAfterAlias)))), syntax: ElmSyntaxParserLenient_DeclarationAfterDocumentation.TypeAliasDeclarationAfterDocumentation((name: name, parameters: parameters.syntax, typeAnnotation: typeAnnotationResult.syntax)))
            },
            parserFast_keywordFollowedBy("alias", elmSyntaxParserLenient_whitespaceAndComments),
            elmSyntaxParserLenient_nameUppercaseNode,
            elmSyntaxParserLenient_whitespaceAndComments,
            elmSyntaxParserLenient_typeGenericListEquals,
            elmSyntaxParserLenient_whitespaceAndComments,
            elmSyntaxParserLenient_type_
        );

    static public let elmSyntaxParserLenient_typeAliasDefinitionWithoutDocumentationAfterTypePrefix:ElmSyntaxParserLenient_Parser<ElmSyntaxParserLenient_WithComments<ElmSyntaxParserLenient_TypeOrTypeAliasDeclarationWithoutDocumentation>> =
        parserFast_map6(
            { (commentsAfterAlias, name, commentsAfterName, parameters, commentsAfterEqual, typeAnnotationResult) in
                (comments: elmSyntaxParserLenient_ropePrependTo(typeAnnotationResult.comments, elmSyntaxParserLenient_ropePrependTo(commentsAfterEqual, elmSyntaxParserLenient_ropePrependTo(parameters.comments, elmSyntaxParserLenient_ropePrependTo(commentsAfterName, commentsAfterAlias)))), syntax: ElmSyntaxParserLenient_TypeOrTypeAliasDeclarationWithoutDocumentation.TypeAliasDeclarationWithoutDocumentation((name: name, parameters: parameters.syntax, typeAnnotation: typeAnnotationResult.syntax)))
            },
            parserFast_keywordFollowedBy("alias", elmSyntaxParserLenient_whitespaceAndComments),
            elmSyntaxParserLenient_nameUppercaseNode,
            elmSyntaxParserLenient_whitespaceAndComments,
            elmSyntaxParserLenient_typeGenericListEquals,
            elmSyntaxParserLenient_whitespaceAndComments,
            elmSyntaxParserLenient_type_
        );

    static public let elmSyntaxParserLenient_typeConstructWithArgumentsFollowedByWhitespaceAndComments:ElmSyntaxParserLenient_Parser<ElmSyntaxParserLenient_WithComments<ElmSyntaxNode_Node<ElmSyntaxTypeAnnotation_TypeAnnotation>>> =
        parserFast_map3(
            { (nameNode, commentsAfterName, argsReverse) in
                ({ () in return switch nameNode {
                    case let ElmSyntaxNode_Node.Node(nameRange, _):
                        ({ () in let range:ElmSyntaxRange_Range =
                            ({ () in return switch argsReverse.syntax {
                                case List_List.Empty:
                                    nameRange;

                                case let List_List.Cons(ElmSyntaxNode_Node.Node(lastArgRange, _), _):
                                    (end: lastArgRange.end, start: nameRange.start);
                             }
                            }());

                         return (comments: elmSyntaxParserLenient_ropePrependTo(argsReverse.comments, commentsAfterName), syntax: ElmSyntaxNode_Node.Node(range, ElmSyntaxTypeAnnotation_TypeAnnotation.Typed(nameNode, list_reverse(argsReverse.syntax))))
                        }());
                 }
                }())
            },
            parserFast_map2WithRange(
                { (range, startName, afterStartName) in
                    ({ () in let name:
                        (first: ElmSyntaxModuleName_ModuleName,
                         second: String
                        ) =
                        ({ () in return switch afterStartName {
                            case Maybe_Maybe.Nothing:
                                (first: List_List.Empty, second: startName);

                            case let Maybe_Maybe.Just((first: qualificationAfterStartName, second: unqualified)):
                                (first: List_List.Cons(startName, qualificationAfterStartName), second: unqualified);
                         }
                        }());

                     return ElmSyntaxNode_Node.Node(range, name)
                    }())
                },
                elmSyntaxParserLenient_nameUppercase,
                elmSyntaxParserLenient_maybeDotNamesUppercaseTuple
            ),
            elmSyntaxParserLenient_whitespaceAndComments,
            elmSyntaxParserLenient_manyWithCommentsReverse(
                elmSyntaxParserLenient_positivelyIndentedFollowedBy(
                    parserFast_map2(
                        { (typeAnnotationResult, commentsAfter) in
                            (comments: elmSyntaxParserLenient_ropePrependTo(commentsAfter, typeAnnotationResult.comments), syntax: typeAnnotationResult.syntax)
                        },
                        elmSyntaxParserLenient_typeNotSpaceSeparated,
                        elmSyntaxParserLenient_whitespaceAndComments
                    )
                )
            )
        );

    static public let elmSyntaxParserLenient_typeConstructWithoutArguments:ElmSyntaxParserLenient_Parser<ElmSyntaxParserLenient_WithComments<ElmSyntaxNode_Node<ElmSyntaxTypeAnnotation_TypeAnnotation>>> =
        parserFast_map2WithRange(
            { (range, startName, afterStartName) in
                ({ () in let name:
                    (first: ElmSyntaxModuleName_ModuleName,
                     second: String
                    ) =
                    ({ () in return switch afterStartName {
                        case Maybe_Maybe.Nothing:
                            (first: List_List.Empty, second: startName);

                        case let Maybe_Maybe.Just((first: qualificationAfterStartName, second: unqualified)):
                            (first: List_List.Cons(startName, qualificationAfterStartName), second: unqualified);
                     }
                    }());

                 return (comments: elmSyntaxParserLenient_ropeEmpty(), syntax: ElmSyntaxNode_Node.Node(range, ElmSyntaxTypeAnnotation_TypeAnnotation.Typed(ElmSyntaxNode_Node.Node(range, name), List_List.Empty)))
                }())
            },
            elmSyntaxParserLenient_nameUppercase,
            elmSyntaxParserLenient_maybeDotNamesUppercaseTuple
        );

    static public let elmSyntaxParserLenient_typeExpose:ElmSyntaxParserLenient_Parser<ElmSyntaxParserLenient_WithComments<ElmSyntaxNode_Node<ElmSyntaxExposing_TopLevelExpose>>> =
        parserFast_map3(
            { (generated_typeNameRange_typeExposeName, commentsBeforeMaybeOpen, maybeOpen) in
                ({ () in return switch (generated_typeNameRange_typeExposeName: generated_typeNameRange_typeExposeName, unusedDummyFieldToMakeSwiftHappy: ()) {
                    case let (generated_typeNameRange_typeExposeName: ElmSyntaxNode_Node.Node(typeNameRange, typeExposeName), unusedDummyFieldToMakeSwiftHappy: ()):
                        ({ () in return switch maybeOpen {
                            case Maybe_Maybe.Nothing:
                                (comments: commentsBeforeMaybeOpen, syntax: ElmSyntaxNode_Node.Node(typeNameRange, ElmSyntaxExposing_TopLevelExpose.TypeOrAliasExpose(typeExposeName)));

                            case let Maybe_Maybe.Just(open_):
                                (comments: elmSyntaxParserLenient_ropePrependTo(open_.comments, commentsBeforeMaybeOpen), syntax: ElmSyntaxNode_Node.Node((end: open_.syntax.end, start: typeNameRange.start), ElmSyntaxExposing_TopLevelExpose.TypeExpose((name: typeExposeName, open_: Maybe_Maybe.Just(open_.syntax)))));
                         }
                        }());
                 }
                }())
            },
            elmSyntaxParserLenient_nameUppercaseNode,
            elmSyntaxParserLenient_whitespaceAndComments,
            parserFast_map2WithRangeOrSucceed(
                { (range, left, right) in
                    Maybe_Maybe.Just((comments: elmSyntaxParserLenient_ropePrependTo(right, left), syntax: range))
                },
                parserFast_symbolFollowedBy("(", elmSyntaxParserLenient_whitespaceAndComments),
                parserFast_followedBySymbol(")", parserFast_oneOf2(parserFast_symbolFollowedBy("...", elmSyntaxParserLenient_whitespaceAndComments), parserFast_symbolFollowedBy("..", elmSyntaxParserLenient_whitespaceAndComments))),
                Maybe_Maybe.Nothing
            )
        );

    static public let elmSyntaxParserLenient_typeGenericListEquals:ElmSyntaxParserLenient_Parser<ElmSyntaxParserLenient_WithComments<List_List<ElmSyntaxNode_Node<String>>>> =
        elmSyntaxParserLenient_untilWithComments(
            parserFast_symbol("=", ()),
            parserFast_map2(
                { (name, commentsAfterName) in
                    (comments: commentsAfterName, syntax: name)
                },
                elmSyntaxParserLenient_nameLowercaseNodeUnderscoreSuffixingKeywords,
                elmSyntaxParserLenient_whitespaceAndComments
            )
        );

    static public let elmSyntaxParserLenient_typeNotFunction:ElmSyntaxParserLenient_Parser<ElmSyntaxParserLenient_WithComments<ElmSyntaxNode_Node<ElmSyntaxTypeAnnotation_TypeAnnotation>>> =
        parserFast_oneOf4(elmSyntaxParserLenient_typeParenthesizedOrTupleOrTriple, elmSyntaxParserLenient_typeConstructWithArgumentsFollowedByWhitespaceAndComments, elmSyntaxParserLenient_typeVariable, elmSyntaxParserLenient_typeRecordOrRecordExtension);

    static public let elmSyntaxParserLenient_typeNotSpaceSeparated:ElmSyntaxParserLenient_Parser<ElmSyntaxParserLenient_WithComments<ElmSyntaxNode_Node<ElmSyntaxTypeAnnotation_TypeAnnotation>>> =
        parserFast_oneOf4(elmSyntaxParserLenient_typeParenthesizedOrTupleOrTriple, elmSyntaxParserLenient_typeConstructWithoutArguments, elmSyntaxParserLenient_typeVariable, elmSyntaxParserLenient_typeRecordOrRecordExtension);

    static public let elmSyntaxParserLenient_typeOrTypeAliasDefinitionAfterDocumentation:ElmSyntaxParserLenient_Parser<ElmSyntaxParserLenient_WithComments<ElmSyntaxParserLenient_DeclarationAfterDocumentation>> =
        parserFast_map2(
            { (commentsAfterType, declarationAfterDocumentation) in
                (comments: elmSyntaxParserLenient_ropePrependTo(declarationAfterDocumentation.comments, commentsAfterType), syntax: declarationAfterDocumentation.syntax)
            },
            parserFast_keywordFollowedBy("type", elmSyntaxParserLenient_whitespaceAndComments),
            parserFast_oneOf2(elmSyntaxParserLenient_typeAliasDefinitionAfterDocumentationAfterTypePrefix, elmSyntaxParserLenient_choiceTypeDefinitionAfterDocumentationAfterTypePrefix)
        );

    static public let elmSyntaxParserLenient_typeOrTypeAliasDefinitionWithoutDocumentation:ElmSyntaxParserLenient_Parser<ElmSyntaxParserLenient_WithComments<ElmSyntaxNode_Node<ElmSyntaxDeclaration_Declaration>>> =
        parserFast_map2WithStartLocation(
            { (start, commentsAfterType, afterStart) in
                ({ () in let allComments:ElmSyntaxParserLenient_Comments =
                    elmSyntaxParserLenient_ropePrependTo(afterStart.comments, commentsAfterType);

                 return ({ () in return switch afterStart.syntax {
                    case let ElmSyntaxParserLenient_TypeOrTypeAliasDeclarationWithoutDocumentation.TypeDeclarationWithoutDocumentation(typeDeclarationAfterDocumentation):
                        ({ () in let end:ElmSyntaxRange_Location =
                            ({ () in return switch typeDeclarationAfterDocumentation.tailVariantsReverse {
                                case let List_List.Cons(ElmSyntaxNode_Node.Node(range, _), _):
                                    range.end;

                                case List_List.Empty:
                                    ({ () in return switch typeDeclarationAfterDocumentation.headVariant {
                                        case let ElmSyntaxNode_Node.Node(headVariantRange, _):
                                            headVariantRange.end;
                                     }
                                    }());
                             }
                            }());

                         return (comments: allComments, syntax: ElmSyntaxNode_Node.Node((end: end, start: start), ElmSyntaxDeclaration_Declaration.CustomTypeDeclaration((constructors: List_List.Cons(typeDeclarationAfterDocumentation.headVariant, list_reverse(typeDeclarationAfterDocumentation.tailVariantsReverse)), documentation: Maybe_Maybe.Nothing, generics: typeDeclarationAfterDocumentation.parameters, name: typeDeclarationAfterDocumentation.name))))
                        }());

                    case let ElmSyntaxParserLenient_TypeOrTypeAliasDeclarationWithoutDocumentation.TypeAliasDeclarationWithoutDocumentation(typeAliasDeclarationAfterDocumentation):
                        ({ () in return switch typeAliasDeclarationAfterDocumentation.typeAnnotation {
                            case let ElmSyntaxNode_Node.Node(typeAnnotationRange, _):
                                (comments: allComments, syntax: ElmSyntaxNode_Node.Node((end: typeAnnotationRange.end, start: start), ElmSyntaxDeclaration_Declaration.AliasDeclaration((documentation: Maybe_Maybe.Nothing, generics: typeAliasDeclarationAfterDocumentation.parameters, name: typeAliasDeclarationAfterDocumentation.name, typeAnnotation: typeAliasDeclarationAfterDocumentation.typeAnnotation))));
                         }
                        }());
                  }
                 }())
                }())
            },
            parserFast_keywordFollowedBy("type", elmSyntaxParserLenient_whitespaceAndComments),
            parserFast_oneOf2(elmSyntaxParserLenient_typeAliasDefinitionWithoutDocumentationAfterTypePrefix, elmSyntaxParserLenient_choiceTypeDefinitionWithoutDocumentationAfterTypePrefix)
        );

    static public let elmSyntaxParserLenient_typeParenthesizedOrTupleOrTriple:ElmSyntaxParserLenient_Parser<ElmSyntaxParserLenient_WithComments<ElmSyntaxNode_Node<ElmSyntaxTypeAnnotation_TypeAnnotation>>> =
        parserFast_symbolFollowedBy(
            "(",
            parserFast_oneOf2(
                parserFast_symbolWithEndLocation(
                    ")",
                    { (end) in
                        (comments: elmSyntaxParserLenient_ropeEmpty(), syntax: ElmSyntaxNode_Node.Node((end: end, start: (column: basics_sub(end.column, 2.0), row: end.row)), ElmSyntaxTypeAnnotation_TypeAnnotation.Unit))
                    }
                ),
                parserFast_map4WithRange(
                    { (rangeAfterOpeningParens, commentsBeforeFirstPart, firstPart, commentsAfterFirstPart, lastToSecondPart) in
                        (comments: elmSyntaxParserLenient_ropePrependTo(lastToSecondPart.comments, elmSyntaxParserLenient_ropePrependTo(commentsAfterFirstPart, elmSyntaxParserLenient_ropePrependTo(firstPart.comments, commentsBeforeFirstPart))),
                         syntax:
                            ElmSyntaxNode_Node.Node(
                                (end: rangeAfterOpeningParens.end, start: (column: basics_sub(rangeAfterOpeningParens.start.column, 1.0), row: rangeAfterOpeningParens.start.row)),
                                ({ () in return switch lastToSecondPart.syntax {
                                    case Maybe_Maybe.Nothing:
                                        ({ () in return switch firstPart.syntax {
                                            case let ElmSyntaxNode_Node.Node(_, firstPartType):
                                                firstPartType;
                                         }
                                        }());

                                    case let Maybe_Maybe.Just(firstAndMaybeThirdPart):
                                        ({ () in return switch firstAndMaybeThirdPart.maybeThirdPart {
                                            case Maybe_Maybe.Nothing:
                                                ElmSyntaxTypeAnnotation_TypeAnnotation.Tupled(List_List.Cons(firstPart.syntax, List_List.Cons(firstAndMaybeThirdPart.secondPart, List_List.Empty)));

                                            case let Maybe_Maybe.Just(thirdPart):
                                                ElmSyntaxTypeAnnotation_TypeAnnotation.Tupled(List_List.Cons(firstPart.syntax, List_List.Cons(firstAndMaybeThirdPart.secondPart, List_List.Cons(thirdPart, List_List.Empty))));
                                         }
                                        }());
                                 }
                                }())
                            )
                        )
                    },
                    elmSyntaxParserLenient_whitespaceAndComments,
                    elmSyntaxParserLenient_type_,
                    elmSyntaxParserLenient_whitespaceAndComments,
                    parserFast_oneOf2(
                        parserFast_symbol(")", (comments: elmSyntaxParserLenient_ropeEmpty(), syntax: Maybe_Maybe.Nothing)),
                        parserFast_symbolFollowedBy(
                            ",",
                            parserFast_map4(
                                { (commentsBefore, secondPartResult, commentsAfter, maybeThirdPartResult) in
                                    (comments: elmSyntaxParserLenient_ropePrependTo(commentsAfter, elmSyntaxParserLenient_ropePrependTo(secondPartResult.comments, commentsBefore)), syntax: Maybe_Maybe.Just((maybeThirdPart: maybeThirdPartResult.syntax, secondPart: secondPartResult.syntax)))
                                },
                                elmSyntaxParserLenient_whitespaceAndComments,
                                elmSyntaxParserLenient_type_,
                                elmSyntaxParserLenient_whitespaceAndComments,
                                parserFast_oneOf2(
                                    parserFast_symbol(")", (comments: elmSyntaxParserLenient_ropeEmpty(), syntax: Maybe_Maybe.Nothing)),
                                    parserFast_symbolFollowedBy(
                                        ",",
                                        parserFast_followedBySymbol(
                                            ")",
                                            parserFast_map3(
                                                { (commentsBefore, thirdPartResult, commentsAfter) in
                                                    (comments: elmSyntaxParserLenient_ropePrependTo(commentsAfter, elmSyntaxParserLenient_ropePrependTo(thirdPartResult.comments, commentsBefore)), syntax: Maybe_Maybe.Just(thirdPartResult.syntax))
                                                },
                                                elmSyntaxParserLenient_whitespaceAndComments,
                                                elmSyntaxParserLenient_type_,
                                                elmSyntaxParserLenient_whitespaceAndComments
                                            )
                                        )
                                    )
                                )
                            )
                        )
                    )
                )
            )
        );

    static public let elmSyntaxParserLenient_typeRecordEmpty:ElmSyntaxTypeAnnotation_TypeAnnotation =
        ElmSyntaxTypeAnnotation_TypeAnnotation.Record(List_List.Empty);

    static public let elmSyntaxParserLenient_typeRecordFieldDefinitionFollowedByWhitespaceAndComments:ElmSyntaxParserLenient_Parser<ElmSyntaxParserLenient_WithComments<ElmSyntaxNode_Node<ElmSyntaxTypeAnnotation_RecordField>>> =
        parserFast_map5WithRange(
            { (range, name, commentsAfterName, commentsAfterColon, value, commentsAfterValue) in
                (comments: elmSyntaxParserLenient_ropePrependTo(commentsAfterValue, elmSyntaxParserLenient_ropePrependTo(value.comments, elmSyntaxParserLenient_ropePrependTo(commentsAfterColon, commentsAfterName))), syntax: ElmSyntaxNode_Node.Node(range, (first: name, second: value.syntax)))
            },
            elmSyntaxParserLenient_nameLowercaseNodeUnderscoreSuffixingKeywords,
            elmSyntaxParserLenient_whitespaceAndComments,
            parserFast_oneOf2OrSucceed(parserFast_symbolFollowedBy(":", elmSyntaxParserLenient_whitespaceAndComments), parserFast_symbolFollowedBy("=", elmSyntaxParserLenient_whitespaceAndComments), elmSyntaxParserLenient_ropeEmpty()),
            elmSyntaxParserLenient_type_,
            elmSyntaxParserLenient_whitespaceAndComments
        );

    static public let elmSyntaxParserLenient_typeRecordOrRecordExtension:ElmSyntaxParserLenient_Parser<ElmSyntaxParserLenient_WithComments<ElmSyntaxNode_Node<ElmSyntaxTypeAnnotation_TypeAnnotation>>> =
        parserFast_map2WithRange(
            { (range, commentsBefore, afterCurly) in
                ({ () in return switch afterCurly {
                    case Maybe_Maybe.Nothing:
                        (comments: commentsBefore, syntax: ElmSyntaxNode_Node.Node(range, elmSyntaxParserLenient_typeRecordEmpty));

                    case let Maybe_Maybe.Just(afterCurlyResult):
                        (comments: elmSyntaxParserLenient_ropePrependTo(afterCurlyResult.comments, commentsBefore), syntax: ElmSyntaxNode_Node.Node(range, afterCurlyResult.syntax));
                 }
                }())
            },
            parserFast_symbolFollowedBy("{", elmSyntaxParserLenient_whitespaceAndComments),
            parserFast_oneOf2(
                parserFast_symbol("}", Maybe_Maybe.Nothing),
                parserFast_followedBySymbol(
                    "}",
                    parserFast_map4(
                        { (commentsBeforeFirstName, firstNameNode, commentsAfterFirstName, afterFirstName) in
                            Maybe_Maybe.Just(
                                (comments: elmSyntaxParserLenient_ropePrependTo(afterFirstName.comments, elmSyntaxParserLenient_ropePrependTo(commentsAfterFirstName, commentsBeforeFirstName)),
                                 syntax:
                                    ({ () in return switch afterFirstName.syntax {
                                        case let ElmSyntaxParserLenient_RecordFieldsOrExtensionAfterName.RecordExtensionExpressionAfterName(fields):
                                            ElmSyntaxTypeAnnotation_TypeAnnotation.GenericRecord(firstNameNode, fields);

                                        case let ElmSyntaxParserLenient_RecordFieldsOrExtensionAfterName.FieldsAfterName(fieldsAfterName):
                                            ElmSyntaxTypeAnnotation_TypeAnnotation.Record(List_List.Cons(elmSyntaxNode_combine(tuple_pair, firstNameNode, fieldsAfterName.firstFieldValue), fieldsAfterName.tailFields));
                                     }
                                    }())
                                )
                            )
                        },
                        parserFast_orSucceed(parserFast_symbolFollowedBy(",", elmSyntaxParserLenient_whitespaceAndComments), elmSyntaxParserLenient_ropeEmpty()),
                        elmSyntaxParserLenient_nameLowercaseNodeUnderscoreSuffixingKeywords,
                        elmSyntaxParserLenient_whitespaceAndComments,
                        parserFast_oneOf2(
                            parserFast_symbolFollowedBy(
                                "|",
                                parserFast_map3WithRange(
                                    { (range, commentsBefore, head, tail) in
                                        (comments: elmSyntaxParserLenient_ropePrependTo(tail.comments, elmSyntaxParserLenient_ropePrependTo(head.comments, commentsBefore)), syntax: ElmSyntaxParserLenient_RecordFieldsOrExtensionAfterName.RecordExtensionExpressionAfterName(ElmSyntaxNode_Node.Node(range, List_List.Cons(head.syntax, tail.syntax))))
                                    },
                                    elmSyntaxParserLenient_whitespaceAndComments,
                                    elmSyntaxParserLenient_typeRecordFieldDefinitionFollowedByWhitespaceAndComments,
                                    elmSyntaxParserLenient_manyWithComments(
                                        parserFast_symbolFollowedBy(
                                            ",",
                                            parserFast_map3(
                                                { (commentsBefore, commentsWithExtraComma, field) in
                                                    (comments: elmSyntaxParserLenient_ropePrependTo(field.comments, elmSyntaxParserLenient_ropePrependTo(commentsWithExtraComma, commentsBefore)), syntax: field.syntax)
                                                },
                                                elmSyntaxParserLenient_whitespaceAndComments,
                                                parserFast_orSucceed(parserFast_symbolFollowedBy(",", elmSyntaxParserLenient_whitespaceAndComments), elmSyntaxParserLenient_ropeEmpty()),
                                                elmSyntaxParserLenient_typeRecordFieldDefinitionFollowedByWhitespaceAndComments
                                            )
                                        )
                                    )
                                )
                            ),
                            parserFast_map4(
                                { (commentsBeforeFirstFieldValue, firstFieldValue, commentsAfterFirstFieldValue, tailFields) in
                                    (comments: elmSyntaxParserLenient_ropePrependTo(tailFields.comments, elmSyntaxParserLenient_ropePrependTo(commentsAfterFirstFieldValue, elmSyntaxParserLenient_ropePrependTo(firstFieldValue.comments, commentsBeforeFirstFieldValue))), syntax: ElmSyntaxParserLenient_RecordFieldsOrExtensionAfterName.FieldsAfterName((firstFieldValue: firstFieldValue.syntax, tailFields: tailFields.syntax)))
                                },
                                parserFast_oneOf2OrSucceed(parserFast_symbolFollowedBy(":", elmSyntaxParserLenient_whitespaceAndComments), parserFast_symbolFollowedBy("=", elmSyntaxParserLenient_whitespaceAndComments), elmSyntaxParserLenient_ropeEmpty()),
                                elmSyntaxParserLenient_type_,
                                elmSyntaxParserLenient_whitespaceAndComments,
                                parserFast_orSucceed(parserFast_symbolFollowedBy(",", elmSyntaxParserLenient_recordFieldsTypeAnnotation), (comments: elmSyntaxParserLenient_ropeEmpty(), syntax: List_List.Empty))
                            )
                        )
                    )
                )
            )
        );

    static public let elmSyntaxParserLenient_typeVariable:ElmSyntaxParserLenient_Parser<ElmSyntaxParserLenient_WithComments<ElmSyntaxNode_Node<ElmSyntaxTypeAnnotation_TypeAnnotation>>> =
        elmSyntaxParserLenient_nameLowercaseMapWithRange(
            { (range, var_) in
                (comments: elmSyntaxParserLenient_ropeEmpty(), syntax: ElmSyntaxNode_Node.Node(range, ElmSyntaxTypeAnnotation_TypeAnnotation.GenericType(var_)))
            }
        );

    static public let elmSyntaxParserLenient_type_:
        ElmSyntaxParserLenient_Parser<
            (comments: ElmSyntaxParserLenient_Comments,
             syntax: ElmSyntaxNode_Node<ElmSyntaxTypeAnnotation_TypeAnnotation>
            )
        > =
        parserFast_loopWhileSucceedsOntoResultFromParserRightToLeftStackUnsafe(
            parserFast_map2(
                { (startType, commentsAfter) in
                    (comments: elmSyntaxParserLenient_ropePrependTo(commentsAfter, startType.comments), syntax: startType.syntax)
                },
                parserFast_lazy(
                    { (_) in
                        elmSyntaxParserLenient_typeNotFunction
                    }
                ),
                elmSyntaxParserLenient_whitespaceAndComments
            ),
            parserFast_symbolFollowedBy(
                "->",
                parserFast_map4(
                    { (commentsAfterArrow, commentsWithExtraArrow, typeAnnotationResult, commentsAfterType) in
                        (comments: elmSyntaxParserLenient_ropePrependTo(commentsAfterType, elmSyntaxParserLenient_ropePrependTo(typeAnnotationResult.comments, elmSyntaxParserLenient_ropePrependTo(commentsWithExtraArrow, commentsAfterArrow))), syntax: typeAnnotationResult.syntax)
                    },
                    elmSyntaxParserLenient_whitespaceAndComments,
                    parserFast_orSucceed(parserFast_symbolFollowedBy("->", elmSyntaxParserLenient_whitespaceAndComments), elmSyntaxParserLenient_ropeEmpty()),
                    parserFast_lazy(
                        { (_) in
                            elmSyntaxParserLenient_typeNotFunction
                        }
                    ),
                    elmSyntaxParserLenient_whitespaceAndComments
                )
            ),
            { (inType, outType) in
                (comments: elmSyntaxParserLenient_ropePrependTo(outType.comments, inType.comments), syntax: elmSyntaxNode_combine(ElmSyntaxTypeAnnotation_TypeAnnotation.FunctionTypeAnnotation, inType.syntax, outType.syntax))
            }
        );

    static public func elmSyntaxParserLenient_untilWithComments<A: Sendable>(_ end: ParserFast_Parser<()>, _ element: ParserFast_Parser<ElmSyntaxParserLenient_WithComments<A>>) -> ParserFast_Parser<ElmSyntaxParserLenient_WithComments<List_List<A>>> {
        parserFast_loopUntil(
            end,
            element,
            (first: elmSyntaxParserLenient_ropeEmpty(), second: List_List.Empty),
            { (pResult, generated_commentsSoFar_itemsSoFar) in
                ({ () in return switch (generated_commentsSoFar_itemsSoFar: generated_commentsSoFar_itemsSoFar, unusedDummyFieldToMakeSwiftHappy: ()) {
                    case let (generated_commentsSoFar_itemsSoFar: (first: commentsSoFar, second: itemsSoFar), unusedDummyFieldToMakeSwiftHappy: ()):
                        (first: elmSyntaxParserLenient_ropePrependTo(pResult.comments, commentsSoFar), second: List_List.Cons(pResult.syntax, itemsSoFar));
                 }
                }())
            },
            { (generated_commentsSoFar_itemsSoFar) in
                ({ () in return switch (generated_commentsSoFar_itemsSoFar: generated_commentsSoFar_itemsSoFar, unusedDummyFieldToMakeSwiftHappy: ()) {
                    case let (generated_commentsSoFar_itemsSoFar: (first: commentsSoFar, second: itemsSoFar), unusedDummyFieldToMakeSwiftHappy: ()):
                        (comments: commentsSoFar, syntax: list_reverse(itemsSoFar));
                 }
                }())
            }
        )
    }

    static public let elmSyntaxParserLenient_varPattern:ElmSyntaxParserLenient_Parser<ElmSyntaxParserLenient_WithComments<ElmSyntaxNode_Node<ElmSyntaxPattern_Pattern>>> =
        elmSyntaxParserLenient_nameLowercaseMapWithRange(
            { (range, var_) in
                (comments: elmSyntaxParserLenient_ropeEmpty(), syntax: ElmSyntaxNode_Node.Node(range, ElmSyntaxPattern_Pattern.VarPattern(var_)))
            }
        );

    static public let elmSyntaxParserLenient_variantDeclarationFollowedByWhitespaceAndComments:ElmSyntaxParserLenient_Parser<ElmSyntaxParserLenient_WithComments<ElmSyntaxNode_Node<ElmSyntaxType_ValueConstructor>>> =
        parserFast_map3(
            { (nameNode, commentsAfterName, argumentsReverse) in
                ({ () in return switch nameNode {
                    case let ElmSyntaxNode_Node.Node(nameRange, _):
                        ({ () in let fullRange:ElmSyntaxRange_Range =
                            ({ () in return switch argumentsReverse.syntax {
                                case let List_List.Cons(ElmSyntaxNode_Node.Node(lastArgRange, _), _):
                                    (end: lastArgRange.end, start: nameRange.start);

                                case List_List.Empty:
                                    nameRange;
                             }
                            }());

                         return (comments: elmSyntaxParserLenient_ropePrependTo(argumentsReverse.comments, commentsAfterName), syntax: ElmSyntaxNode_Node.Node(fullRange, (arguments: list_reverse(argumentsReverse.syntax), name: nameNode)))
                        }());
                 }
                }())
            },
            elmSyntaxParserLenient_nameUppercaseNode,
            elmSyntaxParserLenient_whitespaceAndComments,
            elmSyntaxParserLenient_manyWithCommentsReverse(
                elmSyntaxParserLenient_positivelyIndentedFollowedBy(
                    parserFast_map2(
                        { (typeAnnotationResult, commentsAfter) in
                            (comments: elmSyntaxParserLenient_ropePrependTo(commentsAfter, typeAnnotationResult.comments), syntax: typeAnnotationResult.syntax)
                        },
                        elmSyntaxParserLenient_typeNotSpaceSeparated,
                        elmSyntaxParserLenient_whitespaceAndComments
                    )
                )
            )
        );

    static public let elmSyntaxParserLenient_whereBlock:
        ElmSyntaxParserLenient_Parser<
            ElmSyntaxParserLenient_WithComments<
                (command: Maybe_Maybe<ElmSyntaxNode_Node<String>>,
                 subscription: Maybe_Maybe<ElmSyntaxNode_Node<String>>
                )
            >
        > =
        parserFast_followedBySymbol(
            "}",
            parserFast_symbolFollowedBy(
                "{",
                parserFast_map4(
                    { (commentsBeforeHead, head, commentsAfterHead, tail) in
                        ({ () in let pairs:
                            List_List<
                                (first: String,
                                 second: ElmSyntaxNode_Node<String>
                                )
                            > =
                            List_List.Cons(head.syntax, tail.syntax);

                         return (comments: elmSyntaxParserLenient_ropePrependTo(tail.comments, elmSyntaxParserLenient_ropePrependTo(commentsAfterHead, elmSyntaxParserLenient_ropePrependTo(head.comments, commentsBeforeHead))),
                          syntax:
                            (command:
                                maybe_map(
                                    tuple_second,
                                    elmSyntaxParserLenient_listFirstWhere(
                                        { (generated_fnName) in
                                            ({ () in return switch (generated_fnName: generated_fnName, unusedDummyFieldToMakeSwiftHappy: ()) {
                                                case let (generated_fnName: (first: fnName, second: _), unusedDummyFieldToMakeSwiftHappy: ()):
                                                    ({ () in return switch fnName {
                                                        case "command":
                                                            true;

                                                        case _:
                                                            false;
                                                     }
                                                    }());
                                             }
                                            }())
                                        },
                                        pairs
                                    )
                                ),
                             subscription:
                                maybe_map(
                                    tuple_second,
                                    elmSyntaxParserLenient_listFirstWhere(
                                        { (generated_fnName) in
                                            ({ () in return switch (generated_fnName: generated_fnName, unusedDummyFieldToMakeSwiftHappy: ()) {
                                                case let (generated_fnName: (first: fnName, second: _), unusedDummyFieldToMakeSwiftHappy: ()):
                                                    ({ () in return switch fnName {
                                                        case "subscription":
                                                            true;

                                                        case _:
                                                            false;
                                                     }
                                                    }());
                                             }
                                            }())
                                        },
                                        pairs
                                    )
                                )
                            )
                         )
                        }())
                    },
                    elmSyntaxParserLenient_whitespaceAndComments,
                    elmSyntaxParserLenient_effectWhereClause,
                    elmSyntaxParserLenient_whitespaceAndComments,
                    elmSyntaxParserLenient_manyWithComments(
                        parserFast_symbolFollowedBy(
                            ",",
                            parserFast_map3(
                                { (commentsBefore, v, commentsAfter) in
                                    (comments: elmSyntaxParserLenient_ropePrependTo(commentsAfter, elmSyntaxParserLenient_ropePrependTo(v.comments, commentsBefore)), syntax: v.syntax)
                                },
                                elmSyntaxParserLenient_whitespaceAndComments,
                                elmSyntaxParserLenient_effectWhereClause,
                                elmSyntaxParserLenient_whitespaceAndComments
                            )
                        )
                    )
                )
            )
        );

    static public let elmSyntaxParserLenient_whitespaceAndComments:ElmSyntaxParserLenient_Parser<ElmSyntaxParserLenient_Comments> =
        parserFast_skipWhileWhitespaceBacktrackableFollowedBy(
            parserFast_offsetSourceAndThenOrSucceed(
                { (offset, source) in
                    ({ () in return switch string_slice(offset, basics_add(offset, 2.0), source) {
                        case "--":
                            Maybe_Maybe.Just(elmSyntaxParserLenient_fromSingleLineCommentNode);

                        case "{-":
                            Maybe_Maybe.Just(elmSyntaxParserLenient_fromMultilineCommentNodeOrEmptyOnProblem);

                        case _:
                            Maybe_Maybe.Nothing;
                     }
                    }())
                },
                elmSyntaxParserLenient_ropeEmpty()
            )
        );

    static public let elmSyntaxParserLenient_whitespaceAndCommentsEndsTopIndented:ElmSyntaxParserLenient_Parser<ElmSyntaxParserLenient_Comments> =
        elmSyntaxParserLenient_endsTopIndented(elmSyntaxParserLenient_whitespaceAndComments);

    static public func elmSyntaxParserLenient_whitespaceAndCommentsEndsTopIndentedFollowedBy<Syntax: Sendable>(_ nextParser: ElmSyntaxParserLenient_Parser<Syntax>) -> ElmSyntaxParserLenient_Parser<ElmSyntaxParserLenient_WithComments<Syntax>> {
        parserFast_map2(
            { (commentsBefore, after) in
                (comments: commentsBefore, syntax: after)
            },
            elmSyntaxParserLenient_whitespaceAndComments,
            elmSyntaxParserLenient_topIndentedFollowedBy(nextParser)
        )
    }

    static public func elmSyntaxParserLenient_whitespaceAndCommentsEndsTopIndentedFollowedByComments(_ nextParser: ElmSyntaxParserLenient_Parser<ElmSyntaxParserLenient_Comments>) -> ElmSyntaxParserLenient_Parser<ElmSyntaxParserLenient_Comments> {
        parserFast_map2(
            { (commentsBefore, afterComments) in
                elmSyntaxParserLenient_ropePrependTo(afterComments, commentsBefore)
            },
            elmSyntaxParserLenient_whitespaceAndComments,
            elmSyntaxParserLenient_topIndentedFollowedBy(nextParser)
        )
    }

    static public func elmSyntaxParserLenient_whitespaceAndCommentsEndsTopIndentedFollowedByWithComments<Syntax: Sendable>(_ nextParser: ElmSyntaxParserLenient_Parser<ElmSyntaxParserLenient_WithComments<Syntax>>) -> ElmSyntaxParserLenient_Parser<ElmSyntaxParserLenient_WithComments<Syntax>> {
        parserFast_map2(
            { (commentsBefore, after) in
                (comments: elmSyntaxParserLenient_ropePrependTo(after.comments, commentsBefore), syntax: after.syntax)
            },
            elmSyntaxParserLenient_whitespaceAndComments,
            elmSyntaxParserLenient_topIndentedFollowedBy(nextParser)
        )
    }

    static public let elmSyntaxParserLenient_whitespaceAndCommentsOrEmptyLoop:ElmSyntaxParserLenient_Parser<ElmSyntaxParserLenient_Comments> =
        parserFast_loopWhileSucceeds(
            parserFast_followedBySkipWhileWhitespace(parserFast_oneOf2(elmSyntaxParserLenient_singleLineComment, elmSyntaxParserLenient_multiLineComment)),
            elmSyntaxParserLenient_ropeEmpty(),
            { (right, soFar) in
                elmSyntaxParserLenient_ropePrependToFilled(elmSyntaxParserLenient_ropeOne(right), soFar)
            },
            basics_identity
        );

    static public func elmSyntaxPattern_moduleNames(_ p: ElmSyntaxPattern_Pattern) -> List_List<ElmSyntaxModuleName_ModuleName> {
        ({ () in return switch p {
            case let ElmSyntaxPattern_Pattern.TuplePattern(xs):
                list_concatMap(
                    { (generated_x) in
                        ({ () in return switch (generated_x: generated_x, unusedDummyFieldToMakeSwiftHappy: ()) {
                            case let (generated_x: ElmSyntaxNode_Node.Node(_, x), unusedDummyFieldToMakeSwiftHappy: ()):
                                elmSyntaxPattern_moduleNames(x);
                         }
                        }())
                    },
                    xs
                );

            case ElmSyntaxPattern_Pattern.RecordPattern(_):
                List_List.Empty;

            case let ElmSyntaxPattern_Pattern.UnConsPattern(ElmSyntaxNode_Node.Node(_, left), ElmSyntaxNode_Node.Node(_, right)):
                list_append(elmSyntaxPattern_moduleNames(left), elmSyntaxPattern_moduleNames(right));

            case let ElmSyntaxPattern_Pattern.ListPattern(xs):
                list_concatMap(
                    { (generated_x) in
                        ({ () in return switch (generated_x: generated_x, unusedDummyFieldToMakeSwiftHappy: ()) {
                            case let (generated_x: ElmSyntaxNode_Node.Node(_, x), unusedDummyFieldToMakeSwiftHappy: ()):
                                elmSyntaxPattern_moduleNames(x);
                         }
                        }())
                    },
                    xs
                );

            case let ElmSyntaxPattern_Pattern.NamedPattern(qualifiedNameRef, subPatterns):
                List_List.Cons(
                    qualifiedNameRef.moduleName,
                    list_concatMap(
                        { (generated_x) in
                            ({ () in return switch (generated_x: generated_x, unusedDummyFieldToMakeSwiftHappy: ()) {
                                case let (generated_x: ElmSyntaxNode_Node.Node(_, x), unusedDummyFieldToMakeSwiftHappy: ()):
                                    elmSyntaxPattern_moduleNames(x);
                             }
                            }())
                        },
                        subPatterns
                    )
                );

            case let ElmSyntaxPattern_Pattern.AsPattern(ElmSyntaxNode_Node.Node(_, inner), _):
                elmSyntaxPattern_moduleNames(inner);

            case let ElmSyntaxPattern_Pattern.ParenthesizedPattern(ElmSyntaxNode_Node.Node(_, inner)):
                elmSyntaxPattern_moduleNames(inner);

            case _:
                List_List.Empty;
         }
        }())
    }

    static public func elmSyntaxPrintDefunctionalized_atDocsLineToExposesAndRemaining(_ atDocsLine: List_List<String>, _ remainingExposes: List_List<ElmSyntaxExposing_TopLevelExpose>) ->
        (exposes: List_List<ElmSyntaxExposing_TopLevelExpose>,
         remaining: List_List<ElmSyntaxExposing_TopLevelExpose>
        ) {
        list_foldr(
            { (exposeAsAtDocsString, soFar) in
                ({ () in let toExposeReferencedByAtDocsString:@Sendable (ElmSyntaxExposing_TopLevelExpose) -> Maybe_Maybe<ElmSyntaxExposing_TopLevelExpose> =
                    { (ex) in
                        ({ () in return switch basics_eq(elmSyntaxPrintDefunctionalized_exposeToAtDocsString(ex), exposeAsAtDocsString) {
                            case true:
                                Maybe_Maybe.Just(ex);

                            case false:
                                Maybe_Maybe.Nothing;
                         }
                        }())
                    };

                 return ({ () in return switch elmSyntaxPrintDefunctionalized_listFirstJustMap(toExposeReferencedByAtDocsString, soFar.remaining) {
                    case Maybe_Maybe.Nothing:
                        soFar;

                    case let Maybe_Maybe.Just(exposeReferencedByAtDocsString):
                        (exposes: List_List.Cons(exposeReferencedByAtDocsString, soFar.exposes),
                         remaining:
                            list_filter(
                                { (ex) in
                                    basics_neq(ex, exposeReferencedByAtDocsString)
                                },
                                soFar.remaining
                            )
                        );
                  }
                 }())
                }())
            },
            (exposes: List_List.Empty, remaining: remainingExposes),
            atDocsLine
        )
    }

    static public func elmSyntaxPrintDefunctionalized_case_(_ syntaxComments: List_List<ElmSyntaxNode_Node<String>>, _ generated_casePattern_caseResult: ElmSyntaxExpression_Case) -> Print_Print {
        ({ () in return switch (generated_casePattern_caseResult: generated_casePattern_caseResult, unusedDummyFieldToMakeSwiftHappy: ()) {
            case let (generated_casePattern_caseResult: (first: casePattern, second: caseResult), unusedDummyFieldToMakeSwiftHappy: ()):
                ({ () in let patternPrint:Print_Print =
                    elmSyntaxPrintDefunctionalized_patternNotParenthesized(syntaxComments, casePattern);

                 let commentsBeforeExpression:List_List<String> =
                    elmSyntaxPrintDefunctionalized_commentsInRange((end: elmSyntaxNode_range(caseResult).start, start: elmSyntaxNode_range(casePattern).end), syntaxComments);

                 let caseResultPrint:Print_Print =
                    elmSyntaxPrintDefunctionalized_expressionNotParenthesized(syntaxComments, caseResult);

                 return print_followedBy(
                    print_withIndentAtNextMultipleOf4(
                        print_followedBy(
                            ({ () in return switch commentsBeforeExpression {
                                case List_List.Empty:
                                    caseResultPrint;

                                case let List_List.Cons(comment0, comment1Up):
                                    print_followedBy(caseResultPrint, print_followedBy(print_linebreakIndented, elmSyntaxPrintDefunctionalized_comments(List_List.Cons(comment0, comment1Up))));
                             }
                            }()),
                            print_linebreakIndented
                        )
                    ),
                    print_followedBy(elmSyntaxPrintDefunctionalized_printExactlyMinusGreaterThan, print_followedBy(print_spaceOrLinebreakIndented(print_lineSpread(patternPrint)), patternPrint))
                 )
                }());
         }
        }())
    }

    static public func elmSyntaxPrintDefunctionalized_charLiteral(_ charContent: Character) -> String {
        string_append("'", string_append(elmSyntaxPrintDefunctionalized_quotedCharToEscaped(charContent), "'"))
    }

    static public func elmSyntaxPrintDefunctionalized_characterHex(_ character: Character) -> String {
        string_toUpper(elmSyntaxPrintDefunctionalized_intToHexString(char_toCode(character)))
    }

    static public func elmSyntaxPrintDefunctionalized_characterIsNotPrint(_ character: Character) -> Bool {
        ({ () in return switch basics_or(charExtra_isLatinAlphaNumOrUnderscoreFast(character), basics_or(basics_eq(character, " "), basics_or(basics_eq(character, "."), basics_or(basics_eq(character, "!"), basics_or(basics_eq(character, "?"), basics_or(basics_eq(character, "-"), basics_eq(character, ":"))))))) {
            case true:
                false;

            case false:
                ({ () in return switch unicode_getCategory(character) {
                    case Maybe_Maybe.Nothing:
                        true;

                    case let Maybe_Maybe.Just(category):
                        ({ () in return switch category {
                            case Unicode_Category.SeparatorLine:
                                true;

                            case Unicode_Category.SeparatorParagraph:
                                true;

                            case Unicode_Category.OtherControl:
                                true;

                            case Unicode_Category.OtherFormat:
                                true;

                            case Unicode_Category.OtherSurrogate:
                                true;

                            case Unicode_Category.OtherPrivateUse:
                                true;

                            case Unicode_Category.OtherNotAssigned:
                                true;

                            case Unicode_Category.LetterUppercase:
                                false;

                            case Unicode_Category.LetterLowercase:
                                false;

                            case Unicode_Category.LetterTitlecase:
                                false;

                            case Unicode_Category.MarkNonSpacing:
                                false;

                            case Unicode_Category.MarkSpacingCombining:
                                false;

                            case Unicode_Category.MarkEnclosing:
                                false;

                            case Unicode_Category.NumberDecimalDigit:
                                false;

                            case Unicode_Category.NumberLetter:
                                false;

                            case Unicode_Category.NumberOther:
                                false;

                            case Unicode_Category.SeparatorSpace:
                                true;

                            case Unicode_Category.LetterModifier:
                                false;

                            case Unicode_Category.LetterOther:
                                false;

                            case Unicode_Category.PunctuationConnector:
                                false;

                            case Unicode_Category.PunctuationDash:
                                false;

                            case Unicode_Category.PunctuationOpen:
                                false;

                            case Unicode_Category.PunctuationClose:
                                false;

                            case Unicode_Category.PunctuationInitialQuote:
                                false;

                            case Unicode_Category.PunctuationFinalQuote:
                                false;

                            case Unicode_Category.PunctuationOther:
                                false;

                            case Unicode_Category.SymbolMath:
                                false;

                            case Unicode_Category.SymbolCurrency:
                                false;

                            case Unicode_Category.SymbolModifier:
                                false;

                            case Unicode_Category.SymbolOther:
                                false;
                         }
                        }());
                 }
                }());
         }
        }())
    }

    static public func elmSyntaxPrintDefunctionalized_collapsibleComments(_ commentsToPrint: List_List<String>) ->
        (lineSpread: Print_LineSpread,
         print: Print_Print
        ) {
        ({ () in return switch commentsToPrint {
            case List_List.Empty:
                elmSyntaxPrintDefunctionalized_printEmptyLineSpreadSingleLine;

            case let List_List.Cons(comment0, comment1Up):
                ({ () in let commentPrints:List_List<Print_Print> =
                    list_map(elmSyntaxPrintDefunctionalized_comment, List_List.Cons(comment0, comment1Up));

                 return ({ () in return switch 
                    list_all(
                        { (commentPrint) in
                            elmSyntaxPrintDefunctionalized_commentCanBePartOfCollapsible(print_toString(commentPrint))
                        },
                        commentPrints
                    )
                   {
                    case true:
                        (lineSpread: Print_LineSpread.SingleLine, print: print_listIntersperseAndFlatten(elmSyntaxPrintDefunctionalized_printExactlySpace, commentPrints));

                    case false:
                        (lineSpread: Print_LineSpread.MultipleLines, print: elmSyntaxPrintDefunctionalized_comments(List_List.Cons(comment0, comment1Up)));
                  }
                 }())
                }());
         }
        }())
    }

    static public func elmSyntaxPrintDefunctionalized_comment(_ syntaxComment: String) -> Print_Print {
        ({ () in return switch syntaxComment {
            case "{--}":
                elmSyntaxPrintDefunctionalized_printExactlyCurlyOpeningDotDotCurlyClosing;

            case let nonDirectlyClosingMultiLineComment:
                ({ () in return switch string_startsWith("--", nonDirectlyClosingMultiLineComment) {
                    case true:
                        print_exactly(string_trimRight(nonDirectlyClosingMultiLineComment));

                    case false:
                        ({ () in let commentContentLines:List_List<String> =
                            string_lines(string_dropRight(2.0, string_dropLeft(2.0, nonDirectlyClosingMultiLineComment)));

                         let commentContentNormal:List_List<String> =
                            ({ () in return switch commentContentLines {
                                case List_List.Empty:
                                    List_List.Empty;

                                case let List_List.Cons(commentContentLine0, commentContentLine1Up):
                                    list_map(
                                        string_trimRight,
                                        List_List.Cons(
                                            string_trimLeft(commentContentLine0),
                                            elmSyntaxPrintDefunctionalized_unindent(
                                                elmSyntaxPrintDefunctionalized_listDropLastIfIs(
                                                    { (line) in
                                                        ({ () in return switch string_trim(line) {
                                                            case "":
                                                                true;

                                                            case _:
                                                                false;
                                                         }
                                                        }())
                                                    },
                                                    commentContentLine1Up
                                                )
                                            )
                                        )
                                    );
                             }
                            }());

                         return print_followedBy(
                            elmSyntaxPrintDefunctionalized_printExactlyMinusCurlyClosing,
                            print_followedBy(
                                ({ () in return switch commentContentNormal {
                                    case List_List.Empty:
                                        elmSyntaxPrintDefunctionalized_printExactlySpaceSpace;

                                    case let List_List.Cons(singleLine, List_List.Empty):
                                        print_exactly(string_append(" ", string_append(singleLine, " ")));

                                    case let List_List.Cons(firstLine, List_List.Cons(secondLine, thirdLineUp)):
                                        print_followedBy(
                                            print_listMapAndFlatten(
                                                { (line) in
                                                    ({ () in return switch line {
                                                        case "":
                                                            print_linebreakIndented;

                                                        case let lineNotEmpty:
                                                            print_followedBy(print_linebreakIndented, print_exactly(string_append("   ", lineNotEmpty)));
                                                     }
                                                    }())
                                                },
                                                List_List.Cons(secondLine, thirdLineUp)
                                            ),
                                            ({ () in return switch firstLine {
                                                case "":
                                                    print_linebreakIndented;

                                                case let lineNotEmpty:
                                                    print_followedBy(print_linebreakIndented, print_exactly(string_append(" ", lineNotEmpty)));
                                             }
                                            }())
                                        );
                                 }
                                }()),
                                elmSyntaxPrintDefunctionalized_printExactlyCurlyOpeningMinus
                            )
                         )
                        }());
                 }
                }());
         }
        }())
    }

    static public func elmSyntaxPrintDefunctionalized_commentCanBePartOfCollapsible(_ syntaxComment: String) -> Bool {
        ({ () in return switch syntaxComment {
            case "{--}":
                false;

            case let commentNotDirectlyClosed:
                basics_and(string_startsWith("{-", commentNotDirectlyClosed), basics_not(string_contains("\n", commentNotDirectlyClosed)));
         }
        }())
    }

    static public func elmSyntaxPrintDefunctionalized_commentNodesInRange(_ range: ElmSyntaxRange_Range, _ sortedComments: List_List<ElmSyntaxNode_Node<String>>) -> List_List<ElmSyntaxNode_Node<String>> {
        ({ () in return switch sortedComments {
            case List_List.Empty:
                List_List.Empty;

            case let List_List.Cons(headCommentNode, tailComments):
                ({ () in return switch headCommentNode {
                    case let ElmSyntaxNode_Node.Node(headCommentRange, _):
                        ({ () in return switch elmSyntaxPrintDefunctionalized_locationCompareFast(headCommentRange.start, range.start) {
                            case Basics_Order.LT:
                                elmSyntaxPrintDefunctionalized_commentNodesInRange(range, tailComments);

                            case Basics_Order.EQ:
                                List_List.Cons(headCommentNode, elmSyntaxPrintDefunctionalized_commentNodesInRange(range, tailComments));

                            case Basics_Order.GT:
                                ({ () in return switch elmSyntaxPrintDefunctionalized_locationCompareFast(headCommentRange.end, range.end) {
                                    case Basics_Order.GT:
                                        List_List.Empty;

                                    case Basics_Order.LT:
                                        List_List.Cons(headCommentNode, elmSyntaxPrintDefunctionalized_commentNodesInRange(range, tailComments));

                                    case Basics_Order.EQ:
                                        List_List.Cons(headCommentNode, elmSyntaxPrintDefunctionalized_commentNodesInRange(range, tailComments));
                                 }
                                }());
                         }
                        }());
                 }
                }());
         }
        }())
    }

    static public func elmSyntaxPrintDefunctionalized_comments(_ syntaxComments: List_List<String>) -> Print_Print {
        print_listMapAndIntersperseAndFlatten(elmSyntaxPrintDefunctionalized_comment, print_linebreakIndented, syntaxComments)
    }

    static public func elmSyntaxPrintDefunctionalized_commentsAfter(_ end: ElmSyntaxRange_Location, _ sortedComments: List_List<ElmSyntaxNode_Node<String>>) -> List_List<String> {
        ({ () in return switch sortedComments {
            case List_List.Empty:
                List_List.Empty;

            case let List_List.Cons(ElmSyntaxNode_Node.Node(headCommentRange, headComment), tailComments):
                ({ () in return switch elmSyntaxPrintDefunctionalized_locationCompareFast(headCommentRange.start, end) {
                    case Basics_Order.LT:
                        elmSyntaxPrintDefunctionalized_commentsAfter(end, tailComments);

                    case Basics_Order.GT:
                        List_List.Cons(headComment, list_map(elmSyntaxNode_value, tailComments));

                    case Basics_Order.EQ:
                        List_List.Cons(headComment, list_map(elmSyntaxNode_value, tailComments));
                 }
                }());
         }
        }())
    }

    static public func elmSyntaxPrintDefunctionalized_commentsBetweenDocumentationAndDeclaration(_ syntaxComments: List_List<String>) -> Print_Print {
        ({ () in return switch syntaxComments {
            case List_List.Empty:
                print_empty;

            case let List_List.Cons(comment0, comment1Up):
                print_followedBy(elmSyntaxPrintDefunctionalized_printLinebreakLinebreak, print_followedBy(elmSyntaxPrintDefunctionalized_moduleLevelComments(List_List.Cons(comment0, comment1Up)), elmSyntaxPrintDefunctionalized_printLinebreakLinebreakLinebreak));
         }
        }())
    }

    static public func elmSyntaxPrintDefunctionalized_commentsEmptyPortDocumentationRemainingCommentsEmpty<A_: Sendable, B_: Sendable>() ->
        (portDocumentationComments: List_List<B_>,
         remainingComments: List_List<A_>
        ) {
        (portDocumentationComments: List_List.Empty, remainingComments: List_List.Empty)
    }

    static public func elmSyntaxPrintDefunctionalized_commentsInRange(_ range: ElmSyntaxRange_Range, _ sortedComments: List_List<ElmSyntaxNode_Node<String>>) -> List_List<String> {
        ({ () in return switch sortedComments {
            case List_List.Empty:
                List_List.Empty;

            case let List_List.Cons(ElmSyntaxNode_Node.Node(headCommentRange, headComment), tailComments):
                ({ () in return switch elmSyntaxPrintDefunctionalized_locationCompareFast(headCommentRange.start, range.start) {
                    case Basics_Order.LT:
                        elmSyntaxPrintDefunctionalized_commentsInRange(range, tailComments);

                    case Basics_Order.EQ:
                        List_List.Cons(headComment, elmSyntaxPrintDefunctionalized_commentsInRange(range, tailComments));

                    case Basics_Order.GT:
                        ({ () in return switch elmSyntaxPrintDefunctionalized_locationCompareFast(headCommentRange.end, range.end) {
                            case Basics_Order.GT:
                                List_List.Empty;

                            case Basics_Order.LT:
                                List_List.Cons(headComment, elmSyntaxPrintDefunctionalized_commentsInRange(range, tailComments));

                            case Basics_Order.EQ:
                                List_List.Cons(headComment, elmSyntaxPrintDefunctionalized_commentsInRange(range, tailComments));
                         }
                        }());
                 }
                }());
         }
        }())
    }

    static public func elmSyntaxPrintDefunctionalized_construct<A: Sendable>(_ specific:
        (lineSpreadMinimum: Print_LineSpread,
         printArgumentParenthesizedIfSpaceSeparated: @Sendable (List_List<ElmSyntaxNode_Node<String>>, ElmSyntaxNode_Node<A>) -> Print_Print
        ), _ syntaxComments: List_List<ElmSyntaxNode_Node<String>>, _ syntaxConstruct:
        (arguments: List_List<ElmSyntaxNode_Node<A>>,
         fullRange: ElmSyntaxRange_Range,
         start: String
        )) -> Print_Print {
        ({ () in let argumentPrintsAndCommentsBeforeReverse:List_List<Print_Print> =
            list_foldl(
                { (argument, soFar) in
                    ({ () in let print:Print_Print =
                        specific.printArgumentParenthesizedIfSpaceSeparated(syntaxComments, argument);

                     return (endLocation: elmSyntaxNode_range(argument).end,
                      reverse:
                        List_List.Cons(
                            ({ () in return switch elmSyntaxPrintDefunctionalized_commentsInRange((end: elmSyntaxNode_range(argument).start, start: soFar.endLocation), syntaxComments) {
                                case List_List.Empty:
                                    print;

                                case let List_List.Cons(comment0, comment1Up):
                                    ({ () in let commentsBeforeArgument:
                                        (lineSpread: Print_LineSpread,
                                         print: Print_Print
                                        ) =
                                        elmSyntaxPrintDefunctionalized_collapsibleComments(List_List.Cons(comment0, comment1Up));

                                     return print_followedBy(
                                        print,
                                        print_followedBy(
                                            print_spaceOrLinebreakIndented(
                                                print_lineSpreadMergeWith(
                                                    { (_) in
                                                        print_lineSpread(print)
                                                    },
                                                    commentsBeforeArgument.lineSpread
                                                )
                                            ),
                                            commentsBeforeArgument.print
                                        )
                                     )
                                    }());
                             }
                            }()),
                            soFar.reverse
                        )
                     )
                    }())
                },
                (endLocation: syntaxConstruct.fullRange.start, reverse: List_List.Empty),
                syntaxConstruct.arguments
            ).reverse;

         let lineSpread:Print_LineSpread =
            print_lineSpreadMergeWith(
                { (_) in
                    print_lineSpreadListMapAndCombine(print_lineSpread, argumentPrintsAndCommentsBeforeReverse)
                },
                specific.lineSpreadMinimum
            );

         return print_followedBy(
            print_withIndentAtNextMultipleOf4(
                print_listReverseAndMapAndFlatten(
                    { (argumentPrintWithCommentsBefore) in
                        print_followedBy(argumentPrintWithCommentsBefore, print_spaceOrLinebreakIndented(lineSpread))
                    },
                    argumentPrintsAndCommentsBeforeReverse
                )
            ),
            print_exactly(syntaxConstruct.start)
         )
        }())
    }

    static public func elmSyntaxPrintDefunctionalized_declaration(_ syntaxComments:
        (comments: List_List<ElmSyntaxNode_Node<String>>,
         portDocumentationComment: Maybe_Maybe<ElmSyntaxNode_Node<String>>
        ), _ syntaxDeclaration: ElmSyntaxDeclaration_Declaration) -> Print_Print {
        ({ () in return switch syntaxDeclaration {
            case let ElmSyntaxDeclaration_Declaration.FunctionDeclaration(syntaxExpressionDeclaration):
                elmSyntaxPrintDefunctionalized_declarationExpression(syntaxComments.comments, syntaxExpressionDeclaration);

            case let ElmSyntaxDeclaration_Declaration.AliasDeclaration(syntaxTypeAliasDeclaration):
                elmSyntaxPrintDefunctionalized_declarationTypeAlias(syntaxComments.comments, syntaxTypeAliasDeclaration);

            case let ElmSyntaxDeclaration_Declaration.CustomTypeDeclaration(syntaxChoiceTypeDeclaration):
                elmSyntaxPrintDefunctionalized_declarationChoiceType(syntaxComments.comments, syntaxChoiceTypeDeclaration);

            case let ElmSyntaxDeclaration_Declaration.PortDeclaration(signature):
                elmSyntaxPrintDefunctionalized_declarationPort((comments: syntaxComments.comments, documentationComment: syntaxComments.portDocumentationComment), signature);

            case let ElmSyntaxDeclaration_Declaration.InfixDeclaration(syntaxInfixDeclaration):
                elmSyntaxPrintDefunctionalized_declarationInfix(syntaxInfixDeclaration);

            case let ElmSyntaxDeclaration_Declaration.Destructuring(destructuringPattern, destructuringExpression):
                elmSyntaxPrintDefunctionalized_declarationDestructuring(syntaxComments.comments, destructuringPattern, destructuringExpression);
         }
        }())
    }

    static public func elmSyntaxPrintDefunctionalized_declarationChoiceType(_ syntaxComments: List_List<ElmSyntaxNode_Node<String>>, _ syntaxChoiceTypeDeclaration: ElmSyntaxType_Type) -> Print_Print {
        ({ () in let parameterPrints:
            (endLocation: ElmSyntaxRange_Location,
             reverse: List_List<Print_Print>
            ) =
            list_foldl(
                { (parameterName, soFar) in
                    ({ () in let parameterPrintedRange:ElmSyntaxRange_Range =
                        elmSyntaxNode_range(parameterName);

                     let parameterNamePrint:Print_Print =
                        print_exactly(elmSyntaxNode_value(parameterName));

                     return (endLocation: parameterPrintedRange.end,
                      reverse:
                        List_List.Cons(
                            ({ () in return switch elmSyntaxPrintDefunctionalized_commentsInRange((end: parameterPrintedRange.start, start: soFar.endLocation), syntaxComments) {
                                case List_List.Empty:
                                    parameterNamePrint;

                                case let List_List.Cons(comment0, comment1Up):
                                    ({ () in let commentsCollapsible:
                                        (lineSpread: Print_LineSpread,
                                         print: Print_Print
                                        ) =
                                        elmSyntaxPrintDefunctionalized_collapsibleComments(List_List.Cons(comment0, comment1Up));

                                     return print_followedBy(parameterNamePrint, print_followedBy(print_spaceOrLinebreakIndented(commentsCollapsible.lineSpread), commentsCollapsible.print))
                                    }());
                             }
                            }()),
                            soFar.reverse
                        )
                     )
                    }())
                },
                (endLocation: elmSyntaxNode_range(syntaxChoiceTypeDeclaration.name).end, reverse: List_List.Empty),
                syntaxChoiceTypeDeclaration.generics
            );

         let parametersLineSpread:Print_LineSpread =
            print_lineSpreadListMapAndCombine(print_lineSpread, parameterPrints.reverse);

         let variantPrintsWithCommentsBeforeReverse:List_List<Print_Print> =
            list_foldl(
                { (generated_variantRange_variant, soFar) in
                    ({ () in return switch (generated_variantRange_variant: generated_variantRange_variant, unusedDummyFieldToMakeSwiftHappy: ()) {
                        case let (generated_variantRange_variant: ElmSyntaxNode_Node.Node(variantRange, variant), unusedDummyFieldToMakeSwiftHappy: ()):
                            ({ () in let variantPrint:Print_Print =
                                elmSyntaxPrintDefunctionalized_construct((lineSpreadMinimum: Print_LineSpread.SingleLine, printArgumentParenthesizedIfSpaceSeparated: elmSyntaxPrintDefunctionalized_typeParenthesizedIfSpaceSeparated), syntaxComments, (arguments: variant.arguments, fullRange: variantRange, start: elmSyntaxNode_value(variant.name)));

                             let commentsVariantPrint:Print_Print =
                                ({ () in return switch elmSyntaxPrintDefunctionalized_commentsInRange((end: elmSyntaxNode_range(variant.name).start, start: soFar.endLocation), syntaxComments) {
                                    case List_List.Empty:
                                        variantPrint;

                                    case let List_List.Cons(comment0, comment1Up):
                                        ({ () in let commentsCollapsible:
                                            (lineSpread: Print_LineSpread,
                                             print: Print_Print
                                            ) =
                                            elmSyntaxPrintDefunctionalized_collapsibleComments(List_List.Cons(comment0, comment1Up));

                                         return print_followedBy(
                                            variantPrint,
                                            print_followedBy(
                                                print_spaceOrLinebreakIndented(
                                                    print_lineSpreadMergeWith(
                                                        { (_) in
                                                            print_lineSpread(variantPrint)
                                                        },
                                                        commentsCollapsible.lineSpread
                                                    )
                                                ),
                                                commentsCollapsible.print
                                            )
                                         )
                                        }());
                                 }
                                }());

                             return (endLocation: variantRange.end, reverse: List_List.Cons(commentsVariantPrint, soFar.reverse))
                            }());
                     }
                    }())
                },
                (endLocation: parameterPrints.endLocation, reverse: List_List.Empty),
                syntaxChoiceTypeDeclaration.constructors
            ).reverse;

         return print_followedBy(
            print_withIndentAtNextMultipleOf4(
                print_followedBy(
                    print_listReverseAndMapAndIntersperseAndFlatten(
                        { (variantPrint) in
                            print_withIndentIncreasedBy(2.0, variantPrint)
                        },
                        elmSyntaxPrintDefunctionalized_printLinebreakIndentedVerticalBarSpace,
                        variantPrintsWithCommentsBeforeReverse
                    ),
                    print_followedBy(
                        elmSyntaxPrintDefunctionalized_printExactlyEqualsSpace,
                        print_followedBy(
                            print_linebreakIndented,
                            print_followedBy(
                                print_withIndentAtNextMultipleOf4(
                                    print_listReverseAndMapAndFlatten(
                                        { (parameterPrint) in
                                            print_followedBy(parameterPrint, print_spaceOrLinebreakIndented(parametersLineSpread))
                                        },
                                        parameterPrints.reverse
                                    )
                                ),
                                print_followedBy(print_exactly(elmSyntaxNode_value(syntaxChoiceTypeDeclaration.name)), print_spaceOrLinebreakIndented(parametersLineSpread))
                            )
                        )
                    )
                )
            ),
            ({ () in return switch syntaxChoiceTypeDeclaration.documentation {
                case Maybe_Maybe.Nothing:
                    elmSyntaxPrintDefunctionalized_printExactlyType;

                case let Maybe_Maybe.Just(ElmSyntaxNode_Node.Node(documentationRange, documentation)):
                    print_followedBy(elmSyntaxPrintDefunctionalized_printExactlyType, print_followedBy(elmSyntaxPrintDefunctionalized_commentsBetweenDocumentationAndDeclaration(elmSyntaxPrintDefunctionalized_commentsInRange((end: elmSyntaxNode_range(syntaxChoiceTypeDeclaration.name).start, start: documentationRange.start), syntaxComments)), print_followedBy(print_linebreak, print_exactly(documentation))));
             }
            }())
         )
        }())
    }

    static public func elmSyntaxPrintDefunctionalized_declarationDestructuring(_ syntaxComments: List_List<ElmSyntaxNode_Node<String>>, _ destructuringPattern: ElmSyntaxNode_Node<ElmSyntaxPattern_Pattern>, _ destructuringExpression: ElmSyntaxNode_Node<ElmSyntaxExpression_Expression>) -> Print_Print {
        print_followedBy(print_withIndentAtNextMultipleOf4(print_followedBy(elmSyntaxPrintDefunctionalized_expressionNotParenthesized(List_List.Empty, destructuringExpression), print_linebreakIndented)), print_followedBy(print_exactly(" ="), elmSyntaxPrintDefunctionalized_patternParenthesizedIfSpaceSeparated(syntaxComments, destructuringPattern)))
    }

    static public func elmSyntaxPrintDefunctionalized_declarationExpression(_ syntaxComments: List_List<ElmSyntaxNode_Node<String>>, _ syntaxExpressionDeclaration: ElmSyntaxExpression_Function) -> Print_Print {
        ({ () in let implementationPrint:Print_Print =
            elmSyntaxPrintDefunctionalized_declarationExpressionImplementation(syntaxComments, elmSyntaxNode_value(syntaxExpressionDeclaration.declaration));

         let withoutDocumentationPrint:Print_Print =
            ({ () in return switch syntaxExpressionDeclaration.signature {
                case Maybe_Maybe.Nothing:
                    implementationPrint;

                case let Maybe_Maybe.Just(ElmSyntaxNode_Node.Node(signatureRange, signature)):
                    ({ () in let commentsBetweenSignatureAndImplementationName:List_List<String> =
                        elmSyntaxPrintDefunctionalized_commentsInRange((end: elmSyntaxNode_range(syntaxExpressionDeclaration.declaration).start, start: signatureRange.end), syntaxComments);

                     return print_followedBy(
                        ({ () in return switch commentsBetweenSignatureAndImplementationName {
                            case List_List.Empty:
                                implementationPrint;

                            case let List_List.Cons(comment0, comment1Up):
                                print_followedBy(implementationPrint, print_followedBy(elmSyntaxPrintDefunctionalized_printLinebreakLinebreak, print_followedBy(elmSyntaxPrintDefunctionalized_moduleLevelComments(List_List.Cons(comment0, comment1Up)), elmSyntaxPrintDefunctionalized_printLinebreakLinebreakLinebreak)));
                         }
                        }()),
                        print_followedBy(print_linebreak, elmSyntaxPrintDefunctionalized_declarationSignature(syntaxComments, signature))
                     )
                    }());
             }
            }());

         return ({ () in return switch syntaxExpressionDeclaration.documentation {
            case Maybe_Maybe.Nothing:
                withoutDocumentationPrint;

            case let Maybe_Maybe.Just(ElmSyntaxNode_Node.Node(documentationRange, documentation)):
                print_followedBy(
                    withoutDocumentationPrint,
                    print_followedBy(
                        elmSyntaxPrintDefunctionalized_commentsBetweenDocumentationAndDeclaration(
                            elmSyntaxPrintDefunctionalized_commentsInRange(
                                (end:
                                    ({ () in return switch syntaxExpressionDeclaration.signature {
                                        case Maybe_Maybe.Nothing:
                                            elmSyntaxNode_range(syntaxExpressionDeclaration.declaration).start;

                                        case let Maybe_Maybe.Just(ElmSyntaxNode_Node.Node(signatureRange, _)):
                                            signatureRange.start;
                                     }
                                    }()),
                                 start: documentationRange.start
                                ),
                                syntaxComments
                            )
                        ),
                        print_followedBy(print_linebreak, print_exactly(documentation))
                    )
                );
          }
         }())
        }())
    }

    static public func elmSyntaxPrintDefunctionalized_declarationExpressionImplementation(_ syntaxComments: List_List<ElmSyntaxNode_Node<String>>, _ implementation: ElmSyntaxExpression_FunctionImplementation) -> Print_Print {
        ({ () in let parameterPrintsWithCommentsBefore:
            (endLocation: ElmSyntaxRange_Location,
             reverse: List_List<Print_Print>
            ) =
            list_foldl(
                { (parameterPattern, soFar) in
                    ({ () in let parameterRange:ElmSyntaxRange_Range =
                        elmSyntaxNode_range(parameterPattern);

                     let parameterPrint:Print_Print =
                        elmSyntaxPrintDefunctionalized_patternParenthesizedIfSpaceSeparated(syntaxComments, parameterPattern);

                     return (endLocation: parameterRange.end,
                      reverse:
                        List_List.Cons(
                            ({ () in return switch elmSyntaxPrintDefunctionalized_commentsInRange((end: parameterRange.start, start: soFar.endLocation), syntaxComments) {
                                case List_List.Empty:
                                    parameterPrint;

                                case let List_List.Cons(comment0, comment1Up):
                                    ({ () in let commentsBefore:
                                        (lineSpread: Print_LineSpread,
                                         print: Print_Print
                                        ) =
                                        elmSyntaxPrintDefunctionalized_collapsibleComments(List_List.Cons(comment0, comment1Up));

                                     return print_followedBy(
                                        parameterPrint,
                                        print_followedBy(
                                            print_spaceOrLinebreakIndented(
                                                print_lineSpreadMergeWith(
                                                    { (_) in
                                                        print_lineSpread(parameterPrint)
                                                    },
                                                    commentsBefore.lineSpread
                                                )
                                            ),
                                            commentsBefore.print
                                        )
                                     )
                                    }());
                             }
                            }()),
                            soFar.reverse
                        )
                     )
                    }())
                },
                (endLocation: elmSyntaxNode_range(implementation.name).end, reverse: List_List.Empty),
                implementation.arguments
            );

         let parametersLineSpread:Print_LineSpread =
            print_lineSpreadListMapAndCombine(print_lineSpread, parameterPrintsWithCommentsBefore.reverse);

         let expressionPrint:Print_Print =
            elmSyntaxPrintDefunctionalized_expressionNotParenthesized(syntaxComments, implementation.expression);

         let commentsBetweenParametersAndResult:List_List<String> =
            elmSyntaxPrintDefunctionalized_commentsInRange((end: elmSyntaxNode_range(implementation.expression).start, start: parameterPrintsWithCommentsBefore.endLocation), syntaxComments);

         return print_followedBy(
            print_withIndentAtNextMultipleOf4(
                print_followedBy(
                    print_followedBy(
                        ({ () in return switch commentsBetweenParametersAndResult {
                            case List_List.Empty:
                                expressionPrint;

                            case let List_List.Cons(comment0, comment1Up):
                                print_followedBy(expressionPrint, print_followedBy(print_linebreakIndented, elmSyntaxPrintDefunctionalized_comments(List_List.Cons(comment0, comment1Up))));
                         }
                        }()),
                        print_linebreakIndented
                    ),
                    print_followedBy(
                        elmSyntaxPrintDefunctionalized_printExactlyEquals,
                        print_followedBy(
                            print_spaceOrLinebreakIndented(parametersLineSpread),
                            print_listReverseAndMapAndFlatten(
                                { (parameterPrintWithCommentsBefore) in
                                    print_followedBy(parameterPrintWithCommentsBefore, print_spaceOrLinebreakIndented(parametersLineSpread))
                                },
                                parameterPrintsWithCommentsBefore.reverse
                            )
                        )
                    )
                )
            ),
            print_exactly(elmSyntaxNode_value(implementation.name))
         )
        }())
    }

    static public func elmSyntaxPrintDefunctionalized_declarationInfix(_ syntaxInfixDeclaration: ElmSyntaxInfix_Infix) -> Print_Print {
        print_exactly(string_append("infix ", string_append(elmSyntaxPrintDefunctionalized_infixDirection(elmSyntaxNode_value(syntaxInfixDeclaration.direction)), string_append(" ", string_append(string_fromFloat(elmSyntaxNode_value(syntaxInfixDeclaration.precedence)), string_append(" (", string_append(elmSyntaxNode_value(syntaxInfixDeclaration.operator_), string_append(") = ", elmSyntaxNode_value(syntaxInfixDeclaration.function)))))))))
    }

    static public func elmSyntaxPrintDefunctionalized_declarationPort(_ syntaxComments:
        (comments: List_List<ElmSyntaxNode_Node<String>>,
         documentationComment: Maybe_Maybe<ElmSyntaxNode_Node<String>>
        ), _ signature: ElmSyntaxSignature_Signature) -> Print_Print {
        print_followedBy(
            elmSyntaxPrintDefunctionalized_declarationSignature(syntaxComments.comments, signature),
            ({ () in return switch syntaxComments.documentationComment {
                case Maybe_Maybe.Nothing:
                    elmSyntaxPrintDefunctionalized_printExactlyPortSpace;

                case let Maybe_Maybe.Just(ElmSyntaxNode_Node.Node(documentationRange, documentation)):
                    print_followedBy(elmSyntaxPrintDefunctionalized_printExactlyPortSpace, print_followedBy(elmSyntaxPrintDefunctionalized_commentsBetweenDocumentationAndDeclaration(elmSyntaxPrintDefunctionalized_commentsInRange((end: elmSyntaxNode_range(signature.name).start, start: documentationRange.start), syntaxComments.comments)), print_followedBy(print_linebreak, print_exactly(documentation))));
             }
            }())
        )
    }

    static public func elmSyntaxPrintDefunctionalized_declarationSignature(_ syntaxComments: List_List<ElmSyntaxNode_Node<String>>, _ signature: ElmSyntaxSignature_Signature) -> Print_Print {
        ({ () in let typePrint:Print_Print =
            elmSyntaxPrintDefunctionalized_typeNotParenthesized(syntaxComments, signature.typeAnnotation);

         let rangeBetweenNameAndType:ElmSyntaxRange_Range =
            (end: elmSyntaxNode_range(signature.typeAnnotation).start, start: elmSyntaxNode_range(signature.name).end);

         return print_followedBy(
            print_withIndentAtNextMultipleOf4(
                print_followedBy(
                    typePrint,
                    ({ () in return switch elmSyntaxPrintDefunctionalized_commentsInRange(rangeBetweenNameAndType, syntaxComments) {
                        case List_List.Empty:
                            print_spaceOrLinebreakIndented(print_lineSpread(typePrint));

                        case let List_List.Cons(comment0, comment1Up):
                            print_followedBy(print_linebreakIndented, print_followedBy(elmSyntaxPrintDefunctionalized_comments(List_List.Cons(comment0, comment1Up)), print_linebreakIndented));
                     }
                    }())
                )
            ),
            print_exactly(string_append(elmSyntaxNode_value(signature.name), " :"))
         )
        }())
    }

    static public func elmSyntaxPrintDefunctionalized_declarationTypeAlias(_ syntaxComments: List_List<ElmSyntaxNode_Node<String>>, _ syntaxTypeAliasDeclaration: ElmSyntaxTypeAlias_TypeAlias) -> Print_Print {
        ({ () in let rangeBetweenParametersAndType:ElmSyntaxRange_Range =
            ({ () in return switch syntaxTypeAliasDeclaration.generics {
                case List_List.Empty:
                    (end: elmSyntaxNode_range(syntaxTypeAliasDeclaration.typeAnnotation).start, start: elmSyntaxNode_range(syntaxTypeAliasDeclaration.name).end);

                case let List_List.Cons(parameter0, parameter1Up):
                    (end: elmSyntaxNode_range(syntaxTypeAliasDeclaration.typeAnnotation).start, start: elmSyntaxNode_range(elmSyntaxPrintDefunctionalized_listFilledLast(parameter0, parameter1Up)).end);
             }
            }());

         let parameterPrintsWithCommentsBeforeReverse:List_List<Print_Print> =
            list_foldl(
                { (parameterName, soFar) in
                    ({ () in let parameterPrintedRange:ElmSyntaxRange_Range =
                        elmSyntaxNode_range(parameterName);

                     let parameterNamePrint:Print_Print =
                        print_exactly(elmSyntaxNode_value(parameterName));

                     return (endLocation: parameterPrintedRange.end,
                      reverse:
                        List_List.Cons(
                            ({ () in return switch elmSyntaxPrintDefunctionalized_commentsInRange((end: parameterPrintedRange.start, start: soFar.endLocation), syntaxComments) {
                                case List_List.Empty:
                                    parameterNamePrint;

                                case let List_List.Cons(comment0, comment1Up):
                                    ({ () in let commentsCollapsible:
                                        (lineSpread: Print_LineSpread,
                                         print: Print_Print
                                        ) =
                                        elmSyntaxPrintDefunctionalized_collapsibleComments(List_List.Cons(comment0, comment1Up));

                                     return print_followedBy(parameterNamePrint, print_followedBy(print_spaceOrLinebreakIndented(commentsCollapsible.lineSpread), commentsCollapsible.print))
                                    }());
                             }
                            }()),
                            soFar.reverse
                        )
                     )
                    }())
                },
                (endLocation: elmSyntaxNode_range(syntaxTypeAliasDeclaration.name).end, reverse: List_List.Empty),
                syntaxTypeAliasDeclaration.generics
            ).reverse;

         let parametersLineSpread:Print_LineSpread =
            print_lineSpreadListMapAndCombine(print_lineSpread, parameterPrintsWithCommentsBeforeReverse);

         let aliasedTypePrint:Print_Print =
            elmSyntaxPrintDefunctionalized_typeNotParenthesized(syntaxComments, syntaxTypeAliasDeclaration.typeAnnotation);

         return print_followedBy(
            print_withIndentAtNextMultipleOf4(
                print_followedBy(
                    print_followedBy(
                        ({ () in return switch elmSyntaxPrintDefunctionalized_commentsInRange(rangeBetweenParametersAndType, syntaxComments) {
                            case List_List.Empty:
                                aliasedTypePrint;

                            case let List_List.Cons(comment0, comment1Up):
                                print_followedBy(aliasedTypePrint, print_followedBy(print_linebreakIndented, elmSyntaxPrintDefunctionalized_comments(List_List.Cons(comment0, comment1Up))));
                         }
                        }()),
                        print_linebreakIndented
                    ),
                    print_followedBy(
                        elmSyntaxPrintDefunctionalized_printExactlyEquals,
                        print_followedBy(
                            print_spaceOrLinebreakIndented(parametersLineSpread),
                            print_followedBy(
                                print_withIndentAtNextMultipleOf4(
                                    print_listReverseAndMapAndFlatten(
                                        { (parameterPrint) in
                                            print_followedBy(parameterPrint, print_spaceOrLinebreakIndented(parametersLineSpread))
                                        },
                                        parameterPrintsWithCommentsBeforeReverse
                                    )
                                ),
                                print_followedBy(print_exactly(elmSyntaxNode_value(syntaxTypeAliasDeclaration.name)), print_spaceOrLinebreakIndented(parametersLineSpread))
                            )
                        )
                    )
                )
            ),
            ({ () in return switch syntaxTypeAliasDeclaration.documentation {
                case Maybe_Maybe.Nothing:
                    elmSyntaxPrintDefunctionalized_printExactlyTypeSpaceAlias;

                case let Maybe_Maybe.Just(ElmSyntaxNode_Node.Node(documentationRange, documentation)):
                    print_followedBy(elmSyntaxPrintDefunctionalized_printExactlyTypeSpaceAlias, print_followedBy(elmSyntaxPrintDefunctionalized_commentsBetweenDocumentationAndDeclaration(elmSyntaxPrintDefunctionalized_commentsInRange((end: elmSyntaxNode_range(syntaxTypeAliasDeclaration.name).start, start: documentationRange.start), syntaxComments)), print_followedBy(print_linebreak, print_exactly(documentation))));
             }
            }())
         )
        }())
    }

    static public func elmSyntaxPrintDefunctionalized_declarations(_ context:
        (otherComments: List_List<ElmSyntaxNode_Node<String>>,
         portDocumentationComments: List_List<ElmSyntaxNode_Node<String>>,
         previousEnd: ElmSyntaxRange_Location
        ), _ syntaxDeclarations: List_List<ElmSyntaxNode_Node<ElmSyntaxDeclaration_Declaration>>) -> Print_Print {
        ({ () in return switch syntaxDeclarations {
            case List_List.Empty:
                print_empty;

            case let List_List.Cons(ElmSyntaxNode_Node.Node(declaration0Range, declaration0), declarations1Up):
                print_followedBy(
                    list_foldl(
                        { (generated_declarationRange_syntaxDeclaration, soFar) in
                            ({ () in return switch (generated_declarationRange_syntaxDeclaration: generated_declarationRange_syntaxDeclaration, unusedDummyFieldToMakeSwiftHappy: ()) {
                                case let (generated_declarationRange_syntaxDeclaration: ElmSyntaxNode_Node.Node(declarationRange, syntaxDeclaration), unusedDummyFieldToMakeSwiftHappy: ()):
                                    ({ () in let maybeDeclarationPortDocumentationComment:Maybe_Maybe<ElmSyntaxNode_Node<String>> =
                                        ({ () in return switch syntaxDeclaration {
                                            case ElmSyntaxDeclaration_Declaration.PortDeclaration(_):
                                                elmSyntaxPrintDefunctionalized_firstCommentInRange((end: declarationRange.start, start: soFar.previousRange.end), context.portDocumentationComments);

                                            case ElmSyntaxDeclaration_Declaration.FunctionDeclaration(_):
                                                Maybe_Maybe.Nothing;

                                            case ElmSyntaxDeclaration_Declaration.AliasDeclaration(_):
                                                Maybe_Maybe.Nothing;

                                            case ElmSyntaxDeclaration_Declaration.CustomTypeDeclaration(_):
                                                Maybe_Maybe.Nothing;

                                            case ElmSyntaxDeclaration_Declaration.InfixDeclaration(_):
                                                Maybe_Maybe.Nothing;

                                            case ElmSyntaxDeclaration_Declaration.Destructuring(_, _):
                                                Maybe_Maybe.Nothing;
                                         }
                                        }());

                                     return (previousRange: declarationRange,
                                      print:
                                        print_followedBy(
                                            ({ () in return switch elmSyntaxPrintDefunctionalized_commentsInRange((end: declarationRange.start, start: soFar.previousRange.end), context.otherComments) {
                                                case let List_List.Cons(comment0, comment1Up):
                                                    print_followedBy(elmSyntaxPrintDefunctionalized_declaration((comments: elmSyntaxPrintDefunctionalized_commentNodesInRange(declarationRange, context.otherComments), portDocumentationComment: maybeDeclarationPortDocumentationComment), syntaxDeclaration), print_followedBy(elmSyntaxPrintDefunctionalized_moduleLevelCommentsBeforeDeclaration((comment0: comment0, comment1Up: comment1Up)), elmSyntaxPrintDefunctionalized_printLinebreakLinebreakLinebreak));

                                                case List_List.Empty:
                                                    elmSyntaxPrintDefunctionalized_linebreaksFollowedByDeclaration((comments: elmSyntaxPrintDefunctionalized_commentNodesInRange(declarationRange, context.otherComments), portDocumentationComment: maybeDeclarationPortDocumentationComment), syntaxDeclaration);
                                             }
                                            }()),
                                            soFar.print
                                        )
                                     )
                                    }());
                             }
                            }())
                        },
                        (previousRange: declaration0Range, print: print_empty),
                        declarations1Up
                    ).print,
                    elmSyntaxPrintDefunctionalized_declaration(
                        (comments: context.otherComments,
                         portDocumentationComment:
                            ({ () in return switch declaration0 {
                                case ElmSyntaxDeclaration_Declaration.PortDeclaration(_):
                                    elmSyntaxPrintDefunctionalized_firstCommentInRange((end: declaration0Range.start, start: context.previousEnd), context.portDocumentationComments);

                                case ElmSyntaxDeclaration_Declaration.FunctionDeclaration(_):
                                    Maybe_Maybe.Nothing;

                                case ElmSyntaxDeclaration_Declaration.AliasDeclaration(_):
                                    Maybe_Maybe.Nothing;

                                case ElmSyntaxDeclaration_Declaration.CustomTypeDeclaration(_):
                                    Maybe_Maybe.Nothing;

                                case ElmSyntaxDeclaration_Declaration.InfixDeclaration(_):
                                    Maybe_Maybe.Nothing;

                                case ElmSyntaxDeclaration_Declaration.Destructuring(_, _):
                                    Maybe_Maybe.Nothing;
                             }
                            }())
                        ),
                        declaration0
                    )
                );
         }
        }())
    }

    static public func elmSyntaxPrintDefunctionalized_expose(_ syntaxExpose: ElmSyntaxExposing_TopLevelExpose) -> String {
        ({ () in return switch syntaxExpose {
            case let ElmSyntaxExposing_TopLevelExpose.InfixExpose(operatorSymbol):
                string_append("(", string_append(operatorSymbol, ")"));

            case let ElmSyntaxExposing_TopLevelExpose.FunctionExpose(name):
                name;

            case let ElmSyntaxExposing_TopLevelExpose.TypeOrAliasExpose(name):
                name;

            case let ElmSyntaxExposing_TopLevelExpose.TypeExpose(syntaxExposeType):
                ({ () in return switch syntaxExposeType.open_ {
                    case Maybe_Maybe.Nothing:
                        syntaxExposeType.name;

                    case Maybe_Maybe.Just(_):
                        string_append(syntaxExposeType.name, "(..)");
                 }
                }());
         }
        }())
    }

    static public func elmSyntaxPrintDefunctionalized_exposeCompare(_ a: ElmSyntaxExposing_TopLevelExpose, _ b: ElmSyntaxExposing_TopLevelExpose) -> Basics_Order {
        ({ () in return switch a {
            case let ElmSyntaxExposing_TopLevelExpose.InfixExpose(aOperatorSymbol):
                ({ () in return switch b {
                    case let ElmSyntaxExposing_TopLevelExpose.InfixExpose(bOperatorSymbol):
                        basics_compare(aOperatorSymbol, bOperatorSymbol);

                    case ElmSyntaxExposing_TopLevelExpose.FunctionExpose(_):
                        Basics_Order.LT;

                    case ElmSyntaxExposing_TopLevelExpose.TypeOrAliasExpose(_):
                        Basics_Order.LT;

                    case ElmSyntaxExposing_TopLevelExpose.TypeExpose(_):
                        Basics_Order.LT;
                 }
                }());

            case let ElmSyntaxExposing_TopLevelExpose.FunctionExpose(aName):
                ({ () in return switch b {
                    case ElmSyntaxExposing_TopLevelExpose.InfixExpose(_):
                        Basics_Order.GT;

                    case let ElmSyntaxExposing_TopLevelExpose.FunctionExpose(bName):
                        basics_compare(aName, bName);

                    case ElmSyntaxExposing_TopLevelExpose.TypeOrAliasExpose(_):
                        Basics_Order.GT;

                    case ElmSyntaxExposing_TopLevelExpose.TypeExpose(_):
                        Basics_Order.GT;
                 }
                }());

            case let ElmSyntaxExposing_TopLevelExpose.TypeOrAliasExpose(aName):
                ({ () in return switch b {
                    case ElmSyntaxExposing_TopLevelExpose.InfixExpose(_):
                        Basics_Order.GT;

                    case ElmSyntaxExposing_TopLevelExpose.FunctionExpose(_):
                        Basics_Order.LT;

                    case let ElmSyntaxExposing_TopLevelExpose.TypeOrAliasExpose(bName):
                        basics_compare(aName, bName);

                    case let ElmSyntaxExposing_TopLevelExpose.TypeExpose(bTypeExpose):
                        basics_compare(aName, bTypeExpose.name);
                 }
                }());

            case let ElmSyntaxExposing_TopLevelExpose.TypeExpose(aTypeExpose):
                ({ () in return switch b {
                    case ElmSyntaxExposing_TopLevelExpose.InfixExpose(_):
                        Basics_Order.GT;

                    case ElmSyntaxExposing_TopLevelExpose.FunctionExpose(_):
                        Basics_Order.LT;

                    case let ElmSyntaxExposing_TopLevelExpose.TypeOrAliasExpose(bName):
                        basics_compare(aTypeExpose.name, bName);

                    case let ElmSyntaxExposing_TopLevelExpose.TypeExpose(bTypeExpose):
                        basics_compare(aTypeExpose.name, bTypeExpose.name);
                 }
                }());
         }
        }())
    }

    static public func elmSyntaxPrintDefunctionalized_exposeListToNormal(_ syntaxExposeList: List_List<ElmSyntaxNode_Node<ElmSyntaxExposing_TopLevelExpose>>) -> List_List<ElmSyntaxNode_Node<ElmSyntaxExposing_TopLevelExpose>> {
        elmSyntaxPrintDefunctionalized_exposesCombine(
            list_sortWith(
                { (generated_a, generated_b) in
                    ({ () in return switch (generated_a: generated_a, generated_b: generated_b) {
                        case let (generated_a: ElmSyntaxNode_Node.Node(_, a), generated_b: ElmSyntaxNode_Node.Node(_, b)):
                            elmSyntaxPrintDefunctionalized_exposeCompare(a, b);
                     }
                    }())
                },
                syntaxExposeList
            )
        )
    }

    static public func elmSyntaxPrintDefunctionalized_exposeMerge(_ a: ElmSyntaxExposing_TopLevelExpose, _ b: ElmSyntaxExposing_TopLevelExpose) -> ElmSyntaxExposing_TopLevelExpose {
        ({ () in return switch a {
            case let ElmSyntaxExposing_TopLevelExpose.TypeExpose(aTypeExpose):
                ({ () in return switch b {
                    case let ElmSyntaxExposing_TopLevelExpose.TypeExpose(bTypeExpose):
                        ElmSyntaxExposing_TopLevelExpose.TypeExpose(
                            (name: aTypeExpose.name,
                             open_:
                                ({ () in return switch aTypeExpose.open_ {
                                    case let Maybe_Maybe.Just(openRange):
                                        Maybe_Maybe.Just(openRange);

                                    case Maybe_Maybe.Nothing:
                                        bTypeExpose.open_;
                                 }
                                }())
                            )
                        );

                    case ElmSyntaxExposing_TopLevelExpose.InfixExpose(_):
                        ElmSyntaxExposing_TopLevelExpose.TypeExpose(aTypeExpose);

                    case ElmSyntaxExposing_TopLevelExpose.FunctionExpose(_):
                        ElmSyntaxExposing_TopLevelExpose.TypeExpose(aTypeExpose);

                    case ElmSyntaxExposing_TopLevelExpose.TypeOrAliasExpose(_):
                        ElmSyntaxExposing_TopLevelExpose.TypeExpose(aTypeExpose);
                 }
                }());

            case ElmSyntaxExposing_TopLevelExpose.InfixExpose(_):
                b;

            case ElmSyntaxExposing_TopLevelExpose.FunctionExpose(_):
                b;

            case ElmSyntaxExposing_TopLevelExpose.TypeOrAliasExpose(_):
                b;
         }
        }())
    }

    static public func elmSyntaxPrintDefunctionalized_exposeToAtDocsString(_ syntaxExpose: ElmSyntaxExposing_TopLevelExpose) -> String {
        ({ () in return switch syntaxExpose {
            case let ElmSyntaxExposing_TopLevelExpose.InfixExpose(operatorSymbol):
                string_append("(", string_append(operatorSymbol, ")"));

            case let ElmSyntaxExposing_TopLevelExpose.FunctionExpose(name):
                name;

            case let ElmSyntaxExposing_TopLevelExpose.TypeOrAliasExpose(name):
                name;

            case let ElmSyntaxExposing_TopLevelExpose.TypeExpose(choiceTypeExpose):
                choiceTypeExpose.name;
         }
        }())
    }

    static public func elmSyntaxPrintDefunctionalized_exposesCombine(_ syntaxExposes: List_List<ElmSyntaxNode_Node<ElmSyntaxExposing_TopLevelExpose>>) -> List_List<ElmSyntaxNode_Node<ElmSyntaxExposing_TopLevelExpose>> {
        ({ () in return switch syntaxExposes {
            case List_List.Empty:
                List_List.Empty;

            case let List_List.Cons(generated_onlyExposeList0, List_List.Empty):
                ({ () in let onlyExposeList =
                    List_List.Cons(generated_onlyExposeList0, List_List.Empty);

                 return onlyExposeList
                }());

            case let List_List.Cons(expose0Node, List_List.Cons(expose1Node, expose2Up)):
                ({ () in return switch expose1Node {
                    case let ElmSyntaxNode_Node.Node(_, expose1):
                        ({ () in return switch expose0Node {
                            case let ElmSyntaxNode_Node.Node(expose0Range, expose0):
                                ({ () in return switch elmSyntaxPrintDefunctionalized_exposeCompare(expose0, expose1) {
                                    case Basics_Order.EQ:
                                        elmSyntaxPrintDefunctionalized_exposesCombine(List_List.Cons(ElmSyntaxNode_Node.Node(expose0Range, elmSyntaxPrintDefunctionalized_exposeMerge(expose0, expose1)), expose2Up));

                                    case Basics_Order.LT:
                                        List_List.Cons(expose0Node, elmSyntaxPrintDefunctionalized_exposesCombine(List_List.Cons(expose1Node, expose2Up)));

                                    case Basics_Order.GT:
                                        List_List.Cons(expose0Node, elmSyntaxPrintDefunctionalized_exposesCombine(List_List.Cons(expose1Node, expose2Up)));
                                 }
                                }());
                         }
                        }());
                 }
                }());
         }
        }())
    }

    static public func elmSyntaxPrintDefunctionalized_exposingCombine(_ a: Maybe_Maybe<ElmSyntaxNode_Node<ElmSyntaxExposing_Exposing>>, _ b: Maybe_Maybe<ElmSyntaxNode_Node<ElmSyntaxExposing_Exposing>>) -> Maybe_Maybe<ElmSyntaxNode_Node<ElmSyntaxExposing_Exposing>> {
        ({ () in return switch a {
            case let Maybe_Maybe.Just(ElmSyntaxNode_Node.Node(exposingAllRange, ElmSyntaxExposing_Exposing.All(allRange))):
                Maybe_Maybe.Just(ElmSyntaxNode_Node.Node(exposingAllRange, ElmSyntaxExposing_Exposing.All(allRange)));

            case let Maybe_Maybe.Just(ElmSyntaxNode_Node.Node(earlierExposingExplicitRange, ElmSyntaxExposing_Exposing.Explicit(earlierExposeSet))):
                Maybe_Maybe.Just(
                    ({ () in return switch b {
                        case let Maybe_Maybe.Just(ElmSyntaxNode_Node.Node(exposingAllRange, ElmSyntaxExposing_Exposing.All(allRange))):
                            ElmSyntaxNode_Node.Node(exposingAllRange, ElmSyntaxExposing_Exposing.All(allRange));

                        case let Maybe_Maybe.Just(ElmSyntaxNode_Node.Node(laterExposingExplicitRange, ElmSyntaxExposing_Exposing.Explicit(laterExposeSet))):
                            ElmSyntaxNode_Node.Node(
                                ({ () in return switch elmSyntaxPrintDefunctionalized_lineSpreadInRange(earlierExposingExplicitRange) {
                                    case Print_LineSpread.MultipleLines:
                                        earlierExposingExplicitRange;

                                    case Print_LineSpread.SingleLine:
                                        laterExposingExplicitRange;
                                 }
                                }()),
                                ElmSyntaxExposing_Exposing.Explicit(elmSyntaxPrintDefunctionalized_exposeListToNormal(list_append(earlierExposeSet, laterExposeSet)))
                            );

                        case Maybe_Maybe.Nothing:
                            ElmSyntaxNode_Node.Node(earlierExposingExplicitRange, ElmSyntaxExposing_Exposing.Explicit(earlierExposeSet));
                     }
                    }())
                );

            case Maybe_Maybe.Nothing:
                b;
         }
        }())
    }

    static public func elmSyntaxPrintDefunctionalized_exposingMulti(_ syntaxComments: List_List<ElmSyntaxNode_Node<String>>, _ syntaxExposing:
        (expose0: ElmSyntaxNode_Node<ElmSyntaxExposing_TopLevelExpose>,
         expose1Up: List_List<ElmSyntaxNode_Node<ElmSyntaxExposing_TopLevelExpose>>,
         fullRange: ElmSyntaxRange_Range
        )) -> Print_Print {
        ({ () in let containedComments:List_List<String> =
            elmSyntaxPrintDefunctionalized_commentsInRange(syntaxExposing.fullRange, syntaxComments);

         let lineSpread:Print_LineSpread =
            ({ () in return switch containedComments {
                case List_List.Cons(_, _):
                    Print_LineSpread.MultipleLines;

                case List_List.Empty:
                    elmSyntaxPrintDefunctionalized_lineSpreadInRange(syntaxExposing.fullRange);
             }
            }());

         return print_followedBy(
            ({ () in return switch containedComments {
                case List_List.Empty:
                    elmSyntaxPrintDefunctionalized_printExactlyParensClosing;

                case let List_List.Cons(comment0, comment1Up):
                    print_followedBy(elmSyntaxPrintDefunctionalized_printExactlyParensClosing, print_followedBy(print_emptyOrLinebreakIndented(lineSpread), elmSyntaxPrintDefunctionalized_comments(List_List.Cons(comment0, comment1Up))));
             }
            }()),
            print_followedBy(
                print_emptyOrLinebreakIndented(lineSpread),
                print_followedBy(
                    print_listMapAndIntersperseAndFlatten(
                        { (generated_syntaxExpose) in
                            ({ () in return switch (generated_syntaxExpose: generated_syntaxExpose, unusedDummyFieldToMakeSwiftHappy: ()) {
                                case let (generated_syntaxExpose: ElmSyntaxNode_Node.Node(_, syntaxExpose), unusedDummyFieldToMakeSwiftHappy: ()):
                                    print_exactly(elmSyntaxPrintDefunctionalized_expose(syntaxExpose));
                             }
                            }())
                        },
                        print_followedBy(elmSyntaxPrintDefunctionalized_printExactlyCommaSpace, print_emptyOrLinebreakIndented(lineSpread)),
                        List_List.Cons(syntaxExposing.expose0, syntaxExposing.expose1Up)
                    ),
                    ({ () in return switch lineSpread {
                        case Print_LineSpread.SingleLine:
                            elmSyntaxPrintDefunctionalized_printExactlyParensOpening;

                        case Print_LineSpread.MultipleLines:
                            elmSyntaxPrintDefunctionalized_printExactlyParensOpeningSpace;
                     }
                    }())
                )
            )
         )
        }())
    }

    static public func elmSyntaxPrintDefunctionalized_exposingToNormal(_ syntaxExposing: ElmSyntaxExposing_Exposing) -> ElmSyntaxExposing_Exposing {
        ({ () in return switch syntaxExposing {
            case let ElmSyntaxExposing_Exposing.All(allRange):
                ElmSyntaxExposing_Exposing.All(allRange);

            case let ElmSyntaxExposing_Exposing.Explicit(exposeSet):
                ElmSyntaxExposing_Exposing.Explicit(elmSyntaxPrintDefunctionalized_exposeListToNormal(exposeSet));
         }
        }())
    }

    static public func elmSyntaxPrintDefunctionalized_expressionCall(_ syntaxComments: List_List<ElmSyntaxNode_Node<String>>, _ syntaxCall:
        (applied: ElmSyntaxNode_Node<ElmSyntaxExpression_Expression>,
         argument0: ElmSyntaxNode_Node<ElmSyntaxExpression_Expression>,
         argument1Up: List_List<ElmSyntaxNode_Node<ElmSyntaxExpression_Expression>>,
         fullRange: ElmSyntaxRange_Range
        )) -> Print_Print {
        ({ () in let commentsBeforeArgument0:List_List<String> =
            elmSyntaxPrintDefunctionalized_commentsInRange((end: elmSyntaxNode_range(syntaxCall.argument0).start, start: elmSyntaxNode_range(syntaxCall.applied).end), syntaxComments);

         let collapsibleCommentsBeforeArgument0:
            (lineSpread: Print_LineSpread,
             print: Print_Print
            ) =
            elmSyntaxPrintDefunctionalized_collapsibleComments(commentsBeforeArgument0);

         let argument1UpPrintsWithCommentsBeforeReverse:List_List<Print_Print> =
            list_foldl(
                { (argument, soFar) in
                    ({ () in let print:Print_Print =
                        elmSyntaxPrintDefunctionalized_expressionParenthesizedIfSpaceSeparated(syntaxComments, argument);

                     return (endLocation: elmSyntaxNode_range(argument).end,
                      reverse:
                        List_List.Cons(
                            ({ () in return switch elmSyntaxPrintDefunctionalized_commentsInRange((end: elmSyntaxNode_range(argument).start, start: soFar.endLocation), syntaxComments) {
                                case List_List.Empty:
                                    print;

                                case let List_List.Cons(comment0, comment1Up):
                                    ({ () in let commentsBefore:
                                        (lineSpread: Print_LineSpread,
                                         print: Print_Print
                                        ) =
                                        elmSyntaxPrintDefunctionalized_collapsibleComments(List_List.Cons(comment0, comment1Up));

                                     return print_followedBy(
                                        print,
                                        print_followedBy(
                                            print_spaceOrLinebreakIndented(
                                                print_lineSpreadMergeWith(
                                                    { (_) in
                                                        print_lineSpread(print)
                                                    },
                                                    commentsBefore.lineSpread
                                                )
                                            ),
                                            commentsBefore.print
                                        )
                                     )
                                    }());
                             }
                            }()),
                            soFar.reverse
                        )
                     )
                    }())
                },
                (endLocation: elmSyntaxNode_range(syntaxCall.argument0).end, reverse: List_List.Empty),
                syntaxCall.argument1Up
            ).reverse;

         let argument0Print:Print_Print =
            elmSyntaxPrintDefunctionalized_expressionParenthesizedIfSpaceSeparated(syntaxComments, syntaxCall.argument0);

         let appliedPrint:Print_Print =
            elmSyntaxPrintDefunctionalized_expressionParenthesizedIfSpaceSeparated(syntaxComments, syntaxCall.applied);

         let argument0LineSpread:Print_LineSpread =
            print_lineSpreadMergeWith(
                { (_) in
                    print_lineSpread(argument0Print)
                },
                print_lineSpreadMergeWithStrict(
                    collapsibleCommentsBeforeArgument0.lineSpread,
                    print_lineSpreadMergeWith(
                        { (_) in
                            elmSyntaxPrintDefunctionalized_lineSpreadBetweenNodes(syntaxCall.applied, syntaxCall.argument0)
                        },
                        print_lineSpread(appliedPrint)
                    )
                )
            );

         let argument1UpLineSpread:Print_LineSpread =
            print_lineSpreadMergeWith(
                { (_) in
                    print_lineSpreadListMapAndCombine(print_lineSpread, argument1UpPrintsWithCommentsBeforeReverse)
                },
                print_lineSpreadMergeWithStrict(argument0LineSpread, elmSyntaxPrintDefunctionalized_lineSpreadInRange(syntaxCall.fullRange))
            );

         return print_followedBy(
            print_withIndentAtNextMultipleOf4(
                print_followedBy(
                    print_listReverseAndMapAndFlatten(
                        { (argumentPrintWithCommentsBefore) in
                            print_followedBy(argumentPrintWithCommentsBefore, print_spaceOrLinebreakIndented(argument1UpLineSpread))
                        },
                        argument1UpPrintsWithCommentsBeforeReverse
                    ),
                    print_followedBy(
                        ({ () in return switch commentsBeforeArgument0 {
                            case List_List.Empty:
                                argument0Print;

                            case List_List.Cons(_, _):
                                print_followedBy(
                                    argument0Print,
                                    print_followedBy(
                                        print_spaceOrLinebreakIndented(
                                            print_lineSpreadMergeWith(
                                                { (_) in
                                                    print_lineSpread(argument0Print)
                                                },
                                                collapsibleCommentsBeforeArgument0.lineSpread
                                            )
                                        ),
                                        collapsibleCommentsBeforeArgument0.print
                                    )
                                );
                         }
                        }()),
                        print_spaceOrLinebreakIndented(argument0LineSpread)
                    )
                )
            ),
            appliedPrint
         )
        }())
    }

    static public func elmSyntaxPrintDefunctionalized_expressionCaseOf(_ syntaxComments: List_List<ElmSyntaxNode_Node<String>>, _ syntaxCaseOf:
        (cases: ElmSyntaxExpression_Cases,
         expression: ElmSyntaxNode_Node<ElmSyntaxExpression_Expression>,
         fullRange: ElmSyntaxRange_Range
        )) -> Print_Print {
        ({ () in let commentsBeforeCasedExpression:List_List<String> =
            elmSyntaxPrintDefunctionalized_commentsInRange((end: elmSyntaxNode_range(syntaxCaseOf.expression).start, start: syntaxCaseOf.fullRange.start), syntaxComments);

         let casedExpressionPrint:Print_Print =
            elmSyntaxPrintDefunctionalized_expressionNotParenthesized(syntaxComments, syntaxCaseOf.expression);

         let casedExpressionLineSpread:Print_LineSpread =
            ({ () in return switch commentsBeforeCasedExpression {
                case List_List.Cons(_, _):
                    Print_LineSpread.MultipleLines;

                case List_List.Empty:
                    elmSyntaxPrintDefunctionalized_lineSpreadInNode(syntaxCaseOf.expression);
             }
            }());

         return print_followedBy(
            print_withIndentAtNextMultipleOf4(
                print_followedBy(
                    print_listReverseAndIntersperseAndFlatten(
                        elmSyntaxPrintDefunctionalized_printLinebreakLinebreakIndented,
                        list_foldl(
                            { (generated_casePattern_caseResult, soFar) in
                                ({ () in return switch (generated_casePattern_caseResult: generated_casePattern_caseResult, unusedDummyFieldToMakeSwiftHappy: ()) {
                                    case let (generated_casePattern_caseResult: (first: casePattern, second: caseResult), unusedDummyFieldToMakeSwiftHappy: ()):
                                        ({ () in let commentsBeforeCasePattern:List_List<String> =
                                            elmSyntaxPrintDefunctionalized_commentsInRange((end: elmSyntaxNode_range(casePattern).start, start: soFar.endLocation), syntaxComments);

                                         let casePrint:Print_Print =
                                            elmSyntaxPrintDefunctionalized_case_(syntaxComments, (first: casePattern, second: caseResult));

                                         let commentsAndCasePrint:Print_Print =
                                            ({ () in return switch commentsBeforeCasePattern {
                                                case List_List.Empty:
                                                    casePrint;

                                                case let List_List.Cons(comment0, comment1Up):
                                                    print_followedBy(casePrint, print_followedBy(print_linebreakIndented, elmSyntaxPrintDefunctionalized_comments(List_List.Cons(comment0, comment1Up))));
                                             }
                                            }());

                                         return (endLocation: elmSyntaxNode_range(caseResult).end, reverse: List_List.Cons(commentsAndCasePrint, soFar.reverse))
                                        }());
                                 }
                                }())
                            },
                            (endLocation: elmSyntaxNode_range(syntaxCaseOf.expression).end, reverse: List_List.Empty),
                            syntaxCaseOf.cases
                        ).reverse
                    ),
                    print_linebreakIndented
                )
            ),
            print_followedBy(
                elmSyntaxPrintDefunctionalized_printExactlyOf,
                print_followedBy(
                    print_spaceOrLinebreakIndented(casedExpressionLineSpread),
                    print_followedBy(
                        print_withIndentAtNextMultipleOf4(
                            print_followedBy(
                                ({ () in return switch commentsBeforeCasedExpression {
                                    case List_List.Empty:
                                        casedExpressionPrint;

                                    case let List_List.Cons(comment0, comment1Up):
                                        print_followedBy(casedExpressionPrint, print_followedBy(print_linebreakIndented, elmSyntaxPrintDefunctionalized_comments(List_List.Cons(comment0, comment1Up))));
                                 }
                                }()),
                                print_spaceOrLinebreakIndented(casedExpressionLineSpread)
                            )
                        ),
                        elmSyntaxPrintDefunctionalized_printExactlyCase
                    )
                )
            )
         )
        }())
    }

    static public func elmSyntaxPrintDefunctionalized_expressionGlsl(_ glslContent: String) -> Print_Print {
        print_followedBy(print_exactly("|]"), print_followedBy(print_listMapAndIntersperseAndFlatten(print_exactly, print_linebreak, string_lines(glslContent)), print_exactly("[glsl|")))
    }

    static public func elmSyntaxPrintDefunctionalized_expressionIfThenElse(_ syntaxComments: List_List<ElmSyntaxNode_Node<String>>, _ syntaxIfThenElse:
        (condition: ElmSyntaxNode_Node<ElmSyntaxExpression_Expression>,
         conditionLineSpreadMinimum: Print_LineSpread,
         fullRange: ElmSyntaxRange_Range,
         onFalse: ElmSyntaxNode_Node<ElmSyntaxExpression_Expression>,
         onTrue: ElmSyntaxNode_Node<ElmSyntaxExpression_Expression>
        )) -> Print_Print {
        ({ () in let onTruePrint:Print_Print =
            elmSyntaxPrintDefunctionalized_expressionNotParenthesized(syntaxComments, syntaxIfThenElse.onTrue);

         let onFalseNotParenthesized:ElmSyntaxNode_Node<ElmSyntaxExpression_Expression> =
            elmSyntaxPrintDefunctionalized_expressionToNotParenthesized(syntaxIfThenElse.onFalse);

         let conditionPrint:Print_Print =
            elmSyntaxPrintDefunctionalized_expressionNotParenthesized(syntaxComments, syntaxIfThenElse.condition);

         let commentsBeforeOnTrue:List_List<String> =
            elmSyntaxPrintDefunctionalized_commentsInRange((end: elmSyntaxNode_range(syntaxIfThenElse.onTrue).start, start: elmSyntaxNode_range(syntaxIfThenElse.condition).end), syntaxComments);

         let commentsBeforeOnFalseNotParenthesizedInParens:List_List<String> =
            elmSyntaxPrintDefunctionalized_commentsInRange((end: elmSyntaxNode_range(onFalseNotParenthesized).start, start: elmSyntaxNode_range(syntaxIfThenElse.onFalse).start), syntaxComments);

         let commentsBeforeOnFalse:List_List<String> =
            elmSyntaxPrintDefunctionalized_commentsInRange((end: elmSyntaxNode_range(syntaxIfThenElse.onFalse).start, start: elmSyntaxNode_range(syntaxIfThenElse.onTrue).end), syntaxComments);

         let commentsBeforeCondition:List_List<String> =
            elmSyntaxPrintDefunctionalized_commentsInRange((end: elmSyntaxNode_range(syntaxIfThenElse.condition).start, start: syntaxIfThenElse.fullRange.start), syntaxComments);

         let conditionLineSpread:Print_LineSpread =
            print_lineSpreadMergeWith(
                { (_) in
                    ({ () in return switch commentsBeforeCondition {
                        case List_List.Cons(_, _):
                            Print_LineSpread.MultipleLines;

                        case List_List.Empty:
                            Print_LineSpread.SingleLine;
                     }
                    }())
                },
                print_lineSpreadMergeWith(
                    { (_) in
                        print_lineSpread(conditionPrint)
                    },
                    syntaxIfThenElse.conditionLineSpreadMinimum
                )
            );

         return print_followedBy(
            ({ () in return switch (first: commentsBeforeOnFalseNotParenthesizedInParens, second: onFalseNotParenthesized) {
                case let (first: List_List.Empty, second: ElmSyntaxNode_Node.Node(onFalseNotParenthesizedRange, ElmSyntaxExpression_Expression.IfBlock(onFalseCondition, onFalseOnTrue, onFalseOnFalse))):
                    ({ () in return switch commentsBeforeOnFalse {
                        case List_List.Empty:
                            print_followedBy(elmSyntaxPrintDefunctionalized_expressionIfThenElse(syntaxComments, (condition: onFalseCondition, conditionLineSpreadMinimum: Print_LineSpread.SingleLine, fullRange: onFalseNotParenthesizedRange, onFalse: onFalseOnFalse, onTrue: onFalseOnTrue)), elmSyntaxPrintDefunctionalized_printExactlySpace);

                        case let List_List.Cons(comment0, comment1Up):
                            print_followedBy(elmSyntaxPrintDefunctionalized_expressionIfThenElse(syntaxComments, (condition: onFalseCondition, conditionLineSpreadMinimum: Print_LineSpread.MultipleLines, fullRange: onFalseNotParenthesizedRange, onFalse: onFalseOnFalse, onTrue: onFalseOnTrue)), print_followedBy(print_linebreakIndented, print_followedBy(elmSyntaxPrintDefunctionalized_comments(List_List.Cons(comment0, comment1Up)), print_linebreakIndented)));
                     }
                    }());

                case _:
                    ({ () in let onFalsePrint:Print_Print =
                        elmSyntaxPrintDefunctionalized_expressionNotParenthesized(syntaxComments, syntaxIfThenElse.onFalse);

                     return print_withIndentAtNextMultipleOf4(
                        print_followedBy(
                            ({ () in return switch commentsBeforeOnFalse {
                                case List_List.Empty:
                                    onFalsePrint;

                                case let List_List.Cons(comment0, comment1Up):
                                    print_followedBy(onFalsePrint, print_followedBy(print_linebreakIndented, elmSyntaxPrintDefunctionalized_comments(List_List.Cons(comment0, comment1Up))));
                             }
                            }()),
                            print_linebreakIndented
                        )
                     )
                    }());
             }
            }()),
            print_followedBy(
                elmSyntaxPrintDefunctionalized_printExactlyElse,
                print_followedBy(
                    print_linebreakIndented,
                    print_followedBy(
                        print_withIndentAtNextMultipleOf4(
                            print_followedBy(
                                print_linebreak,
                                print_followedBy(
                                    ({ () in return switch commentsBeforeOnTrue {
                                        case List_List.Empty:
                                            onTruePrint;

                                        case let List_List.Cons(comment0, comment1Up):
                                            print_followedBy(onTruePrint, print_followedBy(print_linebreakIndented, elmSyntaxPrintDefunctionalized_comments(List_List.Cons(comment0, comment1Up))));
                                     }
                                    }()),
                                    print_linebreakIndented
                                )
                            )
                        ),
                        print_followedBy(
                            elmSyntaxPrintDefunctionalized_printExactlyThen,
                            print_followedBy(
                                print_spaceOrLinebreakIndented(conditionLineSpread),
                                print_followedBy(
                                    print_withIndentAtNextMultipleOf4(
                                        print_followedBy(
                                            ({ () in return switch commentsBeforeCondition {
                                                case List_List.Empty:
                                                    conditionPrint;

                                                case let List_List.Cons(comment0, comment1Up):
                                                    print_followedBy(conditionPrint, print_followedBy(print_linebreakIndented, elmSyntaxPrintDefunctionalized_comments(List_List.Cons(comment0, comment1Up))));
                                             }
                                            }()),
                                            print_spaceOrLinebreakIndented(conditionLineSpread)
                                        )
                                    ),
                                    elmSyntaxPrintDefunctionalized_printExactlyIf
                                )
                            )
                        )
                    )
                )
            )
         )
        }())
    }

    static public func elmSyntaxPrintDefunctionalized_expressionIsBase10Zero(_ expression: ElmSyntaxNode_Node<ElmSyntaxExpression_Expression>) -> Bool {
        ({ () in return switch elmSyntaxNode_value(elmSyntaxPrintDefunctionalized_expressionToNotParenthesized(expression)) {
            case ElmSyntaxExpression_Expression.Integer(0.0):
                true;

            case let ElmSyntaxExpression_Expression.Negation(doublyNegated):
                elmSyntaxPrintDefunctionalized_expressionIsBase10Zero(doublyNegated);

            case _:
                false;
         }
        }())
    }

    static public func elmSyntaxPrintDefunctionalized_expressionIsBase16Zero(_ expression: ElmSyntaxNode_Node<ElmSyntaxExpression_Expression>) -> Bool {
        ({ () in return switch elmSyntaxNode_value(elmSyntaxPrintDefunctionalized_expressionToNotParenthesized(expression)) {
            case ElmSyntaxExpression_Expression.Hex(0.0):
                true;

            case let ElmSyntaxExpression_Expression.Negation(doublyNegated):
                elmSyntaxPrintDefunctionalized_expressionIsBase16Zero(doublyNegated);

            case _:
                false;
         }
        }())
    }

    static public func elmSyntaxPrintDefunctionalized_expressionIsSpaceSeparated(_ syntaxExpression: ElmSyntaxExpression_Expression) -> Bool {
        ({ () in return switch syntaxExpression {
            case ElmSyntaxExpression_Expression.UnitExpr:
                false;

            case let ElmSyntaxExpression_Expression.Application(application):
                ({ () in return switch application {
                    case List_List.Empty:
                        false;

                    case let List_List.Cons(ElmSyntaxNode_Node.Node(_, notActuallyApplied), List_List.Empty):
                        elmSyntaxPrintDefunctionalized_expressionIsSpaceSeparated(notActuallyApplied);

                    case List_List.Cons(_, List_List.Cons(_, _)):
                        true;
                 }
                }());

            case ElmSyntaxExpression_Expression.OperatorApplication(_, _, _, _):
                true;

            case ElmSyntaxExpression_Expression.FunctionOrValue(_, _):
                false;

            case ElmSyntaxExpression_Expression.IfBlock(_, _, _):
                true;

            case ElmSyntaxExpression_Expression.PrefixOperator(_):
                false;

            case ElmSyntaxExpression_Expression.Operator(_):
                false;

            case ElmSyntaxExpression_Expression.Integer(_):
                false;

            case ElmSyntaxExpression_Expression.Hex(_):
                false;

            case ElmSyntaxExpression_Expression.Floatable(_):
                false;

            case ElmSyntaxExpression_Expression.Negation(_):
                false;

            case ElmSyntaxExpression_Expression.Literal(_):
                false;

            case ElmSyntaxExpression_Expression.CharLiteral(_):
                false;

            case let ElmSyntaxExpression_Expression.TupledExpression(parts):
                ({ () in return switch parts {
                    case List_List.Empty:
                        false;

                    case let List_List.Cons(ElmSyntaxNode_Node.Node(_, inParens), List_List.Empty):
                        elmSyntaxPrintDefunctionalized_expressionIsSpaceSeparated(inParens);

                    case List_List.Cons(_, List_List.Cons(_, List_List.Empty)):
                        false;

                    case List_List.Cons(_, List_List.Cons(_, List_List.Cons(_, List_List.Empty))):
                        false;

                    case List_List.Cons(_, List_List.Cons(_, List_List.Cons(_, List_List.Cons(_, _)))):
                        false;
                 }
                }());

            case let ElmSyntaxExpression_Expression.ParenthesizedExpression(ElmSyntaxNode_Node.Node(_, inParens)):
                elmSyntaxPrintDefunctionalized_expressionIsSpaceSeparated(inParens);

            case ElmSyntaxExpression_Expression.LetExpression(_):
                true;

            case ElmSyntaxExpression_Expression.CaseExpression(_):
                true;

            case ElmSyntaxExpression_Expression.LambdaExpression(_):
                true;

            case ElmSyntaxExpression_Expression.RecordExpr(_):
                false;

            case ElmSyntaxExpression_Expression.ListExpr(_):
                false;

            case ElmSyntaxExpression_Expression.RecordAccess(_, _):
                false;

            case ElmSyntaxExpression_Expression.RecordAccessFunction(_):
                false;

            case ElmSyntaxExpression_Expression.RecordUpdateExpression(_, _):
                false;

            case ElmSyntaxExpression_Expression.GLSLExpression(_):
                false;
         }
        }())
    }

    static public func elmSyntaxPrintDefunctionalized_expressionIsSpaceSeparatedExceptApplication(_ expressionNode: ElmSyntaxNode_Node<ElmSyntaxExpression_Expression>) -> Bool {
        ({ () in return switch elmSyntaxPrintDefunctionalized_expressionIsSpaceSeparated(elmSyntaxNode_value(expressionNode)) {
            case true:
                ({ () in return switch elmSyntaxPrintDefunctionalized_expressionToNotParenthesized(expressionNode) {
                    case ElmSyntaxNode_Node.Node(_, ElmSyntaxExpression_Expression.Application(_)):
                        false;

                    case _:
                        true;
                 }
                }());

            case false:
                false;
         }
        }())
    }

    static public func elmSyntaxPrintDefunctionalized_expressionLambda(_ syntaxComments: List_List<ElmSyntaxNode_Node<String>>, _ generated_fullRange_syntaxLambda: ElmSyntaxNode_Node<ElmSyntaxExpression_Lambda>) -> Print_Print {
        ({ () in return switch (generated_fullRange_syntaxLambda: generated_fullRange_syntaxLambda, unusedDummyFieldToMakeSwiftHappy: ()) {
            case let (generated_fullRange_syntaxLambda: ElmSyntaxNode_Node.Node(fullRange, syntaxLambda), unusedDummyFieldToMakeSwiftHappy: ()):
                ({ () in let resultPrint:Print_Print =
                    elmSyntaxPrintDefunctionalized_expressionNotParenthesized(syntaxComments, syntaxLambda.expression);

                 let parameterPrintsWithCommentsBefore:
                    (endLocation: ElmSyntaxRange_Location,
                     reverse: List_List<Print_Print>
                    ) =
                    list_foldl(
                        { (parameterPattern, soFar) in
                            ({ () in let print:Print_Print =
                                elmSyntaxPrintDefunctionalized_patternParenthesizedIfSpaceSeparated(syntaxComments, parameterPattern);

                             let parameterRange:ElmSyntaxRange_Range =
                                elmSyntaxNode_range(parameterPattern);

                             return (endLocation: parameterRange.end,
                              reverse:
                                List_List.Cons(
                                    ({ () in return switch elmSyntaxPrintDefunctionalized_commentsInRange((end: parameterRange.start, start: soFar.endLocation), syntaxComments) {
                                        case List_List.Empty:
                                            print;

                                        case let List_List.Cons(comment0, comment1Up):
                                            ({ () in let commentsBefore:
                                                (lineSpread: Print_LineSpread,
                                                 print: Print_Print
                                                ) =
                                                elmSyntaxPrintDefunctionalized_collapsibleComments(List_List.Cons(comment0, comment1Up));

                                             return print_followedBy(
                                                print,
                                                print_followedBy(
                                                    print_spaceOrLinebreakIndented(
                                                        print_lineSpreadMergeWith(
                                                            { (_) in
                                                                print_lineSpread(print)
                                                            },
                                                            commentsBefore.lineSpread
                                                        )
                                                    ),
                                                    commentsBefore.print
                                                )
                                             )
                                            }());
                                     }
                                    }()),
                                    soFar.reverse
                                )
                             )
                            }())
                        },
                        (endLocation: fullRange.start, reverse: List_List.Empty),
                        syntaxLambda.args
                    );

                 let parametersLineSpread:Print_LineSpread =
                    print_lineSpreadListMapAndCombine(print_lineSpread, parameterPrintsWithCommentsBefore.reverse);

                 let commentsBeforeResult:List_List<String> =
                    elmSyntaxPrintDefunctionalized_commentsInRange((end: elmSyntaxNode_range(syntaxLambda.expression).start, start: parameterPrintsWithCommentsBefore.endLocation), syntaxComments);

                 return print_followedBy(
                    print_followedBy(
                        print_withIndentAtNextMultipleOf4(
                            print_followedBy(
                                resultPrint,
                                ({ () in return switch commentsBeforeResult {
                                    case List_List.Empty:
                                        print_spaceOrLinebreakIndented(
                                            print_lineSpreadMergeWith(
                                                { (_) in
                                                    print_lineSpread(resultPrint)
                                                },
                                                print_lineSpreadMergeWith(
                                                    { (_) in
                                                        elmSyntaxPrintDefunctionalized_lineSpreadInRange(fullRange)
                                                    },
                                                    parametersLineSpread
                                                )
                                            )
                                        );

                                    case let List_List.Cons(comment0, comment1Up):
                                        print_followedBy(print_linebreakIndented, print_followedBy(elmSyntaxPrintDefunctionalized_comments(List_List.Cons(comment0, comment1Up)), print_linebreakIndented));
                                 }
                                }())
                            )
                        ),
                        print_followedBy(elmSyntaxPrintDefunctionalized_printExactlyMinusGreaterThan, print_followedBy(print_spaceOrLinebreakIndented(parametersLineSpread), print_withIndentIncreasedBy(1.0, print_followedBy(print_listReverseAndIntersperseAndFlatten(print_spaceOrLinebreakIndented(parametersLineSpread), parameterPrintsWithCommentsBefore.reverse), print_emptyOrLinebreakIndented(parametersLineSpread)))))
                    ),
                    elmSyntaxPrintDefunctionalized_printExactlyBackSlash
                 )
                }());
         }
        }())
    }

    static public func elmSyntaxPrintDefunctionalized_expressionLetDeclaration(_ syntaxComments: List_List<ElmSyntaxNode_Node<String>>, _ letDeclaration: ElmSyntaxExpression_LetDeclaration) -> Print_Print {
        ({ () in return switch letDeclaration {
            case let ElmSyntaxExpression_LetDeclaration.LetFunction(letDeclarationExpression):
                ({ () in let implementationPrint:Print_Print =
                    elmSyntaxPrintDefunctionalized_declarationExpressionImplementation(syntaxComments, elmSyntaxNode_value(letDeclarationExpression.declaration));

                 return ({ () in return switch letDeclarationExpression.signature {
                    case Maybe_Maybe.Nothing:
                        implementationPrint;

                    case let Maybe_Maybe.Just(ElmSyntaxNode_Node.Node(signatureRange, signature)):
                        ({ () in let commentsBetweenSignatureAndImplementationName:List_List<String> =
                            elmSyntaxPrintDefunctionalized_commentsInRange((end: elmSyntaxNode_range(letDeclarationExpression.declaration).start, start: signatureRange.end), syntaxComments);

                         return print_followedBy(
                            implementationPrint,
                            print_followedBy(
                                ({ () in return switch commentsBetweenSignatureAndImplementationName {
                                    case List_List.Empty:
                                        print_linebreakIndented;

                                    case let List_List.Cons(comment0, comment1Up):
                                        print_followedBy(print_linebreakIndented, print_followedBy(elmSyntaxPrintDefunctionalized_comments(List_List.Cons(comment0, comment1Up)), print_linebreakIndented));
                                 }
                                }()),
                                elmSyntaxPrintDefunctionalized_declarationSignature(syntaxComments, signature)
                            )
                         )
                        }());
                  }
                 }())
                }());

            case let ElmSyntaxExpression_LetDeclaration.LetDestructuring(destructuringPattern, destructuredExpression):
                ({ () in let destructuringPatternPrint:Print_Print =
                    elmSyntaxPrintDefunctionalized_patternParenthesizedIfSpaceSeparated(syntaxComments, destructuringPattern);

                 let destructuredExpressionPrint:Print_Print =
                    elmSyntaxPrintDefunctionalized_expressionNotParenthesized(syntaxComments, destructuredExpression);

                 let commentsBeforeDestructuredExpression:List_List<String> =
                    elmSyntaxPrintDefunctionalized_commentsInRange((end: elmSyntaxNode_range(destructuredExpression).start, start: elmSyntaxNode_range(destructuringPattern).end), syntaxComments);

                 return print_followedBy(
                    print_withIndentAtNextMultipleOf4(
                        print_followedBy(
                            ({ () in return switch commentsBeforeDestructuredExpression {
                                case List_List.Empty:
                                    destructuredExpressionPrint;

                                case let List_List.Cons(comment0, comment1Up):
                                    print_followedBy(destructuredExpressionPrint, print_followedBy(print_linebreakIndented, elmSyntaxPrintDefunctionalized_comments(List_List.Cons(comment0, comment1Up))));
                             }
                            }()),
                            print_followedBy(elmSyntaxPrintDefunctionalized_printEqualsLinebreakIndented, print_spaceOrLinebreakIndented(print_lineSpread(destructuringPatternPrint)))
                        )
                    ),
                    destructuringPatternPrint
                 )
                }());
         }
        }())
    }

    static public func elmSyntaxPrintDefunctionalized_expressionLetIn(_ syntaxComments: List_List<ElmSyntaxNode_Node<String>>, _ syntaxLetIn:
        (fullRange: ElmSyntaxRange_Range,
         letDeclaration0: ElmSyntaxNode_Node<ElmSyntaxExpression_LetDeclaration>,
         letDeclaration1Up: List_List<ElmSyntaxNode_Node<ElmSyntaxExpression_LetDeclaration>>,
         result: ElmSyntaxNode_Node<ElmSyntaxExpression_Expression>
        )) -> Print_Print {
        ({ () in let letInResultPrint:Print_Print =
            elmSyntaxPrintDefunctionalized_expressionNotParenthesized(syntaxComments, syntaxLetIn.result);

         let letDeclarationPrints:
            (endLocation: ElmSyntaxRange_Location,
             reverse: List_List<Print_Print>
            ) =
            list_foldl(
                { (generated_letDeclarationRange_letDeclaration, soFar) in
                    ({ () in return switch (generated_letDeclarationRange_letDeclaration: generated_letDeclarationRange_letDeclaration, unusedDummyFieldToMakeSwiftHappy: ()) {
                        case let (generated_letDeclarationRange_letDeclaration: ElmSyntaxNode_Node.Node(letDeclarationRange, letDeclaration), unusedDummyFieldToMakeSwiftHappy: ()):
                            ({ () in let letDeclarationPrint:Print_Print =
                                elmSyntaxPrintDefunctionalized_expressionLetDeclaration(syntaxComments, letDeclaration);

                             let commentsBefore:List_List<String> =
                                elmSyntaxPrintDefunctionalized_commentsInRange((end: letDeclarationRange.start, start: soFar.endLocation), syntaxComments);

                             let letDeclarationWithCommentsBeforePrint:Print_Print =
                                ({ () in return switch commentsBefore {
                                    case List_List.Empty:
                                        letDeclarationPrint;

                                    case let List_List.Cons(comment0, comment1Up):
                                        print_followedBy(letDeclarationPrint, print_followedBy(print_linebreakIndented, elmSyntaxPrintDefunctionalized_comments(List_List.Cons(comment0, comment1Up))));
                                 }
                                }());

                             return (endLocation: letDeclarationRange.end, reverse: List_List.Cons(letDeclarationWithCommentsBeforePrint, soFar.reverse))
                            }());
                     }
                    }())
                },
                (endLocation: syntaxLetIn.fullRange.start, reverse: List_List.Empty),
                List_List.Cons(syntaxLetIn.letDeclaration0, syntaxLetIn.letDeclaration1Up)
            );

         let commentsBeforeResult:List_List<String> =
            elmSyntaxPrintDefunctionalized_commentsInRange((end: elmSyntaxNode_range(syntaxLetIn.result).start, start: letDeclarationPrints.endLocation), syntaxComments);

         return print_followedBy(
            ({ () in return switch commentsBeforeResult {
                case List_List.Empty:
                    letInResultPrint;

                case let List_List.Cons(comment0, comment1Up):
                    print_followedBy(letInResultPrint, print_followedBy(print_linebreakIndented, elmSyntaxPrintDefunctionalized_comments(List_List.Cons(comment0, comment1Up))));
             }
            }()),
            print_followedBy(elmSyntaxPrintDefunctionalized_printLinebreakIndentedInLinebreakIndented, print_followedBy(print_withIndentAtNextMultipleOf4(print_followedBy(print_listReverseAndIntersperseAndFlatten(elmSyntaxPrintDefunctionalized_printLinebreakLinebreakIndented, letDeclarationPrints.reverse), print_linebreakIndented)), elmSyntaxPrintDefunctionalized_printExactlyLet))
         )
        }())
    }

    static public func elmSyntaxPrintDefunctionalized_expressionList(_ syntaxComments: List_List<ElmSyntaxNode_Node<String>>, _ syntaxList:
        (elements: List_List<ElmSyntaxNode_Node<ElmSyntaxExpression_Expression>>,
         fullRange: ElmSyntaxRange_Range
        )) -> Print_Print {
        ({ () in return switch syntaxList.elements {
            case List_List.Empty:
                print_followedBy(
                    ({ () in return switch elmSyntaxPrintDefunctionalized_commentsInRange(syntaxList.fullRange, syntaxComments) {
                        case List_List.Empty:
                            elmSyntaxPrintDefunctionalized_printExactlySquareClosing;

                        case let List_List.Cons(comment0, comment1Up):
                            ({ () in let commentsCollapsed:
                                (lineSpread: Print_LineSpread,
                                 print: Print_Print
                                ) =
                                elmSyntaxPrintDefunctionalized_collapsibleComments(List_List.Cons(comment0, comment1Up));

                             return print_followedBy(elmSyntaxPrintDefunctionalized_printExactlySquareClosing, print_followedBy(print_emptyOrLinebreakIndented(commentsCollapsed.lineSpread), print_withIndentIncreasedBy(1.0, commentsCollapsed.print)))
                            }());
                     }
                    }()),
                    elmSyntaxPrintDefunctionalized_printExactlySquareOpening
                );

            case let List_List.Cons(element0, element1Up):
                ({ () in let elementPrintsWithCommentsBefore:
                    (endLocation: ElmSyntaxRange_Location,
                     reverse: List_List<Print_Print>
                    ) =
                    list_foldl(
                        { (elementNode, soFar) in
                            ({ () in let print:Print_Print =
                                elmSyntaxPrintDefunctionalized_expressionNotParenthesized(syntaxComments, elementNode);

                             return ({ () in return switch elementNode {
                                case let ElmSyntaxNode_Node.Node(elementRange, _):
                                    (endLocation: elementRange.end,
                                     reverse:
                                        List_List.Cons(
                                            ({ () in return switch elmSyntaxPrintDefunctionalized_commentsInRange((end: elementRange.start, start: soFar.endLocation), syntaxComments) {
                                                case List_List.Empty:
                                                    print;

                                                case let List_List.Cons(comment0, comment1Up):
                                                    ({ () in let commentsBefore:
                                                        (lineSpread: Print_LineSpread,
                                                         print: Print_Print
                                                        ) =
                                                        elmSyntaxPrintDefunctionalized_collapsibleComments(List_List.Cons(comment0, comment1Up));

                                                     return print_followedBy(
                                                        print,
                                                        print_followedBy(
                                                            print_spaceOrLinebreakIndented(
                                                                print_lineSpreadMergeWith(
                                                                    { (_) in
                                                                        print_lineSpread(print)
                                                                    },
                                                                    commentsBefore.lineSpread
                                                                )
                                                            ),
                                                            commentsBefore.print
                                                        )
                                                     )
                                                    }());
                                             }
                                            }()),
                                            soFar.reverse
                                        )
                                    );
                              }
                             }())
                            }())
                        },
                        (endLocation: syntaxList.fullRange.start, reverse: List_List.Empty),
                        List_List.Cons(element0, element1Up)
                    );

                 let commentsAfterElements:List_List<String> =
                    elmSyntaxPrintDefunctionalized_commentsInRange((end: syntaxList.fullRange.end, start: elementPrintsWithCommentsBefore.endLocation), syntaxComments);

                 let lineSpread:Print_LineSpread =
                    print_lineSpreadMergeWith(
                        { (_) in
                            ({ () in return switch commentsAfterElements {
                                case List_List.Empty:
                                    Print_LineSpread.SingleLine;

                                case List_List.Cons(_, _):
                                    Print_LineSpread.MultipleLines;
                             }
                            }())
                        },
                        print_lineSpreadMergeWith(
                            { (_) in
                                print_lineSpreadListMapAndCombine(print_lineSpread, elementPrintsWithCommentsBefore.reverse)
                            },
                            elmSyntaxPrintDefunctionalized_lineSpreadInRange(syntaxList.fullRange)
                        )
                    );

                 return print_followedBy(
                    elmSyntaxPrintDefunctionalized_printExactlySquareClosing,
                    print_followedBy(
                        ({ () in return switch commentsAfterElements {
                            case List_List.Empty:
                                print_spaceOrLinebreakIndented(lineSpread);

                            case let List_List.Cons(comment0, comment1Up):
                                print_followedBy(print_spaceOrLinebreakIndented(lineSpread), print_followedBy(elmSyntaxPrintDefunctionalized_comments(List_List.Cons(comment0, comment1Up)), print_followedBy(print_spaceOrLinebreakIndented(lineSpread), print_linebreak)));
                         }
                        }()),
                        print_followedBy(
                            print_listReverseAndMapAndIntersperseAndFlatten(
                                { (elementPrintWithCommentsBefore) in
                                    print_withIndentIncreasedBy(2.0, elementPrintWithCommentsBefore)
                                },
                                print_followedBy(elmSyntaxPrintDefunctionalized_printExactlyCommaSpace, print_emptyOrLinebreakIndented(lineSpread)),
                                elementPrintsWithCommentsBefore.reverse
                            ),
                            elmSyntaxPrintDefunctionalized_printExactlySquareOpeningSpace
                        )
                    )
                 )
                }());
         }
        }())
    }

    static public func elmSyntaxPrintDefunctionalized_expressionNotParenthesized(_ syntaxComments: List_List<ElmSyntaxNode_Node<String>>, _ generated_fullRange_syntaxExpression: ElmSyntaxNode_Node<ElmSyntaxExpression_Expression>) -> Print_Print {
        ({ () in return switch (generated_fullRange_syntaxExpression: generated_fullRange_syntaxExpression, unusedDummyFieldToMakeSwiftHappy: ()) {
            case let (generated_fullRange_syntaxExpression: ElmSyntaxNode_Node.Node(fullRange, syntaxExpression), unusedDummyFieldToMakeSwiftHappy: ()):
                ({ () in return switch syntaxExpression {
                    case ElmSyntaxExpression_Expression.UnitExpr:
                        elmSyntaxPrintDefunctionalized_printExactlyParensOpeningParensClosed;

                    case let ElmSyntaxExpression_Expression.Application(application):
                        ({ () in return switch application {
                            case List_List.Empty:
                                print_empty;

                            case let List_List.Cons(notAppliedAfterAll, List_List.Empty):
                                elmSyntaxPrintDefunctionalized_expressionNotParenthesized(syntaxComments, notAppliedAfterAll);

                            case let List_List.Cons(applied, List_List.Cons(argument0, argument1Up)):
                                elmSyntaxPrintDefunctionalized_expressionCall(syntaxComments, (applied: applied, argument0: argument0, argument1Up: argument1Up, fullRange: fullRange));
                         }
                        }());

                    case let ElmSyntaxExpression_Expression.OperatorApplication(operator_, _, left, right):
                        elmSyntaxPrintDefunctionalized_expressionOperation(syntaxComments, (fullRange: fullRange, left: left, operator_: operator_, right: right));

                    case let ElmSyntaxExpression_Expression.FunctionOrValue(qualification, unqualified):
                        print_exactly(elmSyntaxPrintDefunctionalized_qualifiedReference((qualification: qualification, unqualified: unqualified)));

                    case let ElmSyntaxExpression_Expression.IfBlock(condition, onTrue, onFalse):
                        elmSyntaxPrintDefunctionalized_expressionIfThenElse(syntaxComments, (condition: condition, conditionLineSpreadMinimum: Print_LineSpread.SingleLine, fullRange: fullRange, onFalse: onFalse, onTrue: onTrue));

                    case let ElmSyntaxExpression_Expression.PrefixOperator(operatorSymbol):
                        print_exactly(string_append("(", string_append(operatorSymbol, ")")));

                    case let ElmSyntaxExpression_Expression.Operator(operatorSymbol):
                        print_exactly(operatorSymbol);

                    case let ElmSyntaxExpression_Expression.Integer(int):
                        print_exactly(elmSyntaxPrintDefunctionalized_intLiteral(int));

                    case let ElmSyntaxExpression_Expression.Hex(int):
                        print_exactly(elmSyntaxPrintDefunctionalized_hexLiteral(int));

                    case let ElmSyntaxExpression_Expression.Floatable(float):
                        print_exactly(elmSyntaxPrintDefunctionalized_floatLiteral(float));

                    case let ElmSyntaxExpression_Expression.Negation(negated):
                        elmSyntaxPrintDefunctionalized_printExpressionNegation(syntaxComments, negated);

                    case let ElmSyntaxExpression_Expression.Literal(string):
                        elmSyntaxPrintDefunctionalized_stringLiteral(ElmSyntaxNode_Node.Node(fullRange, string));

                    case let ElmSyntaxExpression_Expression.CharLiteral(char):
                        print_exactly(elmSyntaxPrintDefunctionalized_charLiteral(char));

                    case let ElmSyntaxExpression_Expression.TupledExpression(parts):
                        ({ () in return switch parts {
                            case List_List.Empty:
                                elmSyntaxPrintDefunctionalized_printExactlyParensOpeningParensClosed;

                            case let List_List.Cons(inParens, List_List.Empty):
                                ({ () in let commentsBeforeInParens:List_List<String> =
                                    elmSyntaxPrintDefunctionalized_commentsInRange((end: elmSyntaxNode_range(inParens).start, start: fullRange.start), syntaxComments);

                                 let commentsAfterInParens:List_List<String> =
                                    elmSyntaxPrintDefunctionalized_commentsInRange((end: fullRange.end, start: elmSyntaxNode_range(inParens).end), syntaxComments);

                                 return ({ () in return switch (first: commentsBeforeInParens, second: commentsAfterInParens) {
                                    case (first: List_List.Empty, second: List_List.Empty):
                                        elmSyntaxPrintDefunctionalized_expressionNotParenthesized(syntaxComments, inParens);

                                    case _:
                                        elmSyntaxPrintDefunctionalized_parenthesized(elmSyntaxPrintDefunctionalized_expressionNotParenthesized, (fullRange: fullRange, notParenthesized: elmSyntaxPrintDefunctionalized_expressionToNotParenthesized(inParens)), syntaxComments);
                                  }
                                 }())
                                }());

                            case let List_List.Cons(part0, List_List.Cons(part1, List_List.Empty)):
                                elmSyntaxPrintDefunctionalized_tuple((lineSpreadMinimum: elmSyntaxPrintDefunctionalized_lineSpreadInRange(fullRange), printPartNotParenthesized: elmSyntaxPrintDefunctionalized_expressionNotParenthesized), syntaxComments, (fullRange: fullRange, part0: part0, part1: part1));

                            case let List_List.Cons(part0, List_List.Cons(part1, List_List.Cons(part2, List_List.Empty))):
                                elmSyntaxPrintDefunctionalized_triple((lineSpreadMinimum: elmSyntaxPrintDefunctionalized_lineSpreadInRange(fullRange), printPartNotParenthesized: elmSyntaxPrintDefunctionalized_expressionNotParenthesized), syntaxComments, (fullRange: fullRange, part0: part0, part1: part1, part2: part2));

                            case let List_List.Cons(part0, List_List.Cons(part1, List_List.Cons(part2, List_List.Cons(part3, part4Up)))):
                                elmSyntaxPrintDefunctionalized_invalidNTuple(elmSyntaxPrintDefunctionalized_expressionNotParenthesized, syntaxComments, (fullRange: fullRange, part0: part0, part1: part1, part2: part2, part3: part3, part4Up: part4Up));
                         }
                        }());

                    case let ElmSyntaxExpression_Expression.ParenthesizedExpression(inParens):
                        ({ () in let commentsBeforeInParens:List_List<String> =
                            elmSyntaxPrintDefunctionalized_commentsInRange((end: elmSyntaxNode_range(inParens).start, start: fullRange.start), syntaxComments);

                         let commentsAfterInParens:List_List<String> =
                            elmSyntaxPrintDefunctionalized_commentsInRange((end: fullRange.end, start: elmSyntaxNode_range(inParens).end), syntaxComments);

                         return ({ () in return switch (first: commentsBeforeInParens, second: commentsAfterInParens) {
                            case (first: List_List.Empty, second: List_List.Empty):
                                elmSyntaxPrintDefunctionalized_expressionNotParenthesized(syntaxComments, inParens);

                            case _:
                                elmSyntaxPrintDefunctionalized_parenthesized(elmSyntaxPrintDefunctionalized_expressionNotParenthesized, (fullRange: fullRange, notParenthesized: elmSyntaxPrintDefunctionalized_expressionToNotParenthesized(inParens)), syntaxComments);
                          }
                         }())
                        }());

                    case let ElmSyntaxExpression_Expression.LetExpression(syntaxLetIn):
                        ({ () in return switch syntaxLetIn.declarations {
                            case List_List.Empty:
                                elmSyntaxPrintDefunctionalized_expressionNotParenthesized(syntaxComments, syntaxLetIn.expression);

                            case let List_List.Cons(letDeclaration0, letDeclaration1Up):
                                elmSyntaxPrintDefunctionalized_expressionLetIn(syntaxComments, (fullRange: fullRange, letDeclaration0: letDeclaration0, letDeclaration1Up: letDeclaration1Up, result: syntaxLetIn.expression));
                         }
                        }());

                    case let ElmSyntaxExpression_Expression.CaseExpression(syntaxCaseOf):
                        elmSyntaxPrintDefunctionalized_expressionCaseOf(syntaxComments, (cases: syntaxCaseOf.cases, expression: syntaxCaseOf.expression, fullRange: fullRange));

                    case let ElmSyntaxExpression_Expression.LambdaExpression(syntaxLambda):
                        elmSyntaxPrintDefunctionalized_expressionLambda(syntaxComments, ElmSyntaxNode_Node.Node(fullRange, syntaxLambda));

                    case let ElmSyntaxExpression_Expression.RecordExpr(fields):
                        elmSyntaxPrintDefunctionalized_recordLiteral((nameValueSeparator: "=", printValueNotParenthesized: elmSyntaxPrintDefunctionalized_expressionNotParenthesized), syntaxComments, (fields: fields, fullRange: fullRange));

                    case let ElmSyntaxExpression_Expression.ListExpr(elements):
                        elmSyntaxPrintDefunctionalized_expressionList(syntaxComments, (elements: elements, fullRange: fullRange));

                    case let ElmSyntaxExpression_Expression.RecordAccess(syntaxRecord, ElmSyntaxNode_Node.Node(_, accessedFieldName)):
                        print_followedBy(print_exactly(string_append(".", accessedFieldName)), elmSyntaxPrintDefunctionalized_expressionParenthesizedIfSpaceSeparated(syntaxComments, syntaxRecord));

                    case let ElmSyntaxExpression_Expression.RecordAccessFunction(dotFieldName):
                        print_exactly(string_append(".", string_replace(".", "", dotFieldName)));

                    case let ElmSyntaxExpression_Expression.RecordUpdateExpression(recordVariableNode, fields):
                        elmSyntaxPrintDefunctionalized_expressionRecordUpdate(syntaxComments, (fields: fields, fullRange: fullRange, recordVariable: recordVariableNode));

                    case let ElmSyntaxExpression_Expression.GLSLExpression(glsl):
                        elmSyntaxPrintDefunctionalized_expressionGlsl(glsl);
                 }
                }());
         }
        }())
    }

    static public func elmSyntaxPrintDefunctionalized_expressionOperation(_ syntaxComments: List_List<ElmSyntaxNode_Node<String>>, _ syntaxOperation:
        (fullRange: ElmSyntaxRange_Range,
         left: ElmSyntaxNode_Node<ElmSyntaxExpression_Expression>,
         operator_: String,
         right: ElmSyntaxNode_Node<ElmSyntaxExpression_Expression>
        )) -> Print_Print {
        ({ () in let operationExpanded:
            (beforeRightestOperatorExpressionChain:
                List_List<
                    (expression: ElmSyntaxNode_Node<ElmSyntaxExpression_Expression>,
                     operator_: String
                    )
                >,
             leftest: ElmSyntaxNode_Node<ElmSyntaxExpression_Expression>,
             rightestExpression: ElmSyntaxNode_Node<ElmSyntaxExpression_Expression>,
             rightestOperator: String
            ) =
            elmSyntaxPrintDefunctionalized_expressionOperationExpand(syntaxOperation.left, syntaxOperation.operator_, syntaxOperation.right);

         let leftestPrint:Print_Print =
            elmSyntaxPrintDefunctionalized_expressionParenthesizedIfSpaceSeparatedExceptApplication(syntaxComments, operationExpanded.leftest);

         let beforeRightestPrintsAndComments:
            (endLocation: ElmSyntaxRange_Location,
             reverse:
                List_List<
                    (expression: ElmSyntaxNode_Node<ElmSyntaxExpression_Expression>,
                     maybeCommentsBeforeExpression:
                        Maybe_Maybe<
                            (lineSpread: Print_LineSpread,
                             print: Print_Print
                            )
                        >,
                     operator_: String
                    )
                >
            ) =
            list_foldl(
                { (operatorAndExpressionBeforeRightest, soFar) in
                    ({ () in let expressionRange:ElmSyntaxRange_Range =
                        elmSyntaxNode_range(operatorAndExpressionBeforeRightest.expression);

                     let commentsBefore:List_List<String> =
                        elmSyntaxPrintDefunctionalized_commentsInRange((end: expressionRange.start, start: soFar.endLocation), syntaxComments);

                     return (endLocation: expressionRange.end,
                      reverse:
                        List_List.Cons(
                            (expression: operatorAndExpressionBeforeRightest.expression,
                             maybeCommentsBeforeExpression:
                                ({ () in return switch commentsBefore {
                                    case List_List.Empty:
                                        Maybe_Maybe.Nothing;

                                    case let List_List.Cons(comment0, comment1Up):
                                        Maybe_Maybe.Just(elmSyntaxPrintDefunctionalized_collapsibleComments(List_List.Cons(comment0, comment1Up)));
                                 }
                                }()),
                             operator_: operatorAndExpressionBeforeRightest.operator_
                            ),
                            soFar.reverse
                        )
                     )
                    }())
                },
                (endLocation: elmSyntaxNode_range(operationExpanded.leftest).end, reverse: List_List.Empty),
                operationExpanded.beforeRightestOperatorExpressionChain
            );

         let commentsBeforeRightestExpression:List_List<String> =
            elmSyntaxPrintDefunctionalized_commentsInRange((end: elmSyntaxNode_range(operationExpanded.rightestExpression).start, start: beforeRightestPrintsAndComments.endLocation), syntaxComments);

         let commentsCollapsibleBeforeRightestExpression:
            (lineSpread: Print_LineSpread,
             print: Print_Print
            ) =
            elmSyntaxPrintDefunctionalized_collapsibleComments(commentsBeforeRightestExpression);

         let lineSpread:Print_LineSpread =
            print_lineSpreadMergeWithStrict(
                commentsCollapsibleBeforeRightestExpression.lineSpread,
                print_lineSpreadMergeWith(
                    { (_) in
                        print_lineSpreadListMapAndCombine(
                            { (c) in
                                elmSyntaxPrintDefunctionalized_maybeLineSpread(
                                    { (generated_record) in
                                        generated_record.lineSpread
                                    },
                                    c.maybeCommentsBeforeExpression
                                )
                            },
                            beforeRightestPrintsAndComments.reverse
                        )
                    },
                    elmSyntaxPrintDefunctionalized_lineSpreadInRange(syntaxOperation.fullRange)
                )
            );

         let beforeRightestOperatorExpressionChainWithPreviousLineSpread:
            (previousLineSpread: Print_LineSpread,
             rightToLeft:
                List_List<
                    (expression: ElmSyntaxNode_Node<ElmSyntaxExpression_Expression>,
                     expressionPrint: Print_Print,
                     maybeCommentsBeforeExpression:
                        Maybe_Maybe<
                            (lineSpread: Print_LineSpread,
                             print: Print_Print
                            )
                        >,
                     operator_: String,
                     previousLineSpread: Print_LineSpread
                    )
                >
            ) =
            list_foldr(
                { (operatorExpression, soFar) in
                    ({ () in let expressionPrint:Print_Print =
                        elmSyntaxPrintDefunctionalized_expressionParenthesizedIfSpaceSeparatedExceptApplication(syntaxComments, operatorExpression.expression);

                     return (previousLineSpread: print_lineSpread(expressionPrint), rightToLeft: List_List.Cons((expression: operatorExpression.expression, expressionPrint: expressionPrint, maybeCommentsBeforeExpression: operatorExpression.maybeCommentsBeforeExpression, operator_: operatorExpression.operator_, previousLineSpread: soFar.previousLineSpread), soFar.rightToLeft))
                    }())
                },
                (previousLineSpread: print_lineSpread(leftestPrint), rightToLeft: List_List.Empty),
                beforeRightestPrintsAndComments.reverse
            );

         let rightestOperatorExpressionPrint:Print_Print =
            ({ () in return switch operationExpanded.rightestOperator {
                case "<|":
                    ({ () in let expressionPrint:Print_Print =
                        elmSyntaxPrintDefunctionalized_expressionParenthesizedIfSpaceSeparatedExceptApplicationAndLambda(syntaxComments, operationExpanded.rightestExpression);

                     return print_followedBy(
                        print_withIndentAtNextMultipleOf4(
                            print_followedBy(
                                ({ () in return switch commentsBeforeRightestExpression {
                                    case List_List.Empty:
                                        expressionPrint;

                                    case List_List.Cons(_, _):
                                        print_followedBy(
                                            expressionPrint,
                                            print_followedBy(
                                                print_spaceOrLinebreakIndented(
                                                    print_lineSpreadMergeWith(
                                                        { (_) in
                                                            print_lineSpread(expressionPrint)
                                                        },
                                                        commentsCollapsibleBeforeRightestExpression.lineSpread
                                                    )
                                                ),
                                                commentsCollapsibleBeforeRightestExpression.print
                                            )
                                        );
                                 }
                                }()),
                                print_spaceOrLinebreakIndented(lineSpread)
                            )
                        ),
                        print_followedBy(elmSyntaxPrintDefunctionalized_printExactlyLessThanVerticalBar, print_spaceOrLinebreakIndented(beforeRightestOperatorExpressionChainWithPreviousLineSpread.previousLineSpread))
                     )
                    }());

                case let nonApLOperator:
                    ({ () in let expressionPrint:Print_Print =
                        elmSyntaxPrintDefunctionalized_expressionParenthesizedIfSpaceSeparatedExceptApplication(syntaxComments, operationExpanded.rightestExpression);

                     return print_withIndentAtNextMultipleOf4(
                        print_followedBy(
                            print_withIndentIncreasedBy(
                                basics_add(string_length(nonApLOperator), 1.0),
                                ({ () in return switch commentsBeforeRightestExpression {
                                    case List_List.Empty:
                                        expressionPrint;

                                    case List_List.Cons(_, _):
                                        print_followedBy(
                                            expressionPrint,
                                            print_followedBy(
                                                print_spaceOrLinebreakIndented(
                                                    print_lineSpreadMergeWith(
                                                        { (_) in
                                                            print_lineSpread(expressionPrint)
                                                        },
                                                        commentsCollapsibleBeforeRightestExpression.lineSpread
                                                    )
                                                ),
                                                commentsCollapsibleBeforeRightestExpression.print
                                            )
                                        );
                                 }
                                }())
                            ),
                            print_followedBy(print_exactly(string_append(nonApLOperator, " ")), print_spaceOrLinebreakIndented(lineSpread))
                        )
                     )
                    }());
             }
            }());

         return print_followedBy(
            list_foldl(
                { (operatorExpression, chainRightPrint) in
                    ({ () in return switch operatorExpression.operator_ {
                        case "<|":
                            print_followedBy(
                                print_withIndentAtNextMultipleOf4(
                                    print_followedBy(
                                        chainRightPrint,
                                        print_followedBy(
                                            ({ () in return switch operatorExpression.maybeCommentsBeforeExpression {
                                                case Maybe_Maybe.Nothing:
                                                    operatorExpression.expressionPrint;

                                                case let Maybe_Maybe.Just(commentsBeforeExpression):
                                                    print_followedBy(
                                                        operatorExpression.expressionPrint,
                                                        print_followedBy(
                                                            print_spaceOrLinebreakIndented(
                                                                print_lineSpreadMergeWith(
                                                                    { (_) in
                                                                        print_lineSpread(operatorExpression.expressionPrint)
                                                                    },
                                                                    commentsBeforeExpression.lineSpread
                                                                )
                                                            ),
                                                            commentsBeforeExpression.print
                                                        )
                                                    );
                                             }
                                            }()),
                                            print_spaceOrLinebreakIndented(lineSpread)
                                        )
                                    )
                                ),
                                print_followedBy(elmSyntaxPrintDefunctionalized_printExactlyLessThanVerticalBar, print_spaceOrLinebreakIndented(operatorExpression.previousLineSpread))
                            );

                        case let nonApLOperator:
                            print_followedBy(
                                chainRightPrint,
                                print_withIndentAtNextMultipleOf4(
                                    print_followedBy(
                                        print_withIndentIncreasedBy(
                                            basics_add(string_length(nonApLOperator), 1.0),
                                            ({ () in return switch operatorExpression.maybeCommentsBeforeExpression {
                                                case Maybe_Maybe.Nothing:
                                                    operatorExpression.expressionPrint;

                                                case let Maybe_Maybe.Just(commentsBeforeExpression):
                                                    print_followedBy(
                                                        operatorExpression.expressionPrint,
                                                        print_followedBy(
                                                            print_spaceOrLinebreakIndented(
                                                                print_lineSpreadMergeWith(
                                                                    { (_) in
                                                                        print_lineSpread(operatorExpression.expressionPrint)
                                                                    },
                                                                    commentsBeforeExpression.lineSpread
                                                                )
                                                            ),
                                                            commentsBeforeExpression.print
                                                        )
                                                    );
                                             }
                                            }())
                                        ),
                                        print_followedBy(print_exactly(string_append(nonApLOperator, " ")), print_spaceOrLinebreakIndented(lineSpread))
                                    )
                                )
                            );
                     }
                    }())
                },
                rightestOperatorExpressionPrint,
                beforeRightestOperatorExpressionChainWithPreviousLineSpread.rightToLeft
            ),
            leftestPrint
         )
        }())
    }

    static public func elmSyntaxPrintDefunctionalized_expressionOperationExpand(_ left: ElmSyntaxNode_Node<ElmSyntaxExpression_Expression>, _ operator_: String, _ right: ElmSyntaxNode_Node<ElmSyntaxExpression_Expression>) ->
        (beforeRightestOperatorExpressionChain:
            List_List<
                (expression: ElmSyntaxNode_Node<ElmSyntaxExpression_Expression>,
                 operator_: String
                )
            >,
         leftest: ElmSyntaxNode_Node<ElmSyntaxExpression_Expression>,
         rightestExpression: ElmSyntaxNode_Node<ElmSyntaxExpression_Expression>,
         rightestOperator: String
        ) {
        ({ () in let rightExpanded:
            (beforeRightestOperatorExpressionChain:
                List_List<
                    (expression: ElmSyntaxNode_Node<ElmSyntaxExpression_Expression>,
                     operator_: String
                    )
                >,
             rightestExpression: ElmSyntaxNode_Node<ElmSyntaxExpression_Expression>,
             rightestOperator: String
            ) =
            ({ () in return switch right {
                case let ElmSyntaxNode_Node.Node(_, ElmSyntaxExpression_Expression.OperatorApplication(rightOperator, _, rightLeft, rightRight)):
                    ({ () in let rightOperationExpanded:
                        (beforeRightestOperatorExpressionChain:
                            List_List<
                                (expression: ElmSyntaxNode_Node<ElmSyntaxExpression_Expression>,
                                 operator_: String
                                )
                            >,
                         leftest: ElmSyntaxNode_Node<ElmSyntaxExpression_Expression>,
                         rightestExpression: ElmSyntaxNode_Node<ElmSyntaxExpression_Expression>,
                         rightestOperator: String
                        ) =
                        elmSyntaxPrintDefunctionalized_expressionOperationExpand(rightLeft, rightOperator, rightRight);

                     return (beforeRightestOperatorExpressionChain: List_List.Cons((expression: rightOperationExpanded.leftest, operator_: operator_), rightOperationExpanded.beforeRightestOperatorExpressionChain), rightestExpression: rightOperationExpanded.rightestExpression, rightestOperator: rightOperationExpanded.rightestOperator)
                    }());

                case let rightNotOperation:
                    (beforeRightestOperatorExpressionChain: List_List.Empty, rightestExpression: rightNotOperation, rightestOperator: operator_);
             }
            }());

         return ({ () in return switch left {
            case let ElmSyntaxNode_Node.Node(_, ElmSyntaxExpression_Expression.OperatorApplication(leftOperator, _, leftLeft, leftRight)):
                ({ () in let leftOperationExpanded:
                    (beforeRightestOperatorExpressionChain:
                        List_List<
                            (expression: ElmSyntaxNode_Node<ElmSyntaxExpression_Expression>,
                             operator_: String
                            )
                        >,
                     leftest: ElmSyntaxNode_Node<ElmSyntaxExpression_Expression>,
                     rightestExpression: ElmSyntaxNode_Node<ElmSyntaxExpression_Expression>,
                     rightestOperator: String
                    ) =
                    elmSyntaxPrintDefunctionalized_expressionOperationExpand(leftLeft, leftOperator, leftRight);

                 return (beforeRightestOperatorExpressionChain: list_append(leftOperationExpanded.beforeRightestOperatorExpressionChain, List_List.Cons((expression: leftOperationExpanded.rightestExpression, operator_: leftOperationExpanded.rightestOperator), rightExpanded.beforeRightestOperatorExpressionChain)), leftest: leftOperationExpanded.leftest, rightestExpression: rightExpanded.rightestExpression, rightestOperator: rightExpanded.rightestOperator)
                }());

            case let leftNotOperation:
                (beforeRightestOperatorExpressionChain: rightExpanded.beforeRightestOperatorExpressionChain, leftest: leftNotOperation, rightestExpression: rightExpanded.rightestExpression, rightestOperator: rightExpanded.rightestOperator);
          }
         }())
        }())
    }

    static public func elmSyntaxPrintDefunctionalized_expressionParenthesized(_ syntaxComments: List_List<ElmSyntaxNode_Node<String>>, _ expressionNode: ElmSyntaxNode_Node<ElmSyntaxExpression_Expression>) -> Print_Print {
        elmSyntaxPrintDefunctionalized_parenthesized(elmSyntaxPrintDefunctionalized_expressionNotParenthesized, (fullRange: elmSyntaxNode_range(expressionNode), notParenthesized: elmSyntaxPrintDefunctionalized_expressionToNotParenthesized(expressionNode)), syntaxComments)
    }

    static public func elmSyntaxPrintDefunctionalized_expressionParenthesizedIfSpaceSeparated(_ syntaxComments: List_List<ElmSyntaxNode_Node<String>>, _ expressionNode: ElmSyntaxNode_Node<ElmSyntaxExpression_Expression>) -> Print_Print {
        ({ () in return switch elmSyntaxPrintDefunctionalized_expressionIsSpaceSeparated(elmSyntaxNode_value(expressionNode)) {
            case true:
                elmSyntaxPrintDefunctionalized_expressionParenthesized(syntaxComments, expressionNode);

            case false:
                elmSyntaxPrintDefunctionalized_expressionNotParenthesized(syntaxComments, expressionNode);
         }
        }())
    }

    static public func elmSyntaxPrintDefunctionalized_expressionParenthesizedIfSpaceSeparatedExceptApplication(_ syntaxComments: List_List<ElmSyntaxNode_Node<String>>, _ expressionNode: ElmSyntaxNode_Node<ElmSyntaxExpression_Expression>) -> Print_Print {
        ({ () in return switch elmSyntaxPrintDefunctionalized_expressionIsSpaceSeparatedExceptApplication(expressionNode) {
            case true:
                elmSyntaxPrintDefunctionalized_expressionParenthesized(syntaxComments, expressionNode);

            case false:
                elmSyntaxPrintDefunctionalized_expressionNotParenthesized(syntaxComments, expressionNode);
         }
        }())
    }

    static public func elmSyntaxPrintDefunctionalized_expressionParenthesizedIfSpaceSeparatedExceptApplicationAndLambda(_ syntaxComments: List_List<ElmSyntaxNode_Node<String>>, _ expressionNode: ElmSyntaxNode_Node<ElmSyntaxExpression_Expression>) -> Print_Print {
        ({ () in return switch elmSyntaxPrintDefunctionalized_expressionIsSpaceSeparated(elmSyntaxNode_value(expressionNode)) {
            case true:
                ({ () in return switch elmSyntaxNode_value(elmSyntaxPrintDefunctionalized_expressionToNotParenthesized(expressionNode)) {
                    case ElmSyntaxExpression_Expression.Application(_):
                        elmSyntaxPrintDefunctionalized_expressionNotParenthesized(syntaxComments, expressionNode);

                    case ElmSyntaxExpression_Expression.LambdaExpression(_):
                        elmSyntaxPrintDefunctionalized_expressionNotParenthesized(syntaxComments, expressionNode);

                    case _:
                        elmSyntaxPrintDefunctionalized_expressionParenthesized(syntaxComments, expressionNode);
                 }
                }());

            case false:
                elmSyntaxPrintDefunctionalized_expressionNotParenthesized(syntaxComments, expressionNode);
         }
        }())
    }

    static public func elmSyntaxPrintDefunctionalized_expressionRecordUpdate(_ syntaxComments: List_List<ElmSyntaxNode_Node<String>>, _ syntaxRecordUpdate:
        (fields:
            List_List<
                ElmSyntaxNode_Node<
                    (first: ElmSyntaxNode_Node<String>,
                     second: ElmSyntaxNode_Node<ElmSyntaxExpression_Expression>
                    )
                >
            >,
         fullRange: ElmSyntaxRange_Range,
         recordVariable: ElmSyntaxNode_Node<String>
        )) -> Print_Print {
        ({ () in let recordVariablePrint:Print_Print =
            print_exactly(elmSyntaxNode_value(syntaxRecordUpdate.recordVariable));

         let maybeCommentsBeforeRecordVariable:
            Maybe_Maybe<
                (lineSpread: Print_LineSpread,
                 print: Print_Print
                )
            > =
            ({ () in return switch elmSyntaxPrintDefunctionalized_commentsInRange((end: elmSyntaxNode_range(syntaxRecordUpdate.recordVariable).start, start: syntaxRecordUpdate.fullRange.start), syntaxComments) {
                case List_List.Empty:
                    Maybe_Maybe.Nothing;

                case let List_List.Cons(comment0, comment1Up):
                    Maybe_Maybe.Just(elmSyntaxPrintDefunctionalized_collapsibleComments(List_List.Cons(comment0, comment1Up)));
             }
            }());

         let fieldPrintsWithCommentsBefore:
            (endLocation: ElmSyntaxRange_Location,
             reverse: List_List<Print_Print>
            ) =
            list_foldl(
                { (generated_fieldSyntax, soFar) in
                    ({ () in return switch (generated_fieldSyntax: generated_fieldSyntax, unusedDummyFieldToMakeSwiftHappy: ()) {
                        case let (generated_fieldSyntax: ElmSyntaxNode_Node.Node(_, fieldSyntax), unusedDummyFieldToMakeSwiftHappy: ()):
                            ({ () in return switch fieldSyntax {
                                case let (first: ElmSyntaxNode_Node.Node(fieldNameRange, fieldName), second: fieldValueNode):
                                    ({ () in let valuePrint:Print_Print =
                                        elmSyntaxPrintDefunctionalized_expressionNotParenthesized(syntaxComments, fieldValueNode);

                                     return ({ () in return switch fieldValueNode {
                                        case let ElmSyntaxNode_Node.Node(fieldValueRange, _):
                                            (endLocation: fieldValueRange.end,
                                             reverse:
                                                List_List.Cons(
                                                    print_followedBy(
                                                        print_withIndentAtNextMultipleOf4(
                                                            print_followedBy(
                                                                valuePrint,
                                                                ({ () in return switch elmSyntaxPrintDefunctionalized_commentsInRange((end: fieldValueRange.start, start: fieldNameRange.start), syntaxComments) {
                                                                    case List_List.Empty:
                                                                        print_spaceOrLinebreakIndented(
                                                                            print_lineSpreadMergeWith(
                                                                                { (_) in
                                                                                    print_lineSpread(valuePrint)
                                                                                },
                                                                                elmSyntaxPrintDefunctionalized_lineSpreadBetweenRanges(fieldNameRange, elmSyntaxNode_range(fieldValueNode))
                                                                            )
                                                                        );

                                                                    case let List_List.Cons(comment0, comment1Up):
                                                                        ({ () in let commentsBeforeValue:
                                                                            (lineSpread: Print_LineSpread,
                                                                             print: Print_Print
                                                                            ) =
                                                                            elmSyntaxPrintDefunctionalized_collapsibleComments(List_List.Cons(comment0, comment1Up));

                                                                         let layout:Print_Print =
                                                                            print_spaceOrLinebreakIndented(
                                                                                print_lineSpreadMergeWith(
                                                                                    { (_) in
                                                                                        print_lineSpread(valuePrint)
                                                                                    },
                                                                                    print_lineSpreadMergeWith(
                                                                                        { (_) in
                                                                                            elmSyntaxPrintDefunctionalized_lineSpreadBetweenRanges(fieldNameRange, elmSyntaxNode_range(fieldValueNode))
                                                                                        },
                                                                                        commentsBeforeValue.lineSpread
                                                                                    )
                                                                                )
                                                                            );

                                                                         return print_followedBy(layout, print_followedBy(commentsBeforeValue.print, layout))
                                                                        }());
                                                                 }
                                                                }())
                                                            )
                                                        ),
                                                        print_withIndentIncreasedBy(
                                                            2.0,
                                                            ({ () in return switch elmSyntaxPrintDefunctionalized_commentsInRange((end: fieldNameRange.start, start: soFar.endLocation), syntaxComments) {
                                                                case List_List.Empty:
                                                                    print_exactly(string_append(fieldName, " ="));

                                                                case let List_List.Cons(comment0, comment1Up):
                                                                    ({ () in let commentsBeforeName:
                                                                        (lineSpread: Print_LineSpread,
                                                                         print: Print_Print
                                                                        ) =
                                                                        elmSyntaxPrintDefunctionalized_collapsibleComments(List_List.Cons(comment0, comment1Up));

                                                                     return print_followedBy(print_exactly(string_append(fieldName, " =")), print_followedBy(print_spaceOrLinebreakIndented(commentsBeforeName.lineSpread), commentsBeforeName.print))
                                                                    }());
                                                             }
                                                            }())
                                                        )
                                                    ),
                                                    soFar.reverse
                                                )
                                            );
                                      }
                                     }())
                                    }());
                             }
                            }());
                     }
                    }())
                },
                (endLocation: elmSyntaxNode_range(syntaxRecordUpdate.recordVariable).end, reverse: List_List.Empty),
                syntaxRecordUpdate.fields
            );

         let commentsAfterFields:List_List<String> =
            elmSyntaxPrintDefunctionalized_commentsInRange((end: syntaxRecordUpdate.fullRange.end, start: fieldPrintsWithCommentsBefore.endLocation), syntaxComments);

         let lineSpread:Print_LineSpread =
            print_lineSpreadMergeWith(
                { (_) in
                    print_lineSpreadListMapAndCombine(print_lineSpread, fieldPrintsWithCommentsBefore.reverse)
                },
                print_lineSpreadMergeWith(
                    { (_) in
                        ({ () in return switch commentsAfterFields {
                            case List_List.Empty:
                                Print_LineSpread.SingleLine;

                            case List_List.Cons(_, _):
                                Print_LineSpread.MultipleLines;
                         }
                        }())
                    },
                    print_lineSpreadMergeWith(
                        { (_) in
                            elmSyntaxPrintDefunctionalized_maybeLineSpread(
                                { (generated_record) in
                                    generated_record.lineSpread
                                },
                                maybeCommentsBeforeRecordVariable
                            )
                        },
                        elmSyntaxPrintDefunctionalized_lineSpreadInRange(syntaxRecordUpdate.fullRange)
                    )
                )
            );

         return print_followedBy(
            elmSyntaxPrintDefunctionalized_printExactlyCurlyClosing,
            print_followedBy(
                print_spaceOrLinebreakIndented(lineSpread),
                print_followedBy(
                    print_withIndentAtNextMultipleOf4(
                        print_followedBy(
                            ({ () in return switch commentsAfterFields {
                                case List_List.Empty:
                                    print_empty;

                                case let List_List.Cons(comment0, comment1Up):
                                    print_followedBy(elmSyntaxPrintDefunctionalized_comments(List_List.Cons(comment0, comment1Up)), print_followedBy(print_spaceOrLinebreakIndented(lineSpread), print_linebreak));
                             }
                            }()),
                            print_followedBy(print_listReverseAndIntersperseAndFlatten(print_followedBy(elmSyntaxPrintDefunctionalized_printExactlyCommaSpace, print_emptyOrLinebreakIndented(lineSpread)), fieldPrintsWithCommentsBefore.reverse), print_followedBy(elmSyntaxPrintDefunctionalized_printExactlyVerticalBarSpace, print_spaceOrLinebreakIndented(lineSpread)))
                        )
                    ),
                    print_followedBy(
                        print_withIndentIncreasedBy(
                            2.0,
                            ({ () in return switch maybeCommentsBeforeRecordVariable {
                                case Maybe_Maybe.Nothing:
                                    recordVariablePrint;

                                case let Maybe_Maybe.Just(commentsCollapsibleBeforeRecordVariable):
                                    print_followedBy(recordVariablePrint, print_followedBy(print_spaceOrLinebreakIndented(commentsCollapsibleBeforeRecordVariable.lineSpread), commentsCollapsibleBeforeRecordVariable.print));
                             }
                            }())
                        ),
                        elmSyntaxPrintDefunctionalized_printExactlyCurlyOpeningSpace
                    )
                )
            )
         )
        }())
    }

    static public func elmSyntaxPrintDefunctionalized_expressionToNotParenthesized(_ generated_fullRange_syntaxExpression: ElmSyntaxNode_Node<ElmSyntaxExpression_Expression>) -> ElmSyntaxNode_Node<ElmSyntaxExpression_Expression> {
        ({ () in return switch (generated_fullRange_syntaxExpression: generated_fullRange_syntaxExpression, unusedDummyFieldToMakeSwiftHappy: ()) {
            case let (generated_fullRange_syntaxExpression: ElmSyntaxNode_Node.Node(fullRange, syntaxExpression), unusedDummyFieldToMakeSwiftHappy: ()):
                ({ () in return switch syntaxExpression {
                    case let ElmSyntaxExpression_Expression.ParenthesizedExpression(inParens):
                        elmSyntaxPrintDefunctionalized_expressionToNotParenthesized(inParens);

                    case let ElmSyntaxExpression_Expression.TupledExpression(parts):
                        ({ () in return switch parts {
                            case let List_List.Cons(inParens, List_List.Empty):
                                elmSyntaxPrintDefunctionalized_expressionToNotParenthesized(inParens);

                            case List_List.Empty:
                                ElmSyntaxNode_Node.Node(fullRange, ElmSyntaxExpression_Expression.UnitExpr);

                            case let List_List.Cons(part0, List_List.Cons(part1, List_List.Empty)):
                                ElmSyntaxNode_Node.Node(fullRange, ElmSyntaxExpression_Expression.TupledExpression(List_List.Cons(part0, List_List.Cons(part1, List_List.Empty))));

                            case let List_List.Cons(part0, List_List.Cons(part1, List_List.Cons(part2, List_List.Empty))):
                                ElmSyntaxNode_Node.Node(fullRange, ElmSyntaxExpression_Expression.TupledExpression(List_List.Cons(part0, List_List.Cons(part1, List_List.Cons(part2, List_List.Empty)))));

                            case let List_List.Cons(part0, List_List.Cons(part1, List_List.Cons(part2, List_List.Cons(part3, part4Up)))):
                                ElmSyntaxNode_Node.Node(fullRange, ElmSyntaxExpression_Expression.TupledExpression(List_List.Cons(part0, List_List.Cons(part1, List_List.Cons(part2, List_List.Cons(part3, part4Up))))));
                         }
                        }());

                    case let syntaxExpressionNotParenthesized:
                        ElmSyntaxNode_Node.Node(fullRange, syntaxExpressionNotParenthesized);
                 }
                }());
         }
        }())
    }

    static public func elmSyntaxPrintDefunctionalized_firstCommentInRange(_ range: ElmSyntaxRange_Range, _ sortedComments: List_List<ElmSyntaxNode_Node<String>>) -> Maybe_Maybe<ElmSyntaxNode_Node<String>> {
        ({ () in return switch sortedComments {
            case List_List.Empty:
                Maybe_Maybe.Nothing;

            case let List_List.Cons(ElmSyntaxNode_Node.Node(headCommentRange, headComment), tailComments):
                ({ () in return switch elmSyntaxPrintDefunctionalized_locationCompareFast(headCommentRange.start, range.start) {
                    case Basics_Order.LT:
                        elmSyntaxPrintDefunctionalized_firstCommentInRange(range, tailComments);

                    case Basics_Order.EQ:
                        Maybe_Maybe.Just(ElmSyntaxNode_Node.Node(headCommentRange, headComment));

                    case Basics_Order.GT:
                        ({ () in return switch elmSyntaxPrintDefunctionalized_locationCompareFast(headCommentRange.end, range.end) {
                            case Basics_Order.GT:
                                Maybe_Maybe.Nothing;

                            case Basics_Order.LT:
                                Maybe_Maybe.Just(ElmSyntaxNode_Node.Node(headCommentRange, headComment));

                            case Basics_Order.EQ:
                                Maybe_Maybe.Just(ElmSyntaxNode_Node.Node(headCommentRange, headComment));
                         }
                        }());
                 }
                }());
         }
        }())
    }

    static public func elmSyntaxPrintDefunctionalized_floatLiteral(_ float: Double) -> String {
        ({ () in return switch basics_eq(basics_identity(basics_truncate(float)), float) {
            case true:
                string_append(string_fromFloat(float), ".0");

            case false:
                string_fromFloat(float);
         }
        }())
    }

    static public func elmSyntaxPrintDefunctionalized_hexLiteral(_ int: Double) -> String {
        ({ () in let maybeSignPrint:String =
            ({ () in return switch basics_lt(int, 0.0) {
                case true:
                    "-";

                case false:
                    "";
             }
            }());

         let intAbs:Double =
            basics_abs(int);

         let digitCountToPrint:Double =
            ({ () in return switch basics_le(intAbs, 255.0) {
                case true:
                    2.0;

                case false:
                    ({ () in return switch basics_le(intAbs, 65535.0) {
                        case true:
                            4.0;

                        case false:
                            ({ () in return switch basics_le(intAbs, 4294967295.0) {
                                case true:
                                    8.0;

                                case false:
                                    16.0;
                             }
                            }());
                     }
                    }());
             }
            }());

         return string_append(maybeSignPrint, string_append("0x", elmSyntaxPrintDefunctionalized_stringResizePadLeftWith0s(digitCountToPrint, elmSyntaxPrintDefunctionalized_intToHexString(int))))
        }())
    }

    static public func elmSyntaxPrintDefunctionalized_importExposing(_ syntaxComments: List_List<ElmSyntaxNode_Node<String>>, _ generated_exposingRange_syntaxExposing: ElmSyntaxNode_Node<ElmSyntaxExposing_Exposing>) -> Print_Print {
        ({ () in return switch (generated_exposingRange_syntaxExposing: generated_exposingRange_syntaxExposing, unusedDummyFieldToMakeSwiftHappy: ()) {
            case let (generated_exposingRange_syntaxExposing: ElmSyntaxNode_Node.Node(exposingRange, syntaxExposing), unusedDummyFieldToMakeSwiftHappy: ()):
                ({ () in return switch syntaxExposing {
                    case ElmSyntaxExposing_Exposing.All(_):
                        elmSyntaxPrintDefunctionalized_printExactlyParensOpeningDotDotParensClosing;

                    case let ElmSyntaxExposing_Exposing.Explicit(exposingSet):
                        ({ () in return switch exposingSet {
                            case List_List.Empty:
                                elmSyntaxPrintDefunctionalized_printExactlyParensOpeningParensClosed;

                            case let List_List.Cons(expose0, expose1Up):
                                elmSyntaxPrintDefunctionalized_exposingMulti(syntaxComments, (expose0: expose0, expose1Up: expose1Up, fullRange: exposingRange));
                         }
                        }());
                 }
                }());
         }
        }())
    }

    static public func elmSyntaxPrintDefunctionalized_importToNormal(_ syntaxImport: ElmSyntaxImport_Import) -> ElmSyntaxImport_Import {
        (exposingList:
            ({ () in return switch syntaxImport.exposingList {
                case Maybe_Maybe.Nothing:
                    Maybe_Maybe.Nothing;

                case let Maybe_Maybe.Just(ElmSyntaxNode_Node.Node(exposingRange, syntaxExposing)):
                    Maybe_Maybe.Just(ElmSyntaxNode_Node.Node(exposingRange, elmSyntaxPrintDefunctionalized_exposingToNormal(syntaxExposing)));
             }
            }()),
         moduleAlias: syntaxImport.moduleAlias,
         moduleName: syntaxImport.moduleName
        )
    }

    static public func elmSyntaxPrintDefunctionalized_import_(_ syntaxComments: List_List<ElmSyntaxNode_Node<String>>, _ generated_incorrectImportRange_syntaxImport: ElmSyntaxNode_Node<ElmSyntaxImport_Import>) -> Print_Print {
        ({ () in return switch (generated_incorrectImportRange_syntaxImport: generated_incorrectImportRange_syntaxImport, unusedDummyFieldToMakeSwiftHappy: ()) {
            case let (generated_incorrectImportRange_syntaxImport: ElmSyntaxNode_Node.Node(incorrectImportRange, syntaxImport), unusedDummyFieldToMakeSwiftHappy: ()):
                ({ () in let importRange:ElmSyntaxRange_Range =
                    ({ () in return switch syntaxImport.exposingList {
                        case Maybe_Maybe.Nothing:
                            incorrectImportRange;

                        case let Maybe_Maybe.Just(ElmSyntaxNode_Node.Node(syntaxExposingRange, _)):
                            (end: syntaxExposingRange.end, start: incorrectImportRange.start);
                     }
                    }());

                 return ({ () in return switch syntaxImport.moduleName {
                    case let ElmSyntaxNode_Node.Node(moduleNameRange, syntaxModuleName):
                        print_followedBy(
                            ({ () in return switch syntaxImport.exposingList {
                                case Maybe_Maybe.Nothing:
                                    print_empty;

                                case let Maybe_Maybe.Just(syntaxExposing):
                                    ({ () in let exposingPrint:Print_Print =
                                        elmSyntaxPrintDefunctionalized_importExposing(syntaxComments, syntaxExposing);

                                     let exposingPartStart:ElmSyntaxRange_Location =
                                        ({ () in return switch syntaxImport.moduleAlias {
                                            case Maybe_Maybe.Nothing:
                                                moduleNameRange.end;

                                            case let Maybe_Maybe.Just(ElmSyntaxNode_Node.Node(moduleAliasRange, _)):
                                                moduleAliasRange.end;
                                         }
                                        }());

                                     return ({ () in return switch elmSyntaxPrintDefunctionalized_commentsInRange((end: importRange.end, start: exposingPartStart), syntaxComments) {
                                        case List_List.Empty:
                                            ({ () in let lineSpread:Print_LineSpread =
                                                print_lineSpread(exposingPrint);

                                             return print_withIndentAtNextMultipleOf4(print_followedBy(print_withIndentAtNextMultipleOf4(print_followedBy(exposingPrint, print_spaceOrLinebreakIndented(lineSpread))), print_followedBy(elmSyntaxPrintDefunctionalized_printExactlyExposing, print_spaceOrLinebreakIndented(lineSpread))))
                                            }());

                                        case let List_List.Cons(exposingComment0, exposingComment1Up):
                                            print_withIndentAtNextMultipleOf4(print_followedBy(print_withIndentAtNextMultipleOf4(print_followedBy(exposingPrint, print_followedBy(print_linebreakIndented, print_followedBy(elmSyntaxPrintDefunctionalized_comments(List_List.Cons(exposingComment0, exposingComment1Up)), print_linebreakIndented)))), elmSyntaxPrintDefunctionalized_printLinebreakIndentedExposing));
                                      }
                                     }())
                                    }());
                             }
                            }()),
                            print_followedBy(
                                ({ () in return switch syntaxImport.moduleAlias {
                                    case Maybe_Maybe.Nothing:
                                        ({ () in return switch elmSyntaxPrintDefunctionalized_commentsInRange((end: moduleNameRange.start, start: importRange.start), syntaxComments) {
                                            case List_List.Empty:
                                                print_exactly(string_append(" ", elmSyntaxPrintDefunctionalized_moduleName(syntaxModuleName)));

                                            case let List_List.Cons(comment0, comment1Up):
                                                print_withIndentAtNextMultipleOf4(print_followedBy(print_exactly(elmSyntaxPrintDefunctionalized_moduleName(syntaxModuleName)), print_followedBy(print_linebreakIndented, print_followedBy(elmSyntaxPrintDefunctionalized_comments(List_List.Cons(comment0, comment1Up)), print_linebreakIndented))));
                                         }
                                        }());

                                    case let Maybe_Maybe.Just(ElmSyntaxNode_Node.Node(moduleAliasRange, moduleAlias)):
                                        ({ () in return switch elmSyntaxPrintDefunctionalized_commentsInRange((end: moduleAliasRange.start, start: moduleNameRange.end), syntaxComments) {
                                            case List_List.Empty:
                                                print_followedBy(
                                                    print_exactly(string_append(" as ", elmSyntaxPrintDefunctionalized_moduleName(moduleAlias))),
                                                    ({ () in return switch elmSyntaxPrintDefunctionalized_commentsInRange((end: moduleNameRange.start, start: importRange.start), syntaxComments) {
                                                        case List_List.Empty:
                                                            print_exactly(string_append(" ", elmSyntaxPrintDefunctionalized_moduleName(syntaxModuleName)));

                                                        case let List_List.Cons(moduleNameComment0, moduleNameComment1Up):
                                                            print_withIndentAtNextMultipleOf4(print_followedBy(print_exactly(elmSyntaxPrintDefunctionalized_moduleName(syntaxModuleName)), print_followedBy(print_linebreakIndented, print_followedBy(elmSyntaxPrintDefunctionalized_comments(List_List.Cons(moduleNameComment0, moduleNameComment1Up)), print_linebreakIndented))));
                                                     }
                                                    }())
                                                );

                                            case let List_List.Cons(aliasComment0, aliasComment1Up):
                                                print_withIndentAtNextMultipleOf4(
                                                    print_followedBy(
                                                        print_withIndentAtNextMultipleOf4(print_followedBy(print_withIndentAtNextMultipleOf4(print_followedBy(print_exactly(elmSyntaxPrintDefunctionalized_moduleName(moduleAlias)), print_followedBy(print_linebreakIndented, print_followedBy(elmSyntaxPrintDefunctionalized_comments(List_List.Cons(aliasComment0, aliasComment1Up)), print_linebreakIndented)))), elmSyntaxPrintDefunctionalized_printLinebreakIndentedAs)),
                                                        print_followedBy(
                                                            ({ () in return switch elmSyntaxPrintDefunctionalized_commentsInRange((end: moduleNameRange.start, start: importRange.start), syntaxComments) {
                                                                case List_List.Empty:
                                                                    print_exactly(elmSyntaxPrintDefunctionalized_moduleName(syntaxModuleName));

                                                                case let List_List.Cons(moduleNameComment0, moduleNameComment1Up):
                                                                    print_followedBy(print_exactly(elmSyntaxPrintDefunctionalized_moduleName(syntaxModuleName)), print_followedBy(print_linebreakIndented, elmSyntaxPrintDefunctionalized_comments(List_List.Cons(moduleNameComment0, moduleNameComment1Up))));
                                                             }
                                                            }()),
                                                            print_linebreakIndented
                                                        )
                                                    )
                                                );
                                         }
                                        }());
                                 }
                                }()),
                                elmSyntaxPrintDefunctionalized_printExactImport
                            )
                        );
                  }
                 }())
                }());
         }
        }())
    }

    static public func elmSyntaxPrintDefunctionalized_imports(_ syntaxComments: List_List<ElmSyntaxNode_Node<String>>, _ syntaxImports: List_List<ElmSyntaxNode_Node<ElmSyntaxImport_Import>>) -> Print_Print {
        ({ () in return switch syntaxImports {
            case List_List.Empty:
                print_empty;

            case let List_List.Cons(ElmSyntaxNode_Node.Node(import0Range, import0), imports1Up):
                ({ () in let commentsBetweenImports:List_List<String> =
                    list_foldl(
                        { (generated_importRange, soFar) in
                            ({ () in return switch (generated_importRange: generated_importRange, unusedDummyFieldToMakeSwiftHappy: ()) {
                                case let (generated_importRange: ElmSyntaxNode_Node.Node(importRange, _), unusedDummyFieldToMakeSwiftHappy: ()):
                                    (commentsBetweenImports: list_append(soFar.commentsBetweenImports, elmSyntaxPrintDefunctionalized_commentsInRange((end: importRange.start, start: soFar.previousImportRange.end), syntaxComments)), previousImportRange: importRange);
                             }
                            }())
                        },
                        (commentsBetweenImports: List_List.Empty, previousImportRange: import0Range),
                        List_List.Cons(ElmSyntaxNode_Node.Node(import0Range, import0), imports1Up)
                    ).commentsBetweenImports;

                 return print_followedBy(
                    print_listMapAndIntersperseAndFlatten(
                        { (syntaxImport) in
                            elmSyntaxPrintDefunctionalized_import_(syntaxComments, syntaxImport)
                        },
                        print_linebreak,
                        elmSyntaxPrintDefunctionalized_importsCombine(
                            list_sortWith(
                                { (generated_a, generated_b) in
                                    ({ () in return switch (generated_a: generated_a, generated_b: generated_b) {
                                        case let (generated_a: ElmSyntaxNode_Node.Node(_, a), generated_b: ElmSyntaxNode_Node.Node(_, b)):
                                            basics_compare(elmSyntaxNode_value(a.moduleName), elmSyntaxNode_value(b.moduleName));
                                     }
                                    }())
                                },
                                List_List.Cons(ElmSyntaxNode_Node.Node(import0Range, import0), imports1Up)
                            )
                        )
                    ),
                    ({ () in return switch commentsBetweenImports {
                        case List_List.Empty:
                            print_empty;

                        case let List_List.Cons(comment0, comment1Up):
                            print_followedBy(print_linebreak, elmSyntaxPrintDefunctionalized_moduleLevelComments(List_List.Cons(comment0, comment1Up)));
                     }
                    }())
                 )
                }());
         }
        }())
    }

    static public func elmSyntaxPrintDefunctionalized_importsCombine(_ syntaxImports: List_List<ElmSyntaxNode_Node<ElmSyntaxImport_Import>>) -> List_List<ElmSyntaxNode_Node<ElmSyntaxImport_Import>> {
        ({ () in return switch syntaxImports {
            case List_List.Empty:
                List_List.Empty;

            case let List_List.Cons(onlyImport, List_List.Empty):
                List_List.Cons(elmSyntaxNode_map(elmSyntaxPrintDefunctionalized_importToNormal, onlyImport), List_List.Empty);

            case let List_List.Cons(ElmSyntaxNode_Node.Node(import0Range, import0), List_List.Cons(ElmSyntaxNode_Node.Node(import1Range, import1), import2Up)):
                ({ () in return switch basics_eq(elmSyntaxNode_value(import0.moduleName), elmSyntaxNode_value(import1.moduleName)) {
                    case true:
                        elmSyntaxPrintDefunctionalized_importsCombine(List_List.Cons(ElmSyntaxNode_Node.Node(import1Range, elmSyntaxPrintDefunctionalized_importsMerge(import0, import1)), import2Up));

                    case false:
                        List_List.Cons(ElmSyntaxNode_Node.Node(import0Range, elmSyntaxPrintDefunctionalized_importToNormal(import0)), elmSyntaxPrintDefunctionalized_importsCombine(List_List.Cons(ElmSyntaxNode_Node.Node(import1Range, import1), import2Up)));
                 }
                }());
         }
        }())
    }

    static public func elmSyntaxPrintDefunctionalized_importsMerge(_ earlier: ElmSyntaxImport_Import, _ later: ElmSyntaxImport_Import) -> ElmSyntaxImport_Import {
        (exposingList: elmSyntaxPrintDefunctionalized_exposingCombine(earlier.exposingList, later.exposingList),
         moduleAlias:
            ({ () in return switch earlier.moduleAlias {
                case let Maybe_Maybe.Just(alias):
                    Maybe_Maybe.Just(alias);

                case Maybe_Maybe.Nothing:
                    later.moduleAlias;
             }
            }()),
         moduleName: later.moduleName
        )
    }

    static public func elmSyntaxPrintDefunctionalized_infixDirection(_ syntaxInfixDirection: ElmSyntaxInfix_InfixDirection) -> String {
        ({ () in return switch syntaxInfixDirection {
            case ElmSyntaxInfix_InfixDirection.Left:
                "left ";

            case ElmSyntaxInfix_InfixDirection.Right:
                "right";

            case ElmSyntaxInfix_InfixDirection.Non:
                "non  ";
         }
        }())
    }

    static public let elmSyntaxPrintDefunctionalized_intLiteral:@Sendable (Double) -> String =
        string_fromFloat;

    static public func elmSyntaxPrintDefunctionalized_intToHexString(_ int: Double) -> String {
        ({ () in return switch basics_lt(int, 16.0) {
            case true:
                elmSyntaxPrintDefunctionalized_unsafeHexDigitIntToString(int);

            case false:
                string_append(elmSyntaxPrintDefunctionalized_intToHexString(basics_idiv(int, 16.0)), string_append(elmSyntaxPrintDefunctionalized_unsafeHexDigitIntToString(basics_remainderBy(16.0, int)), ""));
         }
        }())
    }

    static public func elmSyntaxPrintDefunctionalized_invalidNTuple<A: Sendable, B: Sendable>(_ printPartNotParenthesized: @Sendable (B, A) -> Print_Print, _ syntaxComments: B, _ syntaxTuple:
        (fullRange: ElmSyntaxRange_Range,
         part0: A,
         part1: A,
         part2: A,
         part3: A,
         part4Up: List_List<A>
        )) -> Print_Print {
        ({ () in let lineSpread:Print_LineSpread =
            elmSyntaxPrintDefunctionalized_lineSpreadInRange(syntaxTuple.fullRange);

         return print_followedBy(
            elmSyntaxPrintDefunctionalized_printExactlyParensClosing,
            print_followedBy(
                print_spaceOrLinebreakIndented(lineSpread),
                print_followedBy(
                    print_listMapAndIntersperseAndFlatten(
                        { (part) in
                            print_withIndentIncreasedBy(2.0, printPartNotParenthesized(syntaxComments, part))
                        },
                        print_followedBy(elmSyntaxPrintDefunctionalized_printExactlyCommaSpace, print_emptyOrLinebreakIndented(lineSpread)),
                        List_List.Cons(syntaxTuple.part0, List_List.Cons(syntaxTuple.part1, List_List.Cons(syntaxTuple.part2, List_List.Cons(syntaxTuple.part3, syntaxTuple.part4Up))))
                    ),
                    elmSyntaxPrintDefunctionalized_printExactlyParensOpeningSpace
                )
            )
         )
        }())
    }

    static public func elmSyntaxPrintDefunctionalized_lineIndentation(_ line: String) -> Double {
        string_foldl(
            { (char, soFar) in
                ({ () in return switch soFar.onlySpaces {
                    case true:
                        ({ () in return switch char {
                            case " ":
                                (onlySpaces: true, spaceCount: basics_add(soFar.spaceCount, 1.0));

                            case _:
                                (onlySpaces: false, spaceCount: soFar.spaceCount);
                         }
                        }());

                    case false:
                        soFar;
                 }
                }())
            },
            elmSyntaxPrintDefunctionalized_spaceCount0OnlySpacesTrue,
            line
        ).spaceCount
    }

    static public func elmSyntaxPrintDefunctionalized_lineSpreadBetweenNodes<A_: Sendable, B_: Sendable>(_ generated_earlierRange: ElmSyntaxNode_Node<A_>, _ generated_laterRange: ElmSyntaxNode_Node<B_>) -> Print_LineSpread {
        ({ () in return switch (generated_earlierRange: generated_earlierRange, generated_laterRange: generated_laterRange) {
            case let (generated_earlierRange: ElmSyntaxNode_Node.Node(earlierRange, _), generated_laterRange: ElmSyntaxNode_Node.Node(laterRange, _)):
                ({ () in return switch basics_eq(basics_sub(laterRange.end.row, earlierRange.start.row), 0.0) {
                    case true:
                        Print_LineSpread.SingleLine;

                    case false:
                        Print_LineSpread.MultipleLines;
                 }
                }());
         }
        }())
    }

    static public func elmSyntaxPrintDefunctionalized_lineSpreadBetweenRanges(_ earlierRange: ElmSyntaxRange_Range, _ laterRange: ElmSyntaxRange_Range) -> Print_LineSpread {
        ({ () in return switch basics_eq(basics_sub(laterRange.end.row, earlierRange.start.row), 0.0) {
            case true:
                Print_LineSpread.SingleLine;

            case false:
                Print_LineSpread.MultipleLines;
         }
        }())
    }

    static public func elmSyntaxPrintDefunctionalized_lineSpreadInNode<A_: Sendable>(_ generated_range: ElmSyntaxNode_Node<A_>) -> Print_LineSpread {
        ({ () in return switch (generated_range: generated_range, unusedDummyFieldToMakeSwiftHappy: ()) {
            case let (generated_range: ElmSyntaxNode_Node.Node(range, _), unusedDummyFieldToMakeSwiftHappy: ()):
                elmSyntaxPrintDefunctionalized_lineSpreadInRange(range);
         }
        }())
    }

    static public func elmSyntaxPrintDefunctionalized_lineSpreadInRange(_ range: ElmSyntaxRange_Range) -> Print_LineSpread {
        ({ () in return switch basics_eq(basics_sub(range.end.row, range.start.row), 0.0) {
            case true:
                Print_LineSpread.SingleLine;

            case false:
                Print_LineSpread.MultipleLines;
         }
        }())
    }

    static public func elmSyntaxPrintDefunctionalized_linebreaksFollowedByDeclaration(_ syntaxComments:
        (comments: List_List<ElmSyntaxNode_Node<String>>,
         portDocumentationComment: Maybe_Maybe<ElmSyntaxNode_Node<String>>
        ), _ syntaxDeclaration: ElmSyntaxDeclaration_Declaration) -> Print_Print {
        ({ () in return switch syntaxDeclaration {
            case let ElmSyntaxDeclaration_Declaration.FunctionDeclaration(syntaxExpressionDeclaration):
                print_followedBy(elmSyntaxPrintDefunctionalized_declarationExpression(syntaxComments.comments, syntaxExpressionDeclaration), elmSyntaxPrintDefunctionalized_printLinebreakLinebreakLinebreak);

            case let ElmSyntaxDeclaration_Declaration.AliasDeclaration(syntaxTypeAliasDeclaration):
                print_followedBy(elmSyntaxPrintDefunctionalized_declarationTypeAlias(syntaxComments.comments, syntaxTypeAliasDeclaration), elmSyntaxPrintDefunctionalized_printLinebreakLinebreakLinebreak);

            case let ElmSyntaxDeclaration_Declaration.CustomTypeDeclaration(syntaxChoiceTypeDeclaration):
                print_followedBy(elmSyntaxPrintDefunctionalized_declarationChoiceType(syntaxComments.comments, syntaxChoiceTypeDeclaration), elmSyntaxPrintDefunctionalized_printLinebreakLinebreakLinebreak);

            case let ElmSyntaxDeclaration_Declaration.PortDeclaration(signature):
                print_followedBy(elmSyntaxPrintDefunctionalized_declarationPort((comments: syntaxComments.comments, documentationComment: syntaxComments.portDocumentationComment), signature), elmSyntaxPrintDefunctionalized_printLinebreakLinebreakLinebreak);

            case let ElmSyntaxDeclaration_Declaration.InfixDeclaration(syntaxInfixDeclaration):
                print_followedBy(elmSyntaxPrintDefunctionalized_declarationInfix(syntaxInfixDeclaration), print_linebreak);

            case let ElmSyntaxDeclaration_Declaration.Destructuring(destructuringPattern, destructuringExpression):
                print_followedBy(elmSyntaxPrintDefunctionalized_declarationDestructuring(syntaxComments.comments, destructuringPattern, destructuringExpression), elmSyntaxPrintDefunctionalized_printLinebreakLinebreakLinebreak);
         }
        }())
    }

    static public func elmSyntaxPrintDefunctionalized_listDropLastIfIs<A: Sendable>(_ lastElementShouldBeRemoved: @Sendable (A) -> Bool, _ list: List_List<A>) -> List_List<A> {
        ({ () in return switch list {
            case List_List.Empty:
                List_List.Empty;

            case let List_List.Cons(onlyElement, List_List.Empty):
                ({ () in return switch lastElementShouldBeRemoved(onlyElement) {
                    case true:
                        List_List.Empty;

                    case false:
                        List_List.Cons(onlyElement, List_List.Empty);
                 }
                }());

            case let List_List.Cons(element0, List_List.Cons(element1, element2Up)):
                List_List.Cons(element0, elmSyntaxPrintDefunctionalized_listDropLastIfIs(lastElementShouldBeRemoved, List_List.Cons(element1, element2Up)));
         }
        }())
    }

    static public func elmSyntaxPrintDefunctionalized_listFilledLast<A: Sendable>(_ head: A, _ tail: List_List<A>) -> A {
        ({ () in return switch tail {
            case List_List.Empty:
                head;

            case let List_List.Cons(tailHead, tailTail):
                elmSyntaxPrintDefunctionalized_listFilledLast(tailHead, tailTail);
         }
        }())
    }

    static public func elmSyntaxPrintDefunctionalized_listFirstJustMap<A: Sendable, B: Sendable>(_ elementToMaybe: @Sendable (A) -> Maybe_Maybe<B>, _ list: List_List<A>) -> Maybe_Maybe<B> {
        ({ () in return switch list {
            case List_List.Empty:
                Maybe_Maybe.Nothing;

            case let List_List.Cons(head, tail):
                ({ () in return switch elementToMaybe(head) {
                    case Maybe_Maybe.Nothing:
                        elmSyntaxPrintDefunctionalized_listFirstJustMap(elementToMaybe, tail);

                    case let Maybe_Maybe.Just(b):
                        Maybe_Maybe.Just(b);
                 }
                }());
         }
        }())
    }

    static public func elmSyntaxPrintDefunctionalized_listMapAndFlattenToString<A: Sendable>(_ elementToString: @Sendable (A) -> String, _ elements: List_List<A>) -> String {
        list_foldl(
            { (next, soFar) in
                string_append(soFar, string_append(elementToString(next), ""))
            },
            "",
            elements
        )
    }

    static public func elmSyntaxPrintDefunctionalized_listMapAndIntersperseAndFlattenToString<A: Sendable>(_ elementToString: @Sendable (A) -> String, _ betweenElements: String, _ elements: List_List<A>) -> String {
        ({ () in return switch elements {
            case List_List.Empty:
                "";

            case let List_List.Cons(head, tail):
                list_foldl(
                    { (next, soFar) in
                        string_append(soFar, string_append(betweenElements, string_append(elementToString(next), "")))
                    },
                    elementToString(head),
                    tail
                );
         }
        }())
    }

    static public func elmSyntaxPrintDefunctionalized_locationCompareFast(_ left: ElmSyntaxRange_Location, _ right: ElmSyntaxRange_Location) -> Basics_Order {
        ({ () in return switch basics_lt(basics_sub(left.row, right.row), 0.0) {
            case true:
                Basics_Order.LT;

            case false:
                ({ () in return switch basics_gt(basics_sub(left.row, right.row), 0.0) {
                    case true:
                        Basics_Order.GT;

                    case false:
                        basics_compare(left.column, right.column);
                 }
                }());
         }
        }())
    }

    static public func elmSyntaxPrintDefunctionalized_maybeLineSpread<A: Sendable>(_ valueToLineSpread: @Sendable (A) -> Print_LineSpread, _ maybe: Maybe_Maybe<A>) -> Print_LineSpread {
        ({ () in return switch maybe {
            case Maybe_Maybe.Nothing:
                Print_LineSpread.SingleLine;

            case let Maybe_Maybe.Just(value):
                valueToLineSpread(value);
         }
        }())
    }

    static public func elmSyntaxPrintDefunctionalized_moduleDocumentation(_ ast: ElmSyntaxFile_File) -> Maybe_Maybe<ElmSyntaxNode_Node<String>> {
        ({ () in let cutOffLine:Double =
            ({ () in return switch ast.imports {
                case let List_List.Cons(ElmSyntaxNode_Node.Node(firstImportRange, _), _):
                    firstImportRange.start.row;

                case List_List.Empty:
                    ({ () in return switch ast.declarations {
                        case let List_List.Cons(ElmSyntaxNode_Node.Node(firstDeclarationRange, _), _):
                            firstDeclarationRange.start.row;

                        case List_List.Empty:
                            0.0;
                     }
                    }());
             }
            }());

         return elmSyntaxPrintDefunctionalized_moduleDocumentationBeforeCutOffLine(cutOffLine, ast.comments)
        }())
    }

    static public func elmSyntaxPrintDefunctionalized_moduleDocumentationBeforeCutOffLine(_ cutOffLine: Double, _ allComments: List_List<ElmSyntaxNode_Node<String>>) -> Maybe_Maybe<ElmSyntaxNode_Node<String>> {
        ({ () in return switch allComments {
            case List_List.Empty:
                Maybe_Maybe.Nothing;

            case let List_List.Cons(headComment, restOfComments):
                ({ () in return switch headComment {
                    case let ElmSyntaxNode_Node.Node(range, content):
                        ({ () in return switch basics_gt(range.start.row, cutOffLine) {
                            case true:
                                Maybe_Maybe.Nothing;

                            case false:
                                ({ () in return switch string_startsWith("{-|", content) {
                                    case true:
                                        Maybe_Maybe.Just(headComment);

                                    case false:
                                        elmSyntaxPrintDefunctionalized_moduleDocumentationBeforeCutOffLine(cutOffLine, restOfComments);
                                 }
                                }());
                         }
                        }());
                 }
                }());
         }
        }())
    }

    static public func elmSyntaxPrintDefunctionalized_moduleDocumentationParse(_ moduleDocumentationContent: String) ->
        (rawAfterAtDocsLines: String,
         whileAtDocsLines:
            List_List<
                (atDocsLine: List_List<String>,
                 rawBefore: String
                )
            >
        ) {
        ({ () in let parsed:
            (finishedBlocks:
                List_List<
                    (atDocsLine: List_List<String>,
                     rawBefore: String
                    )
                >,
             rawSinceAtDocs: String
            ) =
            list_foldl(
                { (line, soFar) in
                    ({ () in return switch string_startsWith("@docs ", line) {
                        case true:
                            (finishedBlocks: List_List.Cons((atDocsLine: list_map(string_trim, string_split(",", string_slice(6.0, string_length(line), line))), rawBefore: soFar.rawSinceAtDocs), soFar.finishedBlocks), rawSinceAtDocs: "");

                        case false:
                            (finishedBlocks: soFar.finishedBlocks, rawSinceAtDocs: string_append(soFar.rawSinceAtDocs, "\n"));
                     }
                    }())
                },
                elmSyntaxPrintDefunctionalized_rawSinceAtDocsEmptyFinishedBlocksEmpty(),
                string_lines(moduleDocumentationContent)
            );

         return (rawAfterAtDocsLines: parsed.rawSinceAtDocs, whileAtDocsLines: list_reverse(parsed.finishedBlocks))
        }())
    }

    static public func elmSyntaxPrintDefunctionalized_moduleExposing(_ context:
        (atDocsLines: List_List<List_List<String>>,
         comments: List_List<ElmSyntaxNode_Node<String>>
        ), _ generated_exposingRange_syntaxExposing: ElmSyntaxNode_Node<ElmSyntaxExposing_Exposing>) -> Print_Print {
        ({ () in return switch (generated_exposingRange_syntaxExposing: generated_exposingRange_syntaxExposing, unusedDummyFieldToMakeSwiftHappy: ()) {
            case let (generated_exposingRange_syntaxExposing: ElmSyntaxNode_Node.Node(exposingRange, syntaxExposing), unusedDummyFieldToMakeSwiftHappy: ()):
                ({ () in return switch syntaxExposing {
                    case ElmSyntaxExposing_Exposing.All(_):
                        elmSyntaxPrintDefunctionalized_printExactlyParensOpeningDotDotParensClosing;

                    case let ElmSyntaxExposing_Exposing.Explicit(exposingSet):
                        ({ () in return switch elmSyntaxPrintDefunctionalized_exposeListToNormal(exposingSet) {
                            case List_List.Empty:
                                elmSyntaxPrintDefunctionalized_printExactlyParensOpeningParensClosed;

                            case let List_List.Cons(ElmSyntaxNode_Node.Node(_, onlySyntaxExpose), List_List.Empty):
                                ({ () in let containedComments:List_List<String> =
                                    elmSyntaxPrintDefunctionalized_commentsInRange(exposingRange, context.comments);

                                 let lineSpread:Print_LineSpread =
                                    ({ () in return switch containedComments {
                                        case List_List.Cons(_, _):
                                            Print_LineSpread.MultipleLines;

                                        case List_List.Empty:
                                            Print_LineSpread.SingleLine;
                                     }
                                    }());

                                 return print_followedBy(
                                    ({ () in return switch containedComments {
                                        case List_List.Empty:
                                            elmSyntaxPrintDefunctionalized_printExactlyParensClosing;

                                        case let List_List.Cons(comment0, comment1Up):
                                            print_followedBy(elmSyntaxPrintDefunctionalized_printExactlyParensClosing, print_followedBy(print_emptyOrLinebreakIndented(lineSpread), elmSyntaxPrintDefunctionalized_comments(List_List.Cons(comment0, comment1Up))));
                                     }
                                    }()),
                                    print_followedBy(
                                        print_emptyOrLinebreakIndented(lineSpread),
                                        print_exactly(
                                            string_append(
                                                ({ () in return switch lineSpread {
                                                    case Print_LineSpread.SingleLine:
                                                        "(";

                                                    case Print_LineSpread.MultipleLines:
                                                        "( ";
                                                 }
                                                }()),
                                                string_append(elmSyntaxPrintDefunctionalized_expose(onlySyntaxExpose), "")
                                            )
                                        )
                                    )
                                 )
                                }());

                            case let List_List.Cons(expose0, List_List.Cons(expose1, expose2Up)):
                                ({ () in return switch context.atDocsLines {
                                    case let List_List.Cons(atDocsLine0, atDocsLine1Up):
                                        ({ () in let atDocsExposeLines:
                                            (atDocsExposeLines: List_List<List_List<ElmSyntaxExposing_TopLevelExpose>>,
                                             remainingExposes: List_List<ElmSyntaxExposing_TopLevelExpose>
                                            ) =
                                            list_foldr(
                                                { (atDocsLine, soFar) in
                                                    ({ () in let atDocsExposeLine:
                                                        (exposes: List_List<ElmSyntaxExposing_TopLevelExpose>,
                                                         remaining: List_List<ElmSyntaxExposing_TopLevelExpose>
                                                        ) =
                                                        elmSyntaxPrintDefunctionalized_atDocsLineToExposesAndRemaining(atDocsLine, soFar.remainingExposes);

                                                     return (atDocsExposeLines: List_List.Cons(atDocsExposeLine.exposes, soFar.atDocsExposeLines), remainingExposes: atDocsExposeLine.remaining)
                                                    }())
                                                },
                                                (atDocsExposeLines: List_List.Empty, remainingExposes: list_map(elmSyntaxNode_value, List_List.Cons(expose0, List_List.Cons(expose1, expose2Up)))),
                                                List_List.Cons(atDocsLine0, atDocsLine1Up)
                                            );

                                         return ({ () in return switch 
                                            list_filter(
                                                { (line) in
                                                    ({ () in return switch line {
                                                        case List_List.Empty:
                                                            false;

                                                        case List_List.Cons(_, _):
                                                            true;
                                                     }
                                                    }())
                                                },
                                                atDocsExposeLines.atDocsExposeLines
                                            )
                                           {
                                            case List_List.Empty:
                                                elmSyntaxPrintDefunctionalized_exposingMulti(context.comments, (expose0: expose0, expose1Up: List_List.Cons(expose1, expose2Up), fullRange: exposingRange));

                                            case let List_List.Cons(atDocsExposeLine0, atDocsExposeLine1Up):
                                                print_followedBy(
                                                    ({ () in return switch atDocsExposeLines.remainingExposes {
                                                        case List_List.Empty:
                                                            elmSyntaxPrintDefunctionalized_printExactlyParensClosing;

                                                        case let List_List.Cons(remainingExpose0, remainingExpose1Up):
                                                            print_followedBy(elmSyntaxPrintDefunctionalized_printExactlyParensClosing, print_followedBy(print_linebreakIndented, print_exactly(string_append(", ", elmSyntaxPrintDefunctionalized_listMapAndIntersperseAndFlattenToString(elmSyntaxPrintDefunctionalized_expose, ", ", List_List.Cons(remainingExpose0, remainingExpose1Up))))));
                                                     }
                                                    }()),
                                                    print_followedBy(
                                                        print_linebreakIndented,
                                                        print_followedBy(
                                                            print_listMapAndIntersperseAndFlatten(
                                                                { (atDocsLine) in
                                                                    print_exactly(elmSyntaxPrintDefunctionalized_listMapAndIntersperseAndFlattenToString(elmSyntaxPrintDefunctionalized_expose, ", ", atDocsLine))
                                                                },
                                                                elmSyntaxPrintDefunctionalized_printLinebreakIndentedCommaSpace,
                                                                List_List.Cons(atDocsExposeLine0, atDocsExposeLine1Up)
                                                            ),
                                                            elmSyntaxPrintDefunctionalized_printExactlyParensOpeningSpace
                                                        )
                                                    )
                                                );
                                          }
                                         }())
                                        }());

                                    case List_List.Empty:
                                        elmSyntaxPrintDefunctionalized_exposingMulti(context.comments, (expose0: expose0, expose1Up: List_List.Cons(expose1, expose2Up), fullRange: exposingRange));
                                 }
                                }());
                         }
                        }());
                 }
                }());
         }
        }())
    }

    static public func elmSyntaxPrintDefunctionalized_moduleHeader(_ context:
        (atDocsLines: List_List<List_List<String>>,
         comments: List_List<ElmSyntaxNode_Node<String>>
        ), _ syntaxModuleHeader: ElmSyntaxModule_Module) -> Print_Print {
        ({ () in return switch syntaxModuleHeader {
            case let ElmSyntaxModule_Module.NormalModule(defaultModuleData):
                ({ () in let exposingPrint:Print_Print =
                    elmSyntaxPrintDefunctionalized_moduleExposing(context, defaultModuleData.exposingList);

                 let lineSpread:Print_LineSpread =
                    print_lineSpread(exposingPrint);

                 return print_followedBy(print_withIndentAtNextMultipleOf4(print_followedBy(exposingPrint, print_spaceOrLinebreakIndented(lineSpread))), print_exactly(string_append("module ", string_append(elmSyntaxPrintDefunctionalized_moduleName(elmSyntaxNode_value(defaultModuleData.moduleName)), " exposing"))))
                }());

            case let ElmSyntaxModule_Module.PortModule(defaultModuleData):
                ({ () in let exposingPrint:Print_Print =
                    elmSyntaxPrintDefunctionalized_moduleExposing(context, defaultModuleData.exposingList);

                 let lineSpread:Print_LineSpread =
                    print_lineSpread(exposingPrint);

                 return print_followedBy(print_withIndentAtNextMultipleOf4(print_followedBy(exposingPrint, print_spaceOrLinebreakIndented(lineSpread))), print_exactly(string_append("port module ", string_append(elmSyntaxPrintDefunctionalized_moduleName(elmSyntaxNode_value(defaultModuleData.moduleName)), " exposing"))))
                }());

            case let ElmSyntaxModule_Module.EffectModule(effectModuleData):
                ({ () in let exposingPrint:Print_Print =
                    elmSyntaxPrintDefunctionalized_moduleExposing(context, effectModuleData.exposingList);

                 let lineSpread:Print_LineSpread =
                    print_lineSpread(exposingPrint);

                 return print_followedBy(
                    print_withIndentAtNextMultipleOf4(print_followedBy(exposingPrint, print_spaceOrLinebreakIndented(lineSpread))),
                    print_exactly(
                        string_append(
                            "effect module ",
                            string_append(
                                elmSyntaxPrintDefunctionalized_moduleName(elmSyntaxNode_value(effectModuleData.moduleName)),
                                string_append(
                                    " where { ",
                                    string_append(
                                        string_join(
                                            ", ",
                                            list_filterMap(
                                                basics_identity,
                                                List_List.Cons(
                                                    ({ () in return switch effectModuleData.command {
                                                        case Maybe_Maybe.Nothing:
                                                            Maybe_Maybe.Nothing;

                                                        case let Maybe_Maybe.Just(ElmSyntaxNode_Node.Node(_, name)):
                                                            Maybe_Maybe.Just(string_append("command = ", name));
                                                     }
                                                    }()),
                                                    List_List.Cons(
                                                        ({ () in return switch effectModuleData.subscription {
                                                            case Maybe_Maybe.Nothing:
                                                                Maybe_Maybe.Nothing;

                                                            case let Maybe_Maybe.Just(ElmSyntaxNode_Node.Node(_, name)):
                                                                Maybe_Maybe.Just(string_append("subscription = ", name));
                                                         }
                                                        }()),
                                                        List_List.Empty
                                                    )
                                                )
                                            )
                                        ),
                                        " } exposing"
                                    )
                                )
                            )
                        )
                    )
                 )
                }());
         }
        }())
    }

    static public func elmSyntaxPrintDefunctionalized_moduleLevelComments(_ syntaxComments: List_List<String>) -> Print_Print {
        ({ () in return switch syntaxComments {
            case List_List.Empty:
                print_empty;

            case let List_List.Cons(comment0, comment1Up):
                print_followedBy(
                    print_listMapAndFlatten(
                        { (syntaxComment) in
                            ({ () in return switch syntaxComment {
                                case "{--}":
                                    elmSyntaxPrintDefunctionalized_moduleLevelMultiLneCommentWithoutWhitespace;

                                case let notEmptyMultiLineComment:
                                    print_followedBy(print_linebreak, elmSyntaxPrintDefunctionalized_comment(notEmptyMultiLineComment));
                             }
                            }())
                        },
                        comment1Up
                    ),
                    print_followedBy(print_linebreak, elmSyntaxPrintDefunctionalized_comment(comment0))
                );
         }
        }())
    }

    static public func elmSyntaxPrintDefunctionalized_moduleLevelCommentsBeforeDeclaration(_ syntaxComments:
        (comment0: String,
         comment1Up: List_List<String>
        )) -> Print_Print {
        print_followedBy(
            ({ () in return switch elmSyntaxPrintDefunctionalized_listFilledLast(syntaxComments.comment0, syntaxComments.comment1Up) {
                case "{--}":
                    print_empty;

                case _:
                    elmSyntaxPrintDefunctionalized_printLinebreakLinebreak;
             }
            }()),
            print_followedBy(elmSyntaxPrintDefunctionalized_moduleLevelComments(List_List.Cons(syntaxComments.comment0, syntaxComments.comment1Up)), print_linebreak)
        )
    }

    static public let elmSyntaxPrintDefunctionalized_moduleLevelMultiLneCommentWithoutWhitespace:Print_Print =
        print_followedBy(print_linebreak, print_followedBy(elmSyntaxPrintDefunctionalized_printExactlyCurlyOpeningDotDotCurlyClosing, elmSyntaxPrintDefunctionalized_printLinebreakLinebreak));

    static public func elmSyntaxPrintDefunctionalized_moduleName(_ syntaxModuleName: ElmSyntaxModuleName_ModuleName) -> String {
        string_join(".", syntaxModuleName)
    }

    static public func elmSyntaxPrintDefunctionalized_module_(_ syntaxModule: ElmSyntaxFile_File) -> Print_Print {
        ({ () in let maybeModuleDocumentation:Maybe_Maybe<ElmSyntaxNode_Node<String>> =
            elmSyntaxPrintDefunctionalized_moduleDocumentation(syntaxModule);

         let lastSyntaxLocationBeforeDeclarations:ElmSyntaxRange_Location =
            ({ () in return switch syntaxModule.imports {
                case let List_List.Cons(ElmSyntaxNode_Node.Node(firstImportRange, _), _):
                    firstImportRange.end;

                case List_List.Empty:
                    elmSyntaxNode_range(syntaxModule.moduleDefinition).end;
             }
            }());

         let commentsAndPortDocumentationComments:
            (portDocumentationComments: List_List<ElmSyntaxNode_Node<String>>,
             remainingComments: List_List<ElmSyntaxNode_Node<String>>
            ) =
            elmSyntaxPrintDefunctionalized_splitOffPortDocumentationComments(
                ({ () in return switch maybeModuleDocumentation {
                    case Maybe_Maybe.Nothing:
                        syntaxModule.comments;

                    case let Maybe_Maybe.Just(syntaxModuleDocumentation):
                        list_filter(
                            { (c) in
                                basics_neq(c, syntaxModuleDocumentation)
                            },
                            syntaxModule.comments
                        );
                 }
                }())
            );

         let commentsBeforeDeclarations:List_List<String> =
            ({ () in return switch syntaxModule.declarations {
                case List_List.Empty:
                    List_List.Empty;

                case let List_List.Cons(ElmSyntaxNode_Node.Node(declaration0Range, _), _):
                    elmSyntaxPrintDefunctionalized_commentsInRange((end: declaration0Range.start, start: lastSyntaxLocationBeforeDeclarations), commentsAndPortDocumentationComments.remainingComments);
             }
            }());

         let atDocsLines:List_List<List_List<String>> =
            ({ () in return switch maybeModuleDocumentation {
                case Maybe_Maybe.Nothing:
                    List_List.Empty;

                case let Maybe_Maybe.Just(ElmSyntaxNode_Node.Node(_, syntaxModuleDocumentation)):
                    list_map(
                        { (generated_record) in
                            generated_record.atDocsLine
                        },
                        elmSyntaxPrintDefunctionalized_moduleDocumentationParse(syntaxModuleDocumentation).whileAtDocsLines
                    );
             }
            }());

         return print_followedBy(
            ({ () in return switch syntaxModule.declarations {
                case List_List.Empty:
                    print_empty;

                case let List_List.Cons(declaration0, declaration1Up):
                    ({ () in return switch elmSyntaxPrintDefunctionalized_commentsAfter(elmSyntaxNode_range(elmSyntaxPrintDefunctionalized_listFilledLast(declaration0, declaration1Up)).end, commentsAndPortDocumentationComments.remainingComments) {
                        case List_List.Empty:
                            print_empty;

                        case let List_List.Cons(comment0, comment1Up):
                            print_followedBy(elmSyntaxPrintDefunctionalized_moduleLevelComments(List_List.Cons(comment0, comment1Up)), elmSyntaxPrintDefunctionalized_printLinebreakLinebreakLinebreak);
                     }
                    }());
             }
            }()),
            print_followedBy(
                print_linebreak,
                print_followedBy(
                    elmSyntaxPrintDefunctionalized_declarations((otherComments: commentsAndPortDocumentationComments.remainingComments, portDocumentationComments: commentsAndPortDocumentationComments.portDocumentationComments, previousEnd: lastSyntaxLocationBeforeDeclarations), syntaxModule.declarations),
                    print_followedBy(
                        ({ () in return switch commentsBeforeDeclarations {
                            case List_List.Empty:
                                print_empty;

                            case let List_List.Cons(comment0, comment1Up):
                                elmSyntaxPrintDefunctionalized_moduleLevelCommentsBeforeDeclaration((comment0: comment0, comment1Up: comment1Up));
                         }
                        }()),
                        print_followedBy(
                            print_linebreak,
                            print_followedBy(
                                ({ () in return switch syntaxModule.imports {
                                    case List_List.Empty:
                                        ({ () in return switch maybeModuleDocumentation {
                                            case Maybe_Maybe.Nothing:
                                                elmSyntaxPrintDefunctionalized_printLinebreakLinebreak;

                                            case Maybe_Maybe.Just(_):
                                                ({ () in return switch commentsBeforeDeclarations {
                                                    case List_List.Empty:
                                                        elmSyntaxPrintDefunctionalized_printLinebreakLinebreak;

                                                    case List_List.Cons(_, _):
                                                        print_empty;
                                                 }
                                                }());
                                         }
                                        }());

                                    case let List_List.Cons(ElmSyntaxNode_Node.Node(import0Range, import0), import1Up):
                                        print_followedBy(
                                            elmSyntaxPrintDefunctionalized_printLinebreakLinebreak,
                                            print_followedBy(
                                                elmSyntaxPrintDefunctionalized_imports(commentsAndPortDocumentationComments.remainingComments, List_List.Cons(ElmSyntaxNode_Node.Node(import0Range, import0), import1Up)),
                                                print_followedBy(
                                                    print_linebreak,
                                                    ({ () in return switch elmSyntaxPrintDefunctionalized_commentsInRange((end: import0Range.start, start: elmSyntaxNode_range(syntaxModule.moduleDefinition).end), commentsAndPortDocumentationComments.remainingComments) {
                                                        case List_List.Empty:
                                                            print_linebreak;

                                                        case let List_List.Cons(comment0, comment1Up):
                                                            print_followedBy(elmSyntaxPrintDefunctionalized_moduleLevelComments(List_List.Cons(comment0, comment1Up)), elmSyntaxPrintDefunctionalized_printLinebreakLinebreak);
                                                     }
                                                    }())
                                                )
                                            )
                                        );
                                 }
                                }()),
                                print_followedBy(
                                    ({ () in return switch maybeModuleDocumentation {
                                        case Maybe_Maybe.Nothing:
                                            print_empty;

                                        case let Maybe_Maybe.Just(ElmSyntaxNode_Node.Node(_, moduleDocumentationAsString)):
                                            print_followedBy(print_exactly(moduleDocumentationAsString), elmSyntaxPrintDefunctionalized_printLinebreakLinebreak);
                                     }
                                    }()),
                                    elmSyntaxPrintDefunctionalized_moduleHeader((atDocsLines: atDocsLines, comments: commentsAndPortDocumentationComments.remainingComments), elmSyntaxNode_value(syntaxModule.moduleDefinition))
                                )
                            )
                        )
                    )
                )
            )
         )
        }())
    }

    static public func elmSyntaxPrintDefunctionalized_parenthesized<A: Sendable>(_ printNotParenthesized: @Sendable (List_List<ElmSyntaxNode_Node<String>>, ElmSyntaxNode_Node<A>) -> Print_Print, _ syntax:
        (fullRange: ElmSyntaxRange_Range,
         notParenthesized: ElmSyntaxNode_Node<A>
        ), _ syntaxComments: List_List<ElmSyntaxNode_Node<String>>) -> Print_Print {
        ({ () in let notParenthesizedPrint:Print_Print =
            printNotParenthesized(syntaxComments, syntax.notParenthesized);

         let commentsBeforeInner:List_List<String> =
            elmSyntaxPrintDefunctionalized_commentsInRange((end: elmSyntaxNode_range(syntax.notParenthesized).start, start: syntax.fullRange.start), syntaxComments);

         let commentsBeforeInnerCollapsible:
            (lineSpread: Print_LineSpread,
             print: Print_Print
            ) =
            elmSyntaxPrintDefunctionalized_collapsibleComments(commentsBeforeInner);

         let commentsAfterInner:List_List<String> =
            elmSyntaxPrintDefunctionalized_commentsInRange((end: syntax.fullRange.end, start: elmSyntaxNode_range(syntax.notParenthesized).end), syntaxComments);

         let commentsAfterInnerCollapsible:
            (lineSpread: Print_LineSpread,
             print: Print_Print
            ) =
            elmSyntaxPrintDefunctionalized_collapsibleComments(commentsAfterInner);

         let lineSpread:Print_LineSpread =
            print_lineSpreadMergeWithStrict(commentsAfterInnerCollapsible.lineSpread, print_lineSpreadMergeWithStrict(commentsBeforeInnerCollapsible.lineSpread, print_lineSpread(notParenthesizedPrint)));

         return print_followedBy(
            elmSyntaxPrintDefunctionalized_printExactlyParensClosing,
            print_followedBy(
                print_emptyOrLinebreakIndented(lineSpread),
                print_followedBy(
                    print_withIndentIncreasedBy(
                        1.0,
                        print_followedBy(
                            ({ () in return switch commentsAfterInner {
                                case List_List.Empty:
                                    print_empty;

                                case List_List.Cons(_, _):
                                    print_followedBy(commentsAfterInnerCollapsible.print, print_spaceOrLinebreakIndented(lineSpread));
                             }
                            }()),
                            ({ () in return switch commentsBeforeInner {
                                case List_List.Empty:
                                    notParenthesizedPrint;

                                case List_List.Cons(_, _):
                                    print_followedBy(notParenthesizedPrint, print_followedBy(print_spaceOrLinebreakIndented(lineSpread), commentsBeforeInnerCollapsible.print));
                             }
                            }())
                        )
                    ),
                    elmSyntaxPrintDefunctionalized_printExactlyParensOpening
                )
            )
         )
        }())
    }

    static public func elmSyntaxPrintDefunctionalized_patternAs(_ syntaxComments: List_List<ElmSyntaxNode_Node<String>>, _ syntaxAs:
        (aliasNameNode: ElmSyntaxNode_Node<String>,
         aliasedPattern: ElmSyntaxNode_Node<ElmSyntaxPattern_Pattern>
        )) -> Print_Print {
        ({ () in let namePrint:Print_Print =
            print_exactly(elmSyntaxNode_value(syntaxAs.aliasNameNode));

         let commentsBeforeAliasName:List_List<String> =
            elmSyntaxPrintDefunctionalized_commentsInRange((end: elmSyntaxNode_range(syntaxAs.aliasNameNode).start, start: elmSyntaxNode_range(syntaxAs.aliasedPattern).end), syntaxComments);

         let commentsCollapsibleBeforeAliasName:
            (lineSpread: Print_LineSpread,
             print: Print_Print
            ) =
            elmSyntaxPrintDefunctionalized_collapsibleComments(commentsBeforeAliasName);

         let aliasedPatternPrint:Print_Print =
            elmSyntaxPrintDefunctionalized_patternParenthesizedIfSpaceSeparated(syntaxComments, syntaxAs.aliasedPattern);

         let lineSpread:Print_LineSpread =
            print_lineSpreadMergeWith(
                { (_) in
                    print_lineSpread(aliasedPatternPrint)
                },
                commentsCollapsibleBeforeAliasName.lineSpread
            );

         return print_followedBy(
            print_withIndentAtNextMultipleOf4(
                print_followedBy(
                    ({ () in return switch commentsBeforeAliasName {
                        case List_List.Empty:
                            namePrint;

                        case List_List.Cons(_, _):
                            print_followedBy(namePrint, print_followedBy(print_spaceOrLinebreakIndented(commentsCollapsibleBeforeAliasName.lineSpread), commentsCollapsibleBeforeAliasName.print));
                     }
                    }()),
                    print_spaceOrLinebreakIndented(lineSpread)
                )
            ),
            print_followedBy(elmSyntaxPrintDefunctionalized_printExactlyAs, print_followedBy(print_spaceOrLinebreakIndented(lineSpread), aliasedPatternPrint))
         )
        }())
    }

    static public func elmSyntaxPrintDefunctionalized_patternCons(_ syntaxComments: List_List<ElmSyntaxNode_Node<String>>, _ syntaxCons:
        (head: ElmSyntaxNode_Node<ElmSyntaxPattern_Pattern>,
         tail: ElmSyntaxNode_Node<ElmSyntaxPattern_Pattern>
        )) -> Print_Print {
        ({ () in let tailPatterns:List_List<ElmSyntaxNode_Node<ElmSyntaxPattern_Pattern>> =
            elmSyntaxPrintDefunctionalized_patternConsExpand(syntaxCons.tail);

         let tailPatternPrintsAndCommentsBeforeReverse:List_List<Print_Print> =
            list_foldl(
                { (tailPatternNode, soFar) in
                    ({ () in let print:Print_Print =
                        elmSyntaxPrintDefunctionalized_patternParenthesizedIfSpaceSeparated(syntaxComments, tailPatternNode);

                     return ({ () in return switch tailPatternNode {
                        case let ElmSyntaxNode_Node.Node(tailPatternRange, _):
                            (endLocation: tailPatternRange.end,
                             reverse:
                                List_List.Cons(
                                    ({ () in return switch elmSyntaxPrintDefunctionalized_commentsInRange((end: tailPatternRange.start, start: soFar.endLocation), syntaxComments) {
                                        case List_List.Empty:
                                            print;

                                        case let List_List.Cons(comment0, comment1Up):
                                            ({ () in let commentsBefore:
                                                (lineSpread: Print_LineSpread,
                                                 print: Print_Print
                                                ) =
                                                elmSyntaxPrintDefunctionalized_collapsibleComments(List_List.Cons(comment0, comment1Up));

                                             return print_followedBy(
                                                print,
                                                print_followedBy(
                                                    print_spaceOrLinebreakIndented(
                                                        print_lineSpreadMergeWith(
                                                            { (_) in
                                                                print_lineSpread(print)
                                                            },
                                                            commentsBefore.lineSpread
                                                        )
                                                    ),
                                                    commentsBefore.print
                                                )
                                             )
                                            }());
                                     }
                                    }()),
                                    soFar.reverse
                                )
                            );
                      }
                     }())
                    }())
                },
                (endLocation: elmSyntaxNode_range(syntaxCons.head).end, reverse: List_List.Empty),
                tailPatterns
            ).reverse;

         let headPrint:Print_Print =
            elmSyntaxPrintDefunctionalized_patternParenthesizedIfSpaceSeparated(syntaxComments, syntaxCons.head);

         let lineSpread:Print_LineSpread =
            print_lineSpreadMergeWith(
                { (_) in
                    print_lineSpreadListMapAndCombine(print_lineSpread, tailPatternPrintsAndCommentsBeforeReverse)
                },
                print_lineSpread(headPrint)
            );

         return print_followedBy(
            print_withIndentAtNextMultipleOf4(
                print_followedBy(
                    print_listReverseAndMapAndIntersperseAndFlatten(
                        { (tailPatternElementPrintWithCommentsBefore) in
                            print_followedBy(print_withIndentIncreasedBy(3.0, tailPatternElementPrintWithCommentsBefore), elmSyntaxPrintDefunctionalized_printExactlyColonColonSpace)
                        },
                        print_spaceOrLinebreakIndented(lineSpread),
                        tailPatternPrintsAndCommentsBeforeReverse
                    ),
                    print_spaceOrLinebreakIndented(lineSpread)
                )
            ),
            headPrint
         )
        }())
    }

    static public func elmSyntaxPrintDefunctionalized_patternConsExpand(_ generated_fulRange_syntaxPattern: ElmSyntaxNode_Node<ElmSyntaxPattern_Pattern>) -> List_List<ElmSyntaxNode_Node<ElmSyntaxPattern_Pattern>> {
        ({ () in return switch (generated_fulRange_syntaxPattern: generated_fulRange_syntaxPattern, unusedDummyFieldToMakeSwiftHappy: ()) {
            case let (generated_fulRange_syntaxPattern: ElmSyntaxNode_Node.Node(fulRange, syntaxPattern), unusedDummyFieldToMakeSwiftHappy: ()):
                ({ () in return switch syntaxPattern {
                    case let ElmSyntaxPattern_Pattern.UnConsPattern(headPattern, tailPattern):
                        List_List.Cons(headPattern, elmSyntaxPrintDefunctionalized_patternConsExpand(tailPattern));

                    case ElmSyntaxPattern_Pattern.AllPattern:
                        List_List.Cons(ElmSyntaxNode_Node.Node(fulRange, ElmSyntaxPattern_Pattern.AllPattern), List_List.Empty);

                    case ElmSyntaxPattern_Pattern.UnitPattern:
                        List_List.Cons(ElmSyntaxNode_Node.Node(fulRange, ElmSyntaxPattern_Pattern.UnitPattern), List_List.Empty);

                    case let ElmSyntaxPattern_Pattern.CharPattern(char):
                        List_List.Cons(ElmSyntaxNode_Node.Node(fulRange, ElmSyntaxPattern_Pattern.CharPattern(char)), List_List.Empty);

                    case let ElmSyntaxPattern_Pattern.StringPattern(string):
                        List_List.Cons(ElmSyntaxNode_Node.Node(fulRange, ElmSyntaxPattern_Pattern.StringPattern(string)), List_List.Empty);

                    case let ElmSyntaxPattern_Pattern.IntPattern(int):
                        List_List.Cons(ElmSyntaxNode_Node.Node(fulRange, ElmSyntaxPattern_Pattern.IntPattern(int)), List_List.Empty);

                    case let ElmSyntaxPattern_Pattern.HexPattern(int):
                        List_List.Cons(ElmSyntaxNode_Node.Node(fulRange, ElmSyntaxPattern_Pattern.HexPattern(int)), List_List.Empty);

                    case let ElmSyntaxPattern_Pattern.FloatPattern(float):
                        List_List.Cons(ElmSyntaxNode_Node.Node(fulRange, ElmSyntaxPattern_Pattern.FloatPattern(float)), List_List.Empty);

                    case let ElmSyntaxPattern_Pattern.TuplePattern(parts):
                        ({ () in return switch parts {
                            case let List_List.Cons(part0, List_List.Cons(part1, List_List.Empty)):
                                List_List.Cons(ElmSyntaxNode_Node.Node(fulRange, ElmSyntaxPattern_Pattern.TuplePattern(List_List.Cons(part0, List_List.Cons(part1, List_List.Empty)))), List_List.Empty);

                            case let List_List.Cons(part0, List_List.Cons(part1, List_List.Cons(part2, List_List.Empty))):
                                List_List.Cons(ElmSyntaxNode_Node.Node(fulRange, ElmSyntaxPattern_Pattern.TuplePattern(List_List.Cons(part0, List_List.Cons(part1, List_List.Cons(part2, List_List.Empty))))), List_List.Empty);

                            case List_List.Empty:
                                List_List.Cons(ElmSyntaxNode_Node.Node(fulRange, ElmSyntaxPattern_Pattern.UnitPattern), List_List.Empty);

                            case let List_List.Cons(inParens, List_List.Empty):
                                List_List.Cons(ElmSyntaxNode_Node.Node(fulRange, ElmSyntaxPattern_Pattern.TuplePattern(List_List.Cons(inParens, List_List.Empty))), List_List.Empty);

                            case let List_List.Cons(part0, List_List.Cons(part1, List_List.Cons(part2, List_List.Cons(part3, part4Up)))):
                                List_List.Cons(ElmSyntaxNode_Node.Node(fulRange, ElmSyntaxPattern_Pattern.TuplePattern(List_List.Cons(part0, List_List.Cons(part1, List_List.Cons(part2, List_List.Cons(part3, part4Up)))))), List_List.Empty);
                         }
                        }());

                    case let ElmSyntaxPattern_Pattern.RecordPattern(fields):
                        List_List.Cons(ElmSyntaxNode_Node.Node(fulRange, ElmSyntaxPattern_Pattern.RecordPattern(fields)), List_List.Empty);

                    case let ElmSyntaxPattern_Pattern.ListPattern(elements):
                        List_List.Cons(ElmSyntaxNode_Node.Node(fulRange, ElmSyntaxPattern_Pattern.ListPattern(elements)), List_List.Empty);

                    case let ElmSyntaxPattern_Pattern.VarPattern(variableName):
                        List_List.Cons(ElmSyntaxNode_Node.Node(fulRange, ElmSyntaxPattern_Pattern.VarPattern(variableName)), List_List.Empty);

                    case let ElmSyntaxPattern_Pattern.NamedPattern(reference, parameters):
                        List_List.Cons(ElmSyntaxNode_Node.Node(fulRange, ElmSyntaxPattern_Pattern.NamedPattern(reference, parameters)), List_List.Empty);

                    case let ElmSyntaxPattern_Pattern.AsPattern(aliasedPattern, aliasName):
                        List_List.Cons(ElmSyntaxNode_Node.Node(fulRange, ElmSyntaxPattern_Pattern.AsPattern(aliasedPattern, aliasName)), List_List.Empty);

                    case let ElmSyntaxPattern_Pattern.ParenthesizedPattern(inParens):
                        List_List.Cons(ElmSyntaxNode_Node.Node(fulRange, ElmSyntaxPattern_Pattern.ParenthesizedPattern(inParens)), List_List.Empty);
                 }
                }());
         }
        }())
    }

    static public func elmSyntaxPrintDefunctionalized_patternIsSpaceSeparated(_ syntaxPattern: ElmSyntaxPattern_Pattern) -> Bool {
        ({ () in return switch syntaxPattern {
            case ElmSyntaxPattern_Pattern.AllPattern:
                false;

            case ElmSyntaxPattern_Pattern.UnitPattern:
                false;

            case ElmSyntaxPattern_Pattern.VarPattern(_):
                false;

            case ElmSyntaxPattern_Pattern.CharPattern(_):
                false;

            case ElmSyntaxPattern_Pattern.StringPattern(_):
                false;

            case ElmSyntaxPattern_Pattern.IntPattern(_):
                false;

            case ElmSyntaxPattern_Pattern.HexPattern(_):
                false;

            case ElmSyntaxPattern_Pattern.FloatPattern(_):
                false;

            case let ElmSyntaxPattern_Pattern.ParenthesizedPattern(ElmSyntaxNode_Node.Node(_, inParens)):
                elmSyntaxPrintDefunctionalized_patternIsSpaceSeparated(inParens);

            case let ElmSyntaxPattern_Pattern.TuplePattern(parts):
                ({ () in return switch parts {
                    case let List_List.Cons(ElmSyntaxNode_Node.Node(_, inParens), List_List.Empty):
                        elmSyntaxPrintDefunctionalized_patternIsSpaceSeparated(inParens);

                    case List_List.Empty:
                        false;

                    case List_List.Cons(_, List_List.Cons(_, List_List.Empty)):
                        false;

                    case List_List.Cons(_, List_List.Cons(_, List_List.Cons(_, List_List.Empty))):
                        false;

                    case List_List.Cons(_, List_List.Cons(_, List_List.Cons(_, List_List.Cons(_, _)))):
                        false;
                 }
                }());

            case ElmSyntaxPattern_Pattern.RecordPattern(_):
                false;

            case ElmSyntaxPattern_Pattern.UnConsPattern(_, _):
                true;

            case ElmSyntaxPattern_Pattern.ListPattern(_):
                false;

            case let ElmSyntaxPattern_Pattern.NamedPattern(_, argumentPatterns):
                ({ () in return switch argumentPatterns {
                    case List_List.Empty:
                        false;

                    case List_List.Cons(_, _):
                        true;
                 }
                }());

            case ElmSyntaxPattern_Pattern.AsPattern(_, _):
                true;
         }
        }())
    }

    static public func elmSyntaxPrintDefunctionalized_patternList(_ syntaxComments: List_List<ElmSyntaxNode_Node<String>>, _ syntaxList:
        (elements: List_List<ElmSyntaxNode_Node<ElmSyntaxPattern_Pattern>>,
         fullRange: ElmSyntaxRange_Range
        )) -> Print_Print {
        ({ () in return switch syntaxList.elements {
            case List_List.Empty:
                print_followedBy(
                    ({ () in return switch elmSyntaxPrintDefunctionalized_commentsInRange(syntaxList.fullRange, syntaxComments) {
                        case List_List.Empty:
                            elmSyntaxPrintDefunctionalized_printExactlySquareClosing;

                        case let List_List.Cons(comment0, comment1Up):
                            ({ () in let commentsCollapsed:
                                (lineSpread: Print_LineSpread,
                                 print: Print_Print
                                ) =
                                elmSyntaxPrintDefunctionalized_collapsibleComments(List_List.Cons(comment0, comment1Up));

                             return print_followedBy(elmSyntaxPrintDefunctionalized_printExactlySquareClosing, print_followedBy(print_emptyOrLinebreakIndented(commentsCollapsed.lineSpread), print_withIndentIncreasedBy(1.0, commentsCollapsed.print)))
                            }());
                     }
                    }()),
                    elmSyntaxPrintDefunctionalized_printExactlySquareOpening
                );

            case let List_List.Cons(element0, element1Up):
                ({ () in let elementPrintsWithCommentsBefore:
                    (endLocation: ElmSyntaxRange_Location,
                     reverse: List_List<Print_Print>
                    ) =
                    list_foldl(
                        { (elementNode, soFar) in
                            ({ () in let elementPrint:Print_Print =
                                elmSyntaxPrintDefunctionalized_patternNotParenthesized(syntaxComments, elementNode);

                             return ({ () in return switch elementNode {
                                case let ElmSyntaxNode_Node.Node(elementRange, _):
                                    (endLocation: elementRange.end,
                                     reverse:
                                        List_List.Cons(
                                            ({ () in return switch elmSyntaxPrintDefunctionalized_commentsInRange((end: elementRange.start, start: soFar.endLocation), syntaxComments) {
                                                case List_List.Empty:
                                                    elementPrint;

                                                case let List_List.Cons(comment0, comment1Up):
                                                    ({ () in let commentsBeforeElement:
                                                        (lineSpread: Print_LineSpread,
                                                         print: Print_Print
                                                        ) =
                                                        elmSyntaxPrintDefunctionalized_collapsibleComments(List_List.Cons(comment0, comment1Up));

                                                     return print_followedBy(
                                                        elementPrint,
                                                        print_followedBy(
                                                            print_spaceOrLinebreakIndented(
                                                                print_lineSpreadMergeWith(
                                                                    { (_) in
                                                                        print_lineSpread(elementPrint)
                                                                    },
                                                                    commentsBeforeElement.lineSpread
                                                                )
                                                            ),
                                                            commentsBeforeElement.print
                                                        )
                                                     )
                                                    }());
                                             }
                                            }()),
                                            soFar.reverse
                                        )
                                    );
                              }
                             }())
                            }())
                        },
                        (endLocation: syntaxList.fullRange.start, reverse: List_List.Empty),
                        List_List.Cons(element0, element1Up)
                    );

                 let commentsAfterElements:
                    Maybe_Maybe<
                        (lineSpread: Print_LineSpread,
                         print: Print_Print
                        )
                    > =
                    ({ () in return switch elmSyntaxPrintDefunctionalized_commentsInRange((end: syntaxList.fullRange.end, start: elementPrintsWithCommentsBefore.endLocation), syntaxComments) {
                        case List_List.Empty:
                            Maybe_Maybe.Nothing;

                        case let List_List.Cons(comment0, comment1Up):
                            Maybe_Maybe.Just(elmSyntaxPrintDefunctionalized_collapsibleComments(List_List.Cons(comment0, comment1Up)));
                     }
                    }());

                 let lineSpread:Print_LineSpread =
                    print_lineSpreadMergeWith(
                        { (_) in
                            elmSyntaxPrintDefunctionalized_maybeLineSpread(
                                { (generated_record) in
                                    generated_record.lineSpread
                                },
                                commentsAfterElements
                            )
                        },
                        print_lineSpreadListMapAndCombine(print_lineSpread, elementPrintsWithCommentsBefore.reverse)
                    );

                 return print_followedBy(
                    elmSyntaxPrintDefunctionalized_printExactlySquareClosing,
                    print_followedBy(
                        ({ () in return switch commentsAfterElements {
                            case Maybe_Maybe.Nothing:
                                print_spaceOrLinebreakIndented(lineSpread);

                            case let Maybe_Maybe.Just(commentsCollapsibleAfterElements):
                                print_followedBy(print_spaceOrLinebreakIndented(lineSpread), print_withIndentIncreasedBy(2.0, print_followedBy(commentsCollapsibleAfterElements.print, print_spaceOrLinebreakIndented(lineSpread))));
                         }
                        }()),
                        print_followedBy(
                            print_listReverseAndMapAndIntersperseAndFlatten(
                                { (elementPrintWithCommentsBefore) in
                                    print_withIndentIncreasedBy(2.0, elementPrintWithCommentsBefore)
                                },
                                print_followedBy(elmSyntaxPrintDefunctionalized_printExactlyCommaSpace, print_emptyOrLinebreakIndented(lineSpread)),
                                elementPrintsWithCommentsBefore.reverse
                            ),
                            elmSyntaxPrintDefunctionalized_printExactlySquareOpeningSpace
                        )
                    )
                 )
                }());
         }
        }())
    }

    static public func elmSyntaxPrintDefunctionalized_patternNotParenthesized(_ syntaxComments: List_List<ElmSyntaxNode_Node<String>>, _ generated_fullRange_syntaxPattern: ElmSyntaxNode_Node<ElmSyntaxPattern_Pattern>) -> Print_Print {
        ({ () in return switch (generated_fullRange_syntaxPattern: generated_fullRange_syntaxPattern, unusedDummyFieldToMakeSwiftHappy: ()) {
            case let (generated_fullRange_syntaxPattern: ElmSyntaxNode_Node.Node(fullRange, syntaxPattern), unusedDummyFieldToMakeSwiftHappy: ()):
                ({ () in return switch syntaxPattern {
                    case ElmSyntaxPattern_Pattern.AllPattern:
                        elmSyntaxPrintDefunctionalized_printExactlyUnderscore;

                    case ElmSyntaxPattern_Pattern.UnitPattern:
                        elmSyntaxPrintDefunctionalized_printExactlyParensOpeningParensClosed;

                    case let ElmSyntaxPattern_Pattern.VarPattern(name):
                        print_exactly(name);

                    case let ElmSyntaxPattern_Pattern.CharPattern(char):
                        print_exactly(elmSyntaxPrintDefunctionalized_charLiteral(char));

                    case let ElmSyntaxPattern_Pattern.StringPattern(string):
                        elmSyntaxPrintDefunctionalized_stringLiteral(ElmSyntaxNode_Node.Node(fullRange, string));

                    case let ElmSyntaxPattern_Pattern.IntPattern(int):
                        print_exactly(elmSyntaxPrintDefunctionalized_intLiteral(int));

                    case let ElmSyntaxPattern_Pattern.HexPattern(int):
                        print_exactly(elmSyntaxPrintDefunctionalized_hexLiteral(int));

                    case let ElmSyntaxPattern_Pattern.FloatPattern(float):
                        print_exactly(string_fromFloat(float));

                    case let ElmSyntaxPattern_Pattern.ParenthesizedPattern(inParens):
                        ({ () in let commentsBeforeInParens:List_List<String> =
                            elmSyntaxPrintDefunctionalized_commentsInRange((end: elmSyntaxNode_range(inParens).start, start: fullRange.start), syntaxComments);

                         let commentsAfterInParens:List_List<String> =
                            elmSyntaxPrintDefunctionalized_commentsInRange((end: fullRange.end, start: elmSyntaxNode_range(inParens).end), syntaxComments);

                         return ({ () in return switch (first: commentsBeforeInParens, second: commentsAfterInParens) {
                            case (first: List_List.Empty, second: List_List.Empty):
                                elmSyntaxPrintDefunctionalized_patternNotParenthesized(syntaxComments, inParens);

                            case _:
                                elmSyntaxPrintDefunctionalized_parenthesized(elmSyntaxPrintDefunctionalized_patternNotParenthesized, (fullRange: fullRange, notParenthesized: elmSyntaxPrintDefunctionalized_patternToNotParenthesized(inParens)), syntaxComments);
                          }
                         }())
                        }());

                    case let ElmSyntaxPattern_Pattern.TuplePattern(parts):
                        ({ () in return switch parts {
                            case let List_List.Cons(part0, List_List.Cons(part1, List_List.Empty)):
                                elmSyntaxPrintDefunctionalized_tuple((lineSpreadMinimum: Print_LineSpread.SingleLine, printPartNotParenthesized: elmSyntaxPrintDefunctionalized_patternNotParenthesized), syntaxComments, (fullRange: fullRange, part0: part0, part1: part1));

                            case let List_List.Cons(part0, List_List.Cons(part1, List_List.Cons(part2, List_List.Empty))):
                                elmSyntaxPrintDefunctionalized_triple((lineSpreadMinimum: Print_LineSpread.SingleLine, printPartNotParenthesized: elmSyntaxPrintDefunctionalized_patternNotParenthesized), syntaxComments, (fullRange: fullRange, part0: part0, part1: part1, part2: part2));

                            case List_List.Empty:
                                elmSyntaxPrintDefunctionalized_printExactlyParensOpeningParensClosed;

                            case let List_List.Cons(inParens, List_List.Empty):
                                ({ () in let commentsBeforeInParens:List_List<String> =
                                    elmSyntaxPrintDefunctionalized_commentsInRange((end: elmSyntaxNode_range(inParens).start, start: fullRange.start), syntaxComments);

                                 let commentsAfterInParens:List_List<String> =
                                    elmSyntaxPrintDefunctionalized_commentsInRange((end: fullRange.end, start: elmSyntaxNode_range(inParens).end), syntaxComments);

                                 return ({ () in return switch (first: commentsBeforeInParens, second: commentsAfterInParens) {
                                    case (first: List_List.Empty, second: List_List.Empty):
                                        elmSyntaxPrintDefunctionalized_patternNotParenthesized(syntaxComments, inParens);

                                    case _:
                                        elmSyntaxPrintDefunctionalized_parenthesized(elmSyntaxPrintDefunctionalized_patternNotParenthesized, (fullRange: fullRange, notParenthesized: elmSyntaxPrintDefunctionalized_patternToNotParenthesized(inParens)), syntaxComments);
                                  }
                                 }())
                                }());

                            case let List_List.Cons(part0, List_List.Cons(part1, List_List.Cons(part2, List_List.Cons(part3, part4Up)))):
                                elmSyntaxPrintDefunctionalized_invalidNTuple(elmSyntaxPrintDefunctionalized_patternNotParenthesized, syntaxComments, (fullRange: fullRange, part0: part0, part1: part1, part2: part2, part3: part3, part4Up: part4Up));
                         }
                        }());

                    case let ElmSyntaxPattern_Pattern.RecordPattern(fields):
                        elmSyntaxPrintDefunctionalized_patternRecord(syntaxComments, (fields: fields, fullRange: fullRange));

                    case let ElmSyntaxPattern_Pattern.UnConsPattern(headPattern, tailPattern):
                        elmSyntaxPrintDefunctionalized_patternCons(syntaxComments, (head: headPattern, tail: tailPattern));

                    case let ElmSyntaxPattern_Pattern.ListPattern(elementPatterns):
                        elmSyntaxPrintDefunctionalized_patternList(syntaxComments, (elements: elementPatterns, fullRange: fullRange));

                    case let ElmSyntaxPattern_Pattern.NamedPattern(syntaxQualifiedNameRef, argumentPatterns):
                        elmSyntaxPrintDefunctionalized_construct((lineSpreadMinimum: Print_LineSpread.SingleLine, printArgumentParenthesizedIfSpaceSeparated: elmSyntaxPrintDefunctionalized_patternParenthesizedIfSpaceSeparated), syntaxComments, (arguments: argumentPatterns, fullRange: fullRange, start: elmSyntaxPrintDefunctionalized_qualifiedReference((qualification: syntaxQualifiedNameRef.moduleName, unqualified: syntaxQualifiedNameRef.name))));

                    case let ElmSyntaxPattern_Pattern.AsPattern(aliasedPattern, aliasNameNode):
                        elmSyntaxPrintDefunctionalized_patternAs(syntaxComments, (aliasNameNode: aliasNameNode, aliasedPattern: aliasedPattern));
                 }
                }());
         }
        }())
    }

    static public func elmSyntaxPrintDefunctionalized_patternParenthesized(_ syntaxComments: List_List<ElmSyntaxNode_Node<String>>, _ patternNode: ElmSyntaxNode_Node<ElmSyntaxPattern_Pattern>) -> Print_Print {
        elmSyntaxPrintDefunctionalized_parenthesized(elmSyntaxPrintDefunctionalized_patternNotParenthesized, (fullRange: elmSyntaxNode_range(patternNode), notParenthesized: elmSyntaxPrintDefunctionalized_patternToNotParenthesized(patternNode)), syntaxComments)
    }

    static public func elmSyntaxPrintDefunctionalized_patternParenthesizedIfSpaceSeparated(_ syntaxComments: List_List<ElmSyntaxNode_Node<String>>, _ syntaxPattern: ElmSyntaxNode_Node<ElmSyntaxPattern_Pattern>) -> Print_Print {
        ({ () in return switch elmSyntaxPrintDefunctionalized_patternIsSpaceSeparated(elmSyntaxNode_value(syntaxPattern)) {
            case true:
                elmSyntaxPrintDefunctionalized_patternParenthesized(syntaxComments, syntaxPattern);

            case false:
                elmSyntaxPrintDefunctionalized_patternNotParenthesized(syntaxComments, syntaxPattern);
         }
        }())
    }

    static public func elmSyntaxPrintDefunctionalized_patternRecord(_ syntaxComments: List_List<ElmSyntaxNode_Node<String>>, _ syntaxRecord:
        (fields: List_List<ElmSyntaxNode_Node<String>>,
         fullRange: ElmSyntaxRange_Range
        )) -> Print_Print {
        ({ () in return switch syntaxRecord.fields {
            case List_List.Empty:
                print_followedBy(
                    ({ () in return switch elmSyntaxPrintDefunctionalized_commentsInRange(syntaxRecord.fullRange, syntaxComments) {
                        case List_List.Empty:
                            elmSyntaxPrintDefunctionalized_printExactlyCurlyClosing;

                        case let List_List.Cons(comment0, comment1Up):
                            ({ () in let commentsCollapsed:
                                (lineSpread: Print_LineSpread,
                                 print: Print_Print
                                ) =
                                elmSyntaxPrintDefunctionalized_collapsibleComments(List_List.Cons(comment0, comment1Up));

                             return print_followedBy(elmSyntaxPrintDefunctionalized_printExactlyCurlyClosing, print_followedBy(print_emptyOrLinebreakIndented(commentsCollapsed.lineSpread), print_withIndentIncreasedBy(1.0, commentsCollapsed.print)))
                            }());
                     }
                    }()),
                    elmSyntaxPrintDefunctionalized_printExactlyCurlyOpening
                );

            case let List_List.Cons(field0, field1Up):
                ({ () in let fieldPrintsWithCommentsBefore:
                    (endLocation: ElmSyntaxRange_Location,
                     reverse: List_List<Print_Print>
                    ) =
                    list_foldl(
                        { (generated_elementRange_fieldName, soFar) in
                            ({ () in return switch (generated_elementRange_fieldName: generated_elementRange_fieldName, unusedDummyFieldToMakeSwiftHappy: ()) {
                                case let (generated_elementRange_fieldName: ElmSyntaxNode_Node.Node(elementRange, fieldName), unusedDummyFieldToMakeSwiftHappy: ()):
                                    (endLocation: elementRange.end,
                                     reverse:
                                        List_List.Cons(
                                            ({ () in return switch elmSyntaxPrintDefunctionalized_commentsInRange((end: elementRange.start, start: soFar.endLocation), syntaxComments) {
                                                case List_List.Empty:
                                                    print_exactly(fieldName);

                                                case let List_List.Cons(comment0, comment1Up):
                                                    ({ () in let commentsBefore:
                                                        (lineSpread: Print_LineSpread,
                                                         print: Print_Print
                                                        ) =
                                                        elmSyntaxPrintDefunctionalized_collapsibleComments(List_List.Cons(comment0, comment1Up));

                                                     return print_followedBy(print_exactly(fieldName), print_followedBy(print_spaceOrLinebreakIndented(commentsBefore.lineSpread), commentsBefore.print))
                                                    }());
                                             }
                                            }()),
                                            soFar.reverse
                                        )
                                    );
                             }
                            }())
                        },
                        (endLocation: syntaxRecord.fullRange.start, reverse: List_List.Empty),
                        List_List.Cons(field0, field1Up)
                    );

                 let maybeCommentsAfterFields:
                    Maybe_Maybe<
                        (lineSpread: Print_LineSpread,
                         print: Print_Print
                        )
                    > =
                    ({ () in return switch elmSyntaxPrintDefunctionalized_commentsInRange((end: syntaxRecord.fullRange.end, start: fieldPrintsWithCommentsBefore.endLocation), syntaxComments) {
                        case List_List.Empty:
                            Maybe_Maybe.Nothing;

                        case let List_List.Cons(comment0, comment1Up):
                            Maybe_Maybe.Just(elmSyntaxPrintDefunctionalized_collapsibleComments(List_List.Cons(comment0, comment1Up)));
                     }
                    }());

                 let lineSpread:Print_LineSpread =
                    print_lineSpreadMergeWith(
                        { (_) in
                            elmSyntaxPrintDefunctionalized_maybeLineSpread(
                                { (generated_record) in
                                    generated_record.lineSpread
                                },
                                maybeCommentsAfterFields
                            )
                        },
                        print_lineSpreadListMapAndCombine(print_lineSpread, fieldPrintsWithCommentsBefore.reverse)
                    );

                 return print_followedBy(
                    elmSyntaxPrintDefunctionalized_printExactlyCurlyClosing,
                    print_followedBy(
                        ({ () in return switch maybeCommentsAfterFields {
                            case Maybe_Maybe.Nothing:
                                print_spaceOrLinebreakIndented(lineSpread);

                            case let Maybe_Maybe.Just(commentsAfterFields):
                                print_followedBy(print_spaceOrLinebreakIndented(lineSpread), print_withIndentIncreasedBy(2.0, print_followedBy(commentsAfterFields.print, print_spaceOrLinebreakIndented(lineSpread))));
                         }
                        }()),
                        print_followedBy(
                            print_listReverseAndMapAndIntersperseAndFlatten(
                                { (fieldPrintWithComments) in
                                    print_withIndentIncreasedBy(2.0, fieldPrintWithComments)
                                },
                                print_followedBy(elmSyntaxPrintDefunctionalized_printExactlyCommaSpace, print_emptyOrLinebreakIndented(lineSpread)),
                                fieldPrintsWithCommentsBefore.reverse
                            ),
                            elmSyntaxPrintDefunctionalized_printExactlyCurlyOpeningSpace
                        )
                    )
                 )
                }());
         }
        }())
    }

    static public func elmSyntaxPrintDefunctionalized_patternToNotParenthesized(_ generated_fullRange_syntaxPattern: ElmSyntaxNode_Node<ElmSyntaxPattern_Pattern>) -> ElmSyntaxNode_Node<ElmSyntaxPattern_Pattern> {
        ({ () in return switch (generated_fullRange_syntaxPattern: generated_fullRange_syntaxPattern, unusedDummyFieldToMakeSwiftHappy: ()) {
            case let (generated_fullRange_syntaxPattern: ElmSyntaxNode_Node.Node(fullRange, syntaxPattern), unusedDummyFieldToMakeSwiftHappy: ()):
                ({ () in return switch syntaxPattern {
                    case let ElmSyntaxPattern_Pattern.ParenthesizedPattern(inParens):
                        elmSyntaxPrintDefunctionalized_patternToNotParenthesized(inParens);

                    case let ElmSyntaxPattern_Pattern.TuplePattern(parts):
                        ({ () in return switch parts {
                            case let List_List.Cons(inParens, List_List.Empty):
                                elmSyntaxPrintDefunctionalized_patternToNotParenthesized(inParens);

                            case let List_List.Cons(part0, List_List.Cons(part1, List_List.Empty)):
                                ElmSyntaxNode_Node.Node(fullRange, ElmSyntaxPattern_Pattern.TuplePattern(List_List.Cons(part0, List_List.Cons(part1, List_List.Empty))));

                            case let List_List.Cons(part0, List_List.Cons(part1, List_List.Cons(part2, List_List.Empty))):
                                ElmSyntaxNode_Node.Node(fullRange, ElmSyntaxPattern_Pattern.TuplePattern(List_List.Cons(part0, List_List.Cons(part1, List_List.Cons(part2, List_List.Empty)))));

                            case List_List.Empty:
                                ElmSyntaxNode_Node.Node(fullRange, ElmSyntaxPattern_Pattern.UnitPattern);

                            case let List_List.Cons(part0, List_List.Cons(part1, List_List.Cons(part2, List_List.Cons(part3, part4Up)))):
                                ElmSyntaxNode_Node.Node(fullRange, ElmSyntaxPattern_Pattern.TuplePattern(List_List.Cons(part0, List_List.Cons(part1, List_List.Cons(part2, List_List.Cons(part3, part4Up))))));
                         }
                        }());

                    case ElmSyntaxPattern_Pattern.AllPattern:
                        ElmSyntaxNode_Node.Node(fullRange, ElmSyntaxPattern_Pattern.AllPattern);

                    case ElmSyntaxPattern_Pattern.UnitPattern:
                        ElmSyntaxNode_Node.Node(fullRange, ElmSyntaxPattern_Pattern.UnitPattern);

                    case let ElmSyntaxPattern_Pattern.VarPattern(name):
                        ElmSyntaxNode_Node.Node(fullRange, ElmSyntaxPattern_Pattern.VarPattern(name));

                    case let ElmSyntaxPattern_Pattern.CharPattern(char):
                        ElmSyntaxNode_Node.Node(fullRange, ElmSyntaxPattern_Pattern.CharPattern(char));

                    case let ElmSyntaxPattern_Pattern.StringPattern(string):
                        ElmSyntaxNode_Node.Node(fullRange, ElmSyntaxPattern_Pattern.StringPattern(string));

                    case let ElmSyntaxPattern_Pattern.IntPattern(int):
                        ElmSyntaxNode_Node.Node(fullRange, ElmSyntaxPattern_Pattern.IntPattern(int));

                    case let ElmSyntaxPattern_Pattern.HexPattern(int):
                        ElmSyntaxNode_Node.Node(fullRange, ElmSyntaxPattern_Pattern.HexPattern(int));

                    case let ElmSyntaxPattern_Pattern.FloatPattern(float):
                        ElmSyntaxNode_Node.Node(fullRange, ElmSyntaxPattern_Pattern.FloatPattern(float));

                    case let ElmSyntaxPattern_Pattern.RecordPattern(fields):
                        ElmSyntaxNode_Node.Node(fullRange, ElmSyntaxPattern_Pattern.RecordPattern(fields));

                    case let ElmSyntaxPattern_Pattern.UnConsPattern(headPattern, tailPattern):
                        ElmSyntaxNode_Node.Node(fullRange, ElmSyntaxPattern_Pattern.UnConsPattern(headPattern, tailPattern));

                    case let ElmSyntaxPattern_Pattern.ListPattern(elementPatterns):
                        ElmSyntaxNode_Node.Node(fullRange, ElmSyntaxPattern_Pattern.ListPattern(elementPatterns));

                    case let ElmSyntaxPattern_Pattern.NamedPattern(syntaxQualifiedNameRef, argumentPatterns):
                        ElmSyntaxNode_Node.Node(fullRange, ElmSyntaxPattern_Pattern.NamedPattern(syntaxQualifiedNameRef, argumentPatterns));

                    case let ElmSyntaxPattern_Pattern.AsPattern(aliasedPattern, aliasNameNode):
                        ElmSyntaxNode_Node.Node(fullRange, ElmSyntaxPattern_Pattern.AsPattern(aliasedPattern, aliasNameNode));
                 }
                }());
         }
        }())
    }

    static public let elmSyntaxPrintDefunctionalized_printEmptyLineSpreadSingleLine:
        (lineSpread: Print_LineSpread,
         print: Print_Print
        ) =
        (lineSpread: Print_LineSpread.SingleLine, print: print_empty);

    static public let elmSyntaxPrintDefunctionalized_printEqualsLinebreakIndented:Print_Print =
        print_followedBy(print_linebreakIndented, elmSyntaxPrintDefunctionalized_printExactlyEquals);

    static public let elmSyntaxPrintDefunctionalized_printExactImport:Print_Print =
        print_exactly("import");

    static public let elmSyntaxPrintDefunctionalized_printExactlyAs:Print_Print =
        print_exactly("as");

    static public let elmSyntaxPrintDefunctionalized_printExactlyBackSlash:Print_Print =
        print_exactly("\\");

    static public let elmSyntaxPrintDefunctionalized_printExactlyCase:Print_Print =
        print_exactly("case");

    static public let elmSyntaxPrintDefunctionalized_printExactlyColonColonSpace:Print_Print =
        print_exactly(":: ");

    static public let elmSyntaxPrintDefunctionalized_printExactlyCommaSpace:Print_Print =
        print_exactly(", ");

    static public let elmSyntaxPrintDefunctionalized_printExactlyCurlyClosing:Print_Print =
        print_exactly("}");

    static public let elmSyntaxPrintDefunctionalized_printExactlyCurlyOpening:Print_Print =
        print_exactly("{");

    static public let elmSyntaxPrintDefunctionalized_printExactlyCurlyOpeningDotDotCurlyClosing:Print_Print =
        print_exactly("{--}");

    static public let elmSyntaxPrintDefunctionalized_printExactlyCurlyOpeningMinus:Print_Print =
        print_exactly("{-");

    static public let elmSyntaxPrintDefunctionalized_printExactlyCurlyOpeningSpace:Print_Print =
        print_exactly("{ ");

    static public let elmSyntaxPrintDefunctionalized_printExactlyDoubleQuoteDoubleQuoteDoubleQuote:Print_Print =
        print_exactly("\"\"\"");

    static public let elmSyntaxPrintDefunctionalized_printExactlyElse:Print_Print =
        print_exactly("else");

    static public let elmSyntaxPrintDefunctionalized_printExactlyEquals:Print_Print =
        print_exactly("=");

    static public let elmSyntaxPrintDefunctionalized_printExactlyEqualsSpace:Print_Print =
        print_exactly("= ");

    static public let elmSyntaxPrintDefunctionalized_printExactlyExposing:Print_Print =
        print_exactly("exposing");

    static public let elmSyntaxPrintDefunctionalized_printExactlyIf:Print_Print =
        print_exactly("if");

    static public let elmSyntaxPrintDefunctionalized_printExactlyIn:Print_Print =
        print_exactly("in");

    static public let elmSyntaxPrintDefunctionalized_printExactlyLessThanVerticalBar:Print_Print =
        print_exactly("<|");

    static public let elmSyntaxPrintDefunctionalized_printExactlyLet:Print_Print =
        print_exactly("let");

    static public let elmSyntaxPrintDefunctionalized_printExactlyMinus:Print_Print =
        print_exactly("-");

    static public let elmSyntaxPrintDefunctionalized_printExactlyMinusCurlyClosing:Print_Print =
        print_exactly("-}");

    static public let elmSyntaxPrintDefunctionalized_printExactlyMinusGreaterThan:Print_Print =
        print_exactly("->");

    static public let elmSyntaxPrintDefunctionalized_printExactlyOf:Print_Print =
        print_exactly("of");

    static public let elmSyntaxPrintDefunctionalized_printExactlyParensClosing:Print_Print =
        print_exactly(")");

    static public let elmSyntaxPrintDefunctionalized_printExactlyParensOpening:Print_Print =
        print_exactly("(");

    static public let elmSyntaxPrintDefunctionalized_printExactlyParensOpeningDotDotParensClosing:Print_Print =
        print_exactly("(..)");

    static public let elmSyntaxPrintDefunctionalized_printExactlyParensOpeningParensClosed:Print_Print =
        print_exactly("()");

    static public let elmSyntaxPrintDefunctionalized_printExactlyParensOpeningSpace:Print_Print =
        print_exactly("( ");

    static public let elmSyntaxPrintDefunctionalized_printExactlyPortSpace:Print_Print =
        print_exactly("port ");

    static public let elmSyntaxPrintDefunctionalized_printExactlySpace:Print_Print =
        print_exactly(" ");

    static public let elmSyntaxPrintDefunctionalized_printExactlySpaceSpace:Print_Print =
        print_exactly("  ");

    static public let elmSyntaxPrintDefunctionalized_printExactlySquareClosing:Print_Print =
        print_exactly("]");

    static public let elmSyntaxPrintDefunctionalized_printExactlySquareOpening:Print_Print =
        print_exactly("[");

    static public let elmSyntaxPrintDefunctionalized_printExactlySquareOpeningSpace:Print_Print =
        print_exactly("[ ");

    static public let elmSyntaxPrintDefunctionalized_printExactlyThen:Print_Print =
        print_exactly("then");

    static public let elmSyntaxPrintDefunctionalized_printExactlyType:Print_Print =
        print_exactly("type");

    static public let elmSyntaxPrintDefunctionalized_printExactlyTypeSpaceAlias:Print_Print =
        print_exactly("type alias");

    static public let elmSyntaxPrintDefunctionalized_printExactlyUnderscore:Print_Print =
        print_exactly("_");

    static public let elmSyntaxPrintDefunctionalized_printExactlyVerticalBarSpace:Print_Print =
        print_exactly("| ");

    static public let elmSyntaxPrintDefunctionalized_printExactlyZero:Print_Print =
        print_exactly("0");

    static public let elmSyntaxPrintDefunctionalized_printExactlyZeroXZeroZero:Print_Print =
        print_exactly("0x00");

    static public func elmSyntaxPrintDefunctionalized_printExpressionNegation(_ syntaxComments: List_List<ElmSyntaxNode_Node<String>>, _ negated: ElmSyntaxNode_Node<ElmSyntaxExpression_Expression>) -> Print_Print {
        ({ () in return switch elmSyntaxPrintDefunctionalized_expressionIsBase10Zero(negated) {
            case true:
                elmSyntaxPrintDefunctionalized_printExactlyZero;

            case false:
                ({ () in return switch elmSyntaxPrintDefunctionalized_expressionIsBase16Zero(negated) {
                    case true:
                        elmSyntaxPrintDefunctionalized_printExactlyZeroXZeroZero;

                    case false:
                        ({ () in return switch elmSyntaxPrintDefunctionalized_expressionToNotParenthesized(negated) {
                            case let ElmSyntaxNode_Node.Node(doublyNegatedRange, ElmSyntaxExpression_Expression.Negation(doublyNegated)):
                                print_followedBy(elmSyntaxPrintDefunctionalized_expressionParenthesized(syntaxComments, ElmSyntaxNode_Node.Node(doublyNegatedRange, ElmSyntaxExpression_Expression.Negation(doublyNegated))), elmSyntaxPrintDefunctionalized_printExactlyMinus);

                            case let negatedNotNegationOrIntegerZero:
                                print_followedBy(elmSyntaxPrintDefunctionalized_expressionParenthesizedIfSpaceSeparated(syntaxComments, negatedNotNegationOrIntegerZero), elmSyntaxPrintDefunctionalized_printExactlyMinus);
                         }
                        }());
                 }
                }());
         }
        }())
    }

    static public let elmSyntaxPrintDefunctionalized_printLinebreakIndentedAs:Print_Print =
        print_followedBy(elmSyntaxPrintDefunctionalized_printExactlyAs, print_linebreakIndented);

    static public let elmSyntaxPrintDefunctionalized_printLinebreakIndentedCommaSpace:Print_Print =
        print_followedBy(elmSyntaxPrintDefunctionalized_printExactlyCommaSpace, print_linebreakIndented);

    static public let elmSyntaxPrintDefunctionalized_printLinebreakIndentedExposing:Print_Print =
        print_followedBy(elmSyntaxPrintDefunctionalized_printExactlyExposing, print_linebreakIndented);

    static public let elmSyntaxPrintDefunctionalized_printLinebreakIndentedInLinebreakIndented:Print_Print =
        print_followedBy(print_linebreakIndented, print_followedBy(elmSyntaxPrintDefunctionalized_printExactlyIn, print_linebreakIndented));

    static public let elmSyntaxPrintDefunctionalized_printLinebreakIndentedVerticalBarSpace:Print_Print =
        print_followedBy(elmSyntaxPrintDefunctionalized_printExactlyVerticalBarSpace, print_linebreakIndented);

    static public let elmSyntaxPrintDefunctionalized_printLinebreakLinebreak:Print_Print =
        print_followedBy(print_linebreak, print_linebreak);

    static public let elmSyntaxPrintDefunctionalized_printLinebreakLinebreakIndented:Print_Print =
        print_followedBy(print_linebreakIndented, print_linebreak);

    static public let elmSyntaxPrintDefunctionalized_printLinebreakLinebreakLinebreak:Print_Print =
        print_followedBy(print_linebreak, print_followedBy(print_linebreak, print_linebreak));

    static public func elmSyntaxPrintDefunctionalized_qualifiedReference(_ syntaxReference:
        (qualification: List_List<String>,
         unqualified: String
        )) -> String {
        ({ () in return switch syntaxReference.qualification {
            case List_List.Empty:
                syntaxReference.unqualified;

            case let List_List.Cons(modulePartHead, modulePartTail):
                string_append(
                    modulePartHead,
                    string_append(
                        elmSyntaxPrintDefunctionalized_listMapAndFlattenToString(
                            { (modulePart) in
                                string_append(".", modulePart)
                            },
                            modulePartTail
                        ),
                        string_append(".", syntaxReference.unqualified)
                    )
                );
         }
        }())
    }

    static public func elmSyntaxPrintDefunctionalized_quotedCharToEscaped(_ character: Character) -> String {
        ({ () in return switch character {
            case "'":
                "\\'";

            case "\\":
                "\\\\";

            case "\t":
                "\\t";

            case "\n":
                "\\n";

            case "\r":
                "\\u{000D}";

            case let otherCharacter:
                ({ () in return switch elmSyntaxPrintDefunctionalized_characterIsNotPrint(otherCharacter) {
                    case true:
                        string_append("\\u{", string_append(elmSyntaxPrintDefunctionalized_characterHex(otherCharacter), "}"));

                    case false:
                        string_fromChar(otherCharacter);
                 }
                }());
         }
        }())
    }

    static public func elmSyntaxPrintDefunctionalized_rawSinceAtDocsEmptyFinishedBlocksEmpty<A_: Sendable>() ->
        (finishedBlocks: List_List<A_>,
         rawSinceAtDocs: String
        ) {
        (finishedBlocks: List_List.Empty, rawSinceAtDocs: "")
    }

    static public func elmSyntaxPrintDefunctionalized_recordLiteral<FieldValue: Sendable>(_ fieldSpecific:
        (nameValueSeparator: String,
         printValueNotParenthesized: @Sendable (List_List<ElmSyntaxNode_Node<String>>, ElmSyntaxNode_Node<FieldValue>) -> Print_Print
        ), _ syntaxComments: List_List<ElmSyntaxNode_Node<String>>, _ syntaxRecord:
        (fields:
            List_List<
                ElmSyntaxNode_Node<
                    (first: ElmSyntaxNode_Node<String>,
                     second: ElmSyntaxNode_Node<FieldValue>
                    )
                >
            >,
         fullRange: ElmSyntaxRange_Range
        )) -> Print_Print {
        ({ () in return switch syntaxRecord.fields {
            case List_List.Empty:
                print_followedBy(
                    ({ () in return switch elmSyntaxPrintDefunctionalized_commentsInRange(syntaxRecord.fullRange, syntaxComments) {
                        case List_List.Empty:
                            elmSyntaxPrintDefunctionalized_printExactlyCurlyClosing;

                        case let List_List.Cons(comment0, comment1Up):
                            ({ () in let commentsCollapsed:
                                (lineSpread: Print_LineSpread,
                                 print: Print_Print
                                ) =
                                elmSyntaxPrintDefunctionalized_collapsibleComments(List_List.Cons(comment0, comment1Up));

                             return print_followedBy(elmSyntaxPrintDefunctionalized_printExactlyCurlyClosing, print_followedBy(print_emptyOrLinebreakIndented(commentsCollapsed.lineSpread), print_withIndentIncreasedBy(1.0, commentsCollapsed.print)))
                            }());
                     }
                    }()),
                    elmSyntaxPrintDefunctionalized_printExactlyCurlyOpening
                );

            case let List_List.Cons(field0, field1Up):
                ({ () in let fieldPrintsAndComments:
                    (endLocation: ElmSyntaxRange_Location,
                     reverse:
                        List_List<
                            (maybeCommentsBeforeName:
                                Maybe_Maybe<
                                    (lineSpread: Print_LineSpread,
                                     print: Print_Print
                                    )
                                >,
                             maybeCommentsBetweenNameAndValue:
                                Maybe_Maybe<
                                    (lineSpread: Print_LineSpread,
                                     print: Print_Print
                                    )
                                >,
                             syntax:
                                (first: ElmSyntaxNode_Node<String>,
                                 second: ElmSyntaxNode_Node<FieldValue>
                                ),
                             valuePrint: Print_Print
                            )
                        >
                    ) =
                    list_foldl(
                        { (generated_fieldNameRange_fieldName_fieldValueNode, soFar) in
                            ({ () in return switch (generated_fieldNameRange_fieldName_fieldValueNode: generated_fieldNameRange_fieldName_fieldValueNode, unusedDummyFieldToMakeSwiftHappy: ()) {
                                case let (generated_fieldNameRange_fieldName_fieldValueNode: ElmSyntaxNode_Node.Node(_, (first: ElmSyntaxNode_Node.Node(fieldNameRange, fieldName), second: fieldValueNode)), unusedDummyFieldToMakeSwiftHappy: ()):
                                    ({ () in return switch fieldValueNode {
                                        case let ElmSyntaxNode_Node.Node(fieldValueRange, _):
                                            ({ () in let commentsBetweenNameAndValue:List_List<String> =
                                                elmSyntaxPrintDefunctionalized_commentsInRange((end: fieldValueRange.start, start: fieldNameRange.start), syntaxComments);

                                             let commentsBeforeName:List_List<String> =
                                                elmSyntaxPrintDefunctionalized_commentsInRange((end: fieldNameRange.start, start: soFar.endLocation), syntaxComments);

                                             return (endLocation: fieldValueRange.end,
                                              reverse:
                                                List_List.Cons(
                                                    (maybeCommentsBeforeName:
                                                        ({ () in return switch commentsBeforeName {
                                                            case List_List.Empty:
                                                                Maybe_Maybe.Nothing;

                                                            case let List_List.Cons(comment0, comment1Up):
                                                                Maybe_Maybe.Just(elmSyntaxPrintDefunctionalized_collapsibleComments(List_List.Cons(comment0, comment1Up)));
                                                         }
                                                        }()),
                                                     maybeCommentsBetweenNameAndValue:
                                                        ({ () in return switch commentsBetweenNameAndValue {
                                                            case List_List.Empty:
                                                                Maybe_Maybe.Nothing;

                                                            case let List_List.Cons(comment0, comment1Up):
                                                                Maybe_Maybe.Just(elmSyntaxPrintDefunctionalized_collapsibleComments(List_List.Cons(comment0, comment1Up)));
                                                         }
                                                        }()),
                                                     syntax: (first: ElmSyntaxNode_Node.Node(fieldNameRange, fieldName), second: fieldValueNode),
                                                     valuePrint: fieldSpecific.printValueNotParenthesized(syntaxComments, fieldValueNode)
                                                    ),
                                                    soFar.reverse
                                                )
                                             )
                                            }());
                                     }
                                    }());
                             }
                            }())
                        },
                        (endLocation: syntaxRecord.fullRange.start, reverse: List_List.Empty),
                        List_List.Cons(field0, field1Up)
                    );

                 let commentsAfterFields:List_List<String> =
                    elmSyntaxPrintDefunctionalized_commentsInRange((end: syntaxRecord.fullRange.end, start: fieldPrintsAndComments.endLocation), syntaxComments);

                 let lineSpread:Print_LineSpread =
                    print_lineSpreadMergeWith(
                        { (_) in
                            ({ () in return switch commentsAfterFields {
                                case List_List.Empty:
                                    Print_LineSpread.SingleLine;

                                case List_List.Cons(_, _):
                                    Print_LineSpread.MultipleLines;
                             }
                            }())
                        },
                        print_lineSpreadMergeWith(
                            { (_) in
                                print_lineSpreadListMapAndCombine(
                                    { (field) in
                                        print_lineSpreadMergeWith(
                                            { (_) in
                                                ({ () in return switch field.maybeCommentsBetweenNameAndValue {
                                                    case Maybe_Maybe.Nothing:
                                                        Print_LineSpread.SingleLine;

                                                    case let Maybe_Maybe.Just(commentsBetweenNameAndValue):
                                                        commentsBetweenNameAndValue.lineSpread;
                                                 }
                                                }())
                                            },
                                            print_lineSpreadMergeWith(
                                                { (_) in
                                                    ({ () in return switch field.maybeCommentsBeforeName {
                                                        case Maybe_Maybe.Nothing:
                                                            Print_LineSpread.SingleLine;

                                                        case let Maybe_Maybe.Just(commentsBeforeName):
                                                            commentsBeforeName.lineSpread;
                                                     }
                                                    }())
                                                },
                                                print_lineSpread(field.valuePrint)
                                            )
                                        )
                                    },
                                    fieldPrintsAndComments.reverse
                                )
                            },
                            elmSyntaxPrintDefunctionalized_lineSpreadInRange(syntaxRecord.fullRange)
                        )
                    );

                 return print_followedBy(
                    elmSyntaxPrintDefunctionalized_printExactlyCurlyClosing,
                    print_followedBy(
                        ({ () in return switch commentsAfterFields {
                            case List_List.Empty:
                                print_spaceOrLinebreakIndented(lineSpread);

                            case let List_List.Cons(comment0, comment1Up):
                                print_followedBy(print_spaceOrLinebreakIndented(lineSpread), print_followedBy(elmSyntaxPrintDefunctionalized_comments(List_List.Cons(comment0, comment1Up)), print_followedBy(print_spaceOrLinebreakIndented(lineSpread), print_linebreak)));
                         }
                        }()),
                        print_followedBy(
                            print_listReverseAndMapAndIntersperseAndFlatten(
                                { (field) in
                                    ({ () in return switch field.syntax {
                                        case let (first: ElmSyntaxNode_Node.Node(fieldNameRange, fieldName), second: fieldValue):
                                            ({ () in let lineSpreadBetweenNameAndValueNotConsideringComments:@Sendable (()) -> Print_LineSpread =
                                                { (_) in
                                                    print_lineSpreadMergeWith(
                                                        { (_) in
                                                            print_lineSpread(field.valuePrint)
                                                        },
                                                        elmSyntaxPrintDefunctionalized_lineSpreadInRange((end: elmSyntaxNode_range(fieldValue).end, start: fieldNameRange.start))
                                                    )
                                                };

                                             let nameSeparatorValuePrint:Print_Print =
                                                print_followedBy(
                                                    print_withIndentAtNextMultipleOf4(
                                                        print_followedBy(
                                                            field.valuePrint,
                                                            ({ () in return switch field.maybeCommentsBetweenNameAndValue {
                                                                case Maybe_Maybe.Nothing:
                                                                    print_spaceOrLinebreakIndented(lineSpreadBetweenNameAndValueNotConsideringComments(()));

                                                                case let Maybe_Maybe.Just(commentsBetweenNameAndValue):
                                                                    print_followedBy(
                                                                        print_spaceOrLinebreakIndented(
                                                                            print_lineSpreadMergeWith(
                                                                                { (_) in
                                                                                    print_lineSpread(field.valuePrint)
                                                                                },
                                                                                commentsBetweenNameAndValue.lineSpread
                                                                            )
                                                                        ),
                                                                        print_followedBy(commentsBetweenNameAndValue.print, print_spaceOrLinebreakIndented(print_lineSpreadMergeWith(lineSpreadBetweenNameAndValueNotConsideringComments, commentsBetweenNameAndValue.lineSpread)))
                                                                    );
                                                             }
                                                            }())
                                                        )
                                                    ),
                                                    print_exactly(string_append(fieldName, string_append(" ", fieldSpecific.nameValueSeparator)))
                                                );

                                             return print_withIndentIncreasedBy(
                                                2.0,
                                                ({ () in return switch field.maybeCommentsBeforeName {
                                                    case Maybe_Maybe.Nothing:
                                                        nameSeparatorValuePrint;

                                                    case let Maybe_Maybe.Just(commentsBeforeName):
                                                        print_followedBy(nameSeparatorValuePrint, print_followedBy(print_spaceOrLinebreakIndented(commentsBeforeName.lineSpread), commentsBeforeName.print));
                                                 }
                                                }())
                                             )
                                            }());
                                     }
                                    }())
                                },
                                print_followedBy(elmSyntaxPrintDefunctionalized_printExactlyCommaSpace, print_emptyOrLinebreakIndented(lineSpread)),
                                fieldPrintsAndComments.reverse
                            ),
                            elmSyntaxPrintDefunctionalized_printExactlyCurlyOpeningSpace
                        )
                    )
                 )
                }());
         }
        }())
    }

    static public func elmSyntaxPrintDefunctionalized_singleDoubleQuotedStringCharToEscaped(_ character: Character) -> String {
        ({ () in return switch character {
            case "\"":
                "\\\"";

            case "\\":
                "\\\\";

            case "\t":
                "\\t";

            case "\n":
                "\\n";

            case "\r":
                "\\u{000D}";

            case let otherCharacter:
                ({ () in return switch elmSyntaxPrintDefunctionalized_characterIsNotPrint(otherCharacter) {
                    case true:
                        string_append("\\u{", string_append(elmSyntaxPrintDefunctionalized_characterHex(otherCharacter), "}"));

                    case false:
                        string_fromChar(otherCharacter);
                 }
                }());
         }
        }())
    }

    static public let elmSyntaxPrintDefunctionalized_spaceCount0OnlySpacesTrue:
        (onlySpaces: Bool,
         spaceCount: Double
        ) =
        (onlySpaces: true, spaceCount: 0.0);

    static public func elmSyntaxPrintDefunctionalized_splitOffPortDocumentationComments(_ commentsAndPortDocumentationComments: List_List<ElmSyntaxNode_Node<String>>) ->
        (portDocumentationComments: List_List<ElmSyntaxNode_Node<String>>,
         remainingComments: List_List<ElmSyntaxNode_Node<String>>
        ) {
        list_foldr(
            { (commentOrPortDocumentationComments, soFar) in
                ({ () in return switch string_startsWith("{-|", elmSyntaxNode_value(commentOrPortDocumentationComments)) {
                    case true:
                        (portDocumentationComments: List_List.Cons(commentOrPortDocumentationComments, soFar.portDocumentationComments), remainingComments: soFar.remainingComments);

                    case false:
                        (portDocumentationComments: soFar.portDocumentationComments, remainingComments: List_List.Cons(commentOrPortDocumentationComments, soFar.remainingComments));
                 }
                }())
            },
            elmSyntaxPrintDefunctionalized_commentsEmptyPortDocumentationRemainingCommentsEmpty(),
            commentsAndPortDocumentationComments
        )
    }

    static public func elmSyntaxPrintDefunctionalized_stringLiteral(_ generated_range_stringContent: ElmSyntaxNode_Node<String>) -> Print_Print {
        ({ () in return switch (generated_range_stringContent: generated_range_stringContent, unusedDummyFieldToMakeSwiftHappy: ()) {
            case let (generated_range_stringContent: ElmSyntaxNode_Node.Node(range, stringContent), unusedDummyFieldToMakeSwiftHappy: ()):
                ({ () in let singleDoubleQuotedStringContentEscaped:String =
                    string_foldl(
                        { (contentChar, soFar) in
                            string_append(soFar, string_append(elmSyntaxPrintDefunctionalized_singleDoubleQuotedStringCharToEscaped(contentChar), ""))
                        },
                        "",
                        stringContent
                    );

                 let wasProbablyTripleDoubleQuoteOriginally:Bool =
                    basics_or(basics_neq(range.start.row, range.end.row), basics_neq(basics_sub(basics_sub(range.end.column, range.start.column), elmSyntaxPrintDefunctionalized_stringUnicodeLength(singleDoubleQuotedStringContentEscaped)), 2.0));

                 return ({ () in return switch wasProbablyTripleDoubleQuoteOriginally {
                    case true:
                        print_followedBy(
                            elmSyntaxPrintDefunctionalized_printExactlyDoubleQuoteDoubleQuoteDoubleQuote,
                            print_followedBy(
                                print_listMapAndIntersperseAndFlatten(
                                    print_exactly,
                                    print_linebreak,
                                    string_lines(
                                        elmSyntaxPrintDefunctionalized_tripleDoubleQuotedStringEscapeDoubleQuotes(
                                            string_foldl(
                                                { (contentChar, soFar) in
                                                    string_append(soFar, string_append(elmSyntaxPrintDefunctionalized_tripleDoubleQuotedStringCharToEscaped(contentChar), ""))
                                                },
                                                "",
                                                stringContent
                                            )
                                        )
                                    )
                                ),
                                elmSyntaxPrintDefunctionalized_printExactlyDoubleQuoteDoubleQuoteDoubleQuote
                            )
                        );

                    case false:
                        print_exactly(string_append("\"", string_append(singleDoubleQuotedStringContentEscaped, "\"")));
                  }
                 }())
                }());
         }
        }())
    }

    static public func elmSyntaxPrintDefunctionalized_stringResizePadLeftWith0s(_ length: Double, _ unpaddedString: String) -> String {
        ({ () in return switch basics_lt(length, string_length(unpaddedString)) {
            case true:
                string_left(length, unpaddedString);

            case false:
                string_append(string_repeat(basics_sub(length, string_length(unpaddedString)), "0"), string_append(unpaddedString, ""));
         }
        }())
    }

    static public func elmSyntaxPrintDefunctionalized_stringUnicodeLength(_ string: String) -> Double {
        string_foldl(
            { (_, soFar) in
                basics_add(soFar, 1.0)
            },
            0.0,
            string
        )
    }

    static public func elmSyntaxPrintDefunctionalized_triple<Part: Sendable>(_ config:
        (lineSpreadMinimum: Print_LineSpread,
         printPartNotParenthesized: @Sendable (List_List<ElmSyntaxNode_Node<String>>, ElmSyntaxNode_Node<Part>) -> Print_Print
        ), _ syntaxComments: List_List<ElmSyntaxNode_Node<String>>, _ syntaxTriple:
        (fullRange: ElmSyntaxRange_Range,
         part0: ElmSyntaxNode_Node<Part>,
         part1: ElmSyntaxNode_Node<Part>,
         part2: ElmSyntaxNode_Node<Part>
        )) -> Print_Print {
        ({ () in let part2Print:Print_Print =
            config.printPartNotParenthesized(syntaxComments, syntaxTriple.part2);

         let part1Print:Print_Print =
            config.printPartNotParenthesized(syntaxComments, syntaxTriple.part1);

         let part0Print:Print_Print =
            config.printPartNotParenthesized(syntaxComments, syntaxTriple.part0);

         let beforePart2Comments:List_List<String> =
            elmSyntaxPrintDefunctionalized_commentsInRange((end: elmSyntaxNode_range(syntaxTriple.part2).start, start: elmSyntaxNode_range(syntaxTriple.part1).end), syntaxComments);

         let beforePart2CommentsCollapsible:
            (lineSpread: Print_LineSpread,
             print: Print_Print
            ) =
            elmSyntaxPrintDefunctionalized_collapsibleComments(beforePart2Comments);

         let beforePart1Comments:List_List<String> =
            elmSyntaxPrintDefunctionalized_commentsInRange((end: elmSyntaxNode_range(syntaxTriple.part1).start, start: elmSyntaxNode_range(syntaxTriple.part0).end), syntaxComments);

         let beforePart1CommentsCollapsible:
            (lineSpread: Print_LineSpread,
             print: Print_Print
            ) =
            elmSyntaxPrintDefunctionalized_collapsibleComments(beforePart1Comments);

         let beforePart0Comments:List_List<String> =
            elmSyntaxPrintDefunctionalized_commentsInRange((end: elmSyntaxNode_range(syntaxTriple.part0).start, start: syntaxTriple.fullRange.start), syntaxComments);

         let beforePart0CommentsCollapsible:
            (lineSpread: Print_LineSpread,
             print: Print_Print
            ) =
            elmSyntaxPrintDefunctionalized_collapsibleComments(beforePart0Comments);

         let afterPart2Comments:List_List<String> =
            elmSyntaxPrintDefunctionalized_commentsInRange((end: syntaxTriple.fullRange.end, start: elmSyntaxNode_range(syntaxTriple.part2).end), syntaxComments);

         let lineSpread:Print_LineSpread =
            print_lineSpreadMergeWith(
                { (_) in
                    ({ () in return switch afterPart2Comments {
                        case List_List.Cons(_, _):
                            Print_LineSpread.MultipleLines;

                        case List_List.Empty:
                            Print_LineSpread.SingleLine;
                     }
                    }())
                },
                print_lineSpreadMergeWithStrict(beforePart2CommentsCollapsible.lineSpread, print_lineSpreadMergeWithStrict(beforePart1CommentsCollapsible.lineSpread, print_lineSpreadMergeWithStrict(beforePart0CommentsCollapsible.lineSpread, config.lineSpreadMinimum)))
            );

         return print_followedBy(
            elmSyntaxPrintDefunctionalized_printExactlyParensClosing,
            print_followedBy(
                print_spaceOrLinebreakIndented(lineSpread),
                print_followedBy(
                    print_withIndentIncreasedBy(
                        2.0,
                        print_followedBy(
                            ({ () in return switch afterPart2Comments {
                                case List_List.Empty:
                                    print_empty;

                                case let List_List.Cons(comment0, comment1Up):
                                    print_followedBy(elmSyntaxPrintDefunctionalized_comments(List_List.Cons(comment0, comment1Up)), print_linebreakIndented);
                             }
                            }()),
                            ({ () in return switch beforePart2Comments {
                                case List_List.Empty:
                                    part2Print;

                                case List_List.Cons(_, _):
                                    print_followedBy(
                                        part2Print,
                                        print_followedBy(
                                            print_spaceOrLinebreakIndented(
                                                print_lineSpreadMergeWith(
                                                    { (_) in
                                                        print_lineSpread(part2Print)
                                                    },
                                                    beforePart2CommentsCollapsible.lineSpread
                                                )
                                            ),
                                            beforePart2CommentsCollapsible.print
                                        )
                                    );
                             }
                            }())
                        )
                    ),
                    print_followedBy(
                        elmSyntaxPrintDefunctionalized_printExactlyCommaSpace,
                        print_followedBy(
                            print_emptyOrLinebreakIndented(lineSpread),
                            print_followedBy(
                                print_withIndentIncreasedBy(
                                    2.0,
                                    ({ () in return switch beforePart1Comments {
                                        case List_List.Empty:
                                            part1Print;

                                        case List_List.Cons(_, _):
                                            print_followedBy(
                                                part1Print,
                                                print_followedBy(
                                                    print_spaceOrLinebreakIndented(
                                                        print_lineSpreadMergeWith(
                                                            { (_) in
                                                                print_lineSpread(part1Print)
                                                            },
                                                            beforePart1CommentsCollapsible.lineSpread
                                                        )
                                                    ),
                                                    beforePart1CommentsCollapsible.print
                                                )
                                            );
                                     }
                                    }())
                                ),
                                print_followedBy(
                                    elmSyntaxPrintDefunctionalized_printExactlyCommaSpace,
                                    print_followedBy(
                                        print_emptyOrLinebreakIndented(lineSpread),
                                        print_followedBy(
                                            print_withIndentIncreasedBy(
                                                2.0,
                                                ({ () in return switch beforePart0Comments {
                                                    case List_List.Empty:
                                                        part0Print;

                                                    case List_List.Cons(_, _):
                                                        print_followedBy(
                                                            part0Print,
                                                            print_followedBy(
                                                                print_spaceOrLinebreakIndented(
                                                                    print_lineSpreadMergeWith(
                                                                        { (_) in
                                                                            print_lineSpread(part0Print)
                                                                        },
                                                                        beforePart0CommentsCollapsible.lineSpread
                                                                    )
                                                                ),
                                                                beforePart0CommentsCollapsible.print
                                                            )
                                                        );
                                                 }
                                                }())
                                            ),
                                            elmSyntaxPrintDefunctionalized_printExactlyParensOpeningSpace
                                        )
                                    )
                                )
                            )
                        )
                    )
                )
            )
         )
        }())
    }

    static public func elmSyntaxPrintDefunctionalized_tripleDoubleQuotedStringCharToEscaped(_ character: Character) -> String {
        ({ () in return switch character {
            case "\"":
                "\"";

            case "\\":
                "\\\\";

            case "\t":
                "\\t";

            case "\n":
                "\n";

            case "\r":
                "\r";

            case let otherCharacter:
                ({ () in return switch elmSyntaxPrintDefunctionalized_characterIsNotPrint(otherCharacter) {
                    case true:
                        string_append("\\u{", string_append(elmSyntaxPrintDefunctionalized_characterHex(otherCharacter), "}"));

                    case false:
                        string_fromChar(otherCharacter);
                 }
                }());
         }
        }())
    }

    static public func elmSyntaxPrintDefunctionalized_tripleDoubleQuotedStringEscapeDoubleQuotes(_ string: String) -> String {
        ({ () in let beforeLastCharEscaped:
            (consecutiveDoubleQuoteCount: Double,
             result: String
            ) =
            string_foldl(
                { (char, soFar) in
                    ({ () in return switch char {
                        case "\"":
                            (consecutiveDoubleQuoteCount: basics_add(soFar.consecutiveDoubleQuoteCount, 1.0), result: soFar.result);

                        case let firstCharNotDoubleQuote:
                            (consecutiveDoubleQuoteCount: 0.0,
                             result:
                                string_append(
                                    soFar.result,
                                    string_append(
                                        ({ () in return switch soFar.consecutiveDoubleQuoteCount {
                                            case 0.0:
                                                "";

                                            case 1.0:
                                                "\"";

                                            case 2.0:
                                                "\"\"";

                                            case let atLeast3ConsecutiveDoubleQuoteCount:
                                                string_repeat(atLeast3ConsecutiveDoubleQuoteCount, "\\\"");
                                         }
                                        }()),
                                        string_append(string_fromChar(firstCharNotDoubleQuote), "")
                                    )
                                )
                            );
                     }
                    }())
                },
                (consecutiveDoubleQuoteCount: 0.0, result: ""),
                string
            );

         return string_append(beforeLastCharEscaped.result, string_append(string_repeat(beforeLastCharEscaped.consecutiveDoubleQuoteCount, "\\\""), ""))
        }())
    }

    static public func elmSyntaxPrintDefunctionalized_tuple<Part: Sendable>(_ config:
        (lineSpreadMinimum: Print_LineSpread,
         printPartNotParenthesized: @Sendable (List_List<ElmSyntaxNode_Node<String>>, ElmSyntaxNode_Node<Part>) -> Print_Print
        ), _ syntaxComments: List_List<ElmSyntaxNode_Node<String>>, _ syntaxTuple:
        (fullRange: ElmSyntaxRange_Range,
         part0: ElmSyntaxNode_Node<Part>,
         part1: ElmSyntaxNode_Node<Part>
        )) -> Print_Print {
        ({ () in let part1Print:Print_Print =
            config.printPartNotParenthesized(syntaxComments, syntaxTuple.part1);

         let part0Print:Print_Print =
            config.printPartNotParenthesized(syntaxComments, syntaxTuple.part0);

         let beforePart1Comments:List_List<String> =
            elmSyntaxPrintDefunctionalized_commentsInRange((end: elmSyntaxNode_range(syntaxTuple.part1).start, start: elmSyntaxNode_range(syntaxTuple.part0).end), syntaxComments);

         let beforePart1CommentsCollapsible:
            (lineSpread: Print_LineSpread,
             print: Print_Print
            ) =
            elmSyntaxPrintDefunctionalized_collapsibleComments(beforePart1Comments);

         let beforePart0Comments:List_List<String> =
            elmSyntaxPrintDefunctionalized_commentsInRange((end: elmSyntaxNode_range(syntaxTuple.part0).start, start: syntaxTuple.fullRange.start), syntaxComments);

         let beforePart0CommentsCollapsible:
            (lineSpread: Print_LineSpread,
             print: Print_Print
            ) =
            elmSyntaxPrintDefunctionalized_collapsibleComments(beforePart0Comments);

         let afterPart1Comments:List_List<String> =
            elmSyntaxPrintDefunctionalized_commentsInRange((end: syntaxTuple.fullRange.end, start: elmSyntaxNode_range(syntaxTuple.part1).end), syntaxComments);

         let lineSpread:Print_LineSpread =
            print_lineSpreadMergeWith(
                { (_) in
                    ({ () in return switch afterPart1Comments {
                        case List_List.Cons(_, _):
                            Print_LineSpread.MultipleLines;

                        case List_List.Empty:
                            Print_LineSpread.SingleLine;
                     }
                    }())
                },
                print_lineSpreadMergeWithStrict(beforePart1CommentsCollapsible.lineSpread, print_lineSpreadMergeWithStrict(beforePart0CommentsCollapsible.lineSpread, config.lineSpreadMinimum))
            );

         return print_followedBy(
            elmSyntaxPrintDefunctionalized_printExactlyParensClosing,
            print_followedBy(
                print_spaceOrLinebreakIndented(lineSpread),
                print_followedBy(
                    print_withIndentIncreasedBy(
                        2.0,
                        print_followedBy(
                            ({ () in return switch afterPart1Comments {
                                case List_List.Empty:
                                    print_empty;

                                case let List_List.Cons(comment0, comment1Up):
                                    print_followedBy(elmSyntaxPrintDefunctionalized_comments(List_List.Cons(comment0, comment1Up)), print_linebreakIndented);
                             }
                            }()),
                            ({ () in return switch beforePart1Comments {
                                case List_List.Empty:
                                    part1Print;

                                case List_List.Cons(_, _):
                                    print_followedBy(
                                        part1Print,
                                        print_followedBy(
                                            print_spaceOrLinebreakIndented(
                                                print_lineSpreadMergeWith(
                                                    { (_) in
                                                        print_lineSpread(part1Print)
                                                    },
                                                    beforePart1CommentsCollapsible.lineSpread
                                                )
                                            ),
                                            beforePart1CommentsCollapsible.print
                                        )
                                    );
                             }
                            }())
                        )
                    ),
                    print_followedBy(
                        elmSyntaxPrintDefunctionalized_printExactlyCommaSpace,
                        print_followedBy(
                            print_emptyOrLinebreakIndented(lineSpread),
                            print_followedBy(
                                print_withIndentIncreasedBy(
                                    2.0,
                                    ({ () in return switch beforePart0Comments {
                                        case List_List.Empty:
                                            part0Print;

                                        case List_List.Cons(_, _):
                                            print_followedBy(
                                                part0Print,
                                                print_followedBy(
                                                    print_spaceOrLinebreakIndented(
                                                        print_lineSpreadMergeWith(
                                                            { (_) in
                                                                print_lineSpread(part0Print)
                                                            },
                                                            beforePart0CommentsCollapsible.lineSpread
                                                        )
                                                    ),
                                                    beforePart0CommentsCollapsible.print
                                                )
                                            );
                                     }
                                    }())
                                ),
                                elmSyntaxPrintDefunctionalized_printExactlyParensOpeningSpace
                            )
                        )
                    )
                )
            )
         )
        }())
    }

    static public func elmSyntaxPrintDefunctionalized_typeFunctionExpand(_ typeNode: ElmSyntaxNode_Node<ElmSyntaxTypeAnnotation_TypeAnnotation>) ->
        (beforeRightest: List_List<ElmSyntaxNode_Node<ElmSyntaxTypeAnnotation_TypeAnnotation>>,
         rightest: ElmSyntaxNode_Node<ElmSyntaxTypeAnnotation_TypeAnnotation>
        ) {
        ({ () in return switch typeNode {
            case let ElmSyntaxNode_Node.Node(_, ElmSyntaxTypeAnnotation_TypeAnnotation.FunctionTypeAnnotation(inType, outType)):
                ({ () in let outTypeExpanded:
                    (beforeRightest: List_List<ElmSyntaxNode_Node<ElmSyntaxTypeAnnotation_TypeAnnotation>>,
                     rightest: ElmSyntaxNode_Node<ElmSyntaxTypeAnnotation_TypeAnnotation>
                    ) =
                    elmSyntaxPrintDefunctionalized_typeFunctionExpand(outType);

                 return (beforeRightest: List_List.Cons(inType, outTypeExpanded.beforeRightest), rightest: outTypeExpanded.rightest)
                }());

            case let typeNodeNotFunction:
                (beforeRightest: List_List.Empty, rightest: typeNodeNotFunction);
         }
        }())
    }

    static public func elmSyntaxPrintDefunctionalized_typeFunctionNotParenthesized(_ syntaxComments: List_List<ElmSyntaxNode_Node<String>>, _ function:
        (fullRange: ElmSyntaxRange_Range,
         inType: ElmSyntaxNode_Node<ElmSyntaxTypeAnnotation_TypeAnnotation>,
         outType: ElmSyntaxNode_Node<ElmSyntaxTypeAnnotation_TypeAnnotation>
        )) -> Print_Print {
        ({ () in let inTypePrint:Print_Print =
            elmSyntaxPrintDefunctionalized_typeParenthesizedIfFunction(syntaxComments, function.inType);

         let afterArrowTypes:
            (beforeRightest: List_List<ElmSyntaxNode_Node<ElmSyntaxTypeAnnotation_TypeAnnotation>>,
             rightest: ElmSyntaxNode_Node<ElmSyntaxTypeAnnotation_TypeAnnotation>
            ) =
            elmSyntaxPrintDefunctionalized_typeFunctionExpand(function.outType);

         let afterArrowTypesBeforeRightestPrintsWithCommentsBefore:
            (endLocation: ElmSyntaxRange_Location,
             reverse: List_List<Print_Print>
            ) =
            list_foldl(
                { (afterArrowTypeNode, soFar) in
                    ({ () in let print:Print_Print =
                        elmSyntaxPrintDefunctionalized_typeParenthesizedIfFunction(syntaxComments, afterArrowTypeNode);

                     return ({ () in return switch afterArrowTypeNode {
                        case let ElmSyntaxNode_Node.Node(afterArrowTypeRange, _):
                            (endLocation: afterArrowTypeRange.end,
                             reverse:
                                List_List.Cons(
                                    print_followedBy(
                                        print,
                                        ({ () in return switch elmSyntaxPrintDefunctionalized_commentsInRange((end: afterArrowTypeRange.start, start: soFar.endLocation), syntaxComments) {
                                            case List_List.Empty:
                                                print_spaceOrLinebreakIndented(print_lineSpread(print));

                                            case let List_List.Cons(comment0, comment1Up):
                                                ({ () in let commentsBeforeAfterArrowType:
                                                    (lineSpread: Print_LineSpread,
                                                     print: Print_Print
                                                    ) =
                                                    elmSyntaxPrintDefunctionalized_collapsibleComments(List_List.Cons(comment0, comment1Up));

                                                 let lineSpread:Print_LineSpread =
                                                    print_lineSpreadMergeWith(
                                                        { (_) in
                                                            print_lineSpread(print)
                                                        },
                                                        commentsBeforeAfterArrowType.lineSpread
                                                    );

                                                 return print_followedBy(print_spaceOrLinebreakIndented(lineSpread), print_followedBy(commentsBeforeAfterArrowType.print, print_spaceOrLinebreakIndented(lineSpread)))
                                                }());
                                         }
                                        }())
                                    ),
                                    soFar.reverse
                                )
                            );
                      }
                     }())
                    }())
                },
                (endLocation: elmSyntaxNode_range(function.inType).end, reverse: List_List.Empty),
                afterArrowTypes.beforeRightest
            );

         let commentsBeforeRightestAfterArrowType:List_List<String> =
            elmSyntaxPrintDefunctionalized_commentsInRange((end: elmSyntaxNode_range(afterArrowTypes.rightest).start, start: afterArrowTypesBeforeRightestPrintsWithCommentsBefore.endLocation), syntaxComments);

         let commentsCollapsibleBeforeRightestAfterArrowType:
            (lineSpread: Print_LineSpread,
             print: Print_Print
            ) =
            elmSyntaxPrintDefunctionalized_collapsibleComments(commentsBeforeRightestAfterArrowType);

         let rightestAfterArrowTypePrint:Print_Print =
            elmSyntaxPrintDefunctionalized_typeParenthesizedIfParenthesizedFunction(syntaxComments, afterArrowTypes.rightest);

         let rightestAfterArrowTypeWithCommentsBeforePrint:Print_Print =
            print_followedBy(
                rightestAfterArrowTypePrint,
                ({ () in return switch commentsBeforeRightestAfterArrowType {
                    case List_List.Empty:
                        print_spaceOrLinebreakIndented(print_lineSpread(rightestAfterArrowTypePrint));

                    case let List_List.Cons(comment0, comment1Up):
                        ({ () in let commentsCollapsible:
                            (lineSpread: Print_LineSpread,
                             print: Print_Print
                            ) =
                            elmSyntaxPrintDefunctionalized_collapsibleComments(List_List.Cons(comment0, comment1Up));

                         let lineSpread:Print_LineSpread =
                            print_lineSpreadMergeWith(
                                { (_) in
                                    print_lineSpread(rightestAfterArrowTypePrint)
                                },
                                commentsCollapsible.lineSpread
                            );

                         return print_followedBy(print_spaceOrLinebreakIndented(lineSpread), print_followedBy(commentsCollapsible.print, print_spaceOrLinebreakIndented(lineSpread)))
                        }());
                 }
                }())
            );

         let fullLineSpread:Print_LineSpread =
            print_lineSpreadMergeWith(
                { (_) in
                    print_lineSpreadListMapAndCombine(print_lineSpread, afterArrowTypesBeforeRightestPrintsWithCommentsBefore.reverse)
                },
                print_lineSpreadMergeWithStrict(
                    commentsCollapsibleBeforeRightestAfterArrowType.lineSpread,
                    print_lineSpreadMergeWith(
                        { (_) in
                            print_lineSpread(rightestAfterArrowTypeWithCommentsBeforePrint)
                        },
                        print_lineSpreadMergeWith(
                            { (_) in
                                print_lineSpread(inTypePrint)
                            },
                            elmSyntaxPrintDefunctionalized_lineSpreadInRange(function.fullRange)
                        )
                    )
                )
            );

         return print_followedBy(
            print_followedBy(print_withIndentAtNextMultipleOf4(rightestAfterArrowTypeWithCommentsBeforePrint), print_followedBy(elmSyntaxPrintDefunctionalized_printExactlyMinusGreaterThan, print_spaceOrLinebreakIndented(fullLineSpread))),
            print_followedBy(
                print_listReverseAndMapAndFlatten(
                    { (printWithCommentsBefore) in
                        print_followedBy(print_withIndentAtNextMultipleOf4(printWithCommentsBefore), print_followedBy(elmSyntaxPrintDefunctionalized_printExactlyMinusGreaterThan, print_spaceOrLinebreakIndented(fullLineSpread)))
                    },
                    afterArrowTypesBeforeRightestPrintsWithCommentsBefore.reverse
                ),
                inTypePrint
            )
         )
        }())
    }

    static public func elmSyntaxPrintDefunctionalized_typeIsSpaceSeparated(_ syntaxType: ElmSyntaxTypeAnnotation_TypeAnnotation) -> Bool {
        ({ () in return switch syntaxType {
            case ElmSyntaxTypeAnnotation_TypeAnnotation.GenericType(_):
                false;

            case let ElmSyntaxTypeAnnotation_TypeAnnotation.Typed(_, arguments):
                ({ () in return switch arguments {
                    case List_List.Empty:
                        false;

                    case List_List.Cons(_, _):
                        true;
                 }
                }());

            case ElmSyntaxTypeAnnotation_TypeAnnotation.Unit:
                false;

            case let ElmSyntaxTypeAnnotation_TypeAnnotation.Tupled(parts):
                ({ () in return switch parts {
                    case List_List.Empty:
                        false;

                    case let List_List.Cons(ElmSyntaxNode_Node.Node(_, inParens), List_List.Empty):
                        elmSyntaxPrintDefunctionalized_typeIsSpaceSeparated(inParens);

                    case List_List.Cons(_, List_List.Cons(_, List_List.Empty)):
                        false;

                    case List_List.Cons(_, List_List.Cons(_, List_List.Cons(_, List_List.Empty))):
                        false;

                    case List_List.Cons(_, List_List.Cons(_, List_List.Cons(_, List_List.Cons(_, _)))):
                        false;
                 }
                }());

            case ElmSyntaxTypeAnnotation_TypeAnnotation.Record(_):
                false;

            case ElmSyntaxTypeAnnotation_TypeAnnotation.GenericRecord(_, _):
                false;

            case ElmSyntaxTypeAnnotation_TypeAnnotation.FunctionTypeAnnotation(_, _):
                true;
         }
        }())
    }

    static public func elmSyntaxPrintDefunctionalized_typeNotParenthesized(_ syntaxComments: List_List<ElmSyntaxNode_Node<String>>, _ generated_fullRange_syntaxType: ElmSyntaxNode_Node<ElmSyntaxTypeAnnotation_TypeAnnotation>) -> Print_Print {
        ({ () in return switch (generated_fullRange_syntaxType: generated_fullRange_syntaxType, unusedDummyFieldToMakeSwiftHappy: ()) {
            case let (generated_fullRange_syntaxType: ElmSyntaxNode_Node.Node(fullRange, syntaxType), unusedDummyFieldToMakeSwiftHappy: ()):
                ({ () in return switch syntaxType {
                    case ElmSyntaxTypeAnnotation_TypeAnnotation.Unit:
                        elmSyntaxPrintDefunctionalized_printExactlyParensOpeningParensClosed;

                    case let ElmSyntaxTypeAnnotation_TypeAnnotation.GenericType(name):
                        print_exactly(name);

                    case let ElmSyntaxTypeAnnotation_TypeAnnotation.Typed(ElmSyntaxNode_Node.Node(_, (first: referenceQualification, second: referenceUnqualified)), arguments):
                        elmSyntaxPrintDefunctionalized_construct((lineSpreadMinimum: elmSyntaxPrintDefunctionalized_lineSpreadInRange(fullRange), printArgumentParenthesizedIfSpaceSeparated: elmSyntaxPrintDefunctionalized_typeParenthesizedIfSpaceSeparated), syntaxComments, (arguments: arguments, fullRange: fullRange, start: elmSyntaxPrintDefunctionalized_qualifiedReference((qualification: referenceQualification, unqualified: referenceUnqualified))));

                    case let ElmSyntaxTypeAnnotation_TypeAnnotation.Tupled(parts):
                        ({ () in return switch parts {
                            case List_List.Empty:
                                elmSyntaxPrintDefunctionalized_printExactlyParensOpeningParensClosed;

                            case let List_List.Cons(inParens, List_List.Empty):
                                ({ () in let commentsBeforeInParens:List_List<String> =
                                    elmSyntaxPrintDefunctionalized_commentsInRange((end: elmSyntaxNode_range(inParens).start, start: fullRange.start), syntaxComments);

                                 let commentsAfterInParens:List_List<String> =
                                    elmSyntaxPrintDefunctionalized_commentsInRange((end: fullRange.end, start: elmSyntaxNode_range(inParens).end), syntaxComments);

                                 return ({ () in return switch (first: commentsBeforeInParens, second: commentsAfterInParens) {
                                    case (first: List_List.Empty, second: List_List.Empty):
                                        elmSyntaxPrintDefunctionalized_typeNotParenthesized(syntaxComments, inParens);

                                    case _:
                                        elmSyntaxPrintDefunctionalized_parenthesized(elmSyntaxPrintDefunctionalized_typeNotParenthesized, (fullRange: fullRange, notParenthesized: elmSyntaxPrintDefunctionalized_typeToNotParenthesized(inParens)), syntaxComments);
                                  }
                                 }())
                                }());

                            case let List_List.Cons(part0, List_List.Cons(part1, List_List.Empty)):
                                elmSyntaxPrintDefunctionalized_tuple((lineSpreadMinimum: elmSyntaxPrintDefunctionalized_lineSpreadInRange(fullRange), printPartNotParenthesized: elmSyntaxPrintDefunctionalized_typeNotParenthesized), syntaxComments, (fullRange: fullRange, part0: part0, part1: part1));

                            case let List_List.Cons(part0, List_List.Cons(part1, List_List.Cons(part2, List_List.Empty))):
                                elmSyntaxPrintDefunctionalized_triple((lineSpreadMinimum: elmSyntaxPrintDefunctionalized_lineSpreadInRange(fullRange), printPartNotParenthesized: elmSyntaxPrintDefunctionalized_typeNotParenthesized), syntaxComments, (fullRange: fullRange, part0: part0, part1: part1, part2: part2));

                            case let List_List.Cons(part0, List_List.Cons(part1, List_List.Cons(part2, List_List.Cons(part3, part4Up)))):
                                elmSyntaxPrintDefunctionalized_invalidNTuple(elmSyntaxPrintDefunctionalized_typeNotParenthesized, syntaxComments, (fullRange: fullRange, part0: part0, part1: part1, part2: part2, part3: part3, part4Up: part4Up));
                         }
                        }());

                    case let ElmSyntaxTypeAnnotation_TypeAnnotation.Record(fields):
                        elmSyntaxPrintDefunctionalized_recordLiteral((nameValueSeparator: ":", printValueNotParenthesized: elmSyntaxPrintDefunctionalized_typeNotParenthesized), syntaxComments, (fields: fields, fullRange: fullRange));

                    case let ElmSyntaxTypeAnnotation_TypeAnnotation.GenericRecord(recordVariable, ElmSyntaxNode_Node.Node(_, fields)):
                        elmSyntaxPrintDefunctionalized_typeRecordExtension(syntaxComments, (fields: fields, fullRange: fullRange, recordVariable: recordVariable));

                    case let ElmSyntaxTypeAnnotation_TypeAnnotation.FunctionTypeAnnotation(inType, outType):
                        elmSyntaxPrintDefunctionalized_typeFunctionNotParenthesized(syntaxComments, (fullRange: fullRange, inType: inType, outType: outType));
                 }
                }());
         }
        }())
    }

    static public func elmSyntaxPrintDefunctionalized_typeParenthesized(_ syntaxComments: List_List<ElmSyntaxNode_Node<String>>, _ typeNode: ElmSyntaxNode_Node<ElmSyntaxTypeAnnotation_TypeAnnotation>) -> Print_Print {
        elmSyntaxPrintDefunctionalized_parenthesized(elmSyntaxPrintDefunctionalized_typeNotParenthesized, (fullRange: elmSyntaxNode_range(typeNode), notParenthesized: elmSyntaxPrintDefunctionalized_typeToNotParenthesized(typeNode)), syntaxComments)
    }

    static public func elmSyntaxPrintDefunctionalized_typeParenthesizedIfFunction(_ syntaxComments: List_List<ElmSyntaxNode_Node<String>>, _ typeNode: ElmSyntaxNode_Node<ElmSyntaxTypeAnnotation_TypeAnnotation>) -> Print_Print {
        ({ () in return switch elmSyntaxPrintDefunctionalized_typeToFunction(typeNode) {
            case Maybe_Maybe.Just(_):
                elmSyntaxPrintDefunctionalized_typeParenthesized(syntaxComments, typeNode);

            case Maybe_Maybe.Nothing:
                elmSyntaxPrintDefunctionalized_typeNotParenthesized(syntaxComments, typeNode);
         }
        }())
    }

    static public func elmSyntaxPrintDefunctionalized_typeParenthesizedIfParenthesizedFunction(_ syntaxComments: List_List<ElmSyntaxNode_Node<String>>, _ typeNode: ElmSyntaxNode_Node<ElmSyntaxTypeAnnotation_TypeAnnotation>) -> Print_Print {
        ({ () in return switch elmSyntaxNode_value(typeNode) {
            case let ElmSyntaxTypeAnnotation_TypeAnnotation.Tupled(List_List.Cons(inParens, List_List.Empty)):
                elmSyntaxPrintDefunctionalized_typeParenthesizedIfFunction(syntaxComments, inParens);

            case _:
                elmSyntaxPrintDefunctionalized_typeNotParenthesized(syntaxComments, typeNode);
         }
        }())
    }

    static public func elmSyntaxPrintDefunctionalized_typeParenthesizedIfSpaceSeparated(_ syntaxComments: List_List<ElmSyntaxNode_Node<String>>, _ typeNode: ElmSyntaxNode_Node<ElmSyntaxTypeAnnotation_TypeAnnotation>) -> Print_Print {
        ({ () in return switch elmSyntaxPrintDefunctionalized_typeIsSpaceSeparated(elmSyntaxNode_value(typeNode)) {
            case true:
                elmSyntaxPrintDefunctionalized_typeParenthesized(syntaxComments, typeNode);

            case false:
                elmSyntaxPrintDefunctionalized_typeNotParenthesized(syntaxComments, typeNode);
         }
        }())
    }

    static public func elmSyntaxPrintDefunctionalized_typeRecordExtension(_ syntaxComments: List_List<ElmSyntaxNode_Node<String>>, _ syntaxRecordExtension:
        (fields:
            List_List<
                ElmSyntaxNode_Node<
                    (first: ElmSyntaxNode_Node<String>,
                     second: ElmSyntaxNode_Node<ElmSyntaxTypeAnnotation_TypeAnnotation>
                    )
                >
            >,
         fullRange: ElmSyntaxRange_Range,
         recordVariable: ElmSyntaxNode_Node<String>
        )) -> Print_Print {
        ({ () in let recordVariablePrint:Print_Print =
            print_exactly(elmSyntaxNode_value(syntaxRecordExtension.recordVariable));

         let fieldPrintsAndComments:
            (endLocation: ElmSyntaxRange_Location,
             reverse:
                List_List<
                    (maybeCommentsBeforeName:
                        Maybe_Maybe<
                            (lineSpread: Print_LineSpread,
                             print: Print_Print
                            )
                        >,
                     maybeCommentsBetweenNameAndValue:
                        Maybe_Maybe<
                            (lineSpread: Print_LineSpread,
                             print: Print_Print
                            )
                        >,
                     syntax:
                        (first: ElmSyntaxNode_Node<String>,
                         second: ElmSyntaxNode_Node<ElmSyntaxTypeAnnotation_TypeAnnotation>
                        ),
                     valuePrint: Print_Print
                    )
                >
            ) =
            list_foldl(
                { (generated_fieldNameRange_fieldName_fieldValueNode, soFar) in
                    ({ () in return switch (generated_fieldNameRange_fieldName_fieldValueNode: generated_fieldNameRange_fieldName_fieldValueNode, unusedDummyFieldToMakeSwiftHappy: ()) {
                        case let (generated_fieldNameRange_fieldName_fieldValueNode: ElmSyntaxNode_Node.Node(_, (first: ElmSyntaxNode_Node.Node(fieldNameRange, fieldName), second: fieldValueNode)), unusedDummyFieldToMakeSwiftHappy: ()):
                            ({ () in return switch fieldValueNode {
                                case let ElmSyntaxNode_Node.Node(fieldValueRange, _):
                                    ({ () in let commentsBetweenNameAndValue:List_List<String> =
                                        elmSyntaxPrintDefunctionalized_commentsInRange((end: fieldValueRange.start, start: fieldNameRange.start), syntaxComments);

                                     let commentsBeforeName:List_List<String> =
                                        elmSyntaxPrintDefunctionalized_commentsInRange((end: fieldNameRange.start, start: soFar.endLocation), syntaxComments);

                                     return (endLocation: fieldValueRange.end,
                                      reverse:
                                        List_List.Cons(
                                            (maybeCommentsBeforeName:
                                                ({ () in return switch commentsBeforeName {
                                                    case List_List.Empty:
                                                        Maybe_Maybe.Nothing;

                                                    case let List_List.Cons(comment0, comment1Up):
                                                        Maybe_Maybe.Just(elmSyntaxPrintDefunctionalized_collapsibleComments(List_List.Cons(comment0, comment1Up)));
                                                 }
                                                }()),
                                             maybeCommentsBetweenNameAndValue:
                                                ({ () in return switch commentsBetweenNameAndValue {
                                                    case List_List.Empty:
                                                        Maybe_Maybe.Nothing;

                                                    case let List_List.Cons(comment0, comment1Up):
                                                        Maybe_Maybe.Just(elmSyntaxPrintDefunctionalized_collapsibleComments(List_List.Cons(comment0, comment1Up)));
                                                 }
                                                }()),
                                             syntax: (first: ElmSyntaxNode_Node.Node(fieldNameRange, fieldName), second: fieldValueNode),
                                             valuePrint: elmSyntaxPrintDefunctionalized_typeNotParenthesized(syntaxComments, fieldValueNode)
                                            ),
                                            soFar.reverse
                                        )
                                     )
                                    }());
                             }
                            }());
                     }
                    }())
                },
                (endLocation: elmSyntaxNode_range(syntaxRecordExtension.recordVariable).end, reverse: List_List.Empty),
                syntaxRecordExtension.fields
            );

         let commentsBeforeRecordVariable:List_List<String> =
            elmSyntaxPrintDefunctionalized_commentsInRange((end: elmSyntaxNode_range(syntaxRecordExtension.recordVariable).start, start: syntaxRecordExtension.fullRange.start), syntaxComments);

         let commentsCollapsibleBeforeRecordVariable:
            (lineSpread: Print_LineSpread,
             print: Print_Print
            ) =
            elmSyntaxPrintDefunctionalized_collapsibleComments(commentsBeforeRecordVariable);

         let commentsAfterFields:List_List<String> =
            elmSyntaxPrintDefunctionalized_commentsInRange((end: syntaxRecordExtension.fullRange.end, start: fieldPrintsAndComments.endLocation), syntaxComments);

         let lineSpread:Print_LineSpread =
            print_lineSpreadMergeWith(
                { (_) in
                    ({ () in return switch commentsAfterFields {
                        case List_List.Empty:
                            Print_LineSpread.SingleLine;

                        case List_List.Cons(_, _):
                            Print_LineSpread.MultipleLines;
                     }
                    }())
                },
                print_lineSpreadMergeWith(
                    { (_) in
                        print_lineSpreadListMapAndCombine(
                            { (field) in
                                print_lineSpreadMergeWith(
                                    { (_) in
                                        ({ () in return switch field.maybeCommentsBetweenNameAndValue {
                                            case Maybe_Maybe.Nothing:
                                                Print_LineSpread.SingleLine;

                                            case let Maybe_Maybe.Just(commentsBetweenNameAndValue):
                                                commentsBetweenNameAndValue.lineSpread;
                                         }
                                        }())
                                    },
                                    print_lineSpreadMergeWith(
                                        { (_) in
                                            ({ () in return switch field.maybeCommentsBeforeName {
                                                case Maybe_Maybe.Nothing:
                                                    Print_LineSpread.SingleLine;

                                                case let Maybe_Maybe.Just(commentsBeforeName):
                                                    commentsBeforeName.lineSpread;
                                             }
                                            }())
                                        },
                                        print_lineSpread(field.valuePrint)
                                    )
                                )
                            },
                            fieldPrintsAndComments.reverse
                        )
                    },
                    print_lineSpreadMergeWithStrict(commentsCollapsibleBeforeRecordVariable.lineSpread, elmSyntaxPrintDefunctionalized_lineSpreadInRange(syntaxRecordExtension.fullRange))
                )
            );

         return print_followedBy(
            elmSyntaxPrintDefunctionalized_printExactlyCurlyClosing,
            print_followedBy(
                print_spaceOrLinebreakIndented(lineSpread),
                print_followedBy(
                    print_withIndentAtNextMultipleOf4(
                        print_followedBy(
                            ({ () in return switch commentsAfterFields {
                                case List_List.Empty:
                                    print_empty;

                                case let List_List.Cons(comment0, comment1Up):
                                    print_followedBy(elmSyntaxPrintDefunctionalized_comments(List_List.Cons(comment0, comment1Up)), print_followedBy(print_spaceOrLinebreakIndented(lineSpread), print_linebreak));
                             }
                            }()),
                            print_followedBy(
                                print_listReverseAndMapAndIntersperseAndFlatten(
                                    { (field) in
                                        ({ () in return switch field.syntax {
                                            case let (first: ElmSyntaxNode_Node.Node(fieldNameRange, fieldName), second: fieldValueNode):
                                                ({ () in let lineSpreadBetweenNameAndValueNotConsideringComments:@Sendable (()) -> Print_LineSpread =
                                                    { (_) in
                                                        print_lineSpreadMergeWith(
                                                            { (_) in
                                                                print_lineSpread(field.valuePrint)
                                                            },
                                                            elmSyntaxPrintDefunctionalized_lineSpreadInRange((end: elmSyntaxNode_range(fieldValueNode).end, start: fieldNameRange.start))
                                                        )
                                                    };

                                                 return print_withIndentIncreasedBy(
                                                    2.0,
                                                    print_followedBy(
                                                        print_withIndentAtNextMultipleOf4(
                                                            print_followedBy(
                                                                field.valuePrint,
                                                                ({ () in return switch field.maybeCommentsBetweenNameAndValue {
                                                                    case Maybe_Maybe.Nothing:
                                                                        print_spaceOrLinebreakIndented(lineSpreadBetweenNameAndValueNotConsideringComments(()));

                                                                    case let Maybe_Maybe.Just(commentsBetweenNameAndValue):
                                                                        print_followedBy(
                                                                            print_spaceOrLinebreakIndented(
                                                                                print_lineSpreadMergeWith(
                                                                                    { (_) in
                                                                                        print_lineSpread(field.valuePrint)
                                                                                    },
                                                                                    commentsBetweenNameAndValue.lineSpread
                                                                                )
                                                                            ),
                                                                            print_followedBy(commentsBetweenNameAndValue.print, print_spaceOrLinebreakIndented(print_lineSpreadMergeWith(lineSpreadBetweenNameAndValueNotConsideringComments, commentsBetweenNameAndValue.lineSpread)))
                                                                        );
                                                                 }
                                                                }())
                                                            )
                                                        ),
                                                        ({ () in return switch field.maybeCommentsBeforeName {
                                                            case Maybe_Maybe.Nothing:
                                                                print_exactly(string_append(fieldName, " :"));

                                                            case let Maybe_Maybe.Just(commentsBeforeName):
                                                                print_followedBy(print_exactly(string_append(fieldName, " :")), print_followedBy(print_spaceOrLinebreakIndented(commentsBeforeName.lineSpread), commentsBeforeName.print));
                                                         }
                                                        }())
                                                    )
                                                 )
                                                }());
                                         }
                                        }())
                                    },
                                    print_followedBy(elmSyntaxPrintDefunctionalized_printExactlyCommaSpace, print_emptyOrLinebreakIndented(lineSpread)),
                                    fieldPrintsAndComments.reverse
                                ),
                                print_followedBy(elmSyntaxPrintDefunctionalized_printExactlyVerticalBarSpace, print_spaceOrLinebreakIndented(lineSpread))
                            )
                        )
                    ),
                    print_followedBy(
                        print_withIndentIncreasedBy(
                            2.0,
                            ({ () in return switch commentsBeforeRecordVariable {
                                case List_List.Empty:
                                    recordVariablePrint;

                                case List_List.Cons(_, _):
                                    print_followedBy(recordVariablePrint, print_followedBy(print_spaceOrLinebreakIndented(commentsCollapsibleBeforeRecordVariable.lineSpread), commentsCollapsibleBeforeRecordVariable.print));
                             }
                            }())
                        ),
                        elmSyntaxPrintDefunctionalized_printExactlyCurlyOpeningSpace
                    )
                )
            )
         )
        }())
    }

    static public func elmSyntaxPrintDefunctionalized_typeToFunction(_ typeNode: ElmSyntaxNode_Node<ElmSyntaxTypeAnnotation_TypeAnnotation>) ->
        Maybe_Maybe<
            (inType: ElmSyntaxNode_Node<ElmSyntaxTypeAnnotation_TypeAnnotation>,
             outType: ElmSyntaxNode_Node<ElmSyntaxTypeAnnotation_TypeAnnotation>
            )
        > {
        ({ () in return switch elmSyntaxNode_value(elmSyntaxPrintDefunctionalized_typeToNotParenthesized(typeNode)) {
            case let ElmSyntaxTypeAnnotation_TypeAnnotation.FunctionTypeAnnotation(inType, outType):
                Maybe_Maybe.Just((inType: inType, outType: outType));

            case ElmSyntaxTypeAnnotation_TypeAnnotation.GenericType(_):
                Maybe_Maybe.Nothing;

            case ElmSyntaxTypeAnnotation_TypeAnnotation.Typed(_, _):
                Maybe_Maybe.Nothing;

            case ElmSyntaxTypeAnnotation_TypeAnnotation.Unit:
                Maybe_Maybe.Nothing;

            case ElmSyntaxTypeAnnotation_TypeAnnotation.Tupled(_):
                Maybe_Maybe.Nothing;

            case ElmSyntaxTypeAnnotation_TypeAnnotation.Record(_):
                Maybe_Maybe.Nothing;

            case ElmSyntaxTypeAnnotation_TypeAnnotation.GenericRecord(_, _):
                Maybe_Maybe.Nothing;
         }
        }())
    }

    static public func elmSyntaxPrintDefunctionalized_typeToNotParenthesized(_ generated_typeRange_syntaxType: ElmSyntaxNode_Node<ElmSyntaxTypeAnnotation_TypeAnnotation>) -> ElmSyntaxNode_Node<ElmSyntaxTypeAnnotation_TypeAnnotation> {
        ({ () in return switch (generated_typeRange_syntaxType: generated_typeRange_syntaxType, unusedDummyFieldToMakeSwiftHappy: ()) {
            case let (generated_typeRange_syntaxType: ElmSyntaxNode_Node.Node(typeRange, syntaxType), unusedDummyFieldToMakeSwiftHappy: ()):
                ({ () in return switch syntaxType {
                    case let ElmSyntaxTypeAnnotation_TypeAnnotation.GenericType(name):
                        ElmSyntaxNode_Node.Node(typeRange, ElmSyntaxTypeAnnotation_TypeAnnotation.GenericType(name));

                    case let ElmSyntaxTypeAnnotation_TypeAnnotation.Typed(reference, arguments):
                        ElmSyntaxNode_Node.Node(typeRange, ElmSyntaxTypeAnnotation_TypeAnnotation.Typed(reference, arguments));

                    case ElmSyntaxTypeAnnotation_TypeAnnotation.Unit:
                        ElmSyntaxNode_Node.Node(typeRange, ElmSyntaxTypeAnnotation_TypeAnnotation.Unit);

                    case let ElmSyntaxTypeAnnotation_TypeAnnotation.Tupled(parts):
                        ({ () in return switch parts {
                            case let List_List.Cons(inParens, List_List.Empty):
                                elmSyntaxPrintDefunctionalized_typeToNotParenthesized(inParens);

                            case List_List.Empty:
                                ElmSyntaxNode_Node.Node(typeRange, ElmSyntaxTypeAnnotation_TypeAnnotation.Unit);

                            case let List_List.Cons(part0, List_List.Cons(part1, List_List.Empty)):
                                ElmSyntaxNode_Node.Node(typeRange, ElmSyntaxTypeAnnotation_TypeAnnotation.Tupled(List_List.Cons(part0, List_List.Cons(part1, List_List.Empty))));

                            case let List_List.Cons(part0, List_List.Cons(part1, List_List.Cons(part2, List_List.Empty))):
                                ElmSyntaxNode_Node.Node(typeRange, ElmSyntaxTypeAnnotation_TypeAnnotation.Tupled(List_List.Cons(part0, List_List.Cons(part1, List_List.Cons(part2, List_List.Empty)))));

                            case let List_List.Cons(part0, List_List.Cons(part1, List_List.Cons(part2, List_List.Cons(part3, part4Up)))):
                                ElmSyntaxNode_Node.Node(typeRange, ElmSyntaxTypeAnnotation_TypeAnnotation.Tupled(List_List.Cons(part0, List_List.Cons(part1, List_List.Cons(part2, List_List.Cons(part3, part4Up))))));
                         }
                        }());

                    case let ElmSyntaxTypeAnnotation_TypeAnnotation.Record(fields):
                        ElmSyntaxNode_Node.Node(typeRange, ElmSyntaxTypeAnnotation_TypeAnnotation.Record(fields));

                    case let ElmSyntaxTypeAnnotation_TypeAnnotation.GenericRecord(extendedRecordVariableName, additionalFieldsNode):
                        ElmSyntaxNode_Node.Node(typeRange, ElmSyntaxTypeAnnotation_TypeAnnotation.GenericRecord(extendedRecordVariableName, additionalFieldsNode));

                    case let ElmSyntaxTypeAnnotation_TypeAnnotation.FunctionTypeAnnotation(inType, outType):
                        ElmSyntaxNode_Node.Node(typeRange, ElmSyntaxTypeAnnotation_TypeAnnotation.FunctionTypeAnnotation(inType, outType));
                 }
                }());
         }
        }())
    }

    static public func elmSyntaxPrintDefunctionalized_unindent(_ lines: List_List<String>) -> List_List<String> {
        ({ () in let nonBlankLines:List_List<String> =
            list_filterMap(
                { (line) in
                    ({ () in return switch string_trim(line) {
                        case "":
                            Maybe_Maybe.Nothing;

                        case _:
                            Maybe_Maybe.Just(line);
                     }
                    }())
                },
                lines
            );

         return ({ () in return switch list_minimum(list_map(elmSyntaxPrintDefunctionalized_lineIndentation, nonBlankLines)) {
            case Maybe_Maybe.Nothing:
                lines;

            case let Maybe_Maybe.Just(minimumIndentation):
                list_map(
                    { (line) in
                        string_dropLeft(minimumIndentation, line)
                    },
                    lines
                );
          }
         }())
        }())
    }

    static public func elmSyntaxPrintDefunctionalized_unsafeHexDigitIntToString(_ int: Double) -> String {
        ({ () in return switch int {
            case 0.0:
                "0";

            case 1.0:
                "1";

            case 2.0:
                "2";

            case 3.0:
                "3";

            case 4.0:
                "4";

            case 5.0:
                "5";

            case 6.0:
                "6";

            case 7.0:
                "7";

            case 8.0:
                "8";

            case 9.0:
                "9";

            case 10.0:
                "A";

            case 11.0:
                "B";

            case 12.0:
                "C";

            case 13.0:
                "D";

            case 14.0:
                "E";

            case _:
                "F";
         }
        }())
    }

    static public func elmSyntaxPrint_case_(_ syntaxComments: List_List<ElmSyntaxNode_Node<String>>, _ syntaxCase: ElmSyntaxExpression_Case) -> ElmSyntaxPrint_Print {
        { (state) in
            print_toStringWithIndent(state.indent, elmSyntaxPrintDefunctionalized_case_(syntaxComments, syntaxCase))
        }
    }

    static public func elmSyntaxPrint_comment(_ syntaxComment: String) -> ElmSyntaxPrint_Print {
        { (state) in
            print_toStringWithIndent(state.indent, elmSyntaxPrintDefunctionalized_comment(syntaxComment))
        }
    }

    static public func elmSyntaxPrint_comments(_ syntaxComments: List_List<String>) -> ElmSyntaxPrint_Print {
        { (state) in
            print_toStringWithIndent(state.indent, elmSyntaxPrintDefunctionalized_comments(syntaxComments))
        }
    }

    static public func elmSyntaxPrint_declaration(_ syntaxComments:
        (comments: List_List<ElmSyntaxNode_Node<String>>,
         portDocumentationComment: Maybe_Maybe<ElmSyntaxNode_Node<String>>
        ), _ syntaxDeclaration: ElmSyntaxDeclaration_Declaration) -> ElmSyntaxPrint_Print {
        { (state) in
            print_toStringWithIndent(state.indent, elmSyntaxPrintDefunctionalized_declaration(syntaxComments, syntaxDeclaration))
        }
    }

    static public func elmSyntaxPrint_declarationChoiceType(_ syntaxComments: List_List<ElmSyntaxNode_Node<String>>, _ syntaxChoiceTypeDeclaration: ElmSyntaxType_Type) -> ElmSyntaxPrint_Print {
        { (state) in
            print_toStringWithIndent(state.indent, elmSyntaxPrintDefunctionalized_declarationChoiceType(syntaxComments, syntaxChoiceTypeDeclaration))
        }
    }

    static public func elmSyntaxPrint_declarationExpression(_ syntaxComments: List_List<ElmSyntaxNode_Node<String>>, _ syntaxExpressionDeclaration: ElmSyntaxExpression_Function) -> ElmSyntaxPrint_Print {
        { (state) in
            print_toStringWithIndent(state.indent, elmSyntaxPrintDefunctionalized_declarationExpression(syntaxComments, syntaxExpressionDeclaration))
        }
    }

    static public func elmSyntaxPrint_declarationInfix(_ syntaxInfixDeclaration: ElmSyntaxInfix_Infix) -> ElmSyntaxPrint_Print {
        { (state) in
            print_toStringWithIndent(state.indent, elmSyntaxPrintDefunctionalized_declarationInfix(syntaxInfixDeclaration))
        }
    }

    static public func elmSyntaxPrint_declarationPort(_ syntaxComments:
        (comments: List_List<ElmSyntaxNode_Node<String>>,
         documentationComment: Maybe_Maybe<ElmSyntaxNode_Node<String>>
        ), _ signature: ElmSyntaxSignature_Signature) -> ElmSyntaxPrint_Print {
        { (state) in
            print_toStringWithIndent(state.indent, elmSyntaxPrintDefunctionalized_declarationPort(syntaxComments, signature))
        }
    }

    static public func elmSyntaxPrint_declarationSignature(_ syntaxComments: List_List<ElmSyntaxNode_Node<String>>, _ signature: ElmSyntaxSignature_Signature) -> ElmSyntaxPrint_Print {
        { (state) in
            print_toStringWithIndent(state.indent, elmSyntaxPrintDefunctionalized_declarationSignature(syntaxComments, signature))
        }
    }

    static public func elmSyntaxPrint_declarationTypeAlias(_ syntaxComments: List_List<ElmSyntaxNode_Node<String>>, _ syntaxTypeAliasDeclaration: ElmSyntaxTypeAlias_TypeAlias) -> ElmSyntaxPrint_Print {
        { (state) in
            print_toStringWithIndent(state.indent, elmSyntaxPrintDefunctionalized_declarationTypeAlias(syntaxComments, syntaxTypeAliasDeclaration))
        }
    }

    static public func elmSyntaxPrint_declarations(_ context:
        (otherComments: List_List<ElmSyntaxNode_Node<String>>,
         portDocumentationComments: List_List<ElmSyntaxNode_Node<String>>,
         previousEnd: ElmSyntaxRange_Location
        ), _ syntaxDeclarations: List_List<ElmSyntaxNode_Node<ElmSyntaxDeclaration_Declaration>>) -> ElmSyntaxPrint_Print {
        { (state) in
            print_toStringWithIndent(state.indent, elmSyntaxPrintDefunctionalized_declarations(context, syntaxDeclarations))
        }
    }

    static public func elmSyntaxPrint_expose(_ syntaxExpose: ElmSyntaxExposing_TopLevelExpose) -> ElmSyntaxPrint_Print {
        { (_) in
            elmSyntaxPrintDefunctionalized_expose(syntaxExpose)
        }
    }

    static public func elmSyntaxPrint_expressionNotParenthesized(_ syntaxComments: List_List<ElmSyntaxNode_Node<String>>, _ expressionNode: ElmSyntaxNode_Node<ElmSyntaxExpression_Expression>) -> ElmSyntaxPrint_Print {
        { (state) in
            print_toStringWithIndent(state.indent, elmSyntaxPrintDefunctionalized_expressionNotParenthesized(syntaxComments, expressionNode))
        }
    }

    static public func elmSyntaxPrint_importExposing(_ syntaxComments: List_List<ElmSyntaxNode_Node<String>>, _ importExposingNode: ElmSyntaxNode_Node<ElmSyntaxExposing_Exposing>) -> ElmSyntaxPrint_Print {
        { (state) in
            print_toStringWithIndent(state.indent, elmSyntaxPrintDefunctionalized_importExposing(syntaxComments, importExposingNode))
        }
    }

    static public func elmSyntaxPrint_import_(_ syntaxComments: List_List<ElmSyntaxNode_Node<String>>, _ importNode: ElmSyntaxNode_Node<ElmSyntaxImport_Import>) -> ElmSyntaxPrint_Print {
        { (state) in
            print_toStringWithIndent(state.indent, elmSyntaxPrintDefunctionalized_import_(syntaxComments, importNode))
        }
    }

    static public func elmSyntaxPrint_imports(_ syntaxComments: List_List<ElmSyntaxNode_Node<String>>, _ syntaxImports: List_List<ElmSyntaxNode_Node<ElmSyntaxImport_Import>>) -> ElmSyntaxPrint_Print {
        { (state) in
            print_toStringWithIndent(state.indent, elmSyntaxPrintDefunctionalized_imports(syntaxComments, syntaxImports))
        }
    }

    static public func elmSyntaxPrint_moduleExposing(_ context:
        (atDocsLines: List_List<List_List<String>>,
         comments: List_List<ElmSyntaxNode_Node<String>>
        ), _ moduleExposingNode: ElmSyntaxNode_Node<ElmSyntaxExposing_Exposing>) -> ElmSyntaxPrint_Print {
        { (state) in
            print_toStringWithIndent(state.indent, elmSyntaxPrintDefunctionalized_moduleExposing(context, moduleExposingNode))
        }
    }

    static public func elmSyntaxPrint_moduleHeader(_ context:
        (atDocsLines: List_List<List_List<String>>,
         comments: List_List<ElmSyntaxNode_Node<String>>
        ), _ syntaxModuleHeader: ElmSyntaxModule_Module) -> ElmSyntaxPrint_Print {
        { (state) in
            print_toStringWithIndent(state.indent, elmSyntaxPrintDefunctionalized_moduleHeader(context, syntaxModuleHeader))
        }
    }

    static public func elmSyntaxPrint_moduleLevelComments(_ syntaxComments: List_List<String>) -> ElmSyntaxPrint_Print {
        { (state) in
            print_toStringWithIndent(state.indent, elmSyntaxPrintDefunctionalized_moduleLevelComments(syntaxComments))
        }
    }

    static public func elmSyntaxPrint_moduleName(_ syntaxModuleName: ElmSyntaxModuleName_ModuleName) -> ElmSyntaxPrint_Print {
        { (_) in
            elmSyntaxPrintDefunctionalized_moduleName(syntaxModuleName)
        }
    }

    static public func elmSyntaxPrint_module_(_ syntaxModule: ElmSyntaxFile_File) -> ElmSyntaxPrint_Print {
        { (state) in
            print_toStringWithIndent(state.indent, elmSyntaxPrintDefunctionalized_module_(syntaxModule))
        }
    }

    static public func elmSyntaxPrint_patternNotParenthesized(_ syntaxComments: List_List<ElmSyntaxNode_Node<String>>, _ patternNode: ElmSyntaxNode_Node<ElmSyntaxPattern_Pattern>) -> ElmSyntaxPrint_Print {
        { (state) in
            print_toStringWithIndent(state.indent, elmSyntaxPrintDefunctionalized_patternNotParenthesized(syntaxComments, patternNode))
        }
    }

    static public func elmSyntaxPrint_qualifiedReference(_ syntaxReference:
        (qualification: List_List<String>,
         unqualified: String
        )) -> ElmSyntaxPrint_Print {
        { (_) in
            elmSyntaxPrintDefunctionalized_qualifiedReference(syntaxReference)
        }
    }

    static public func elmSyntaxPrint_toString(_ print: ElmSyntaxPrint_Print) -> String {
        print((indent: 0.0, unusedDummyFieldToMakeSwiftHappy: ()))
    }

    static public func elmSyntaxPrint_typeNotParenthesized(_ syntaxComments: List_List<ElmSyntaxNode_Node<String>>, _ typeNode: ElmSyntaxNode_Node<ElmSyntaxTypeAnnotation_TypeAnnotation>) -> ElmSyntaxPrint_Print {
        { (state) in
            print_toStringWithIndent(state.indent, elmSyntaxPrintDefunctionalized_typeNotParenthesized(syntaxComments, typeNode))
        }
    }

    static public func elmSyntaxRange_combine(_ ranges: List_List<ElmSyntaxRange_Range>) -> ElmSyntaxRange_Range {
        ({ () in return switch ranges {
            case List_List.Empty:
                elmSyntaxRange_empty;

            case let List_List.Cons(head, tail):
                elmSyntaxRange_combineHelp(tail, head.start, head.end);
         }
        }())
    }

    static public func elmSyntaxRange_combineHelp(_ ranges: List_List<ElmSyntaxRange_Range>, _ previousStart: ElmSyntaxRange_Location, _ previousEnd: ElmSyntaxRange_Location) -> ElmSyntaxRange_Range {
        ({ () in return switch ranges {
            case List_List.Empty:
                (end: previousEnd, start: previousStart);

            case let List_List.Cons((end: end, start: start), rest):
                ({ () in let newStart:ElmSyntaxRange_Location =
                    ({ () in return switch elmSyntaxRange_compareLocations(start, previousStart) {
                        case Basics_Order.LT:
                            start;

                        case _:
                            previousStart;
                     }
                    }());

                 let newEnd:ElmSyntaxRange_Location =
                    ({ () in return switch elmSyntaxRange_compareLocations(end, previousEnd) {
                        case Basics_Order.GT:
                            end;

                        case _:
                            previousEnd;
                     }
                    }());

                 return elmSyntaxRange_combineHelp(rest, newStart, newEnd)
                }());
         }
        }())
    }

    static public func elmSyntaxRange_compare(_ left: ElmSyntaxRange_Range, _ right: ElmSyntaxRange_Range) -> Basics_Order {
        ({ () in return switch elmSyntaxRange_compareLocations(left.start, right.start) {
            case Basics_Order.EQ:
                elmSyntaxRange_compareLocations(left.end, right.end);

            case let order:
                order;
         }
        }())
    }

    static public func elmSyntaxRange_compareLocations(_ left: ElmSyntaxRange_Location, _ right: ElmSyntaxRange_Location) -> Basics_Order {
        ({ () in return switch basics_lt(left.row, right.row) {
            case true:
                Basics_Order.LT;

            case false:
                ({ () in return switch basics_gt(left.row, right.row) {
                    case true:
                        Basics_Order.GT;

                    case false:
                        basics_compare(left.column, right.column);
                 }
                }());
         }
        }())
    }

    static public let elmSyntaxRange_empty:ElmSyntaxRange_Range =
        (end: (column: 0.0, row: 0.0), start: (column: 0.0, row: 0.0));

    static public let elmSyntaxRange_emptyRange:ElmSyntaxRange_Range =
        elmSyntaxRange_empty;

    static public func formatSingleModule_formatSingleModule(_ originalSource: String) -> String {
        ({ () in return switch elmSyntaxParserLenient_run(elmSyntaxParserLenient_module_, originalSource) {
            case let Maybe_Maybe.Just(syntaxModule):
                elmSyntaxPrint_toString(elmSyntaxPrint_module_(syntaxModule));

            case Maybe_Maybe.Nothing:
                originalSource;
         }
        }())
    }

    static public func listExtra_find<A: Sendable>(_ predicate: @Sendable (A) -> Bool, _ list: List_List<A>) -> Maybe_Maybe<A> {
        ({ () in return switch list {
            case List_List.Empty:
                Maybe_Maybe.Nothing;

            case let List_List.Cons(x, xs):
                ({ () in return switch predicate(x) {
                    case true:
                        Maybe_Maybe.Just(x);

                    case false:
                        listExtra_find(predicate, xs);
                 }
                }());
         }
        }())
    }

    static public func listExtra_unique<A: Sendable>(_ list: List_List<A>) -> List_List<A> {
        listExtra_uniqueHelp(List_List.Empty, list, List_List.Empty)
    }

    static public func listExtra_uniqueHelp<A: Sendable>(_ existing: List_List<A>, _ remaining: List_List<A>, _ accumulator: List_List<A>) -> List_List<A> {
        ({ () in return switch remaining {
            case List_List.Empty:
                accumulator;

            case let List_List.Cons(first, rest):
                ({ () in return switch list_member(first, existing) {
                    case true:
                        listExtra_uniqueHelp(existing, rest, accumulator);

                    case false:
                        listExtra_uniqueHelp(List_List.Cons(first, existing), rest, List_List.Cons(first, accumulator));
                 }
                }());
         }
        }())
    }

    static public func maybe_andThen<A: Sendable, B: Sendable>(_ callback: @Sendable (A) -> Maybe_Maybe<B>, _ maybeValue: Maybe_Maybe<A>) -> Maybe_Maybe<B> {
        ({ () in return switch maybeValue {
            case let Maybe_Maybe.Just(value):
                callback(value);

            case Maybe_Maybe.Nothing:
                Maybe_Maybe.Nothing;
         }
        }())
    }

    static public func maybe_destruct<A: Sendable, B: Sendable>(_ default_: B, _ func_: @Sendable (A) -> B, _ maybe: Maybe_Maybe<A>) -> B {
        ({ () in return switch maybe {
            case let Maybe_Maybe.Just(a):
                func_(a);

            case Maybe_Maybe.Nothing:
                default_;
         }
        }())
    }

    static public func maybe_isJust<A: Sendable>(_ maybe: Maybe_Maybe<A>) -> Bool {
        ({ () in return switch maybe {
            case Maybe_Maybe.Just(_):
                true;

            case Maybe_Maybe.Nothing:
                false;
         }
        }())
    }

    static public func maybe_map<A: Sendable, B: Sendable>(_ f: @Sendable (A) -> B, _ maybe: Maybe_Maybe<A>) -> Maybe_Maybe<B> {
        ({ () in return switch maybe {
            case let Maybe_Maybe.Just(value):
                Maybe_Maybe.Just(f(value));

            case Maybe_Maybe.Nothing:
                Maybe_Maybe.Nothing;
         }
        }())
    }

    static public func maybe_map2<A: Sendable, B: Sendable, Value: Sendable>(_ func_: @Sendable (A, B) -> Value, _ ma: Maybe_Maybe<A>, _ mb: Maybe_Maybe<B>) -> Maybe_Maybe<Value> {
        ({ () in return switch ma {
            case Maybe_Maybe.Nothing:
                Maybe_Maybe.Nothing;

            case let Maybe_Maybe.Just(a):
                ({ () in return switch mb {
                    case Maybe_Maybe.Nothing:
                        Maybe_Maybe.Nothing;

                    case let Maybe_Maybe.Just(b):
                        Maybe_Maybe.Just(func_(a, b));
                 }
                }());
         }
        }())
    }

    static public func maybe_map3<A: Sendable, B: Sendable, C: Sendable, Value: Sendable>(_ func_: @Sendable (A, B, C) -> Value, _ ma: Maybe_Maybe<A>, _ mb: Maybe_Maybe<B>, _ mc: Maybe_Maybe<C>) -> Maybe_Maybe<Value> {
        ({ () in return switch ma {
            case Maybe_Maybe.Nothing:
                Maybe_Maybe.Nothing;

            case let Maybe_Maybe.Just(a):
                ({ () in return switch mb {
                    case Maybe_Maybe.Nothing:
                        Maybe_Maybe.Nothing;

                    case let Maybe_Maybe.Just(b):
                        ({ () in return switch mc {
                            case Maybe_Maybe.Nothing:
                                Maybe_Maybe.Nothing;

                            case let Maybe_Maybe.Just(c):
                                Maybe_Maybe.Just(func_(a, b, c));
                         }
                        }());
                 }
                }());
         }
        }())
    }

    static public func maybe_map4<A: Sendable, B: Sendable, C: Sendable, D: Sendable, Value: Sendable>(_ func_: @Sendable (A, B, C, D) -> Value, _ ma: Maybe_Maybe<A>, _ mb: Maybe_Maybe<B>, _ mc: Maybe_Maybe<C>, _ md: Maybe_Maybe<D>) -> Maybe_Maybe<Value> {
        ({ () in return switch ma {
            case Maybe_Maybe.Nothing:
                Maybe_Maybe.Nothing;

            case let Maybe_Maybe.Just(a):
                ({ () in return switch mb {
                    case Maybe_Maybe.Nothing:
                        Maybe_Maybe.Nothing;

                    case let Maybe_Maybe.Just(b):
                        ({ () in return switch mc {
                            case Maybe_Maybe.Nothing:
                                Maybe_Maybe.Nothing;

                            case let Maybe_Maybe.Just(c):
                                ({ () in return switch md {
                                    case Maybe_Maybe.Nothing:
                                        Maybe_Maybe.Nothing;

                                    case let Maybe_Maybe.Just(d):
                                        Maybe_Maybe.Just(func_(a, b, c, d));
                                 }
                                }());
                         }
                        }());
                 }
                }());
         }
        }())
    }

    static public func maybe_map5<A: Sendable, B: Sendable, C: Sendable, D: Sendable, E: Sendable, Value: Sendable>(_ func_: @Sendable (A, B, C, D, E) -> Value, _ ma: Maybe_Maybe<A>, _ mb: Maybe_Maybe<B>, _ mc: Maybe_Maybe<C>, _ md: Maybe_Maybe<D>, _ me: Maybe_Maybe<E>) -> Maybe_Maybe<Value> {
        ({ () in return switch ma {
            case Maybe_Maybe.Nothing:
                Maybe_Maybe.Nothing;

            case let Maybe_Maybe.Just(a):
                ({ () in return switch mb {
                    case Maybe_Maybe.Nothing:
                        Maybe_Maybe.Nothing;

                    case let Maybe_Maybe.Just(b):
                        ({ () in return switch mc {
                            case Maybe_Maybe.Nothing:
                                Maybe_Maybe.Nothing;

                            case let Maybe_Maybe.Just(c):
                                ({ () in return switch md {
                                    case Maybe_Maybe.Nothing:
                                        Maybe_Maybe.Nothing;

                                    case let Maybe_Maybe.Just(d):
                                        ({ () in return switch me {
                                            case Maybe_Maybe.Nothing:
                                                Maybe_Maybe.Nothing;

                                            case let Maybe_Maybe.Just(e):
                                                Maybe_Maybe.Just(func_(a, b, c, d, e));
                                         }
                                        }());
                                 }
                                }());
                         }
                        }());
                 }
                }());
         }
        }())
    }

    static public func maybe_withDefault<A: Sendable>(_ default_: A, _ maybe: Maybe_Maybe<A>) -> A {
        ({ () in return switch maybe {
            case let Maybe_Maybe.Just(value):
                value;

            case Maybe_Maybe.Nothing:
                default_;
         }
        }())
    }

    static public let parserFast_anyChar:ParserFast_Parser<Character> =
        ParserFast_Parser.Parser(
            { (s) in
                ({ () in let newOffset:Double =
                    parserFast_charOrEnd(s.offset, s.src);

                 return ({ () in return switch basics_eq(newOffset, basics_negate(1.0)) {
                    case true:
                        parserFast_pStepBadBacktracking();

                    case false:
                        ({ () in return switch basics_eq(newOffset, basics_negate(2.0)) {
                            case true:
                                ParserFast_PStep.Good("\n", (col: 1.0, indent: s.indent, offset: basics_add(s.offset, 1.0), row: basics_add(s.row, 1.0), src: s.src));

                            case false:
                                ({ () in return switch string_toList(string_slice(s.offset, newOffset, s.src)) {
                                    case List_List.Empty:
                                        parserFast_pStepBadBacktracking();

                                    case let List_List.Cons(c, _):
                                        ParserFast_PStep.Good(c, (col: basics_add(s.col, 1.0), indent: s.indent, offset: newOffset, row: s.row, src: s.src));
                                 }
                                }());
                         }
                        }());
                  }
                 }())
                }())
            }
        );

    static public func parserFast_anyCharFollowedByWhileMap<Res: Sendable>(_ consumedStringToRes: @Sendable (String) -> Res, _ afterFirstIsOkay: @Sendable (Character) -> Bool) -> ParserFast_Parser<Res> {
        ParserFast_Parser.Parser(
            { (s) in
                ({ () in let firstOffset:Double =
                    parserFast_charOrEnd(s.offset, s.src);

                 return ({ () in return switch basics_eq(firstOffset, basics_negate(1.0)) {
                    case true:
                        parserFast_pStepBadBacktracking();

                    case false:
                        ({ () in let s1:ParserFast_State =
                            ({ () in return switch basics_eq(firstOffset, basics_negate(2.0)) {
                                case true:
                                    parserFast_skipWhileHelp(afterFirstIsOkay, basics_add(s.offset, 1.0), basics_add(s.row, 1.0), 1.0, s.src, s.indent);

                                case false:
                                    parserFast_skipWhileHelp(afterFirstIsOkay, firstOffset, s.row, basics_add(s.col, 1.0), s.src, s.indent);
                             }
                            }());

                         return ParserFast_PStep.Good(consumedStringToRes(string_slice(s.offset, s1.offset, s.src)), s1)
                        }());
                  }
                 }())
                }())
            }
        )
    }

    static public func parserFast_changeIndent(_ newIndent: @Sendable (List_List<Double>) -> List_List<Double>, _ s: ParserFast_State) -> ParserFast_State {
        (col: s.col, indent: newIndent(s.indent), offset: s.offset, row: s.row, src: s.src)
    }

    static public func parserFast_charOrEnd(_ offset: Double, _ string: String) -> Double {
        ({ () in return switch string_slice(offset, basics_add(offset, 1.0), string) {
            case "\n":
                basics_negate(2.0);

            case "":
                basics_negate(1.0);

            case let charNotLinebreakNotEndOfSource:
                ({ () in return switch parserFast_charStringIsUtf16HighSurrogate(charNotLinebreakNotEndOfSource) {
                    case true:
                        basics_add(offset, 2.0);

                    case false:
                        basics_add(offset, 1.0);
                 }
                }());
         }
        }())
    }

    static public func parserFast_charStringIsUtf16HighSurrogate(_ charString: String) -> Bool {
        string_any(charExtra_isUtf16Surrogate, charString)
    }

    static public func parserFast_columnIndentAndThen<B: Sendable>(_ callback: @Sendable (Double, List_List<Double>) -> ParserFast_Parser<B>) -> ParserFast_Parser<B> {
        ParserFast_Parser.Parser(
            { (s) in
                ({ () in return switch callback(s.col, s.indent) {
                    case let ParserFast_Parser.Parser(parse):
                        parse(s);
                 }
                }())
            }
        )
    }

    static public func parserFast_convert0OrMore0To9s(_ soFar: Double, _ offset: Double, _ src: String) ->
        (int: Double,
         offset: Double
        ) {
        ({ () in return switch string_slice(offset, basics_add(offset, 1.0), src) {
            case "0":
                parserFast_convert0OrMore0To9s(basics_mul(soFar, 10.0), basics_add(offset, 1.0), src);

            case "1":
                parserFast_convert0OrMore0To9s(basics_add(basics_mul(soFar, 10.0), 1.0), basics_add(offset, 1.0), src);

            case "2":
                parserFast_convert0OrMore0To9s(basics_add(basics_mul(soFar, 10.0), 2.0), basics_add(offset, 1.0), src);

            case "3":
                parserFast_convert0OrMore0To9s(basics_add(basics_mul(soFar, 10.0), 3.0), basics_add(offset, 1.0), src);

            case "4":
                parserFast_convert0OrMore0To9s(basics_add(basics_mul(soFar, 10.0), 4.0), basics_add(offset, 1.0), src);

            case "5":
                parserFast_convert0OrMore0To9s(basics_add(basics_mul(soFar, 10.0), 5.0), basics_add(offset, 1.0), src);

            case "6":
                parserFast_convert0OrMore0To9s(basics_add(basics_mul(soFar, 10.0), 6.0), basics_add(offset, 1.0), src);

            case "7":
                parserFast_convert0OrMore0To9s(basics_add(basics_mul(soFar, 10.0), 7.0), basics_add(offset, 1.0), src);

            case "8":
                parserFast_convert0OrMore0To9s(basics_add(basics_mul(soFar, 10.0), 8.0), basics_add(offset, 1.0), src);

            case "9":
                parserFast_convert0OrMore0To9s(basics_add(basics_mul(soFar, 10.0), 9.0), basics_add(offset, 1.0), src);

            case _:
                (int: soFar, offset: offset);
         }
        }())
    }

    static public func parserFast_convert0OrMoreHexadecimal(_ soFar: Double, _ offset: Double, _ src: String) ->
        (int: Double,
         offset: Double
        ) {
        ({ () in return switch string_slice(offset, basics_add(offset, 1.0), src) {
            case "0":
                parserFast_convert0OrMoreHexadecimal(basics_mul(soFar, 16.0), basics_add(offset, 1.0), src);

            case "1":
                parserFast_convert0OrMoreHexadecimal(basics_add(basics_mul(soFar, 16.0), 1.0), basics_add(offset, 1.0), src);

            case "2":
                parserFast_convert0OrMoreHexadecimal(basics_add(basics_mul(soFar, 16.0), 2.0), basics_add(offset, 1.0), src);

            case "3":
                parserFast_convert0OrMoreHexadecimal(basics_add(basics_mul(soFar, 16.0), 3.0), basics_add(offset, 1.0), src);

            case "4":
                parserFast_convert0OrMoreHexadecimal(basics_add(basics_mul(soFar, 16.0), 4.0), basics_add(offset, 1.0), src);

            case "5":
                parserFast_convert0OrMoreHexadecimal(basics_add(basics_mul(soFar, 16.0), 5.0), basics_add(offset, 1.0), src);

            case "6":
                parserFast_convert0OrMoreHexadecimal(basics_add(basics_mul(soFar, 16.0), 6.0), basics_add(offset, 1.0), src);

            case "7":
                parserFast_convert0OrMoreHexadecimal(basics_add(basics_mul(soFar, 16.0), 7.0), basics_add(offset, 1.0), src);

            case "8":
                parserFast_convert0OrMoreHexadecimal(basics_add(basics_mul(soFar, 16.0), 8.0), basics_add(offset, 1.0), src);

            case "9":
                parserFast_convert0OrMoreHexadecimal(basics_add(basics_mul(soFar, 16.0), 9.0), basics_add(offset, 1.0), src);

            case "a":
                parserFast_convert0OrMoreHexadecimal(basics_add(basics_mul(soFar, 16.0), 10.0), basics_add(offset, 1.0), src);

            case "A":
                parserFast_convert0OrMoreHexadecimal(basics_add(basics_mul(soFar, 16.0), 10.0), basics_add(offset, 1.0), src);

            case "b":
                parserFast_convert0OrMoreHexadecimal(basics_add(basics_mul(soFar, 16.0), 11.0), basics_add(offset, 1.0), src);

            case "B":
                parserFast_convert0OrMoreHexadecimal(basics_add(basics_mul(soFar, 16.0), 11.0), basics_add(offset, 1.0), src);

            case "c":
                parserFast_convert0OrMoreHexadecimal(basics_add(basics_mul(soFar, 16.0), 12.0), basics_add(offset, 1.0), src);

            case "C":
                parserFast_convert0OrMoreHexadecimal(basics_add(basics_mul(soFar, 16.0), 12.0), basics_add(offset, 1.0), src);

            case "d":
                parserFast_convert0OrMoreHexadecimal(basics_add(basics_mul(soFar, 16.0), 13.0), basics_add(offset, 1.0), src);

            case "D":
                parserFast_convert0OrMoreHexadecimal(basics_add(basics_mul(soFar, 16.0), 13.0), basics_add(offset, 1.0), src);

            case "e":
                parserFast_convert0OrMoreHexadecimal(basics_add(basics_mul(soFar, 16.0), 14.0), basics_add(offset, 1.0), src);

            case "E":
                parserFast_convert0OrMoreHexadecimal(basics_add(basics_mul(soFar, 16.0), 14.0), basics_add(offset, 1.0), src);

            case "f":
                parserFast_convert0OrMoreHexadecimal(basics_add(basics_mul(soFar, 16.0), 15.0), basics_add(offset, 1.0), src);

            case "F":
                parserFast_convert0OrMoreHexadecimal(basics_add(basics_mul(soFar, 16.0), 15.0), basics_add(offset, 1.0), src);

            case _:
                (int: soFar, offset: offset);
         }
        }())
    }

    static public func parserFast_convert1OrMoreHexadecimal(_ offset: Double, _ src: String) ->
        (int: Double,
         offset: Double
        ) {
        ({ () in return switch string_slice(offset, basics_add(offset, 1.0), src) {
            case "0":
                parserFast_convert0OrMoreHexadecimal(0.0, basics_add(offset, 1.0), src);

            case "1":
                parserFast_convert0OrMoreHexadecimal(1.0, basics_add(offset, 1.0), src);

            case "2":
                parserFast_convert0OrMoreHexadecimal(2.0, basics_add(offset, 1.0), src);

            case "3":
                parserFast_convert0OrMoreHexadecimal(3.0, basics_add(offset, 1.0), src);

            case "4":
                parserFast_convert0OrMoreHexadecimal(4.0, basics_add(offset, 1.0), src);

            case "5":
                parserFast_convert0OrMoreHexadecimal(5.0, basics_add(offset, 1.0), src);

            case "6":
                parserFast_convert0OrMoreHexadecimal(6.0, basics_add(offset, 1.0), src);

            case "7":
                parserFast_convert0OrMoreHexadecimal(7.0, basics_add(offset, 1.0), src);

            case "8":
                parserFast_convert0OrMoreHexadecimal(8.0, basics_add(offset, 1.0), src);

            case "9":
                parserFast_convert0OrMoreHexadecimal(9.0, basics_add(offset, 1.0), src);

            case "a":
                parserFast_convert0OrMoreHexadecimal(10.0, basics_add(offset, 1.0), src);

            case "A":
                parserFast_convert0OrMoreHexadecimal(10.0, basics_add(offset, 1.0), src);

            case "b":
                parserFast_convert0OrMoreHexadecimal(11.0, basics_add(offset, 1.0), src);

            case "B":
                parserFast_convert0OrMoreHexadecimal(11.0, basics_add(offset, 1.0), src);

            case "c":
                parserFast_convert0OrMoreHexadecimal(12.0, basics_add(offset, 1.0), src);

            case "C":
                parserFast_convert0OrMoreHexadecimal(12.0, basics_add(offset, 1.0), src);

            case "d":
                parserFast_convert0OrMoreHexadecimal(13.0, basics_add(offset, 1.0), src);

            case "D":
                parserFast_convert0OrMoreHexadecimal(13.0, basics_add(offset, 1.0), src);

            case "e":
                parserFast_convert0OrMoreHexadecimal(14.0, basics_add(offset, 1.0), src);

            case "E":
                parserFast_convert0OrMoreHexadecimal(14.0, basics_add(offset, 1.0), src);

            case "f":
                parserFast_convert0OrMoreHexadecimal(15.0, basics_add(offset, 1.0), src);

            case "F":
                parserFast_convert0OrMoreHexadecimal(15.0, basics_add(offset, 1.0), src);

            case _:
                (int: 0.0, offset: basics_negate(1.0));
         }
        }())
    }

    static public func parserFast_convertIntegerDecimal(_ offset: Double, _ src: String) ->
        (int: Double,
         offset: Double
        ) {
        ({ () in return switch string_slice(offset, basics_add(offset, 1.0), src) {
            case "0":
                (int: 0.0, offset: basics_add(offset, 1.0));

            case "1":
                parserFast_convert0OrMore0To9s(1.0, basics_add(offset, 1.0), src);

            case "2":
                parserFast_convert0OrMore0To9s(2.0, basics_add(offset, 1.0), src);

            case "3":
                parserFast_convert0OrMore0To9s(3.0, basics_add(offset, 1.0), src);

            case "4":
                parserFast_convert0OrMore0To9s(4.0, basics_add(offset, 1.0), src);

            case "5":
                parserFast_convert0OrMore0To9s(5.0, basics_add(offset, 1.0), src);

            case "6":
                parserFast_convert0OrMore0To9s(6.0, basics_add(offset, 1.0), src);

            case "7":
                parserFast_convert0OrMore0To9s(7.0, basics_add(offset, 1.0), src);

            case "8":
                parserFast_convert0OrMore0To9s(8.0, basics_add(offset, 1.0), src);

            case "9":
                parserFast_convert0OrMore0To9s(9.0, basics_add(offset, 1.0), src);

            case _:
                parserFast_errorAsOffsetAndInt;
         }
        }())
    }

    static public func parserFast_convertIntegerDecimalOrHexadecimal(_ offset: Double, _ src: String) ->
        (base: ParserFast_Base,
         offsetAndInt:
            (int: Double,
             offset: Double
            )
        ) {
        ({ () in return switch string_slice(offset, basics_add(offset, 1.0), src) {
            case "0":
                ({ () in return switch string_slice(basics_add(offset, 1.0), basics_add(offset, 2.0), src) {
                    case "x":
                        ({ () in let hex:
                            (int: Double,
                             offset: Double
                            ) =
                            parserFast_convert1OrMoreHexadecimal(basics_add(offset, 2.0), src);

                         return (base: ParserFast_Base.Hexadecimal, offsetAndInt: (int: hex.int, offset: hex.offset))
                        }());

                    case _:
                        (base: ParserFast_Base.Decimal, offsetAndInt: (int: 0.0, offset: basics_add(offset, 1.0)));
                 }
                }());

            case "1":
                (base: ParserFast_Base.Decimal, offsetAndInt: parserFast_convert0OrMore0To9s(1.0, basics_add(offset, 1.0), src));

            case "2":
                (base: ParserFast_Base.Decimal, offsetAndInt: parserFast_convert0OrMore0To9s(2.0, basics_add(offset, 1.0), src));

            case "3":
                (base: ParserFast_Base.Decimal, offsetAndInt: parserFast_convert0OrMore0To9s(3.0, basics_add(offset, 1.0), src));

            case "4":
                (base: ParserFast_Base.Decimal, offsetAndInt: parserFast_convert0OrMore0To9s(4.0, basics_add(offset, 1.0), src));

            case "5":
                (base: ParserFast_Base.Decimal, offsetAndInt: parserFast_convert0OrMore0To9s(5.0, basics_add(offset, 1.0), src));

            case "6":
                (base: ParserFast_Base.Decimal, offsetAndInt: parserFast_convert0OrMore0To9s(6.0, basics_add(offset, 1.0), src));

            case "7":
                (base: ParserFast_Base.Decimal, offsetAndInt: parserFast_convert0OrMore0To9s(7.0, basics_add(offset, 1.0), src));

            case "8":
                (base: ParserFast_Base.Decimal, offsetAndInt: parserFast_convert0OrMore0To9s(8.0, basics_add(offset, 1.0), src));

            case "9":
                (base: ParserFast_Base.Decimal, offsetAndInt: parserFast_convert0OrMore0To9s(9.0, basics_add(offset, 1.0), src));

            case _:
                parserFast_errorAsBaseOffsetAndInt;
         }
        }())
    }

    static public let parserFast_errorAsBaseOffsetAndInt:
        (base: ParserFast_Base,
         offsetAndInt:
            (int: Double,
             offset: Double
            )
        ) =
        (base: ParserFast_Base.Decimal, offsetAndInt: (int: 0.0, offset: basics_negate(1.0)));

    static public let parserFast_errorAsOffsetAndInt:
        (int: Double,
         offset: Double
        ) =
        (int: 0.0, offset: basics_negate(1.0));

    static public func parserFast_floatOrIntegerDecimalOrHexadecimalMapWithRange<Res: Sendable>(_ rangeAndFloatToRes: @Sendable (ElmSyntaxRange_Range, Double) -> Res, _ rangeAndIntDecimalToRes: @Sendable (ElmSyntaxRange_Range, Double) -> Res, _ rangeAndIntHexadecimalToRes: @Sendable (ElmSyntaxRange_Range, Double) -> Res) -> ParserFast_Parser<Res> {
        ParserFast_Parser.Parser(
            { (s0) in
                ({ () in let s1:
                    (base: ParserFast_Base,
                     offsetAndInt:
                        (int: Double,
                         offset: Double
                        )
                    ) =
                    parserFast_convertIntegerDecimalOrHexadecimal(s0.offset, s0.src);

                 return ({ () in return switch basics_eq(s1.offsetAndInt.offset, basics_negate(1.0)) {
                    case true:
                        parserFast_pStepBadBacktracking();

                    case false:
                        ({ () in let offsetAfterFloat:Double =
                            parserFast_skipFloatAfterIntegerDecimal(s1.offsetAndInt.offset, s0.src);

                         return ({ () in return switch basics_eq(offsetAfterFloat, basics_negate(1.0)) {
                            case true:
                                ({ () in let newColumn:Double =
                                    basics_add(s0.col, basics_sub(s1.offsetAndInt.offset, s0.offset));

                                 let range:ElmSyntaxRange_Range =
                                    (end: (column: newColumn, row: s0.row), start: (column: s0.col, row: s0.row));

                                 return ParserFast_PStep.Good(
                                    ({ () in return switch s1.base {
                                        case ParserFast_Base.Decimal:
                                            rangeAndIntDecimalToRes(range, s1.offsetAndInt.int);

                                        case ParserFast_Base.Hexadecimal:
                                            rangeAndIntHexadecimalToRes(range, s1.offsetAndInt.int);
                                     }
                                    }()),
                                    (col: newColumn, indent: s0.indent, offset: s1.offsetAndInt.offset, row: s0.row, src: s0.src)
                                 )
                                }());

                            case false:
                                ({ () in return switch string_toFloat(string_slice(s0.offset, offsetAfterFloat, s0.src)) {
                                    case let Maybe_Maybe.Just(float):
                                        ({ () in let newColumn:Double =
                                            basics_add(s0.col, basics_sub(offsetAfterFloat, s0.offset));

                                         return ParserFast_PStep.Good(rangeAndFloatToRes((end: (column: newColumn, row: s0.row), start: (column: s0.col, row: s0.row)), float), (col: newColumn, indent: s0.indent, offset: offsetAfterFloat, row: s0.row, src: s0.src))
                                        }());

                                    case Maybe_Maybe.Nothing:
                                        parserFast_pStepBadBacktracking();
                                 }
                                }());
                          }
                         }())
                        }());
                  }
                 }())
                }())
            }
        )
    }

    static public func parserFast_followedBySkipWhileWhitespace<Before: Sendable>(_ generated_parseBefore: ParserFast_Parser<Before>) -> ParserFast_Parser<Before> {
        ({ () in return switch (generated_parseBefore: generated_parseBefore, unusedDummyFieldToMakeSwiftHappy: ()) {
            case let (generated_parseBefore: ParserFast_Parser.Parser(parseBefore), unusedDummyFieldToMakeSwiftHappy: ()):
                ParserFast_Parser.Parser(
                    { (s0) in
                        ({ () in return switch parseBefore(s0) {
                            case let ParserFast_PStep.Good(res, s1):
                                ParserFast_PStep.Good(res, parserFast_skipWhileWhitespaceHelp(s1.offset, s1.row, s1.col, s1.src, s1.indent));

                            case let bad:
                                bad;
                         }
                        }())
                    }
                );
         }
        }())
    }

    static public func parserFast_followedBySymbol<A: Sendable>(_ str: String, _ generated_parsePrevious: ParserFast_Parser<A>) -> ParserFast_Parser<A> {
        ({ () in return switch (generated_parsePrevious: generated_parsePrevious, unusedDummyFieldToMakeSwiftHappy: ()) {
            case let (generated_parsePrevious: ParserFast_Parser.Parser(parsePrevious), unusedDummyFieldToMakeSwiftHappy: ()):
                ({ () in let strLength:Double =
                    string_length(str);

                 return ParserFast_Parser.Parser(
                    { (s0) in
                        ({ () in return switch parsePrevious(s0) {
                            case let ParserFast_PStep.Good(res, s1):
                                ({ () in let newOffset:Double =
                                    basics_add(s1.offset, strLength);

                                 return ({ () in return switch basics_eq(string_slice(s1.offset, newOffset, s1.src), str) {
                                    case true:
                                        ParserFast_PStep.Good(res, (col: basics_add(s1.col, strLength), indent: s1.indent, offset: newOffset, row: s1.row, src: s1.src));

                                    case false:
                                        parserFast_pStepBadCommitting();
                                  }
                                 }())
                                }());

                            case let bad:
                                bad;
                         }
                        }())
                    }
                 )
                }());
         }
        }())
    }

    static public func parserFast_ifFollowedByWhileMapWithRangeWithoutLinebreak<Res: Sendable>(_ rangeAndConsumedStringToRes: @Sendable (ElmSyntaxRange_Range, String) -> Res, _ firstIsOkay: @Sendable (Character) -> Bool, _ afterFirstIsOkay: @Sendable (Character) -> Bool) -> ParserFast_Parser<Res> {
        ParserFast_Parser.Parser(
            { (s0) in
                ({ () in let firstOffset:Double =
                    parserFast_isSubCharWithoutLinebreak(firstIsOkay, s0.offset, s0.src);

                 return ({ () in return switch basics_eq(firstOffset, basics_negate(1.0)) {
                    case true:
                        parserFast_pStepBadBacktracking();

                    case false:
                        ({ () in let s1:ParserFast_State =
                            parserFast_skipWhileWithoutLinebreakHelp(afterFirstIsOkay, firstOffset, s0.row, basics_add(s0.col, 1.0), s0.src, s0.indent);

                         return ParserFast_PStep.Good(rangeAndConsumedStringToRes((end: (column: s1.col, row: s1.row), start: (column: s0.col, row: s0.row)), string_slice(s0.offset, s1.offset, s0.src)), s1)
                        }());
                  }
                 }())
                }())
            }
        )
    }

    static public func parserFast_ifFollowedByWhileMapWithoutLinebreak<Res: Sendable>(_ consumedStringToRes: @Sendable (String) -> Res, _ firstIsOkay: @Sendable (Character) -> Bool, _ afterFirstIsOkay: @Sendable (Character) -> Bool) -> ParserFast_Parser<Res> {
        ParserFast_Parser.Parser(
            { (s0) in
                ({ () in let firstOffset:Double =
                    parserFast_isSubCharWithoutLinebreak(firstIsOkay, s0.offset, s0.src);

                 return ({ () in return switch basics_eq(firstOffset, basics_negate(1.0)) {
                    case true:
                        parserFast_pStepBadBacktracking();

                    case false:
                        ({ () in let s1:ParserFast_State =
                            parserFast_skipWhileWithoutLinebreakHelp(afterFirstIsOkay, firstOffset, s0.row, basics_add(s0.col, 1.0), s0.src, s0.indent);

                         return ParserFast_PStep.Good(consumedStringToRes(string_slice(s0.offset, s1.offset, s0.src)), s1)
                        }());
                  }
                 }())
                }())
            }
        )
    }

    static public func parserFast_ifFollowedByWhileValidateMapWithRangeWithoutLinebreak<Res: Sendable>(_ toResult: @Sendable (ElmSyntaxRange_Range, String) -> Res, _ firstIsOkay: @Sendable (Character) -> Bool, _ afterFirstIsOkay: @Sendable (Character) -> Bool, _ resultIsOkay: @Sendable (String) -> Bool) -> ParserFast_Parser<Res> {
        ParserFast_Parser.Parser(
            { (s0) in
                ({ () in let firstOffset:Double =
                    parserFast_isSubCharWithoutLinebreak(firstIsOkay, s0.offset, s0.src);

                 return ({ () in return switch basics_eq(firstOffset, basics_negate(1.0)) {
                    case true:
                        parserFast_pStepBadBacktracking();

                    case false:
                        ({ () in let s1:ParserFast_State =
                            parserFast_skipWhileWithoutLinebreakHelp(afterFirstIsOkay, firstOffset, s0.row, basics_add(s0.col, 1.0), s0.src, s0.indent);

                         let name:String =
                            string_slice(s0.offset, s1.offset, s0.src);

                         return ({ () in return switch resultIsOkay(name) {
                            case true:
                                ParserFast_PStep.Good(toResult((end: (column: s1.col, row: s1.row), start: (column: s0.col, row: s0.row)), name), s1);

                            case false:
                                parserFast_pStepBadBacktracking();
                          }
                         }())
                        }());
                  }
                 }())
                }())
            }
        )
    }

    static public func parserFast_ifFollowedByWhileValidateWithoutLinebreak(_ firstIsOkay: @Sendable (Character) -> Bool, _ afterFirstIsOkay: @Sendable (Character) -> Bool, _ resultIsOkay: @Sendable (String) -> Bool) -> ParserFast_Parser<String> {
        ParserFast_Parser.Parser(
            { (s) in
                ({ () in let firstOffset:Double =
                    parserFast_isSubCharWithoutLinebreak(firstIsOkay, s.offset, s.src);

                 return ({ () in return switch basics_eq(firstOffset, basics_negate(1.0)) {
                    case true:
                        parserFast_pStepBadBacktracking();

                    case false:
                        ({ () in let s1:ParserFast_State =
                            parserFast_skipWhileWithoutLinebreakHelp(afterFirstIsOkay, firstOffset, s.row, basics_add(s.col, 1.0), s.src, s.indent);

                         let name:String =
                            string_slice(s.offset, s1.offset, s.src);

                         return ({ () in return switch resultIsOkay(name) {
                            case true:
                                ParserFast_PStep.Good(name, s1);

                            case false:
                                parserFast_pStepBadBacktracking();
                          }
                         }())
                        }());
                  }
                 }())
                }())
            }
        )
    }

    static public func parserFast_ifFollowedByWhileWithoutLinebreak(_ firstIsOkay: @Sendable (Character) -> Bool, _ afterFirstIsOkay: @Sendable (Character) -> Bool) -> ParserFast_Parser<String> {
        ParserFast_Parser.Parser(
            { (s) in
                ({ () in let firstOffset:Double =
                    parserFast_isSubCharWithoutLinebreak(firstIsOkay, s.offset, s.src);

                 return ({ () in return switch basics_eq(firstOffset, basics_negate(1.0)) {
                    case true:
                        parserFast_pStepBadBacktracking();

                    case false:
                        ({ () in let s1:ParserFast_State =
                            parserFast_skipWhileWithoutLinebreakHelp(afterFirstIsOkay, firstOffset, s.row, basics_add(s.col, 1.0), s.src, s.indent);

                         return ParserFast_PStep.Good(string_slice(s.offset, s1.offset, s.src), s1)
                        }());
                  }
                 }())
                }())
            }
        )
    }

    static public func parserFast_integerDecimalMapWithRange<Res: Sendable>(_ rangeAndIntToRes: @Sendable (ElmSyntaxRange_Range, Double) -> Res) -> ParserFast_Parser<Res> {
        ParserFast_Parser.Parser(
            { (s0) in
                ({ () in let s1:
                    (int: Double,
                     offset: Double
                    ) =
                    parserFast_convertIntegerDecimal(s0.offset, s0.src);

                 return ({ () in return switch basics_eq(s1.offset, basics_negate(1.0)) {
                    case true:
                        parserFast_pStepBadBacktracking();

                    case false:
                        ({ () in let newColumn:Double =
                            basics_add(s0.col, basics_sub(s1.offset, s0.offset));

                         return ParserFast_PStep.Good(rangeAndIntToRes((end: (column: newColumn, row: s0.row), start: (column: s0.col, row: s0.row)), s1.int), (col: newColumn, indent: s0.indent, offset: s1.offset, row: s0.row, src: s0.src))
                        }());
                  }
                 }())
                }())
            }
        )
    }

    static public func parserFast_integerDecimalOrHexadecimalMapWithRange<Res: Sendable>(_ rangeAndIntDecimalToRes: @Sendable (ElmSyntaxRange_Range, Double) -> Res, _ rangeAndIntHexadecimalToRes: @Sendable (ElmSyntaxRange_Range, Double) -> Res) -> ParserFast_Parser<Res> {
        ParserFast_Parser.Parser(
            { (s0) in
                ({ () in let s1:
                    (base: ParserFast_Base,
                     offsetAndInt:
                        (int: Double,
                         offset: Double
                        )
                    ) =
                    parserFast_convertIntegerDecimalOrHexadecimal(s0.offset, s0.src);

                 return ({ () in return switch basics_eq(s1.offsetAndInt.offset, basics_negate(1.0)) {
                    case true:
                        parserFast_pStepBadBacktracking();

                    case false:
                        ({ () in let newColumn:Double =
                            basics_add(s0.col, basics_sub(s1.offsetAndInt.offset, s0.offset));

                         let range:ElmSyntaxRange_Range =
                            (end: (column: newColumn, row: s0.row), start: (column: s0.col, row: s0.row));

                         return ParserFast_PStep.Good(
                            ({ () in return switch s1.base {
                                case ParserFast_Base.Decimal:
                                    rangeAndIntDecimalToRes(range, s1.offsetAndInt.int);

                                case ParserFast_Base.Hexadecimal:
                                    rangeAndIntHexadecimalToRes(range, s1.offsetAndInt.int);
                             }
                            }()),
                            (col: newColumn, indent: s0.indent, offset: s1.offsetAndInt.offset, row: s0.row, src: s0.src)
                         )
                        }());
                  }
                 }())
                }())
            }
        )
    }

    static public func parserFast_isSubCharAlphaNumOrUnderscore(_ offset: Double, _ string: String) -> Bool {
        string_any(charExtra_isLatinAlphaNumOrUnderscoreFast, string_slice(offset, basics_add(offset, 1.0), string))
    }

    static public func parserFast_isSubCharWithoutLinebreak(_ predicate: @Sendable (Character) -> Bool, _ offset: Double, _ string: String) -> Double {
        ({ () in let actualChar:String =
            string_slice(offset, basics_add(offset, 1.0), string);

         return ({ () in return switch string_any(predicate, actualChar) {
            case true:
                basics_add(offset, 1.0);

            case false:
                ({ () in return switch basics_and(parserFast_charStringIsUtf16HighSurrogate(actualChar), string_any(predicate, string_slice(offset, basics_add(offset, 2.0), string))) {
                    case true:
                        basics_add(offset, 2.0);

                    case false:
                        basics_negate(1.0);
                 }
                }());
          }
         }())
        }())
    }

    static public func parserFast_keyword<Res: Sendable>(_ kwd: String, _ res: Res) -> ParserFast_Parser<Res> {
        ({ () in let kwdLength:Double =
            string_length(kwd);

         return ParserFast_Parser.Parser(
            { (s) in
                ({ () in let newOffset:Double =
                    basics_add(s.offset, kwdLength);

                 return ({ () in return switch basics_and(basics_eq(string_slice(s.offset, newOffset, s.src), kwd), basics_not(parserFast_isSubCharAlphaNumOrUnderscore(newOffset, s.src))) {
                    case true:
                        ParserFast_PStep.Good(res, (col: basics_add(s.col, kwdLength), indent: s.indent, offset: newOffset, row: s.row, src: s.src));

                    case false:
                        parserFast_pStepBadBacktracking();
                  }
                 }())
                }())
            }
         )
        }())
    }

    static public func parserFast_keywordFollowedBy<Next: Sendable>(_ kwd: String, _ generated_parseNext: ParserFast_Parser<Next>) -> ParserFast_Parser<Next> {
        ({ () in return switch (generated_parseNext: generated_parseNext, unusedDummyFieldToMakeSwiftHappy: ()) {
            case let (generated_parseNext: ParserFast_Parser.Parser(parseNext), unusedDummyFieldToMakeSwiftHappy: ()):
                ({ () in let kwdLength:Double =
                    string_length(kwd);

                 return ParserFast_Parser.Parser(
                    { (s) in
                        ({ () in let newOffset:Double =
                            basics_add(s.offset, kwdLength);

                         return ({ () in return switch basics_and(basics_eq(string_slice(s.offset, newOffset, s.src), kwd), basics_not(parserFast_isSubCharAlphaNumOrUnderscore(newOffset, s.src))) {
                            case true:
                                parserFast_pStepCommit(parseNext((col: basics_add(s.col, kwdLength), indent: s.indent, offset: newOffset, row: s.row, src: s.src)));

                            case false:
                                parserFast_pStepBadBacktracking();
                          }
                         }())
                        }())
                    }
                 )
                }());
         }
        }())
    }

    static public func parserFast_lazy<A: Sendable>(_ thunk: @Sendable (()) -> ParserFast_Parser<A>) -> ParserFast_Parser<A> {
        ParserFast_Parser.Parser(
            { (s) in
                ({ () in return switch thunk(()) {
                    case let ParserFast_Parser.Parser(parse):
                        parse(s);
                 }
                }())
            }
        )
    }

    static public func parserFast_loop<A: Sendable, Extension: Sendable, State: Sendable>(_ state: State, _ element: ParserFast_Parser<Extension>, _ reduce: @Sendable (Extension, State) -> ParserFast_Step<State, A>) -> ParserFast_Parser<A> {
        ParserFast_Parser.Parser(
            { (s) in
                parserFast_loopHelp(false, state, element, reduce, s)
            }
        )
    }

    static public func parserFast_loopHelp<A: Sendable, Extension: Sendable, State: Sendable>(_ committedSoFar: Bool, _ state: State, _ generated_parseElement: ParserFast_Parser<Extension>, _ reduce: @Sendable (Extension, State) -> ParserFast_Step<State, A>, _ s0: ParserFast_State) -> ParserFast_PStep<A> {
        ({ () in return switch (generated_parseElement: generated_parseElement, unusedDummyFieldToMakeSwiftHappy: ()) {
            case let (generated_parseElement: ParserFast_Parser.Parser(parseElement), unusedDummyFieldToMakeSwiftHappy: ()):
                ({ () in let element =
                    ParserFast_Parser.Parser(parseElement);

                 return ({ () in return switch parseElement(s0) {
                    case let ParserFast_PStep.Good(step, s1):
                        ({ () in return switch reduce(step, state) {
                            case let ParserFast_Step.Loop(newState):
                                parserFast_loopHelp(true, newState, element, reduce, s1);

                            case let ParserFast_Step.Done(result):
                                ParserFast_PStep.Good(result, s1);
                         }
                        }());

                    case let ParserFast_PStep.Bad(elementCommitted, x):
                        ParserFast_PStep.Bad(basics_or(committedSoFar, elementCommitted), x);
                  }
                 }())
                }());
         }
        }())
    }

    static public func parserFast_loopUntil<Element: Sendable, Folded: Sendable, Res: Sendable>(_ endParser: ParserFast_Parser<()>, _ element: ParserFast_Parser<Element>, _ initialFolded: Folded, _ reduce: @Sendable (Element, Folded) -> Folded, _ foldedToRes: @Sendable (Folded) -> Res) -> ParserFast_Parser<Res> {
        ParserFast_Parser.Parser(
            { (s) in
                parserFast_loopUntilHelp(endParser, element, initialFolded, reduce, foldedToRes, s)
            }
        )
    }

    static public func parserFast_loopUntilHelp<Element: Sendable, Folded: Sendable, Res: Sendable>(_ generated_parseEnd: ParserFast_Parser<()>, _ generated_parseElement: ParserFast_Parser<Element>, _ soFar: Folded, _ reduce: @Sendable (Element, Folded) -> Folded, _ foldedToRes: @Sendable (Folded) -> Res, _ s0: ParserFast_State) -> ParserFast_PStep<Res> {
        ({ () in return switch (generated_parseElement: generated_parseElement, generated_parseEnd: generated_parseEnd) {
            case let (generated_parseElement: ParserFast_Parser.Parser(parseElement), generated_parseEnd: ParserFast_Parser.Parser(parseEnd)):
                ({ () in let endParser =
                    ParserFast_Parser.Parser(parseEnd);

                 let element =
                    ParserFast_Parser.Parser(parseElement);

                 return ({ () in return switch parseEnd(s0) {
                    case let ParserFast_PStep.Good(_, s1):
                        ParserFast_PStep.Good(foldedToRes(soFar), s1);

                    case let ParserFast_PStep.Bad(endCommitted, endX):
                        ({ () in return switch endCommitted {
                            case true:
                                ParserFast_PStep.Bad(true, endX);

                            case false:
                                ({ () in return switch parseElement(s0) {
                                    case let ParserFast_PStep.Good(elementResult, s1):
                                        parserFast_loopUntilHelp(endParser, element, reduce(elementResult, soFar), reduce, foldedToRes, s1);

                                    case ParserFast_PStep.Bad(_, _):
                                        parserFast_pStepBadCommitting();
                                 }
                                }());
                         }
                        }());
                  }
                 }())
                }());
         }
        }())
    }

    static public func parserFast_loopWhileSucceeds<Element: Sendable, Folded: Sendable, Res: Sendable>(_ element: ParserFast_Parser<Element>, _ initialFolded: Folded, _ reduce: @Sendable (Element, Folded) -> Folded, _ foldedToRes: @Sendable (Folded) -> Res) -> ParserFast_Parser<Res> {
        ParserFast_Parser.Parser(
            { (s) in
                parserFast_loopWhileSucceedsHelp(element, initialFolded, reduce, foldedToRes, s)
            }
        )
    }

    static public func parserFast_loopWhileSucceedsFromRightToLeftStackUnsafeHelp<Element: Sendable, Folded: Sendable>(_ generated_parseElement: ParserFast_Parser<Element>, _ initialFolded: Folded, _ reduce: @Sendable (Element, Folded) -> Folded, _ s0: ParserFast_State) -> ParserFast_PStep<Folded> {
        ({ () in return switch (generated_parseElement: generated_parseElement, unusedDummyFieldToMakeSwiftHappy: ()) {
            case let (generated_parseElement: ParserFast_Parser.Parser(parseElement), unusedDummyFieldToMakeSwiftHappy: ()):
                ({ () in let element =
                    ParserFast_Parser.Parser(parseElement);

                 return ({ () in return switch parseElement(s0) {
                    case let ParserFast_PStep.Good(elementResult, s1):
                        ({ () in return switch parserFast_loopWhileSucceedsFromRightToLeftStackUnsafeHelp(element, initialFolded, reduce, s1) {
                            case let ParserFast_PStep.Good(tailFolded, s2):
                                ParserFast_PStep.Good(reduce(elementResult, tailFolded), s2);

                            case let tailBad:
                                tailBad;
                         }
                        }());

                    case let ParserFast_PStep.Bad(elementCommitted, x):
                        ({ () in return switch elementCommitted {
                            case true:
                                ParserFast_PStep.Bad(true, x);

                            case false:
                                ParserFast_PStep.Good(initialFolded, s0);
                         }
                        }());
                  }
                 }())
                }());
         }
        }())
    }

    static public func parserFast_loopWhileSucceedsHelp<Element: Sendable, Folded: Sendable, Res: Sendable>(_ generated_parseElement: ParserFast_Parser<Element>, _ soFar: Folded, _ reduce: @Sendable (Element, Folded) -> Folded, _ foldedToRes: @Sendable (Folded) -> Res, _ s0: ParserFast_State) -> ParserFast_PStep<Res> {
        ({ () in return switch (generated_parseElement: generated_parseElement, unusedDummyFieldToMakeSwiftHappy: ()) {
            case let (generated_parseElement: ParserFast_Parser.Parser(parseElement), unusedDummyFieldToMakeSwiftHappy: ()):
                ({ () in let element =
                    ParserFast_Parser.Parser(parseElement);

                 return ({ () in return switch parseElement(s0) {
                    case let ParserFast_PStep.Good(elementResult, s1):
                        parserFast_loopWhileSucceedsHelp(element, reduce(elementResult, soFar), reduce, foldedToRes, s1);

                    case let ParserFast_PStep.Bad(elementCommitted, x):
                        ({ () in return switch elementCommitted {
                            case true:
                                ParserFast_PStep.Bad(true, x);

                            case false:
                                ParserFast_PStep.Good(foldedToRes(soFar), s0);
                         }
                        }());
                  }
                 }())
                }());
         }
        }())
    }

    static public func parserFast_loopWhileSucceedsOntoResultFromParser<Element: Sendable, Folded: Sendable, Res: Sendable>(_ element: ParserFast_Parser<Element>, _ generated_parseInitialFolded: ParserFast_Parser<Folded>, _ reduce: @Sendable (Element, Folded) -> Folded, _ foldedToRes: @Sendable (Folded) -> Res) -> ParserFast_Parser<Res> {
        ({ () in return switch (generated_parseInitialFolded: generated_parseInitialFolded, unusedDummyFieldToMakeSwiftHappy: ()) {
            case let (generated_parseInitialFolded: ParserFast_Parser.Parser(parseInitialFolded), unusedDummyFieldToMakeSwiftHappy: ()):
                ParserFast_Parser.Parser(
                    { (s0) in
                        ({ () in return switch parseInitialFolded(s0) {
                            case let ParserFast_PStep.Good(initialFolded, s1):
                                parserFast_loopWhileSucceedsHelp(element, initialFolded, reduce, foldedToRes, s1);

                            case let ParserFast_PStep.Bad(committed, x):
                                ParserFast_PStep.Bad(committed, x);
                         }
                        }())
                    }
                );
         }
        }())
    }

    static public func parserFast_loopWhileSucceedsOntoResultFromParserRightToLeftStackUnsafe<Element: Sendable>(_ generated_parseLeftestElement: ParserFast_Parser<Element>, _ taiElement: ParserFast_Parser<Element>, _ reduce: @Sendable (Element, Element) -> Element) -> ParserFast_Parser<Element> {
        ({ () in return switch (generated_parseLeftestElement: generated_parseLeftestElement, unusedDummyFieldToMakeSwiftHappy: ()) {
            case let (generated_parseLeftestElement: ParserFast_Parser.Parser(parseLeftestElement), unusedDummyFieldToMakeSwiftHappy: ()):
                ParserFast_Parser.Parser(
                    { (s0) in
                        ({ () in return switch parseLeftestElement(s0) {
                            case let ParserFast_PStep.Good(elementResult, s1):
                                ({ () in return switch parserFast_loopWhileSucceedsRightToLeftStackUnsafeHelp(taiElement, reduce, s1) {
                                    case let ParserFast_PStep.Good(tailFolded, s2):
                                        ParserFast_PStep.Good(reduce(elementResult, tailFolded), s2);

                                    case let ParserFast_PStep.Bad(tailCommitted, generated_tailBad1):
                                        ({ () in let tailBad =
                                            ParserFast_PStep.Bad(tailCommitted, generated_tailBad1);

                                         return ({ () in return switch tailCommitted {
                                            case true:
                                                tailBad;

                                            case false:
                                                ParserFast_PStep.Good(elementResult, s1);
                                          }
                                         }())
                                        }());
                                 }
                                }());

                            case let ParserFast_PStep.Bad(elementCommitted, x):
                                ParserFast_PStep.Bad(elementCommitted, x);
                         }
                        }())
                    }
                );
         }
        }())
    }

    static public func parserFast_loopWhileSucceedsRightToLeftStackUnsafe<Element: Sendable, Folded: Sendable>(_ element: ParserFast_Parser<Element>, _ initialFolded: Folded, _ reduce: @Sendable (Element, Folded) -> Folded) -> ParserFast_Parser<Folded> {
        ParserFast_Parser.Parser(
            { (s) in
                parserFast_loopWhileSucceedsFromRightToLeftStackUnsafeHelp(element, initialFolded, reduce, s)
            }
        )
    }

    static public func parserFast_loopWhileSucceedsRightToLeftStackUnsafeHelp<Element: Sendable>(_ generated_parseElement: ParserFast_Parser<Element>, _ reduce: @Sendable (Element, Element) -> Element, _ s0: ParserFast_State) -> ParserFast_PStep<Element> {
        ({ () in return switch (generated_parseElement: generated_parseElement, unusedDummyFieldToMakeSwiftHappy: ()) {
            case let (generated_parseElement: ParserFast_Parser.Parser(parseElement), unusedDummyFieldToMakeSwiftHappy: ()):
                ({ () in let element =
                    ParserFast_Parser.Parser(parseElement);

                 return ({ () in return switch parseElement(s0) {
                    case let ParserFast_PStep.Good(elementResult, s1):
                        ({ () in return switch parserFast_loopWhileSucceedsRightToLeftStackUnsafeHelp(element, reduce, s1) {
                            case let ParserFast_PStep.Good(tailFolded, s2):
                                ParserFast_PStep.Good(reduce(elementResult, tailFolded), s2);

                            case let ParserFast_PStep.Bad(tailCommitted, generated_tailBad1):
                                ({ () in let tailBad =
                                    ParserFast_PStep.Bad(tailCommitted, generated_tailBad1);

                                 return ({ () in return switch tailCommitted {
                                    case true:
                                        tailBad;

                                    case false:
                                        ParserFast_PStep.Good(elementResult, s1);
                                  }
                                 }())
                                }());
                         }
                        }());

                    case let ParserFast_PStep.Bad(elementCommitted, x):
                        ParserFast_PStep.Bad(elementCommitted, x);
                  }
                 }())
                }());
         }
        }())
    }

    static public func parserFast_map<A: Sendable, B: Sendable>(_ func_: @Sendable (A) -> B, _ generated_parse: ParserFast_Parser<A>) -> ParserFast_Parser<B> {
        ({ () in return switch (generated_parse: generated_parse, unusedDummyFieldToMakeSwiftHappy: ()) {
            case let (generated_parse: ParserFast_Parser.Parser(parse), unusedDummyFieldToMakeSwiftHappy: ()):
                ParserFast_Parser.Parser(
                    { (s0) in
                        ({ () in return switch parse(s0) {
                            case let ParserFast_PStep.Good(a, s1):
                                ParserFast_PStep.Good(func_(a), s1);

                            case let ParserFast_PStep.Bad(committed, x):
                                ParserFast_PStep.Bad(committed, x);
                         }
                        }())
                    }
                );
         }
        }())
    }

    static public func parserFast_map2<A: Sendable, B: Sendable, Value: Sendable>(_ func_: @Sendable (A, B) -> Value, _ generated_parseA: ParserFast_Parser<A>, _ generated_parseB: ParserFast_Parser<B>) -> ParserFast_Parser<Value> {
        ({ () in return switch (generated_parseA: generated_parseA, generated_parseB: generated_parseB) {
            case let (generated_parseA: ParserFast_Parser.Parser(parseA), generated_parseB: ParserFast_Parser.Parser(parseB)):
                ParserFast_Parser.Parser(
                    { (s0) in
                        ({ () in return switch parseA(s0) {
                            case let ParserFast_PStep.Bad(committed, x):
                                ParserFast_PStep.Bad(committed, x);

                            case let ParserFast_PStep.Good(a, s1):
                                ({ () in return switch parseB(s1) {
                                    case let ParserFast_PStep.Bad(_, x):
                                        ParserFast_PStep.Bad(true, x);

                                    case let ParserFast_PStep.Good(b, s2):
                                        ParserFast_PStep.Good(func_(a, b), s2);
                                 }
                                }());
                         }
                        }())
                    }
                );
         }
        }())
    }

    static public func parserFast_map2OrSucceed<A: Sendable, B: Sendable, Value: Sendable>(_ func_: @Sendable (A, B) -> Value, _ generated_parseA: ParserFast_Parser<A>, _ generated_parseB: ParserFast_Parser<B>, _ fallback: Value) -> ParserFast_Parser<Value> {
        ({ () in return switch (generated_parseA: generated_parseA, generated_parseB: generated_parseB) {
            case let (generated_parseA: ParserFast_Parser.Parser(parseA), generated_parseB: ParserFast_Parser.Parser(parseB)):
                ParserFast_Parser.Parser(
                    { (s0) in
                        ({ () in return switch parseA(s0) {
                            case let ParserFast_PStep.Bad(c1, x):
                                ({ () in return switch c1 {
                                    case true:
                                        ParserFast_PStep.Bad(true, x);

                                    case false:
                                        ParserFast_PStep.Good(fallback, s0);
                                 }
                                }());

                            case let ParserFast_PStep.Good(a, s1):
                                ({ () in return switch parseB(s1) {
                                    case let ParserFast_PStep.Bad(_, x):
                                        ParserFast_PStep.Bad(true, x);

                                    case let ParserFast_PStep.Good(b, s2):
                                        ParserFast_PStep.Good(func_(a, b), s2);
                                 }
                                }());
                         }
                        }())
                    }
                );
         }
        }())
    }

    static public func parserFast_map2WithRange<A: Sendable, B: Sendable, Value: Sendable>(_ func_: @Sendable (ElmSyntaxRange_Range, A, B) -> Value, _ generated_parseA: ParserFast_Parser<A>, _ generated_parseB: ParserFast_Parser<B>) -> ParserFast_Parser<Value> {
        ({ () in return switch (generated_parseA: generated_parseA, generated_parseB: generated_parseB) {
            case let (generated_parseA: ParserFast_Parser.Parser(parseA), generated_parseB: ParserFast_Parser.Parser(parseB)):
                ParserFast_Parser.Parser(
                    { (s0) in
                        ({ () in return switch parseA(s0) {
                            case let ParserFast_PStep.Bad(committed, x):
                                ParserFast_PStep.Bad(committed, x);

                            case let ParserFast_PStep.Good(a, s1):
                                ({ () in return switch parseB(s1) {
                                    case let ParserFast_PStep.Bad(_, x):
                                        ParserFast_PStep.Bad(true, x);

                                    case let ParserFast_PStep.Good(b, s2):
                                        ParserFast_PStep.Good(func_((end: (column: s2.col, row: s2.row), start: (column: s0.col, row: s0.row)), a, b), s2);
                                 }
                                }());
                         }
                        }())
                    }
                );
         }
        }())
    }

    static public func parserFast_map2WithRangeOrSucceed<A: Sendable, B: Sendable, Value: Sendable>(_ func_: @Sendable (ElmSyntaxRange_Range, A, B) -> Value, _ generated_parseA: ParserFast_Parser<A>, _ generated_parseB: ParserFast_Parser<B>, _ fallback: Value) -> ParserFast_Parser<Value> {
        ({ () in return switch (generated_parseA: generated_parseA, generated_parseB: generated_parseB) {
            case let (generated_parseA: ParserFast_Parser.Parser(parseA), generated_parseB: ParserFast_Parser.Parser(parseB)):
                ParserFast_Parser.Parser(
                    { (s0) in
                        ({ () in return switch parseA(s0) {
                            case let ParserFast_PStep.Bad(c1, x):
                                ({ () in return switch c1 {
                                    case true:
                                        ParserFast_PStep.Bad(true, x);

                                    case false:
                                        ParserFast_PStep.Good(fallback, s0);
                                 }
                                }());

                            case let ParserFast_PStep.Good(a, s1):
                                ({ () in return switch parseB(s1) {
                                    case let ParserFast_PStep.Bad(_, x):
                                        ParserFast_PStep.Bad(true, x);

                                    case let ParserFast_PStep.Good(b, s2):
                                        ParserFast_PStep.Good(func_((end: (column: s2.col, row: s2.row), start: (column: s0.col, row: s0.row)), a, b), s2);
                                 }
                                }());
                         }
                        }())
                    }
                );
         }
        }())
    }

    static public func parserFast_map2WithStartLocation<A: Sendable, B: Sendable, Value: Sendable>(_ func_: @Sendable (ElmSyntaxRange_Location, A, B) -> Value, _ generated_parseA: ParserFast_Parser<A>, _ generated_parseB: ParserFast_Parser<B>) -> ParserFast_Parser<Value> {
        ({ () in return switch (generated_parseA: generated_parseA, generated_parseB: generated_parseB) {
            case let (generated_parseA: ParserFast_Parser.Parser(parseA), generated_parseB: ParserFast_Parser.Parser(parseB)):
                ParserFast_Parser.Parser(
                    { (s0) in
                        ({ () in return switch parseA(s0) {
                            case let ParserFast_PStep.Bad(committed, x):
                                ParserFast_PStep.Bad(committed, x);

                            case let ParserFast_PStep.Good(a, s1):
                                ({ () in return switch parseB(s1) {
                                    case let ParserFast_PStep.Bad(_, x):
                                        ParserFast_PStep.Bad(true, x);

                                    case let ParserFast_PStep.Good(b, s2):
                                        ParserFast_PStep.Good(func_((column: s0.col, row: s0.row), a, b), s2);
                                 }
                                }());
                         }
                        }())
                    }
                );
         }
        }())
    }

    static public func parserFast_map3<A: Sendable, B: Sendable, C: Sendable, Value: Sendable>(_ func_: @Sendable (A, B, C) -> Value, _ generated_parseA: ParserFast_Parser<A>, _ generated_parseB: ParserFast_Parser<B>, _ generated_parseC: ParserFast_Parser<C>) -> ParserFast_Parser<Value> {
        ({ () in return switch (generated_parseA: generated_parseA, generated_parseB: generated_parseB, generated_parseC: generated_parseC) {
            case let (generated_parseA: ParserFast_Parser.Parser(parseA), generated_parseB: ParserFast_Parser.Parser(parseB), generated_parseC: ParserFast_Parser.Parser(parseC)):
                ParserFast_Parser.Parser(
                    { (s0) in
                        ({ () in return switch parseA(s0) {
                            case let ParserFast_PStep.Bad(committed, x):
                                ParserFast_PStep.Bad(committed, x);

                            case let ParserFast_PStep.Good(a, s1):
                                ({ () in return switch parseB(s1) {
                                    case let ParserFast_PStep.Bad(_, x):
                                        ParserFast_PStep.Bad(true, x);

                                    case let ParserFast_PStep.Good(b, s2):
                                        ({ () in return switch parseC(s2) {
                                            case let ParserFast_PStep.Bad(_, x):
                                                ParserFast_PStep.Bad(true, x);

                                            case let ParserFast_PStep.Good(c, s3):
                                                ParserFast_PStep.Good(func_(a, b, c), s3);
                                         }
                                        }());
                                 }
                                }());
                         }
                        }())
                    }
                );
         }
        }())
    }

    static public func parserFast_map3OrSucceed<A: Sendable, B: Sendable, C: Sendable, Value: Sendable>(_ func_: @Sendable (A, B, C) -> Value, _ generated_parseA: ParserFast_Parser<A>, _ generated_parseB: ParserFast_Parser<B>, _ generated_parseC: ParserFast_Parser<C>, _ fallback: Value) -> ParserFast_Parser<Value> {
        ({ () in return switch (generated_parseA: generated_parseA, generated_parseB: generated_parseB, generated_parseC: generated_parseC) {
            case let (generated_parseA: ParserFast_Parser.Parser(parseA), generated_parseB: ParserFast_Parser.Parser(parseB), generated_parseC: ParserFast_Parser.Parser(parseC)):
                ParserFast_Parser.Parser(
                    { (s0) in
                        ({ () in return switch parseA(s0) {
                            case let ParserFast_PStep.Bad(c1, x):
                                ({ () in return switch c1 {
                                    case true:
                                        ParserFast_PStep.Bad(true, x);

                                    case false:
                                        ParserFast_PStep.Good(fallback, s0);
                                 }
                                }());

                            case let ParserFast_PStep.Good(a, s1):
                                ({ () in return switch parseB(s1) {
                                    case let ParserFast_PStep.Bad(_, x):
                                        ParserFast_PStep.Bad(true, x);

                                    case let ParserFast_PStep.Good(b, s2):
                                        ({ () in return switch parseC(s2) {
                                            case let ParserFast_PStep.Bad(_, x):
                                                ParserFast_PStep.Bad(true, x);

                                            case let ParserFast_PStep.Good(c, s3):
                                                ParserFast_PStep.Good(func_(a, b, c), s3);
                                         }
                                        }());
                                 }
                                }());
                         }
                        }())
                    }
                );
         }
        }())
    }

    static public func parserFast_map3WithRange<A: Sendable, B: Sendable, C: Sendable, Value: Sendable>(_ func_: @Sendable (ElmSyntaxRange_Range, A, B, C) -> Value, _ generated_parseA: ParserFast_Parser<A>, _ generated_parseB: ParserFast_Parser<B>, _ generated_parseC: ParserFast_Parser<C>) -> ParserFast_Parser<Value> {
        ({ () in return switch (generated_parseA: generated_parseA, generated_parseB: generated_parseB, generated_parseC: generated_parseC) {
            case let (generated_parseA: ParserFast_Parser.Parser(parseA), generated_parseB: ParserFast_Parser.Parser(parseB), generated_parseC: ParserFast_Parser.Parser(parseC)):
                ParserFast_Parser.Parser(
                    { (s0) in
                        ({ () in return switch parseA(s0) {
                            case let ParserFast_PStep.Bad(committed, x):
                                ParserFast_PStep.Bad(committed, x);

                            case let ParserFast_PStep.Good(a, s1):
                                ({ () in return switch parseB(s1) {
                                    case let ParserFast_PStep.Bad(_, x):
                                        ParserFast_PStep.Bad(true, x);

                                    case let ParserFast_PStep.Good(b, s2):
                                        ({ () in return switch parseC(s2) {
                                            case let ParserFast_PStep.Bad(_, x):
                                                ParserFast_PStep.Bad(true, x);

                                            case let ParserFast_PStep.Good(c, s3):
                                                ParserFast_PStep.Good(func_((end: (column: s3.col, row: s3.row), start: (column: s0.col, row: s0.row)), a, b, c), s3);
                                         }
                                        }());
                                 }
                                }());
                         }
                        }())
                    }
                );
         }
        }())
    }

    static public func parserFast_map3WithStartLocation<A: Sendable, B: Sendable, C: Sendable, Value: Sendable>(_ func_: @Sendable (ElmSyntaxRange_Location, A, B, C) -> Value, _ generated_parseA: ParserFast_Parser<A>, _ generated_parseB: ParserFast_Parser<B>, _ generated_parseC: ParserFast_Parser<C>) -> ParserFast_Parser<Value> {
        ({ () in return switch (generated_parseA: generated_parseA, generated_parseB: generated_parseB, generated_parseC: generated_parseC) {
            case let (generated_parseA: ParserFast_Parser.Parser(parseA), generated_parseB: ParserFast_Parser.Parser(parseB), generated_parseC: ParserFast_Parser.Parser(parseC)):
                ParserFast_Parser.Parser(
                    { (s0) in
                        ({ () in return switch parseA(s0) {
                            case let ParserFast_PStep.Bad(committed, x):
                                ParserFast_PStep.Bad(committed, x);

                            case let ParserFast_PStep.Good(a, s1):
                                ({ () in return switch parseB(s1) {
                                    case let ParserFast_PStep.Bad(_, x):
                                        ParserFast_PStep.Bad(true, x);

                                    case let ParserFast_PStep.Good(b, s2):
                                        ({ () in return switch parseC(s2) {
                                            case let ParserFast_PStep.Bad(_, x):
                                                ParserFast_PStep.Bad(true, x);

                                            case let ParserFast_PStep.Good(c, s3):
                                                ParserFast_PStep.Good(func_((column: s0.col, row: s0.row), a, b, c), s3);
                                         }
                                        }());
                                 }
                                }());
                         }
                        }())
                    }
                );
         }
        }())
    }

    static public func parserFast_map4<A: Sendable, B: Sendable, C: Sendable, D: Sendable, Value: Sendable>(_ func_: @Sendable (A, B, C, D) -> Value, _ generated_parseA: ParserFast_Parser<A>, _ generated_parseB: ParserFast_Parser<B>, _ generated_parseC: ParserFast_Parser<C>, _ generated_parseD: ParserFast_Parser<D>) -> ParserFast_Parser<Value> {
        ({ () in return switch (generated_parseA: generated_parseA, generated_parseB: generated_parseB, generated_parseC: generated_parseC, generated_parseD: generated_parseD) {
            case let (generated_parseA: ParserFast_Parser.Parser(parseA), generated_parseB: ParserFast_Parser.Parser(parseB), generated_parseC: ParserFast_Parser.Parser(parseC), generated_parseD: ParserFast_Parser.Parser(parseD)):
                ParserFast_Parser.Parser(
                    { (s0) in
                        ({ () in return switch parseA(s0) {
                            case let ParserFast_PStep.Bad(committed, x):
                                ParserFast_PStep.Bad(committed, x);

                            case let ParserFast_PStep.Good(a, s1):
                                ({ () in return switch parseB(s1) {
                                    case let ParserFast_PStep.Bad(_, x):
                                        ParserFast_PStep.Bad(true, x);

                                    case let ParserFast_PStep.Good(b, s2):
                                        ({ () in return switch parseC(s2) {
                                            case let ParserFast_PStep.Bad(_, x):
                                                ParserFast_PStep.Bad(true, x);

                                            case let ParserFast_PStep.Good(c, s3):
                                                ({ () in return switch parseD(s3) {
                                                    case let ParserFast_PStep.Bad(_, x):
                                                        ParserFast_PStep.Bad(true, x);

                                                    case let ParserFast_PStep.Good(d, s4):
                                                        ParserFast_PStep.Good(func_(a, b, c, d), s4);
                                                 }
                                                }());
                                         }
                                        }());
                                 }
                                }());
                         }
                        }())
                    }
                );
         }
        }())
    }

    static public func parserFast_map4OrSucceed<A: Sendable, B: Sendable, C: Sendable, D: Sendable, Value: Sendable>(_ func_: @Sendable (A, B, C, D) -> Value, _ generated_parseA: ParserFast_Parser<A>, _ generated_parseB: ParserFast_Parser<B>, _ generated_parseC: ParserFast_Parser<C>, _ generated_parseD: ParserFast_Parser<D>, _ fallback: Value) -> ParserFast_Parser<Value> {
        ({ () in return switch (generated_parseA: generated_parseA, generated_parseB: generated_parseB, generated_parseC: generated_parseC, generated_parseD: generated_parseD) {
            case let (generated_parseA: ParserFast_Parser.Parser(parseA), generated_parseB: ParserFast_Parser.Parser(parseB), generated_parseC: ParserFast_Parser.Parser(parseC), generated_parseD: ParserFast_Parser.Parser(parseD)):
                ParserFast_Parser.Parser(
                    { (s0) in
                        ({ () in return switch parseA(s0) {
                            case let ParserFast_PStep.Bad(c1, x):
                                ({ () in return switch c1 {
                                    case true:
                                        ParserFast_PStep.Bad(true, x);

                                    case false:
                                        ParserFast_PStep.Good(fallback, s0);
                                 }
                                }());

                            case let ParserFast_PStep.Good(a, s1):
                                ({ () in return switch parseB(s1) {
                                    case let ParserFast_PStep.Bad(_, x):
                                        ParserFast_PStep.Bad(true, x);

                                    case let ParserFast_PStep.Good(b, s2):
                                        ({ () in return switch parseC(s2) {
                                            case let ParserFast_PStep.Bad(_, x):
                                                ParserFast_PStep.Bad(true, x);

                                            case let ParserFast_PStep.Good(c, s3):
                                                ({ () in return switch parseD(s3) {
                                                    case let ParserFast_PStep.Bad(_, x):
                                                        ParserFast_PStep.Bad(true, x);

                                                    case let ParserFast_PStep.Good(d, s4):
                                                        ParserFast_PStep.Good(func_(a, b, c, d), s4);
                                                 }
                                                }());
                                         }
                                        }());
                                 }
                                }());
                         }
                        }())
                    }
                );
         }
        }())
    }

    static public func parserFast_map4WithRange<A: Sendable, B: Sendable, C: Sendable, D: Sendable, Value: Sendable>(_ func_: @Sendable (ElmSyntaxRange_Range, A, B, C, D) -> Value, _ generated_parseA: ParserFast_Parser<A>, _ generated_parseB: ParserFast_Parser<B>, _ generated_parseC: ParserFast_Parser<C>, _ generated_parseD: ParserFast_Parser<D>) -> ParserFast_Parser<Value> {
        ({ () in return switch (generated_parseA: generated_parseA, generated_parseB: generated_parseB, generated_parseC: generated_parseC, generated_parseD: generated_parseD) {
            case let (generated_parseA: ParserFast_Parser.Parser(parseA), generated_parseB: ParserFast_Parser.Parser(parseB), generated_parseC: ParserFast_Parser.Parser(parseC), generated_parseD: ParserFast_Parser.Parser(parseD)):
                ParserFast_Parser.Parser(
                    { (s0) in
                        ({ () in return switch parseA(s0) {
                            case let ParserFast_PStep.Bad(committed, x):
                                ParserFast_PStep.Bad(committed, x);

                            case let ParserFast_PStep.Good(a, s1):
                                ({ () in return switch parseB(s1) {
                                    case let ParserFast_PStep.Bad(_, x):
                                        ParserFast_PStep.Bad(true, x);

                                    case let ParserFast_PStep.Good(b, s2):
                                        ({ () in return switch parseC(s2) {
                                            case let ParserFast_PStep.Bad(_, x):
                                                ParserFast_PStep.Bad(true, x);

                                            case let ParserFast_PStep.Good(c, s3):
                                                ({ () in return switch parseD(s3) {
                                                    case let ParserFast_PStep.Bad(_, x):
                                                        ParserFast_PStep.Bad(true, x);

                                                    case let ParserFast_PStep.Good(d, s4):
                                                        ParserFast_PStep.Good(func_((end: (column: s4.col, row: s4.row), start: (column: s0.col, row: s0.row)), a, b, c, d), s4);
                                                 }
                                                }());
                                         }
                                        }());
                                 }
                                }());
                         }
                        }())
                    }
                );
         }
        }())
    }

    static public func parserFast_map4WithStartLocation<A: Sendable, B: Sendable, C: Sendable, D: Sendable, Value: Sendable>(_ func_: @Sendable (ElmSyntaxRange_Location, A, B, C, D) -> Value, _ generated_parseA: ParserFast_Parser<A>, _ generated_parseB: ParserFast_Parser<B>, _ generated_parseC: ParserFast_Parser<C>, _ generated_parseD: ParserFast_Parser<D>) -> ParserFast_Parser<Value> {
        ({ () in return switch (generated_parseA: generated_parseA, generated_parseB: generated_parseB, generated_parseC: generated_parseC, generated_parseD: generated_parseD) {
            case let (generated_parseA: ParserFast_Parser.Parser(parseA), generated_parseB: ParserFast_Parser.Parser(parseB), generated_parseC: ParserFast_Parser.Parser(parseC), generated_parseD: ParserFast_Parser.Parser(parseD)):
                ParserFast_Parser.Parser(
                    { (s0) in
                        ({ () in return switch parseA(s0) {
                            case let ParserFast_PStep.Bad(committed, x):
                                ParserFast_PStep.Bad(committed, x);

                            case let ParserFast_PStep.Good(a, s1):
                                ({ () in return switch parseB(s1) {
                                    case let ParserFast_PStep.Bad(_, x):
                                        ParserFast_PStep.Bad(true, x);

                                    case let ParserFast_PStep.Good(b, s2):
                                        ({ () in return switch parseC(s2) {
                                            case let ParserFast_PStep.Bad(_, x):
                                                ParserFast_PStep.Bad(true, x);

                                            case let ParserFast_PStep.Good(c, s3):
                                                ({ () in return switch parseD(s3) {
                                                    case let ParserFast_PStep.Bad(_, x):
                                                        ParserFast_PStep.Bad(true, x);

                                                    case let ParserFast_PStep.Good(d, s4):
                                                        ParserFast_PStep.Good(func_((column: s0.col, row: s0.row), a, b, c, d), s4);
                                                 }
                                                }());
                                         }
                                        }());
                                 }
                                }());
                         }
                        }())
                    }
                );
         }
        }())
    }

    static public func parserFast_map5<A: Sendable, B: Sendable, C: Sendable, D: Sendable, E: Sendable, Value: Sendable>(_ func_: @Sendable (A, B, C, D, E) -> Value, _ generated_parseA: ParserFast_Parser<A>, _ generated_parseB: ParserFast_Parser<B>, _ generated_parseC: ParserFast_Parser<C>, _ generated_parseD: ParserFast_Parser<D>, _ generated_parseE: ParserFast_Parser<E>) -> ParserFast_Parser<Value> {
        ({ () in return switch (generated_parseA: generated_parseA, generated_parseB: generated_parseB, generated_parseC: generated_parseC, generated_parseD: generated_parseD, generated_parseE: generated_parseE) {
            case let (generated_parseA: ParserFast_Parser.Parser(parseA), generated_parseB: ParserFast_Parser.Parser(parseB), generated_parseC: ParserFast_Parser.Parser(parseC), generated_parseD: ParserFast_Parser.Parser(parseD), generated_parseE: ParserFast_Parser.Parser(parseE)):
                ParserFast_Parser.Parser(
                    { (s0) in
                        ({ () in return switch parseA(s0) {
                            case let ParserFast_PStep.Bad(committed, x):
                                ParserFast_PStep.Bad(committed, x);

                            case let ParserFast_PStep.Good(a, s1):
                                ({ () in return switch parseB(s1) {
                                    case let ParserFast_PStep.Bad(_, x):
                                        ParserFast_PStep.Bad(true, x);

                                    case let ParserFast_PStep.Good(b, s2):
                                        ({ () in return switch parseC(s2) {
                                            case let ParserFast_PStep.Bad(_, x):
                                                ParserFast_PStep.Bad(true, x);

                                            case let ParserFast_PStep.Good(c, s3):
                                                ({ () in return switch parseD(s3) {
                                                    case let ParserFast_PStep.Bad(_, x):
                                                        ParserFast_PStep.Bad(true, x);

                                                    case let ParserFast_PStep.Good(d, s4):
                                                        ({ () in return switch parseE(s4) {
                                                            case let ParserFast_PStep.Bad(_, x):
                                                                ParserFast_PStep.Bad(true, x);

                                                            case let ParserFast_PStep.Good(e, s5):
                                                                ParserFast_PStep.Good(func_(a, b, c, d, e), s5);
                                                         }
                                                        }());
                                                 }
                                                }());
                                         }
                                        }());
                                 }
                                }());
                         }
                        }())
                    }
                );
         }
        }())
    }

    static public func parserFast_map5WithRange<A: Sendable, B: Sendable, C: Sendable, D: Sendable, E: Sendable, Value: Sendable>(_ func_: @Sendable (ElmSyntaxRange_Range, A, B, C, D, E) -> Value, _ generated_parseA: ParserFast_Parser<A>, _ generated_parseB: ParserFast_Parser<B>, _ generated_parseC: ParserFast_Parser<C>, _ generated_parseD: ParserFast_Parser<D>, _ generated_parseE: ParserFast_Parser<E>) -> ParserFast_Parser<Value> {
        ({ () in return switch (generated_parseA: generated_parseA, generated_parseB: generated_parseB, generated_parseC: generated_parseC, generated_parseD: generated_parseD, generated_parseE: generated_parseE) {
            case let (generated_parseA: ParserFast_Parser.Parser(parseA), generated_parseB: ParserFast_Parser.Parser(parseB), generated_parseC: ParserFast_Parser.Parser(parseC), generated_parseD: ParserFast_Parser.Parser(parseD), generated_parseE: ParserFast_Parser.Parser(parseE)):
                ParserFast_Parser.Parser(
                    { (s0) in
                        ({ () in return switch parseA(s0) {
                            case let ParserFast_PStep.Bad(committed, x):
                                ParserFast_PStep.Bad(committed, x);

                            case let ParserFast_PStep.Good(a, s1):
                                ({ () in return switch parseB(s1) {
                                    case let ParserFast_PStep.Bad(_, x):
                                        ParserFast_PStep.Bad(true, x);

                                    case let ParserFast_PStep.Good(b, s2):
                                        ({ () in return switch parseC(s2) {
                                            case let ParserFast_PStep.Bad(_, x):
                                                ParserFast_PStep.Bad(true, x);

                                            case let ParserFast_PStep.Good(c, s3):
                                                ({ () in return switch parseD(s3) {
                                                    case let ParserFast_PStep.Bad(_, x):
                                                        ParserFast_PStep.Bad(true, x);

                                                    case let ParserFast_PStep.Good(d, s4):
                                                        ({ () in return switch parseE(s4) {
                                                            case let ParserFast_PStep.Bad(_, x):
                                                                ParserFast_PStep.Bad(true, x);

                                                            case let ParserFast_PStep.Good(e, s5):
                                                                ParserFast_PStep.Good(func_((end: (column: s5.col, row: s5.row), start: (column: s0.col, row: s0.row)), a, b, c, d, e), s5);
                                                         }
                                                        }());
                                                 }
                                                }());
                                         }
                                        }());
                                 }
                                }());
                         }
                        }())
                    }
                );
         }
        }())
    }

    static public func parserFast_map5WithStartLocation<A: Sendable, B: Sendable, C: Sendable, D: Sendable, E: Sendable, Value: Sendable>(_ func_: @Sendable (ElmSyntaxRange_Location, A, B, C, D, E) -> Value, _ generated_parseA: ParserFast_Parser<A>, _ generated_parseB: ParserFast_Parser<B>, _ generated_parseC: ParserFast_Parser<C>, _ generated_parseD: ParserFast_Parser<D>, _ generated_parseE: ParserFast_Parser<E>) -> ParserFast_Parser<Value> {
        ({ () in return switch (generated_parseA: generated_parseA, generated_parseB: generated_parseB, generated_parseC: generated_parseC, generated_parseD: generated_parseD, generated_parseE: generated_parseE) {
            case let (generated_parseA: ParserFast_Parser.Parser(parseA), generated_parseB: ParserFast_Parser.Parser(parseB), generated_parseC: ParserFast_Parser.Parser(parseC), generated_parseD: ParserFast_Parser.Parser(parseD), generated_parseE: ParserFast_Parser.Parser(parseE)):
                ParserFast_Parser.Parser(
                    { (s0) in
                        ({ () in return switch parseA(s0) {
                            case let ParserFast_PStep.Bad(committed, x):
                                ParserFast_PStep.Bad(committed, x);

                            case let ParserFast_PStep.Good(a, s1):
                                ({ () in return switch parseB(s1) {
                                    case let ParserFast_PStep.Bad(_, x):
                                        ParserFast_PStep.Bad(true, x);

                                    case let ParserFast_PStep.Good(b, s2):
                                        ({ () in return switch parseC(s2) {
                                            case let ParserFast_PStep.Bad(_, x):
                                                ParserFast_PStep.Bad(true, x);

                                            case let ParserFast_PStep.Good(c, s3):
                                                ({ () in return switch parseD(s3) {
                                                    case let ParserFast_PStep.Bad(_, x):
                                                        ParserFast_PStep.Bad(true, x);

                                                    case let ParserFast_PStep.Good(d, s4):
                                                        ({ () in return switch parseE(s4) {
                                                            case let ParserFast_PStep.Bad(_, x):
                                                                ParserFast_PStep.Bad(true, x);

                                                            case let ParserFast_PStep.Good(e, s5):
                                                                ParserFast_PStep.Good(func_((column: s0.col, row: s0.row), a, b, c, d, e), s5);
                                                         }
                                                        }());
                                                 }
                                                }());
                                         }
                                        }());
                                 }
                                }());
                         }
                        }())
                    }
                );
         }
        }())
    }

    static public func parserFast_map6<A: Sendable, B: Sendable, C: Sendable, D: Sendable, E: Sendable, F: Sendable, Value: Sendable>(_ func_: @Sendable (A, B, C, D, E, F) -> Value, _ generated_parseA: ParserFast_Parser<A>, _ generated_parseB: ParserFast_Parser<B>, _ generated_parseC: ParserFast_Parser<C>, _ generated_parseD: ParserFast_Parser<D>, _ generated_parseE: ParserFast_Parser<E>, _ generated_parseF: ParserFast_Parser<F>) -> ParserFast_Parser<Value> {
        ({ () in return switch (generated_parseA: generated_parseA, generated_parseB: generated_parseB, generated_parseC: generated_parseC, generated_parseD: generated_parseD, generated_parseE: generated_parseE, generated_parseF: generated_parseF) {
            case let (generated_parseA: ParserFast_Parser.Parser(parseA), generated_parseB: ParserFast_Parser.Parser(parseB), generated_parseC: ParserFast_Parser.Parser(parseC), generated_parseD: ParserFast_Parser.Parser(parseD), generated_parseE: ParserFast_Parser.Parser(parseE), generated_parseF: ParserFast_Parser.Parser(parseF)):
                ParserFast_Parser.Parser(
                    { (s0) in
                        ({ () in return switch parseA(s0) {
                            case let ParserFast_PStep.Bad(committed, x):
                                ParserFast_PStep.Bad(committed, x);

                            case let ParserFast_PStep.Good(a, s1):
                                ({ () in return switch parseB(s1) {
                                    case let ParserFast_PStep.Bad(_, x):
                                        ParserFast_PStep.Bad(true, x);

                                    case let ParserFast_PStep.Good(b, s2):
                                        ({ () in return switch parseC(s2) {
                                            case let ParserFast_PStep.Bad(_, x):
                                                ParserFast_PStep.Bad(true, x);

                                            case let ParserFast_PStep.Good(c, s3):
                                                ({ () in return switch parseD(s3) {
                                                    case let ParserFast_PStep.Bad(_, x):
                                                        ParserFast_PStep.Bad(true, x);

                                                    case let ParserFast_PStep.Good(d, s4):
                                                        ({ () in return switch parseE(s4) {
                                                            case let ParserFast_PStep.Bad(_, x):
                                                                ParserFast_PStep.Bad(true, x);

                                                            case let ParserFast_PStep.Good(e, s5):
                                                                ({ () in return switch parseF(s5) {
                                                                    case let ParserFast_PStep.Bad(_, x):
                                                                        ParserFast_PStep.Bad(true, x);

                                                                    case let ParserFast_PStep.Good(f, s6):
                                                                        ParserFast_PStep.Good(func_(a, b, c, d, e, f), s6);
                                                                 }
                                                                }());
                                                         }
                                                        }());
                                                 }
                                                }());
                                         }
                                        }());
                                 }
                                }());
                         }
                        }())
                    }
                );
         }
        }())
    }

    static public func parserFast_map6WithStartLocation<A: Sendable, B: Sendable, C: Sendable, D: Sendable, E: Sendable, F: Sendable, Value: Sendable>(_ func_: @Sendable (ElmSyntaxRange_Location, A, B, C, D, E, F) -> Value, _ generated_parseA: ParserFast_Parser<A>, _ generated_parseB: ParserFast_Parser<B>, _ generated_parseC: ParserFast_Parser<C>, _ generated_parseD: ParserFast_Parser<D>, _ generated_parseE: ParserFast_Parser<E>, _ generated_parseF: ParserFast_Parser<F>) -> ParserFast_Parser<Value> {
        ({ () in return switch (generated_parseA: generated_parseA, generated_parseB: generated_parseB, generated_parseC: generated_parseC, generated_parseD: generated_parseD, generated_parseE: generated_parseE, generated_parseF: generated_parseF) {
            case let (generated_parseA: ParserFast_Parser.Parser(parseA), generated_parseB: ParserFast_Parser.Parser(parseB), generated_parseC: ParserFast_Parser.Parser(parseC), generated_parseD: ParserFast_Parser.Parser(parseD), generated_parseE: ParserFast_Parser.Parser(parseE), generated_parseF: ParserFast_Parser.Parser(parseF)):
                ParserFast_Parser.Parser(
                    { (s0) in
                        ({ () in return switch parseA(s0) {
                            case let ParserFast_PStep.Bad(committed, x):
                                ParserFast_PStep.Bad(committed, x);

                            case let ParserFast_PStep.Good(a, s1):
                                ({ () in return switch parseB(s1) {
                                    case let ParserFast_PStep.Bad(_, x):
                                        ParserFast_PStep.Bad(true, x);

                                    case let ParserFast_PStep.Good(b, s2):
                                        ({ () in return switch parseC(s2) {
                                            case let ParserFast_PStep.Bad(_, x):
                                                ParserFast_PStep.Bad(true, x);

                                            case let ParserFast_PStep.Good(c, s3):
                                                ({ () in return switch parseD(s3) {
                                                    case let ParserFast_PStep.Bad(_, x):
                                                        ParserFast_PStep.Bad(true, x);

                                                    case let ParserFast_PStep.Good(d, s4):
                                                        ({ () in return switch parseE(s4) {
                                                            case let ParserFast_PStep.Bad(_, x):
                                                                ParserFast_PStep.Bad(true, x);

                                                            case let ParserFast_PStep.Good(e, s5):
                                                                ({ () in return switch parseF(s5) {
                                                                    case let ParserFast_PStep.Bad(_, x):
                                                                        ParserFast_PStep.Bad(true, x);

                                                                    case let ParserFast_PStep.Good(f, s6):
                                                                        ParserFast_PStep.Good(func_((column: s0.col, row: s0.row), a, b, c, d, e, f), s6);
                                                                 }
                                                                }());
                                                         }
                                                        }());
                                                 }
                                                }());
                                         }
                                        }());
                                 }
                                }());
                         }
                        }())
                    }
                );
         }
        }())
    }

    static public func parserFast_map7<A: Sendable, B: Sendable, C: Sendable, D: Sendable, E: Sendable, F: Sendable, G: Sendable, Value: Sendable>(_ func_: @Sendable (A, B, C, D, E, F, G) -> Value, _ generated_parseA: ParserFast_Parser<A>, _ generated_parseB: ParserFast_Parser<B>, _ generated_parseC: ParserFast_Parser<C>, _ generated_parseD: ParserFast_Parser<D>, _ generated_parseE: ParserFast_Parser<E>, _ generated_parseF: ParserFast_Parser<F>, _ generated_parseG: ParserFast_Parser<G>) -> ParserFast_Parser<Value> {
        ({ () in return switch (generated_parseA: generated_parseA, generated_parseB: generated_parseB, generated_parseC: generated_parseC, generated_parseD: generated_parseD, generated_parseE: generated_parseE, generated_parseF: generated_parseF, generated_parseG: generated_parseG) {
            case let (generated_parseA: ParserFast_Parser.Parser(parseA), generated_parseB: ParserFast_Parser.Parser(parseB), generated_parseC: ParserFast_Parser.Parser(parseC), generated_parseD: ParserFast_Parser.Parser(parseD), generated_parseE: ParserFast_Parser.Parser(parseE), generated_parseF: ParserFast_Parser.Parser(parseF), generated_parseG: ParserFast_Parser.Parser(parseG)):
                ParserFast_Parser.Parser(
                    { (s0) in
                        ({ () in return switch parseA(s0) {
                            case let ParserFast_PStep.Bad(committed, x):
                                ParserFast_PStep.Bad(committed, x);

                            case let ParserFast_PStep.Good(a, s1):
                                ({ () in return switch parseB(s1) {
                                    case let ParserFast_PStep.Bad(_, x):
                                        ParserFast_PStep.Bad(true, x);

                                    case let ParserFast_PStep.Good(b, s2):
                                        ({ () in return switch parseC(s2) {
                                            case let ParserFast_PStep.Bad(_, x):
                                                ParserFast_PStep.Bad(true, x);

                                            case let ParserFast_PStep.Good(c, s3):
                                                ({ () in return switch parseD(s3) {
                                                    case let ParserFast_PStep.Bad(_, x):
                                                        ParserFast_PStep.Bad(true, x);

                                                    case let ParserFast_PStep.Good(d, s4):
                                                        ({ () in return switch parseE(s4) {
                                                            case let ParserFast_PStep.Bad(_, x):
                                                                ParserFast_PStep.Bad(true, x);

                                                            case let ParserFast_PStep.Good(e, s5):
                                                                ({ () in return switch parseF(s5) {
                                                                    case let ParserFast_PStep.Bad(_, x):
                                                                        ParserFast_PStep.Bad(true, x);

                                                                    case let ParserFast_PStep.Good(f, s6):
                                                                        ({ () in return switch parseG(s6) {
                                                                            case let ParserFast_PStep.Bad(_, x):
                                                                                ParserFast_PStep.Bad(true, x);

                                                                            case let ParserFast_PStep.Good(g, s7):
                                                                                ParserFast_PStep.Good(func_(a, b, c, d, e, f, g), s7);
                                                                         }
                                                                        }());
                                                                 }
                                                                }());
                                                         }
                                                        }());
                                                 }
                                                }());
                                         }
                                        }());
                                 }
                                }());
                         }
                        }())
                    }
                );
         }
        }())
    }

    static public func parserFast_map7WithRange<A: Sendable, B: Sendable, C: Sendable, D: Sendable, E: Sendable, F: Sendable, G: Sendable, Value: Sendable>(_ func_: @Sendable (ElmSyntaxRange_Range, A, B, C, D, E, F, G) -> Value, _ generated_parseA: ParserFast_Parser<A>, _ generated_parseB: ParserFast_Parser<B>, _ generated_parseC: ParserFast_Parser<C>, _ generated_parseD: ParserFast_Parser<D>, _ generated_parseE: ParserFast_Parser<E>, _ generated_parseF: ParserFast_Parser<F>, _ generated_parseG: ParserFast_Parser<G>) -> ParserFast_Parser<Value> {
        ({ () in return switch (generated_parseA: generated_parseA, generated_parseB: generated_parseB, generated_parseC: generated_parseC, generated_parseD: generated_parseD, generated_parseE: generated_parseE, generated_parseF: generated_parseF, generated_parseG: generated_parseG) {
            case let (generated_parseA: ParserFast_Parser.Parser(parseA), generated_parseB: ParserFast_Parser.Parser(parseB), generated_parseC: ParserFast_Parser.Parser(parseC), generated_parseD: ParserFast_Parser.Parser(parseD), generated_parseE: ParserFast_Parser.Parser(parseE), generated_parseF: ParserFast_Parser.Parser(parseF), generated_parseG: ParserFast_Parser.Parser(parseG)):
                ParserFast_Parser.Parser(
                    { (s0) in
                        ({ () in return switch parseA(s0) {
                            case let ParserFast_PStep.Bad(committed, x):
                                ParserFast_PStep.Bad(committed, x);

                            case let ParserFast_PStep.Good(a, s1):
                                ({ () in return switch parseB(s1) {
                                    case let ParserFast_PStep.Bad(_, x):
                                        ParserFast_PStep.Bad(true, x);

                                    case let ParserFast_PStep.Good(b, s2):
                                        ({ () in return switch parseC(s2) {
                                            case let ParserFast_PStep.Bad(_, x):
                                                ParserFast_PStep.Bad(true, x);

                                            case let ParserFast_PStep.Good(c, s3):
                                                ({ () in return switch parseD(s3) {
                                                    case let ParserFast_PStep.Bad(_, x):
                                                        ParserFast_PStep.Bad(true, x);

                                                    case let ParserFast_PStep.Good(d, s4):
                                                        ({ () in return switch parseE(s4) {
                                                            case let ParserFast_PStep.Bad(_, x):
                                                                ParserFast_PStep.Bad(true, x);

                                                            case let ParserFast_PStep.Good(e, s5):
                                                                ({ () in return switch parseF(s5) {
                                                                    case let ParserFast_PStep.Bad(_, x):
                                                                        ParserFast_PStep.Bad(true, x);

                                                                    case let ParserFast_PStep.Good(f, s6):
                                                                        ({ () in return switch parseG(s6) {
                                                                            case let ParserFast_PStep.Bad(_, x):
                                                                                ParserFast_PStep.Bad(true, x);

                                                                            case let ParserFast_PStep.Good(g, s7):
                                                                                ParserFast_PStep.Good(func_((end: (column: s7.col, row: s7.row), start: (column: s0.col, row: s0.row)), a, b, c, d, e, f, g), s7);
                                                                         }
                                                                        }());
                                                                 }
                                                                }());
                                                         }
                                                        }());
                                                 }
                                                }());
                                         }
                                        }());
                                 }
                                }());
                         }
                        }())
                    }
                );
         }
        }())
    }

    static public func parserFast_map8WithStartLocation<A: Sendable, B: Sendable, C: Sendable, D: Sendable, E: Sendable, F: Sendable, G: Sendable, H: Sendable, Value: Sendable>(_ func_: @Sendable (ElmSyntaxRange_Location, A, B, C, D, E, F, G, H) -> Value, _ generated_parseA: ParserFast_Parser<A>, _ generated_parseB: ParserFast_Parser<B>, _ generated_parseC: ParserFast_Parser<C>, _ generated_parseD: ParserFast_Parser<D>, _ generated_parseE: ParserFast_Parser<E>, _ generated_parseF: ParserFast_Parser<F>, _ generated_parseG: ParserFast_Parser<G>, _ generated_parseH: ParserFast_Parser<H>) -> ParserFast_Parser<Value> {
        ({ () in return switch (generated_parseA: generated_parseA, generated_parseB: generated_parseB, generated_parseC: generated_parseC, generated_parseD: generated_parseD, generated_parseE: generated_parseE, generated_parseF: generated_parseF, generated_parseG: generated_parseG, generated_parseH: generated_parseH) {
            case let (generated_parseA: ParserFast_Parser.Parser(parseA), generated_parseB: ParserFast_Parser.Parser(parseB), generated_parseC: ParserFast_Parser.Parser(parseC), generated_parseD: ParserFast_Parser.Parser(parseD), generated_parseE: ParserFast_Parser.Parser(parseE), generated_parseF: ParserFast_Parser.Parser(parseF), generated_parseG: ParserFast_Parser.Parser(parseG), generated_parseH: ParserFast_Parser.Parser(parseH)):
                ParserFast_Parser.Parser(
                    { (s0) in
                        ({ () in return switch parseA(s0) {
                            case let ParserFast_PStep.Bad(committed, x):
                                ParserFast_PStep.Bad(committed, x);

                            case let ParserFast_PStep.Good(a, s1):
                                ({ () in return switch parseB(s1) {
                                    case let ParserFast_PStep.Bad(_, x):
                                        ParserFast_PStep.Bad(true, x);

                                    case let ParserFast_PStep.Good(b, s2):
                                        ({ () in return switch parseC(s2) {
                                            case let ParserFast_PStep.Bad(_, x):
                                                ParserFast_PStep.Bad(true, x);

                                            case let ParserFast_PStep.Good(c, s3):
                                                ({ () in return switch parseD(s3) {
                                                    case let ParserFast_PStep.Bad(_, x):
                                                        ParserFast_PStep.Bad(true, x);

                                                    case let ParserFast_PStep.Good(d, s4):
                                                        ({ () in return switch parseE(s4) {
                                                            case let ParserFast_PStep.Bad(_, x):
                                                                ParserFast_PStep.Bad(true, x);

                                                            case let ParserFast_PStep.Good(e, s5):
                                                                ({ () in return switch parseF(s5) {
                                                                    case let ParserFast_PStep.Bad(_, x):
                                                                        ParserFast_PStep.Bad(true, x);

                                                                    case let ParserFast_PStep.Good(f, s6):
                                                                        ({ () in return switch parseG(s6) {
                                                                            case let ParserFast_PStep.Bad(_, x):
                                                                                ParserFast_PStep.Bad(true, x);

                                                                            case let ParserFast_PStep.Good(g, s7):
                                                                                ({ () in return switch parseH(s7) {
                                                                                    case let ParserFast_PStep.Bad(_, x):
                                                                                        ParserFast_PStep.Bad(true, x);

                                                                                    case let ParserFast_PStep.Good(h, s8):
                                                                                        ParserFast_PStep.Good(func_((column: s0.col, row: s0.row), a, b, c, d, e, f, g, h), s8);
                                                                                 }
                                                                                }());
                                                                         }
                                                                        }());
                                                                 }
                                                                }());
                                                         }
                                                        }());
                                                 }
                                                }());
                                         }
                                        }());
                                 }
                                }());
                         }
                        }())
                    }
                );
         }
        }())
    }

    static public func parserFast_map9WithRange<A: Sendable, B: Sendable, C: Sendable, D: Sendable, E: Sendable, F: Sendable, G: Sendable, H: Sendable, I: Sendable, Value: Sendable>(_ func_: @Sendable (ElmSyntaxRange_Range, A, B, C, D, E, F, G, H, I) -> Value, _ generated_parseA: ParserFast_Parser<A>, _ generated_parseB: ParserFast_Parser<B>, _ generated_parseC: ParserFast_Parser<C>, _ generated_parseD: ParserFast_Parser<D>, _ generated_parseE: ParserFast_Parser<E>, _ generated_parseF: ParserFast_Parser<F>, _ generated_parseG: ParserFast_Parser<G>, _ generated_parseH: ParserFast_Parser<H>, _ generated_parseI: ParserFast_Parser<I>) -> ParserFast_Parser<Value> {
        ({ () in return switch (generated_parseA: generated_parseA, generated_parseB: generated_parseB, generated_parseC: generated_parseC, generated_parseD: generated_parseD, generated_parseE: generated_parseE, generated_parseF: generated_parseF, generated_parseG: generated_parseG, generated_parseH: generated_parseH, generated_parseI: generated_parseI) {
            case let (generated_parseA: ParserFast_Parser.Parser(parseA), generated_parseB: ParserFast_Parser.Parser(parseB), generated_parseC: ParserFast_Parser.Parser(parseC), generated_parseD: ParserFast_Parser.Parser(parseD), generated_parseE: ParserFast_Parser.Parser(parseE), generated_parseF: ParserFast_Parser.Parser(parseF), generated_parseG: ParserFast_Parser.Parser(parseG), generated_parseH: ParserFast_Parser.Parser(parseH), generated_parseI: ParserFast_Parser.Parser(parseI)):
                ParserFast_Parser.Parser(
                    { (s0) in
                        ({ () in return switch parseA(s0) {
                            case let ParserFast_PStep.Bad(committed, x):
                                ParserFast_PStep.Bad(committed, x);

                            case let ParserFast_PStep.Good(a, s1):
                                ({ () in return switch parseB(s1) {
                                    case let ParserFast_PStep.Bad(_, x):
                                        ParserFast_PStep.Bad(true, x);

                                    case let ParserFast_PStep.Good(b, s2):
                                        ({ () in return switch parseC(s2) {
                                            case let ParserFast_PStep.Bad(_, x):
                                                ParserFast_PStep.Bad(true, x);

                                            case let ParserFast_PStep.Good(c, s3):
                                                ({ () in return switch parseD(s3) {
                                                    case let ParserFast_PStep.Bad(_, x):
                                                        ParserFast_PStep.Bad(true, x);

                                                    case let ParserFast_PStep.Good(d, s4):
                                                        ({ () in return switch parseE(s4) {
                                                            case let ParserFast_PStep.Bad(_, x):
                                                                ParserFast_PStep.Bad(true, x);

                                                            case let ParserFast_PStep.Good(e, s5):
                                                                ({ () in return switch parseF(s5) {
                                                                    case let ParserFast_PStep.Bad(_, x):
                                                                        ParserFast_PStep.Bad(true, x);

                                                                    case let ParserFast_PStep.Good(f, s6):
                                                                        ({ () in return switch parseG(s6) {
                                                                            case let ParserFast_PStep.Bad(_, x):
                                                                                ParserFast_PStep.Bad(true, x);

                                                                            case let ParserFast_PStep.Good(g, s7):
                                                                                ({ () in return switch parseH(s7) {
                                                                                    case let ParserFast_PStep.Bad(_, x):
                                                                                        ParserFast_PStep.Bad(true, x);

                                                                                    case let ParserFast_PStep.Good(h, s8):
                                                                                        ({ () in return switch parseI(s8) {
                                                                                            case let ParserFast_PStep.Bad(_, x):
                                                                                                ParserFast_PStep.Bad(true, x);

                                                                                            case let ParserFast_PStep.Good(i, s9):
                                                                                                ParserFast_PStep.Good(func_((end: (column: s9.col, row: s9.row), start: (column: s0.col, row: s0.row)), a, b, c, d, e, f, g, h, i), s9);
                                                                                         }
                                                                                        }());
                                                                                 }
                                                                                }());
                                                                         }
                                                                        }());
                                                                 }
                                                                }());
                                                         }
                                                        }());
                                                 }
                                                }());
                                         }
                                        }());
                                 }
                                }());
                         }
                        }())
                    }
                );
         }
        }())
    }

    static public func parserFast_mapOrSucceed<A: Sendable, Attempt: Sendable>(_ attemptToResult: @Sendable (Attempt) -> A, _ generated_attempt: ParserFast_Parser<Attempt>, _ fallbackResult: A) -> ParserFast_Parser<A> {
        ({ () in return switch (generated_attempt: generated_attempt, unusedDummyFieldToMakeSwiftHappy: ()) {
            case let (generated_attempt: ParserFast_Parser.Parser(attempt), unusedDummyFieldToMakeSwiftHappy: ()):
                ParserFast_Parser.Parser(
                    { (s) in
                        ({ () in return switch attempt(s) {
                            case let ParserFast_PStep.Good(attemptResult, s1):
                                ParserFast_PStep.Good(attemptToResult(attemptResult), s1);

                            case let ParserFast_PStep.Bad(firstCommitted, _):
                                ({ () in return switch firstCommitted {
                                    case true:
                                        parserFast_pStepBadCommitting();

                                    case false:
                                        ParserFast_PStep.Good(fallbackResult, s);
                                 }
                                }());
                         }
                        }())
                    }
                );
         }
        }())
    }

    static public func parserFast_mapWithRange<A: Sendable, B: Sendable>(_ combineStartAndResult: @Sendable (ElmSyntaxRange_Range, A) -> B, _ generated_parse: ParserFast_Parser<A>) -> ParserFast_Parser<B> {
        ({ () in return switch (generated_parse: generated_parse, unusedDummyFieldToMakeSwiftHappy: ()) {
            case let (generated_parse: ParserFast_Parser.Parser(parse), unusedDummyFieldToMakeSwiftHappy: ()):
                ParserFast_Parser.Parser(
                    { (s0) in
                        ({ () in return switch parse(s0) {
                            case let ParserFast_PStep.Good(a, s1):
                                ParserFast_PStep.Good(combineStartAndResult((end: (column: s1.col, row: s1.row), start: (column: s0.col, row: s0.row)), a), s1);

                            case let ParserFast_PStep.Bad(committed, x):
                                ParserFast_PStep.Bad(committed, x);
                         }
                        }())
                    }
                );
         }
        }())
    }

    static public func parserFast_nestableMultiCommentMapWithRange<Res: Sendable>(_ rangeContentToRes: @Sendable (ElmSyntaxRange_Range, String) -> Res, _ generated_openChar_openTail:
        (first: Character,
         second: String
        ), _ generated_closeChar_closeTail:
        (first: Character,
         second: String
        )) -> ParserFast_Parser<Res> {
        ({ () in return switch (generated_closeChar_closeTail: generated_closeChar_closeTail, generated_openChar_openTail: generated_openChar_openTail) {
            case let (generated_closeChar_closeTail: (first: closeChar, second: closeTail), generated_openChar_openTail: (first: openChar, second: openTail)):
                ({ () in let open_:String =
                    string_cons(openChar, openTail);

                 let isNotRelevant:@Sendable (Character) -> Bool =
                    { (char) in
                        basics_and(basics_neq(char, openChar), basics_and(basics_neq(char, closeChar), basics_not(charExtra_isUtf16Surrogate(char))))
                    };

                 let close:String =
                    string_cons(closeChar, closeTail);

                 return parserFast_map2WithRange(
                    { (range, afterOpen, contentAfterAfterOpen) in
                        rangeContentToRes(range, string_append(open_, string_append(afterOpen, string_append(contentAfterAfterOpen, string_append(close, "")))))
                    },
                    parserFast_symbolFollowedBy(open_, parserFast_while(isNotRelevant)),
                    parserFast_oneOf2(
                        parserFast_symbol(close, ""),
                        parserFast_loop(
                            (first: "", second: 1.0),
                            parserFast_oneOf3(
                                parserFast_symbol(close, (first: close, second: basics_negate(1.0))),
                                parserFast_symbol(open_, (first: open_, second: 1.0)),
                                parserFast_anyCharFollowedByWhileMap(
                                    { (consumed) in
                                        (first: consumed, second: 0.0)
                                    },
                                    isNotRelevant
                                )
                            ),
                            { (generated_toAppend_nestingChange, generated_soFarContent_soFarNesting) in
                                ({ () in return switch (generated_soFarContent_soFarNesting: generated_soFarContent_soFarNesting, generated_toAppend_nestingChange: generated_toAppend_nestingChange) {
                                    case let (generated_soFarContent_soFarNesting: (first: soFarContent, second: soFarNesting), generated_toAppend_nestingChange: (first: toAppend, second: nestingChange)):
                                        ({ () in let newNesting:Double =
                                            basics_add(soFarNesting, nestingChange);

                                         return ({ () in return switch basics_eq(newNesting, 0.0) {
                                            case true:
                                                ParserFast_Step.Done(soFarContent);

                                            case false:
                                                ParserFast_Step.Loop((first: string_append(soFarContent, string_append(toAppend, "")), second: newNesting));
                                          }
                                         }())
                                        }());
                                 }
                                }())
                            }
                        )
                    )
                 )
                }());
         }
        }())
    }

    static public func parserFast_offsetSourceAndThen<A: Sendable>(_ callback: @Sendable (Double, String) -> ParserFast_Parser<A>) -> ParserFast_Parser<A> {
        ParserFast_Parser.Parser(
            { (s) in
                ({ () in return switch callback(s.offset, s.src) {
                    case let ParserFast_Parser.Parser(parse):
                        parse(s);
                 }
                }())
            }
        )
    }

    static public func parserFast_offsetSourceAndThenOrSucceed<A: Sendable>(_ callback: @Sendable (Double, String) -> Maybe_Maybe<ParserFast_Parser<A>>, _ fallback: A) -> ParserFast_Parser<A> {
        ParserFast_Parser.Parser(
            { (s) in
                ({ () in return switch callback(s.offset, s.src) {
                    case Maybe_Maybe.Nothing:
                        ParserFast_PStep.Good(fallback, s);

                    case let Maybe_Maybe.Just(ParserFast_Parser.Parser(parse)):
                        parse(s);
                 }
                }())
            }
        )
    }

    static public func parserFast_oneOf2<A: Sendable>(_ generated_attemptFirst: ParserFast_Parser<A>, _ generated_attemptSecond: ParserFast_Parser<A>) -> ParserFast_Parser<A> {
        ({ () in return switch (generated_attemptFirst: generated_attemptFirst, generated_attemptSecond: generated_attemptSecond) {
            case let (generated_attemptFirst: ParserFast_Parser.Parser(attemptFirst), generated_attemptSecond: ParserFast_Parser.Parser(attemptSecond)):
                ParserFast_Parser.Parser(
                    { (s) in
                        ({ () in return switch attemptFirst(s) {
                            case let ParserFast_PStep.Good(generated_firstGood0, generated_firstGood1):
                                ({ () in let firstGood =
                                    ParserFast_PStep.Good(generated_firstGood0, generated_firstGood1);

                                 return firstGood
                                }());

                            case let ParserFast_PStep.Bad(firstCommitted, generated_firstBad1):
                                ({ () in let firstBad =
                                    ParserFast_PStep.Bad(firstCommitted, generated_firstBad1);

                                 return ({ () in return switch firstCommitted {
                                    case true:
                                        firstBad;

                                    case false:
                                        ({ () in return switch attemptSecond(s) {
                                            case let ParserFast_PStep.Good(generated_secondGood0, generated_secondGood1):
                                                ({ () in let secondGood =
                                                    ParserFast_PStep.Good(generated_secondGood0, generated_secondGood1);

                                                 return secondGood
                                                }());

                                            case let ParserFast_PStep.Bad(secondCommitted, generated_secondBad1):
                                                ({ () in let secondBad =
                                                    ParserFast_PStep.Bad(secondCommitted, generated_secondBad1);

                                                 return ({ () in return switch secondCommitted {
                                                    case true:
                                                        secondBad;

                                                    case false:
                                                        parserFast_pStepBadBacktracking();
                                                  }
                                                 }())
                                                }());
                                         }
                                        }());
                                  }
                                 }())
                                }());
                         }
                        }())
                    }
                );
         }
        }())
    }

    static public func parserFast_oneOf2Map<Choice: Sendable, First: Sendable, Second: Sendable>(_ firstToChoice: @Sendable (First) -> Choice, _ generated_attemptFirst: ParserFast_Parser<First>, _ secondToChoice: @Sendable (Second) -> Choice, _ generated_attemptSecond: ParserFast_Parser<Second>) -> ParserFast_Parser<Choice> {
        ({ () in return switch (generated_attemptFirst: generated_attemptFirst, generated_attemptSecond: generated_attemptSecond) {
            case let (generated_attemptFirst: ParserFast_Parser.Parser(attemptFirst), generated_attemptSecond: ParserFast_Parser.Parser(attemptSecond)):
                ParserFast_Parser.Parser(
                    { (s) in
                        ({ () in return switch attemptFirst(s) {
                            case let ParserFast_PStep.Good(first, s1):
                                ParserFast_PStep.Good(firstToChoice(first), s1);

                            case let ParserFast_PStep.Bad(firstCommitted, firstX):
                                ({ () in return switch firstCommitted {
                                    case true:
                                        ParserFast_PStep.Bad(firstCommitted, firstX);

                                    case false:
                                        ({ () in return switch attemptSecond(s) {
                                            case let ParserFast_PStep.Good(second, s1):
                                                ParserFast_PStep.Good(secondToChoice(second), s1);

                                            case let ParserFast_PStep.Bad(secondCommitted, secondX):
                                                ({ () in return switch secondCommitted {
                                                    case true:
                                                        ParserFast_PStep.Bad(secondCommitted, secondX);

                                                    case false:
                                                        parserFast_pStepBadBacktracking();
                                                 }
                                                }());
                                         }
                                        }());
                                 }
                                }());
                         }
                        }())
                    }
                );
         }
        }())
    }

    static public func parserFast_oneOf2MapWithStartRowColumnAndEndRowColumn<Choice: Sendable, First: Sendable, Second: Sendable>(_ firstToChoice: @Sendable (Double, Double, First, Double, Double) -> Choice, _ generated_attemptFirst: ParserFast_Parser<First>, _ secondToChoice: @Sendable (Double, Double, Second, Double, Double) -> Choice, _ generated_attemptSecond: ParserFast_Parser<Second>) -> ParserFast_Parser<Choice> {
        ({ () in return switch (generated_attemptFirst: generated_attemptFirst, generated_attemptSecond: generated_attemptSecond) {
            case let (generated_attemptFirst: ParserFast_Parser.Parser(attemptFirst), generated_attemptSecond: ParserFast_Parser.Parser(attemptSecond)):
                ParserFast_Parser.Parser(
                    { (s) in
                        ({ () in return switch attemptFirst(s) {
                            case let ParserFast_PStep.Good(first, s1):
                                ParserFast_PStep.Good(firstToChoice(s.row, s.col, first, s1.row, s1.col), s1);

                            case let ParserFast_PStep.Bad(firstCommitted, firstX):
                                ({ () in return switch firstCommitted {
                                    case true:
                                        ParserFast_PStep.Bad(firstCommitted, firstX);

                                    case false:
                                        ({ () in return switch attemptSecond(s) {
                                            case let ParserFast_PStep.Good(second, s1):
                                                ParserFast_PStep.Good(secondToChoice(s.row, s.col, second, s1.row, s1.col), s1);

                                            case let ParserFast_PStep.Bad(secondCommitted, secondX):
                                                ({ () in return switch secondCommitted {
                                                    case true:
                                                        ParserFast_PStep.Bad(secondCommitted, secondX);

                                                    case false:
                                                        parserFast_pStepBadBacktracking();
                                                 }
                                                }());
                                         }
                                        }());
                                 }
                                }());
                         }
                        }())
                    }
                );
         }
        }())
    }

    static public func parserFast_oneOf2OrSucceed<A: Sendable>(_ generated_attemptFirst: ParserFast_Parser<A>, _ generated_attemptSecond: ParserFast_Parser<A>, _ fallbackResult: A) -> ParserFast_Parser<A> {
        ({ () in return switch (generated_attemptFirst: generated_attemptFirst, generated_attemptSecond: generated_attemptSecond) {
            case let (generated_attemptFirst: ParserFast_Parser.Parser(attemptFirst), generated_attemptSecond: ParserFast_Parser.Parser(attemptSecond)):
                ParserFast_Parser.Parser(
                    { (s) in
                        ({ () in return switch attemptFirst(s) {
                            case let ParserFast_PStep.Good(generated_firstGood0, generated_firstGood1):
                                ({ () in let firstGood =
                                    ParserFast_PStep.Good(generated_firstGood0, generated_firstGood1);

                                 return firstGood
                                }());

                            case let ParserFast_PStep.Bad(firstCommitted, generated_firstBad1):
                                ({ () in let firstBad =
                                    ParserFast_PStep.Bad(firstCommitted, generated_firstBad1);

                                 return ({ () in return switch firstCommitted {
                                    case true:
                                        firstBad;

                                    case false:
                                        ({ () in return switch attemptSecond(s) {
                                            case let ParserFast_PStep.Good(generated_secondGood0, generated_secondGood1):
                                                ({ () in let secondGood =
                                                    ParserFast_PStep.Good(generated_secondGood0, generated_secondGood1);

                                                 return secondGood
                                                }());

                                            case let ParserFast_PStep.Bad(secondCommitted, generated_secondBad1):
                                                ({ () in let secondBad =
                                                    ParserFast_PStep.Bad(secondCommitted, generated_secondBad1);

                                                 return ({ () in return switch secondCommitted {
                                                    case true:
                                                        secondBad;

                                                    case false:
                                                        ParserFast_PStep.Good(fallbackResult, s);
                                                  }
                                                 }())
                                                }());
                                         }
                                        }());
                                  }
                                 }())
                                }());
                         }
                        }())
                    }
                );
         }
        }())
    }

    static public func parserFast_oneOf3<A: Sendable>(_ generated_attemptFirst: ParserFast_Parser<A>, _ generated_attemptSecond: ParserFast_Parser<A>, _ generated_attemptThird: ParserFast_Parser<A>) -> ParserFast_Parser<A> {
        ({ () in return switch (generated_attemptFirst: generated_attemptFirst, generated_attemptSecond: generated_attemptSecond, generated_attemptThird: generated_attemptThird) {
            case let (generated_attemptFirst: ParserFast_Parser.Parser(attemptFirst), generated_attemptSecond: ParserFast_Parser.Parser(attemptSecond), generated_attemptThird: ParserFast_Parser.Parser(attemptThird)):
                ParserFast_Parser.Parser(
                    { (s) in
                        ({ () in return switch attemptFirst(s) {
                            case let ParserFast_PStep.Good(generated_firstGood0, generated_firstGood1):
                                ({ () in let firstGood =
                                    ParserFast_PStep.Good(generated_firstGood0, generated_firstGood1);

                                 return firstGood
                                }());

                            case let ParserFast_PStep.Bad(firstCommitted, generated_firstBad1):
                                ({ () in let firstBad =
                                    ParserFast_PStep.Bad(firstCommitted, generated_firstBad1);

                                 return ({ () in return switch firstCommitted {
                                    case true:
                                        firstBad;

                                    case false:
                                        ({ () in return switch attemptSecond(s) {
                                            case let ParserFast_PStep.Good(generated_secondGood0, generated_secondGood1):
                                                ({ () in let secondGood =
                                                    ParserFast_PStep.Good(generated_secondGood0, generated_secondGood1);

                                                 return secondGood
                                                }());

                                            case let ParserFast_PStep.Bad(secondCommitted, generated_secondBad1):
                                                ({ () in let secondBad =
                                                    ParserFast_PStep.Bad(secondCommitted, generated_secondBad1);

                                                 return ({ () in return switch secondCommitted {
                                                    case true:
                                                        secondBad;

                                                    case false:
                                                        ({ () in return switch attemptThird(s) {
                                                            case let ParserFast_PStep.Good(generated_thirdGood0, generated_thirdGood1):
                                                                ({ () in let thirdGood =
                                                                    ParserFast_PStep.Good(generated_thirdGood0, generated_thirdGood1);

                                                                 return thirdGood
                                                                }());

                                                            case let ParserFast_PStep.Bad(thirdCommitted, generated_thirdBad1):
                                                                ({ () in let thirdBad =
                                                                    ParserFast_PStep.Bad(thirdCommitted, generated_thirdBad1);

                                                                 return ({ () in return switch thirdCommitted {
                                                                    case true:
                                                                        thirdBad;

                                                                    case false:
                                                                        parserFast_pStepBadBacktracking();
                                                                  }
                                                                 }())
                                                                }());
                                                         }
                                                        }());
                                                  }
                                                 }())
                                                }());
                                         }
                                        }());
                                  }
                                 }())
                                }());
                         }
                        }())
                    }
                );
         }
        }())
    }

    static public func parserFast_oneOf4<A: Sendable>(_ generated_attemptFirst: ParserFast_Parser<A>, _ generated_attemptSecond: ParserFast_Parser<A>, _ generated_attemptThird: ParserFast_Parser<A>, _ generated_attemptFourth: ParserFast_Parser<A>) -> ParserFast_Parser<A> {
        ({ () in return switch (generated_attemptFirst: generated_attemptFirst, generated_attemptFourth: generated_attemptFourth, generated_attemptSecond: generated_attemptSecond, generated_attemptThird: generated_attemptThird) {
            case let (generated_attemptFirst: ParserFast_Parser.Parser(attemptFirst), generated_attemptFourth: ParserFast_Parser.Parser(attemptFourth), generated_attemptSecond: ParserFast_Parser.Parser(attemptSecond), generated_attemptThird: ParserFast_Parser.Parser(attemptThird)):
                ParserFast_Parser.Parser(
                    { (s) in
                        ({ () in return switch attemptFirst(s) {
                            case let ParserFast_PStep.Good(generated_firstGood0, generated_firstGood1):
                                ({ () in let firstGood =
                                    ParserFast_PStep.Good(generated_firstGood0, generated_firstGood1);

                                 return firstGood
                                }());

                            case let ParserFast_PStep.Bad(firstCommitted, generated_firstBad1):
                                ({ () in let firstBad =
                                    ParserFast_PStep.Bad(firstCommitted, generated_firstBad1);

                                 return ({ () in return switch firstCommitted {
                                    case true:
                                        firstBad;

                                    case false:
                                        ({ () in return switch attemptSecond(s) {
                                            case let ParserFast_PStep.Good(generated_secondGood0, generated_secondGood1):
                                                ({ () in let secondGood =
                                                    ParserFast_PStep.Good(generated_secondGood0, generated_secondGood1);

                                                 return secondGood
                                                }());

                                            case let ParserFast_PStep.Bad(secondCommitted, generated_secondBad1):
                                                ({ () in let secondBad =
                                                    ParserFast_PStep.Bad(secondCommitted, generated_secondBad1);

                                                 return ({ () in return switch secondCommitted {
                                                    case true:
                                                        secondBad;

                                                    case false:
                                                        ({ () in return switch attemptThird(s) {
                                                            case let ParserFast_PStep.Good(generated_thirdGood0, generated_thirdGood1):
                                                                ({ () in let thirdGood =
                                                                    ParserFast_PStep.Good(generated_thirdGood0, generated_thirdGood1);

                                                                 return thirdGood
                                                                }());

                                                            case let ParserFast_PStep.Bad(thirdCommitted, generated_thirdBad1):
                                                                ({ () in let thirdBad =
                                                                    ParserFast_PStep.Bad(thirdCommitted, generated_thirdBad1);

                                                                 return ({ () in return switch thirdCommitted {
                                                                    case true:
                                                                        thirdBad;

                                                                    case false:
                                                                        ({ () in return switch attemptFourth(s) {
                                                                            case let ParserFast_PStep.Good(generated_fourthGood0, generated_fourthGood1):
                                                                                ({ () in let fourthGood =
                                                                                    ParserFast_PStep.Good(generated_fourthGood0, generated_fourthGood1);

                                                                                 return fourthGood
                                                                                }());

                                                                            case let ParserFast_PStep.Bad(fourthCommitted, generated_fourthBad1):
                                                                                ({ () in let fourthBad =
                                                                                    ParserFast_PStep.Bad(fourthCommitted, generated_fourthBad1);

                                                                                 return ({ () in return switch fourthCommitted {
                                                                                    case true:
                                                                                        fourthBad;

                                                                                    case false:
                                                                                        parserFast_pStepBadBacktracking();
                                                                                  }
                                                                                 }())
                                                                                }());
                                                                         }
                                                                        }());
                                                                  }
                                                                 }())
                                                                }());
                                                         }
                                                        }());
                                                  }
                                                 }())
                                                }());
                                         }
                                        }());
                                  }
                                 }())
                                }());
                         }
                        }())
                    }
                );
         }
        }())
    }

    static public func parserFast_oneOf5<A: Sendable>(_ generated_attemptFirst: ParserFast_Parser<A>, _ generated_attemptSecond: ParserFast_Parser<A>, _ generated_attemptThird: ParserFast_Parser<A>, _ generated_attemptFourth: ParserFast_Parser<A>, _ generated_attemptFifth: ParserFast_Parser<A>) -> ParserFast_Parser<A> {
        ({ () in return switch (generated_attemptFifth: generated_attemptFifth, generated_attemptFirst: generated_attemptFirst, generated_attemptFourth: generated_attemptFourth, generated_attemptSecond: generated_attemptSecond, generated_attemptThird: generated_attemptThird) {
            case let (generated_attemptFifth: ParserFast_Parser.Parser(attemptFifth), generated_attemptFirst: ParserFast_Parser.Parser(attemptFirst), generated_attemptFourth: ParserFast_Parser.Parser(attemptFourth), generated_attemptSecond: ParserFast_Parser.Parser(attemptSecond), generated_attemptThird: ParserFast_Parser.Parser(attemptThird)):
                ParserFast_Parser.Parser(
                    { (s) in
                        ({ () in return switch attemptFirst(s) {
                            case let ParserFast_PStep.Good(generated_firstGood0, generated_firstGood1):
                                ({ () in let firstGood =
                                    ParserFast_PStep.Good(generated_firstGood0, generated_firstGood1);

                                 return firstGood
                                }());

                            case let ParserFast_PStep.Bad(firstCommitted, generated_firstBad1):
                                ({ () in let firstBad =
                                    ParserFast_PStep.Bad(firstCommitted, generated_firstBad1);

                                 return ({ () in return switch firstCommitted {
                                    case true:
                                        firstBad;

                                    case false:
                                        ({ () in return switch attemptSecond(s) {
                                            case let ParserFast_PStep.Good(generated_secondGood0, generated_secondGood1):
                                                ({ () in let secondGood =
                                                    ParserFast_PStep.Good(generated_secondGood0, generated_secondGood1);

                                                 return secondGood
                                                }());

                                            case let ParserFast_PStep.Bad(secondCommitted, generated_secondBad1):
                                                ({ () in let secondBad =
                                                    ParserFast_PStep.Bad(secondCommitted, generated_secondBad1);

                                                 return ({ () in return switch secondCommitted {
                                                    case true:
                                                        secondBad;

                                                    case false:
                                                        ({ () in return switch attemptThird(s) {
                                                            case let ParserFast_PStep.Good(generated_thirdGood0, generated_thirdGood1):
                                                                ({ () in let thirdGood =
                                                                    ParserFast_PStep.Good(generated_thirdGood0, generated_thirdGood1);

                                                                 return thirdGood
                                                                }());

                                                            case let ParserFast_PStep.Bad(thirdCommitted, generated_thirdBad1):
                                                                ({ () in let thirdBad =
                                                                    ParserFast_PStep.Bad(thirdCommitted, generated_thirdBad1);

                                                                 return ({ () in return switch thirdCommitted {
                                                                    case true:
                                                                        thirdBad;

                                                                    case false:
                                                                        ({ () in return switch attemptFourth(s) {
                                                                            case let ParserFast_PStep.Good(generated_fourthGood0, generated_fourthGood1):
                                                                                ({ () in let fourthGood =
                                                                                    ParserFast_PStep.Good(generated_fourthGood0, generated_fourthGood1);

                                                                                 return fourthGood
                                                                                }());

                                                                            case let ParserFast_PStep.Bad(fourthCommitted, generated_fourthBad1):
                                                                                ({ () in let fourthBad =
                                                                                    ParserFast_PStep.Bad(fourthCommitted, generated_fourthBad1);

                                                                                 return ({ () in return switch fourthCommitted {
                                                                                    case true:
                                                                                        fourthBad;

                                                                                    case false:
                                                                                        ({ () in return switch attemptFifth(s) {
                                                                                            case let ParserFast_PStep.Good(generated_fifthGood0, generated_fifthGood1):
                                                                                                ({ () in let fifthGood =
                                                                                                    ParserFast_PStep.Good(generated_fifthGood0, generated_fifthGood1);

                                                                                                 return fifthGood
                                                                                                }());

                                                                                            case let ParserFast_PStep.Bad(fifthCommitted, generated_fifthBad1):
                                                                                                ({ () in let fifthBad =
                                                                                                    ParserFast_PStep.Bad(fifthCommitted, generated_fifthBad1);

                                                                                                 return ({ () in return switch fifthCommitted {
                                                                                                    case true:
                                                                                                        fifthBad;

                                                                                                    case false:
                                                                                                        parserFast_pStepBadBacktracking();
                                                                                                  }
                                                                                                 }())
                                                                                                }());
                                                                                         }
                                                                                        }());
                                                                                  }
                                                                                 }())
                                                                                }());
                                                                         }
                                                                        }());
                                                                  }
                                                                 }())
                                                                }());
                                                         }
                                                        }());
                                                  }
                                                 }())
                                                }());
                                         }
                                        }());
                                  }
                                 }())
                                }());
                         }
                        }())
                    }
                );
         }
        }())
    }

    static public func parserFast_oneOf7<A: Sendable>(_ generated_attempt0: ParserFast_Parser<A>, _ generated_attempt1: ParserFast_Parser<A>, _ generated_attempt2: ParserFast_Parser<A>, _ generated_attempt3: ParserFast_Parser<A>, _ generated_attempt4: ParserFast_Parser<A>, _ generated_attempt5: ParserFast_Parser<A>, _ generated_attempt6: ParserFast_Parser<A>) -> ParserFast_Parser<A> {
        ({ () in return switch (generated_attempt0: generated_attempt0, generated_attempt1: generated_attempt1, generated_attempt2: generated_attempt2, generated_attempt3: generated_attempt3, generated_attempt4: generated_attempt4, generated_attempt5: generated_attempt5, generated_attempt6: generated_attempt6) {
            case let (generated_attempt0: ParserFast_Parser.Parser(attempt0), generated_attempt1: ParserFast_Parser.Parser(attempt1), generated_attempt2: ParserFast_Parser.Parser(attempt2), generated_attempt3: ParserFast_Parser.Parser(attempt3), generated_attempt4: ParserFast_Parser.Parser(attempt4), generated_attempt5: ParserFast_Parser.Parser(attempt5), generated_attempt6: ParserFast_Parser.Parser(attempt6)):
                ParserFast_Parser.Parser(
                    { (s) in
                        ({ () in return switch attempt0(s) {
                            case let ParserFast_PStep.Good(generated_good0, generated_good1):
                                ({ () in let good =
                                    ParserFast_PStep.Good(generated_good0, generated_good1);

                                 return good
                                }());

                            case let ParserFast_PStep.Bad(committed0, generated_bad01):
                                ({ () in let bad0 =
                                    ParserFast_PStep.Bad(committed0, generated_bad01);

                                 return ({ () in return switch committed0 {
                                    case true:
                                        bad0;

                                    case false:
                                        ({ () in return switch attempt1(s) {
                                            case let ParserFast_PStep.Good(generated_good0, generated_good1):
                                                ({ () in let good =
                                                    ParserFast_PStep.Good(generated_good0, generated_good1);

                                                 return good
                                                }());

                                            case let ParserFast_PStep.Bad(committed1, generated_bad11):
                                                ({ () in let bad1 =
                                                    ParserFast_PStep.Bad(committed1, generated_bad11);

                                                 return ({ () in return switch committed1 {
                                                    case true:
                                                        bad1;

                                                    case false:
                                                        ({ () in return switch attempt2(s) {
                                                            case let ParserFast_PStep.Good(generated_good0, generated_good1):
                                                                ({ () in let good =
                                                                    ParserFast_PStep.Good(generated_good0, generated_good1);

                                                                 return good
                                                                }());

                                                            case let ParserFast_PStep.Bad(committed2, generated_bad21):
                                                                ({ () in let bad2 =
                                                                    ParserFast_PStep.Bad(committed2, generated_bad21);

                                                                 return ({ () in return switch committed2 {
                                                                    case true:
                                                                        bad2;

                                                                    case false:
                                                                        ({ () in return switch attempt3(s) {
                                                                            case let ParserFast_PStep.Good(generated_good0, generated_good1):
                                                                                ({ () in let good =
                                                                                    ParserFast_PStep.Good(generated_good0, generated_good1);

                                                                                 return good
                                                                                }());

                                                                            case let ParserFast_PStep.Bad(committed3, generated_bad31):
                                                                                ({ () in let bad3 =
                                                                                    ParserFast_PStep.Bad(committed3, generated_bad31);

                                                                                 return ({ () in return switch committed3 {
                                                                                    case true:
                                                                                        bad3;

                                                                                    case false:
                                                                                        ({ () in return switch attempt4(s) {
                                                                                            case let ParserFast_PStep.Good(generated_good0, generated_good1):
                                                                                                ({ () in let good =
                                                                                                    ParserFast_PStep.Good(generated_good0, generated_good1);

                                                                                                 return good
                                                                                                }());

                                                                                            case let ParserFast_PStep.Bad(committed4, generated_bad41):
                                                                                                ({ () in let bad4 =
                                                                                                    ParserFast_PStep.Bad(committed4, generated_bad41);

                                                                                                 return ({ () in return switch committed4 {
                                                                                                    case true:
                                                                                                        bad4;

                                                                                                    case false:
                                                                                                        ({ () in return switch attempt5(s) {
                                                                                                            case let ParserFast_PStep.Good(generated_good0, generated_good1):
                                                                                                                ({ () in let good =
                                                                                                                    ParserFast_PStep.Good(generated_good0, generated_good1);

                                                                                                                 return good
                                                                                                                }());

                                                                                                            case let ParserFast_PStep.Bad(committed5, generated_bad51):
                                                                                                                ({ () in let bad5 =
                                                                                                                    ParserFast_PStep.Bad(committed5, generated_bad51);

                                                                                                                 return ({ () in return switch committed5 {
                                                                                                                    case true:
                                                                                                                        bad5;

                                                                                                                    case false:
                                                                                                                        ({ () in return switch attempt6(s) {
                                                                                                                            case let ParserFast_PStep.Good(generated_good0, generated_good1):
                                                                                                                                ({ () in let good =
                                                                                                                                    ParserFast_PStep.Good(generated_good0, generated_good1);

                                                                                                                                 return good
                                                                                                                                }());

                                                                                                                            case let ParserFast_PStep.Bad(committed6, generated_bad61):
                                                                                                                                ({ () in let bad6 =
                                                                                                                                    ParserFast_PStep.Bad(committed6, generated_bad61);

                                                                                                                                 return ({ () in return switch committed6 {
                                                                                                                                    case true:
                                                                                                                                        bad6;

                                                                                                                                    case false:
                                                                                                                                        parserFast_pStepBadBacktracking();
                                                                                                                                  }
                                                                                                                                 }())
                                                                                                                                }());
                                                                                                                         }
                                                                                                                        }());
                                                                                                                  }
                                                                                                                 }())
                                                                                                                }());
                                                                                                         }
                                                                                                        }());
                                                                                                  }
                                                                                                 }())
                                                                                                }());
                                                                                         }
                                                                                        }());
                                                                                  }
                                                                                 }())
                                                                                }());
                                                                         }
                                                                        }());
                                                                  }
                                                                 }())
                                                                }());
                                                         }
                                                        }());
                                                  }
                                                 }())
                                                }());
                                         }
                                        }());
                                  }
                                 }())
                                }());
                         }
                        }())
                    }
                );
         }
        }())
    }

    static public func parserFast_oneOf9<A: Sendable>(_ generated_attempt0: ParserFast_Parser<A>, _ generated_attempt1: ParserFast_Parser<A>, _ generated_attempt2: ParserFast_Parser<A>, _ generated_attempt3: ParserFast_Parser<A>, _ generated_attempt4: ParserFast_Parser<A>, _ generated_attempt5: ParserFast_Parser<A>, _ generated_attempt6: ParserFast_Parser<A>, _ generated_attempt7: ParserFast_Parser<A>, _ generated_attempt8: ParserFast_Parser<A>) -> ParserFast_Parser<A> {
        ({ () in return switch (generated_attempt0: generated_attempt0, generated_attempt1: generated_attempt1, generated_attempt2: generated_attempt2, generated_attempt3: generated_attempt3, generated_attempt4: generated_attempt4, generated_attempt5: generated_attempt5, generated_attempt6: generated_attempt6, generated_attempt7: generated_attempt7, generated_attempt8: generated_attempt8) {
            case let (generated_attempt0: ParserFast_Parser.Parser(attempt0), generated_attempt1: ParserFast_Parser.Parser(attempt1), generated_attempt2: ParserFast_Parser.Parser(attempt2), generated_attempt3: ParserFast_Parser.Parser(attempt3), generated_attempt4: ParserFast_Parser.Parser(attempt4), generated_attempt5: ParserFast_Parser.Parser(attempt5), generated_attempt6: ParserFast_Parser.Parser(attempt6), generated_attempt7: ParserFast_Parser.Parser(attempt7), generated_attempt8: ParserFast_Parser.Parser(attempt8)):
                ParserFast_Parser.Parser(
                    { (s) in
                        ({ () in return switch attempt0(s) {
                            case let ParserFast_PStep.Good(generated_good0, generated_good1):
                                ({ () in let good =
                                    ParserFast_PStep.Good(generated_good0, generated_good1);

                                 return good
                                }());

                            case let ParserFast_PStep.Bad(committed0, generated_bad01):
                                ({ () in let bad0 =
                                    ParserFast_PStep.Bad(committed0, generated_bad01);

                                 return ({ () in return switch committed0 {
                                    case true:
                                        bad0;

                                    case false:
                                        ({ () in return switch attempt1(s) {
                                            case let ParserFast_PStep.Good(generated_good0, generated_good1):
                                                ({ () in let good =
                                                    ParserFast_PStep.Good(generated_good0, generated_good1);

                                                 return good
                                                }());

                                            case let ParserFast_PStep.Bad(committed1, generated_bad11):
                                                ({ () in let bad1 =
                                                    ParserFast_PStep.Bad(committed1, generated_bad11);

                                                 return ({ () in return switch committed1 {
                                                    case true:
                                                        bad1;

                                                    case false:
                                                        ({ () in return switch attempt2(s) {
                                                            case let ParserFast_PStep.Good(generated_good0, generated_good1):
                                                                ({ () in let good =
                                                                    ParserFast_PStep.Good(generated_good0, generated_good1);

                                                                 return good
                                                                }());

                                                            case let ParserFast_PStep.Bad(committed2, generated_bad21):
                                                                ({ () in let bad2 =
                                                                    ParserFast_PStep.Bad(committed2, generated_bad21);

                                                                 return ({ () in return switch committed2 {
                                                                    case true:
                                                                        bad2;

                                                                    case false:
                                                                        ({ () in return switch attempt3(s) {
                                                                            case let ParserFast_PStep.Good(generated_good0, generated_good1):
                                                                                ({ () in let good =
                                                                                    ParserFast_PStep.Good(generated_good0, generated_good1);

                                                                                 return good
                                                                                }());

                                                                            case let ParserFast_PStep.Bad(committed3, generated_bad31):
                                                                                ({ () in let bad3 =
                                                                                    ParserFast_PStep.Bad(committed3, generated_bad31);

                                                                                 return ({ () in return switch committed3 {
                                                                                    case true:
                                                                                        bad3;

                                                                                    case false:
                                                                                        ({ () in return switch attempt4(s) {
                                                                                            case let ParserFast_PStep.Good(generated_good0, generated_good1):
                                                                                                ({ () in let good =
                                                                                                    ParserFast_PStep.Good(generated_good0, generated_good1);

                                                                                                 return good
                                                                                                }());

                                                                                            case let ParserFast_PStep.Bad(committed4, generated_bad41):
                                                                                                ({ () in let bad4 =
                                                                                                    ParserFast_PStep.Bad(committed4, generated_bad41);

                                                                                                 return ({ () in return switch committed4 {
                                                                                                    case true:
                                                                                                        bad4;

                                                                                                    case false:
                                                                                                        ({ () in return switch attempt5(s) {
                                                                                                            case let ParserFast_PStep.Good(generated_good0, generated_good1):
                                                                                                                ({ () in let good =
                                                                                                                    ParserFast_PStep.Good(generated_good0, generated_good1);

                                                                                                                 return good
                                                                                                                }());

                                                                                                            case let ParserFast_PStep.Bad(committed5, generated_bad51):
                                                                                                                ({ () in let bad5 =
                                                                                                                    ParserFast_PStep.Bad(committed5, generated_bad51);

                                                                                                                 return ({ () in return switch committed5 {
                                                                                                                    case true:
                                                                                                                        bad5;

                                                                                                                    case false:
                                                                                                                        ({ () in return switch attempt6(s) {
                                                                                                                            case let ParserFast_PStep.Good(generated_good0, generated_good1):
                                                                                                                                ({ () in let good =
                                                                                                                                    ParserFast_PStep.Good(generated_good0, generated_good1);

                                                                                                                                 return good
                                                                                                                                }());

                                                                                                                            case let ParserFast_PStep.Bad(committed6, generated_bad61):
                                                                                                                                ({ () in let bad6 =
                                                                                                                                    ParserFast_PStep.Bad(committed6, generated_bad61);

                                                                                                                                 return ({ () in return switch committed6 {
                                                                                                                                    case true:
                                                                                                                                        bad6;

                                                                                                                                    case false:
                                                                                                                                        ({ () in return switch attempt7(s) {
                                                                                                                                            case let ParserFast_PStep.Good(generated_good0, generated_good1):
                                                                                                                                                ({ () in let good =
                                                                                                                                                    ParserFast_PStep.Good(generated_good0, generated_good1);

                                                                                                                                                 return good
                                                                                                                                                }());

                                                                                                                                            case let ParserFast_PStep.Bad(committed7, generated_bad71):
                                                                                                                                                ({ () in let bad7 =
                                                                                                                                                    ParserFast_PStep.Bad(committed7, generated_bad71);

                                                                                                                                                 return ({ () in return switch committed7 {
                                                                                                                                                    case true:
                                                                                                                                                        bad7;

                                                                                                                                                    case false:
                                                                                                                                                        ({ () in return switch attempt8(s) {
                                                                                                                                                            case let ParserFast_PStep.Good(generated_good0, generated_good1):
                                                                                                                                                                ({ () in let good =
                                                                                                                                                                    ParserFast_PStep.Good(generated_good0, generated_good1);

                                                                                                                                                                 return good
                                                                                                                                                                }());

                                                                                                                                                            case let ParserFast_PStep.Bad(committed8, generated_bad81):
                                                                                                                                                                ({ () in let bad8 =
                                                                                                                                                                    ParserFast_PStep.Bad(committed8, generated_bad81);

                                                                                                                                                                 return ({ () in return switch committed8 {
                                                                                                                                                                    case true:
                                                                                                                                                                        bad8;

                                                                                                                                                                    case false:
                                                                                                                                                                        parserFast_pStepBadBacktracking();
                                                                                                                                                                  }
                                                                                                                                                                 }())
                                                                                                                                                                }());
                                                                                                                                                         }
                                                                                                                                                        }());
                                                                                                                                                  }
                                                                                                                                                 }())
                                                                                                                                                }());
                                                                                                                                         }
                                                                                                                                        }());
                                                                                                                                  }
                                                                                                                                 }())
                                                                                                                                }());
                                                                                                                         }
                                                                                                                        }());
                                                                                                                  }
                                                                                                                 }())
                                                                                                                }());
                                                                                                         }
                                                                                                        }());
                                                                                                  }
                                                                                                 }())
                                                                                                }());
                                                                                         }
                                                                                        }());
                                                                                  }
                                                                                 }())
                                                                                }());
                                                                         }
                                                                        }());
                                                                  }
                                                                 }())
                                                                }());
                                                         }
                                                        }());
                                                  }
                                                 }())
                                                }());
                                         }
                                        }());
                                  }
                                 }())
                                }());
                         }
                        }())
                    }
                );
         }
        }())
    }

    static public func parserFast_orSucceed<A: Sendable>(_ generated_attempt: ParserFast_Parser<A>, _ fallbackResult: A) -> ParserFast_Parser<A> {
        ({ () in return switch (generated_attempt: generated_attempt, unusedDummyFieldToMakeSwiftHappy: ()) {
            case let (generated_attempt: ParserFast_Parser.Parser(attempt), unusedDummyFieldToMakeSwiftHappy: ()):
                ParserFast_Parser.Parser(
                    { (s) in
                        ({ () in return switch attempt(s) {
                            case let ParserFast_PStep.Good(generated_firstGood0, generated_firstGood1):
                                ({ () in let firstGood =
                                    ParserFast_PStep.Good(generated_firstGood0, generated_firstGood1);

                                 return firstGood
                                }());

                            case let ParserFast_PStep.Bad(firstCommitted, generated_firstBad1):
                                ({ () in let firstBad =
                                    ParserFast_PStep.Bad(firstCommitted, generated_firstBad1);

                                 return ({ () in return switch firstCommitted {
                                    case true:
                                        firstBad;

                                    case false:
                                        ParserFast_PStep.Good(fallbackResult, s);
                                  }
                                 }())
                                }());
                         }
                        }())
                    }
                );
         }
        }())
    }

    static public func parserFast_pStepBadBacktracking<A_: Sendable>() -> ParserFast_PStep<A_> {
        ParserFast_PStep.Bad(false, ())
    }

    static public func parserFast_pStepBadCommitting<A_: Sendable>() -> ParserFast_PStep<A_> {
        ParserFast_PStep.Bad(true, ())
    }

    static public func parserFast_pStepCommit<A: Sendable>(_ pStep: ParserFast_PStep<A>) -> ParserFast_PStep<A> {
        ({ () in return switch pStep {
            case let ParserFast_PStep.Good(generated_good0, generated_good1):
                ({ () in let good =
                    ParserFast_PStep.Good(generated_good0, generated_good1);

                 return good
                }());

            case let ParserFast_PStep.Bad(_, x):
                ParserFast_PStep.Bad(true, x);
         }
        }())
    }

    static public func parserFast_problem<A_: Sendable>() -> ParserFast_Parser<A_> {
        ParserFast_Parser.Parser(
            { (_) in
                parserFast_pStepBadBacktracking()
            }
        )
    }

    static public func parserFast_run<A: Sendable>(_ generated_parse: ParserFast_Parser<A>, _ src: String) -> Maybe_Maybe<A> {
        ({ () in return switch (generated_parse: generated_parse, unusedDummyFieldToMakeSwiftHappy: ()) {
            case let (generated_parse: ParserFast_Parser.Parser(parse), unusedDummyFieldToMakeSwiftHappy: ()):
                ({ () in return switch parse((col: 1.0, indent: List_List.Empty, offset: 0.0, row: 1.0, src: src)) {
                    case let ParserFast_PStep.Good(value, finalState):
                        ({ () in return switch basics_eq(basics_sub(finalState.offset, string_length(finalState.src)), 0.0) {
                            case true:
                                Maybe_Maybe.Just(value);

                            case false:
                                Maybe_Maybe.Nothing;
                         }
                        }());

                    case ParserFast_PStep.Bad(_, _):
                        Maybe_Maybe.Nothing;
                 }
                }());
         }
        }())
    }

    static public func parserFast_skip0OrMoreDigits0To9(_ offset: Double, _ src: String) -> Double {
        ({ () in return switch string_slice(offset, basics_add(offset, 1.0), src) {
            case "0":
                parserFast_skip0OrMoreDigits0To9(basics_add(offset, 1.0), src);

            case "1":
                parserFast_skip0OrMoreDigits0To9(basics_add(offset, 1.0), src);

            case "2":
                parserFast_skip0OrMoreDigits0To9(basics_add(offset, 1.0), src);

            case "3":
                parserFast_skip0OrMoreDigits0To9(basics_add(offset, 1.0), src);

            case "4":
                parserFast_skip0OrMoreDigits0To9(basics_add(offset, 1.0), src);

            case "5":
                parserFast_skip0OrMoreDigits0To9(basics_add(offset, 1.0), src);

            case "6":
                parserFast_skip0OrMoreDigits0To9(basics_add(offset, 1.0), src);

            case "7":
                parserFast_skip0OrMoreDigits0To9(basics_add(offset, 1.0), src);

            case "8":
                parserFast_skip0OrMoreDigits0To9(basics_add(offset, 1.0), src);

            case "9":
                parserFast_skip0OrMoreDigits0To9(basics_add(offset, 1.0), src);

            case _:
                offset;
         }
        }())
    }

    static public func parserFast_skip1OrMoreDigits0To9(_ offset: Double, _ src: String) -> Double {
        ({ () in return switch string_slice(offset, basics_add(offset, 1.0), src) {
            case "0":
                parserFast_skip0OrMoreDigits0To9(basics_add(offset, 1.0), src);

            case "1":
                parserFast_skip0OrMoreDigits0To9(basics_add(offset, 1.0), src);

            case "2":
                parserFast_skip0OrMoreDigits0To9(basics_add(offset, 1.0), src);

            case "3":
                parserFast_skip0OrMoreDigits0To9(basics_add(offset, 1.0), src);

            case "4":
                parserFast_skip0OrMoreDigits0To9(basics_add(offset, 1.0), src);

            case "5":
                parserFast_skip0OrMoreDigits0To9(basics_add(offset, 1.0), src);

            case "6":
                parserFast_skip0OrMoreDigits0To9(basics_add(offset, 1.0), src);

            case "7":
                parserFast_skip0OrMoreDigits0To9(basics_add(offset, 1.0), src);

            case "8":
                parserFast_skip0OrMoreDigits0To9(basics_add(offset, 1.0), src);

            case "9":
                parserFast_skip0OrMoreDigits0To9(basics_add(offset, 1.0), src);

            case _:
                basics_negate(1.0);
         }
        }())
    }

    static public func parserFast_skipAfterFloatExponentMark(_ offset: Double, _ src: String) -> Double {
        ({ () in return switch string_slice(offset, basics_add(offset, 1.0), src) {
            case "+":
                parserFast_skip1OrMoreDigits0To9(basics_add(offset, 1.0), src);

            case "-":
                parserFast_skip1OrMoreDigits0To9(basics_add(offset, 1.0), src);

            case _:
                parserFast_skip1OrMoreDigits0To9(offset, src);
         }
        }())
    }

    static public func parserFast_skipFloatAfterIntegerDecimal(_ offset: Double, _ src: String) -> Double {
        ({ () in return switch string_slice(offset, basics_add(offset, 1.0), src) {
            case ".":
                ({ () in let offsetAfterDigits:Double =
                    parserFast_skip1OrMoreDigits0To9(basics_add(offset, 1.0), src);

                 return ({ () in return switch basics_eq(offsetAfterDigits, basics_negate(1.0)) {
                    case true:
                        basics_negate(1.0);

                    case false:
                        ({ () in return switch string_slice(offsetAfterDigits, basics_add(offsetAfterDigits, 1.0), src) {
                            case "e":
                                parserFast_skipAfterFloatExponentMark(basics_add(offsetAfterDigits, 1.0), src);

                            case "E":
                                parserFast_skipAfterFloatExponentMark(basics_add(offsetAfterDigits, 1.0), src);

                            case _:
                                offsetAfterDigits;
                         }
                        }());
                  }
                 }())
                }());

            case "e":
                parserFast_skipAfterFloatExponentMark(basics_add(offset, 1.0), src);

            case "E":
                parserFast_skipAfterFloatExponentMark(basics_add(offset, 1.0), src);

            case _:
                basics_negate(1.0);
         }
        }())
    }

    static public func parserFast_skipWhileHelp(_ isGood: @Sendable (Character) -> Bool, _ offset: Double, _ row: Double, _ col: Double, _ src: String, _ indent: List_List<Double>) -> ParserFast_State {
        ({ () in let actualChar:String =
            string_slice(offset, basics_add(offset, 1.0), src);

         return ({ () in return switch string_any(isGood, actualChar) {
            case true:
                ({ () in return switch actualChar {
                    case "\n":
                        parserFast_skipWhileHelp(isGood, basics_add(offset, 1.0), basics_add(row, 1.0), 1.0, src, indent);

                    case _:
                        parserFast_skipWhileHelp(isGood, basics_add(offset, 1.0), row, basics_add(col, 1.0), src, indent);
                 }
                }());

            case false:
                ({ () in return switch basics_and(parserFast_charStringIsUtf16HighSurrogate(actualChar), string_any(isGood, string_slice(offset, basics_add(offset, 2.0), src))) {
                    case true:
                        parserFast_skipWhileHelp(isGood, basics_add(offset, 2.0), row, basics_add(col, 1.0), src, indent);

                    case false:
                        (col: col, indent: indent, offset: offset, row: row, src: src);
                 }
                }());
          }
         }())
        }())
    }

    static public func parserFast_skipWhileWhitespaceBacktrackableFollowedBy<Next: Sendable>(_ generated_parseNext: ParserFast_Parser<Next>) -> ParserFast_Parser<Next> {
        ({ () in return switch (generated_parseNext: generated_parseNext, unusedDummyFieldToMakeSwiftHappy: ()) {
            case let (generated_parseNext: ParserFast_Parser.Parser(parseNext), unusedDummyFieldToMakeSwiftHappy: ()):
                ParserFast_Parser.Parser(
                    { (s0) in
                        parseNext(parserFast_skipWhileWhitespaceHelp(s0.offset, s0.row, s0.col, s0.src, s0.indent))
                    }
                );
         }
        }())
    }

    static public func parserFast_skipWhileWhitespaceHelp(_ offset: Double, _ row: Double, _ col: Double, _ src: String, _ indent: List_List<Double>) -> ParserFast_State {
        ({ () in return switch string_slice(offset, basics_add(offset, 1.0), src) {
            case " ":
                parserFast_skipWhileWhitespaceHelp(basics_add(offset, 1.0), row, basics_add(col, 1.0), src, indent);

            case "\n":
                parserFast_skipWhileWhitespaceHelp(basics_add(offset, 1.0), basics_add(row, 1.0), 1.0, src, indent);

            case "\r":
                parserFast_skipWhileWhitespaceHelp(basics_add(offset, 1.0), row, basics_add(col, 1.0), src, indent);

            case _:
                (col: col, indent: indent, offset: offset, row: row, src: src);
         }
        }())
    }

    static public func parserFast_skipWhileWithoutLinebreakHelp(_ isGood: @Sendable (Character) -> Bool, _ offset: Double, _ row: Double, _ col: Double, _ src: String, _ indent: List_List<Double>) -> ParserFast_State {
        ({ () in let actualChar:String =
            string_slice(offset, basics_add(offset, 1.0), src);

         return ({ () in return switch string_any(isGood, actualChar) {
            case true:
                parserFast_skipWhileWithoutLinebreakHelp(isGood, basics_add(offset, 1.0), row, basics_add(col, 1.0), src, indent);

            case false:
                ({ () in return switch basics_and(parserFast_charStringIsUtf16HighSurrogate(actualChar), string_any(isGood, string_slice(offset, basics_add(offset, 2.0), src))) {
                    case true:
                        parserFast_skipWhileWithoutLinebreakHelp(isGood, basics_add(offset, 2.0), row, basics_add(col, 1.0), src, indent);

                    case false:
                        (col: col, indent: indent, offset: offset, row: row, src: src);
                 }
                }());
          }
         }())
        }())
    }

    static public func parserFast_symbol<Res: Sendable>(_ str: String, _ res: Res) -> ParserFast_Parser<Res> {
        ({ () in let strLength:Double =
            string_length(str);

         return ParserFast_Parser.Parser(
            { (s) in
                ({ () in let newOffset:Double =
                    basics_add(s.offset, strLength);

                 return ({ () in return switch basics_eq(string_slice(s.offset, newOffset, s.src), str) {
                    case true:
                        ParserFast_PStep.Good(res, (col: basics_add(s.col, strLength), indent: s.indent, offset: newOffset, row: s.row, src: s.src));

                    case false:
                        parserFast_pStepBadBacktracking();
                  }
                 }())
                }())
            }
         )
        }())
    }

    static public func parserFast_symbolBacktrackableFollowedBy<Next: Sendable>(_ str: String, _ generated_parseNext: ParserFast_Parser<Next>) -> ParserFast_Parser<Next> {
        ({ () in return switch (generated_parseNext: generated_parseNext, unusedDummyFieldToMakeSwiftHappy: ()) {
            case let (generated_parseNext: ParserFast_Parser.Parser(parseNext), unusedDummyFieldToMakeSwiftHappy: ()):
                ({ () in let strLength:Double =
                    string_length(str);

                 return ParserFast_Parser.Parser(
                    { (s) in
                        ({ () in let newOffset:Double =
                            basics_add(s.offset, strLength);

                         return ({ () in return switch basics_eq(string_slice(s.offset, newOffset, s.src), str) {
                            case true:
                                parseNext((col: basics_add(s.col, strLength), indent: s.indent, offset: newOffset, row: s.row, src: s.src));

                            case false:
                                parserFast_pStepBadBacktracking();
                          }
                         }())
                        }())
                    }
                 )
                }());
         }
        }())
    }

    static public func parserFast_symbolFollowedBy<Next: Sendable>(_ str: String, _ generated_parseNext: ParserFast_Parser<Next>) -> ParserFast_Parser<Next> {
        ({ () in return switch (generated_parseNext: generated_parseNext, unusedDummyFieldToMakeSwiftHappy: ()) {
            case let (generated_parseNext: ParserFast_Parser.Parser(parseNext), unusedDummyFieldToMakeSwiftHappy: ()):
                ({ () in let strLength:Double =
                    string_length(str);

                 return ParserFast_Parser.Parser(
                    { (s) in
                        ({ () in let newOffset:Double =
                            basics_add(s.offset, strLength);

                         return ({ () in return switch basics_eq(string_slice(s.offset, newOffset, s.src), str) {
                            case true:
                                parserFast_pStepCommit(parseNext((col: basics_add(s.col, strLength), indent: s.indent, offset: newOffset, row: s.row, src: s.src)));

                            case false:
                                parserFast_pStepBadBacktracking();
                          }
                         }())
                        }())
                    }
                 )
                }());
         }
        }())
    }

    static public func parserFast_symbolWithEndLocation<Res: Sendable>(_ str: String, _ endLocationToRes: @Sendable (ElmSyntaxRange_Location) -> Res) -> ParserFast_Parser<Res> {
        ({ () in let strLength:Double =
            string_length(str);

         return ParserFast_Parser.Parser(
            { (s) in
                ({ () in let newOffset:Double =
                    basics_add(s.offset, strLength);

                 return ({ () in return switch basics_eq(string_slice(s.offset, newOffset, s.src), str) {
                    case true:
                        ({ () in let newCol:Double =
                            basics_add(s.col, strLength);

                         return ParserFast_PStep.Good(endLocationToRes((column: newCol, row: s.row)), (col: newCol, indent: s.indent, offset: newOffset, row: s.row, src: s.src))
                        }());

                    case false:
                        parserFast_pStepBadBacktracking();
                  }
                 }())
                }())
            }
         )
        }())
    }

    static public func parserFast_symbolWithRange<Res: Sendable>(_ str: String, _ startAndEndLocationToRes: @Sendable (ElmSyntaxRange_Range) -> Res) -> ParserFast_Parser<Res> {
        ({ () in let strLength:Double =
            string_length(str);

         return ParserFast_Parser.Parser(
            { (s) in
                ({ () in let newOffset:Double =
                    basics_add(s.offset, strLength);

                 return ({ () in return switch basics_eq(string_slice(s.offset, newOffset, s.src), str) {
                    case true:
                        ({ () in let newCol:Double =
                            basics_add(s.col, strLength);

                         return ParserFast_PStep.Good(startAndEndLocationToRes((end: (column: newCol, row: s.row), start: (column: s.col, row: s.row))), (col: newCol, indent: s.indent, offset: newOffset, row: s.row, src: s.src))
                        }());

                    case false:
                        parserFast_pStepBadBacktracking();
                  }
                 }())
                }())
            }
         )
        }())
    }

    static public func parserFast_validate<A: Sendable>(_ isOkay: @Sendable (A) -> Bool, _ generated_parseA: ParserFast_Parser<A>) -> ParserFast_Parser<A> {
        ({ () in return switch (generated_parseA: generated_parseA, unusedDummyFieldToMakeSwiftHappy: ()) {
            case let (generated_parseA: ParserFast_Parser.Parser(parseA), unusedDummyFieldToMakeSwiftHappy: ()):
                ParserFast_Parser.Parser(
                    { (s0) in
                        ({ () in return switch parseA(s0) {
                            case let ParserFast_PStep.Bad(committed, x):
                                ParserFast_PStep.Bad(committed, x);

                            case let ParserFast_PStep.Good(a, generated_good1):
                                ({ () in let good =
                                    ParserFast_PStep.Good(a, generated_good1);

                                 return ({ () in return switch isOkay(a) {
                                    case true:
                                        good;

                                    case false:
                                        parserFast_pStepBadCommitting();
                                  }
                                 }())
                                }());
                         }
                        }())
                    }
                );
         }
        }())
    }

    static public func parserFast_validateEndColumnIndentation<A: Sendable>(_ isOkay: @Sendable (Double, List_List<Double>) -> Bool, _ generated_parse: ParserFast_Parser<A>) -> ParserFast_Parser<A> {
        ({ () in return switch (generated_parse: generated_parse, unusedDummyFieldToMakeSwiftHappy: ()) {
            case let (generated_parse: ParserFast_Parser.Parser(parse), unusedDummyFieldToMakeSwiftHappy: ()):
                ParserFast_Parser.Parser(
                    { (s0) in
                        ({ () in return switch parse(s0) {
                            case let ParserFast_PStep.Good(generated_good0, s1):
                                ({ () in let good =
                                    ParserFast_PStep.Good(generated_good0, s1);

                                 return ({ () in return switch isOkay(s1.col, s1.indent) {
                                    case true:
                                        good;

                                    case false:
                                        parserFast_pStepBadCommitting();
                                  }
                                 }())
                                }());

                            case let bad:
                                bad;
                         }
                        }())
                    }
                );
         }
        }())
    }

    static public func parserFast_while(_ isGood: @Sendable (Character) -> Bool) -> ParserFast_Parser<String> {
        ParserFast_Parser.Parser(
            { (s0) in
                ({ () in let s1:ParserFast_State =
                    parserFast_skipWhileHelp(isGood, s0.offset, s0.row, s0.col, s0.src, s0.indent);

                 return ParserFast_PStep.Good(string_slice(s0.offset, s1.offset, s0.src), s1)
                }())
            }
        )
    }

    static public func parserFast_whileAtLeast1WithoutLinebreak(_ isGood: @Sendable (Character) -> Bool) -> ParserFast_Parser<String> {
        ParserFast_Parser.Parser(
            { (s0) in
                ({ () in let s1:ParserFast_State =
                    parserFast_skipWhileWithoutLinebreakHelp(isGood, s0.offset, s0.row, s0.col, s0.src, s0.indent);

                 return ({ () in return switch basics_eq(basics_sub(s1.offset, s0.offset), 0.0) {
                    case true:
                        parserFast_pStepBadBacktracking();

                    case false:
                        ParserFast_PStep.Good(string_slice(s0.offset, s1.offset, s0.src), s1);
                  }
                 }())
                }())
            }
        )
    }

    static public func parserFast_whileAtMost3WithoutLinebreakAnd2PartUtf16ToResultAndThen<Intermediate: Sendable, Res: Sendable>(_ charAsStringIsOkay: @Sendable (String) -> Bool, _ consumedStringToIntermediateOrErr: @Sendable (String) -> Maybe_Maybe<Intermediate>, _ intermediateToFollowupParser: @Sendable (Intermediate) -> ParserFast_Parser<Res>) -> ParserFast_Parser<Res> {
        ParserFast_Parser.Parser(
            { (s0) in
                ({ () in let src:String =
                    s0.src;

                 let s0Offset:Double =
                    s0.offset;

                 let consumed:
                    (length: Double,
                     string: String
                    ) =
                    ({ () in return switch charAsStringIsOkay(string_slice(s0Offset, basics_add(s0Offset, 1.0), src)) {
                        case true:
                            ({ () in return switch charAsStringIsOkay(string_slice(basics_add(s0Offset, 1.0), basics_add(s0Offset, 2.0), src)) {
                                case true:
                                    ({ () in return switch charAsStringIsOkay(string_slice(basics_add(s0Offset, 2.0), basics_add(s0Offset, 3.0), src)) {
                                        case true:
                                            (length: 3.0, string: string_slice(s0Offset, basics_add(s0Offset, 3.0), src));

                                        case false:
                                            (length: 2.0, string: string_slice(s0Offset, basics_add(s0Offset, 2.0), src));
                                     }
                                    }());

                                case false:
                                    (length: 1.0, string: string_slice(s0Offset, basics_add(s0Offset, 1.0), src));
                             }
                            }());

                        case false:
                            (length: 0.0, string: "");
                     }
                    }());

                 return ({ () in return switch consumedStringToIntermediateOrErr(consumed.string) {
                    case let Maybe_Maybe.Just(intermediate):
                        ({ () in return switch intermediateToFollowupParser(intermediate) {
                            case let ParserFast_Parser.Parser(parseFollowup):
                                parserFast_pStepCommit(parseFollowup((col: basics_add(s0.col, consumed.length), indent: s0.indent, offset: basics_add(s0Offset, consumed.length), row: s0.row, src: src)));
                         }
                        }());

                    case Maybe_Maybe.Nothing:
                        parserFast_pStepBadBacktracking();
                  }
                 }())
                }())
            }
        )
    }

    static public func parserFast_whileAtMost3WithoutLinebreakAnd2PartUtf16ValidateMapWithRangeBacktrackableFollowedBySymbol<Res: Sendable>(_ whileRangeAndContentToRes: @Sendable (ElmSyntaxRange_Range, String) -> Res, _ whileCharIsOkay: @Sendable (String) -> Bool, _ whileResultIsOkay: @Sendable (String) -> Bool, _ mandatoryFinalSymbol: String) -> ParserFast_Parser<Res> {
        ({ () in let mandatoryFinalSymbolLength:Double =
            string_length(mandatoryFinalSymbol);

         return ParserFast_Parser.Parser(
            { (s0) in
                ({ () in let src:String =
                    s0.src;

                 let s0Offset:Double =
                    s0.offset;

                 return ({ () in return switch 
                    ({ () in return switch whileCharIsOkay(string_slice(s0Offset, basics_add(s0Offset, 1.0), src)) {
                        case true:
                            ({ () in return switch whileCharIsOkay(string_slice(basics_add(s0Offset, 1.0), basics_add(s0Offset, 2.0), src)) {
                                case true:
                                    ({ () in return switch whileCharIsOkay(string_slice(basics_add(s0Offset, 2.0), basics_add(s0Offset, 3.0), src)) {
                                        case true:
                                            (first: 3.0, second: string_slice(s0Offset, basics_add(s0Offset, 3.0), src));

                                        case false:
                                            (first: 2.0, second: string_slice(s0Offset, basics_add(s0Offset, 2.0), src));
                                     }
                                    }());

                                case false:
                                    (first: 1.0, second: string_slice(s0Offset, basics_add(s0Offset, 1.0), src));
                             }
                            }());

                        case false:
                            (first: 0.0, second: "");
                     }
                    }())
                   {
                    case let (first: consumedBeforeFinalSymbolLength, second: consumedBeforeFinalSymbolString):
                        ({ () in return switch basics_and(basics_eq(string_slice(basics_add(s0Offset, consumedBeforeFinalSymbolLength), basics_add(basics_add(s0Offset, consumedBeforeFinalSymbolLength), mandatoryFinalSymbolLength), src), mandatoryFinalSymbol), whileResultIsOkay(consumedBeforeFinalSymbolString)) {
                            case true:
                                ParserFast_PStep.Good(whileRangeAndContentToRes((end: (column: basics_add(s0.col, consumedBeforeFinalSymbolLength), row: s0.row), start: (column: s0.col, row: s0.row)), consumedBeforeFinalSymbolString), (col: basics_add(basics_add(s0.col, consumedBeforeFinalSymbolLength), mandatoryFinalSymbolLength), indent: s0.indent, offset: basics_add(basics_add(s0Offset, consumedBeforeFinalSymbolLength), mandatoryFinalSymbolLength), row: s0.row, src: src));

                            case false:
                                parserFast_pStepBadBacktracking();
                         }
                        }());
                  }
                 }())
                }())
            }
         )
        }())
    }

    static public func parserFast_whileMapWithRange<Res: Sendable>(_ isGood: @Sendable (Character) -> Bool, _ rangeAndConsumedStringToRes: @Sendable (ElmSyntaxRange_Range, String) -> Res) -> ParserFast_Parser<Res> {
        ParserFast_Parser.Parser(
            { (s0) in
                ({ () in let s1:ParserFast_State =
                    parserFast_skipWhileHelp(isGood, s0.offset, s0.row, s0.col, s0.src, s0.indent);

                 return ParserFast_PStep.Good(rangeAndConsumedStringToRes((end: (column: s1.col, row: s1.row), start: (column: s0.col, row: s0.row)), string_slice(s0.offset, s1.offset, s0.src)), s1)
                }())
            }
        )
    }

    static public func parserFast_withIndentSetToColumn<A: Sendable>(_ generated_parse: ParserFast_Parser<A>) -> ParserFast_Parser<A> {
        ({ () in return switch (generated_parse: generated_parse, unusedDummyFieldToMakeSwiftHappy: ()) {
            case let (generated_parse: ParserFast_Parser.Parser(parse), unusedDummyFieldToMakeSwiftHappy: ()):
                ParserFast_Parser.Parser(
                    { (s0) in
                        ({ () in return switch 
                            parse(
                                parserFast_changeIndent(
                                    { (indent) in
                                        List_List.Cons(s0.col, indent)
                                    },
                                    s0
                                )
                            )
                          {
                            case let ParserFast_PStep.Good(a, s1):
                                ParserFast_PStep.Good(
                                    a,
                                    parserFast_changeIndent(
                                        { (indent) in
                                            list_drop(1.0, indent)
                                        },
                                        s1
                                    )
                                );

                            case let bad:
                                bad;
                         }
                        }())
                    }
                );
         }
        }())
    }

    static public let print_empty:Print_Print =
        print_exactly("");

    static public func print_emptyOrLinebreakIndented(_ lineSpreadToUse: Print_LineSpread) -> Print_Print {
        ({ () in return switch lineSpreadToUse {
            case Print_LineSpread.SingleLine:
                print_empty;

            case Print_LineSpread.MultipleLines:
                print_linebreakIndented;
         }
        }())
    }

    static public func print_exactly(_ exactNextString: String) -> Print_Print {
        Print_Print.Exact(exactNextString, ())
    }

    static public let print_followedBy:@Sendable (Print_Print, Print_Print) -> Print_Print =
        Print_Print.FollowedBy;

    static public func print_indentAtMost4(_ atMost4: Double) -> String {
        ({ () in return switch atMost4 {
            case 1.0:
                " ";

            case 2.0:
                "  ";

            case 3.0:
                "   ";

            case _:
                "    ";
         }
        }())
    }

    static public func print_indentInverseRemainderBy4(_ inverseRemainderBy4: Double) -> String {
        ({ () in return switch inverseRemainderBy4 {
            case 0.0:
                "    ";

            case 1.0:
                "   ";

            case 2.0:
                "  ";

            case _:
                " ";
         }
        }())
    }

    static public func print_lineSpread(_ print: Print_Print) -> Print_LineSpread {
        ({ () in return switch print {
            case Print_Print.Exact(_, _):
                Print_LineSpread.SingleLine;

            case let Print_Print.FollowedBy(b, a):
                print_lineSpreadWithRemaining(a, List_List.Cons(b, List_List.Empty));

            case Print_Print.Linebreak(_, _):
                Print_LineSpread.MultipleLines;

            case Print_Print.LinebreakIndented(_, _):
                Print_LineSpread.MultipleLines;

            case let Print_Print.WithIndentIncreasedBy(_, innerPrint):
                print_lineSpread(innerPrint);

            case let Print_Print.WithIndentAtNextMultipleOf4(innerPrint, _):
                print_lineSpread(innerPrint);
         }
        }())
    }

    static public func print_lineSpreadListMapAndCombine<A: Sendable>(_ elementLineSpread: @Sendable (A) -> Print_LineSpread, _ lineSpreads: List_List<A>) -> Print_LineSpread {
        ({ () in return switch lineSpreads {
            case List_List.Empty:
                Print_LineSpread.SingleLine;

            case let List_List.Cons(head, tail):
                ({ () in return switch elementLineSpread(head) {
                    case Print_LineSpread.MultipleLines:
                        Print_LineSpread.MultipleLines;

                    case Print_LineSpread.SingleLine:
                        print_lineSpreadListMapAndCombine(elementLineSpread, tail);
                 }
                }());
         }
        }())
    }

    static public func print_lineSpreadMergeWith(_ bLineSpreadLazy: @Sendable (()) -> Print_LineSpread, _ aLineSpread: Print_LineSpread) -> Print_LineSpread {
        ({ () in return switch aLineSpread {
            case Print_LineSpread.MultipleLines:
                Print_LineSpread.MultipleLines;

            case Print_LineSpread.SingleLine:
                bLineSpreadLazy(());
         }
        }())
    }

    static public func print_lineSpreadMergeWithStrict(_ bLineSpreadLazy: Print_LineSpread, _ aLineSpread: Print_LineSpread) -> Print_LineSpread {
        ({ () in return switch aLineSpread {
            case Print_LineSpread.MultipleLines:
                Print_LineSpread.MultipleLines;

            case Print_LineSpread.SingleLine:
                bLineSpreadLazy;
         }
        }())
    }

    static public func print_lineSpreadWithRemaining(_ print: Print_Print, _ remainingPrints: List_List<Print_Print>) -> Print_LineSpread {
        ({ () in return switch print {
            case Print_Print.Exact(_, _):
                ({ () in return switch remainingPrints {
                    case List_List.Empty:
                        Print_LineSpread.SingleLine;

                    case let List_List.Cons(nextPrint, nextRemainingPrints):
                        print_lineSpreadWithRemaining(nextPrint, nextRemainingPrints);
                 }
                }());

            case let Print_Print.FollowedBy(b, a):
                print_lineSpreadWithRemaining(a, List_List.Cons(b, remainingPrints));

            case Print_Print.Linebreak(_, _):
                Print_LineSpread.MultipleLines;

            case Print_Print.LinebreakIndented(_, _):
                Print_LineSpread.MultipleLines;

            case let Print_Print.WithIndentIncreasedBy(_, innerPrint):
                print_lineSpreadWithRemaining(innerPrint, remainingPrints);

            case let Print_Print.WithIndentAtNextMultipleOf4(innerPrint, _):
                print_lineSpreadWithRemaining(innerPrint, remainingPrints);
         }
        }())
    }

    static public let print_linebreak:Print_Print =
        Print_Print.Linebreak((), ());

    static public let print_linebreakIndented:Print_Print =
        Print_Print.LinebreakIndented((), ());

    static public func print_listIntersperseAndFlatten(_ inBetweenPrint: Print_Print, _ elements: List_List<Print_Print>) -> Print_Print {
        ({ () in return switch elements {
            case List_List.Empty:
                print_empty;

            case let List_List.Cons(head, tail):
                list_foldl(
                    { (next, soFar) in
                        print_followedBy(next, print_followedBy(inBetweenPrint, soFar))
                    },
                    head,
                    tail
                );
         }
        }())
    }

    static public func print_listMapAndFlatten<A: Sendable>(_ elementToPrint: @Sendable (A) -> Print_Print, _ elements: List_List<A>) -> Print_Print {
        list_foldl(
            { (next, soFar) in
                print_followedBy(elementToPrint(next), soFar)
            },
            print_empty,
            elements
        )
    }

    static public func print_listMapAndIntersperseAndFlatten<A: Sendable>(_ elementToPrint: @Sendable (A) -> Print_Print, _ inBetweenPrint: Print_Print, _ prints: List_List<A>) -> Print_Print {
        ({ () in return switch prints {
            case List_List.Empty:
                print_empty;

            case let List_List.Cons(head, tail):
                list_foldl(
                    { (next, soFar) in
                        print_followedBy(elementToPrint(next), print_followedBy(inBetweenPrint, soFar))
                    },
                    elementToPrint(head),
                    tail
                );
         }
        }())
    }

    static public func print_listReverseAndIntersperseAndFlatten(_ inBetweenPrint: Print_Print, _ prints: List_List<Print_Print>) -> Print_Print {
        ({ () in return switch prints {
            case List_List.Empty:
                print_empty;

            case let List_List.Cons(head, tail):
                list_foldl(
                    { (next, soFar) in
                        print_followedBy(soFar, print_followedBy(inBetweenPrint, next))
                    },
                    head,
                    tail
                );
         }
        }())
    }

    static public func print_listReverseAndMapAndFlatten<A: Sendable>(_ elementToPrint: @Sendable (A) -> Print_Print, _ elements: List_List<A>) -> Print_Print {
        list_foldr(
            { (next, soFar) in
                print_followedBy(elementToPrint(next), soFar)
            },
            print_empty,
            elements
        )
    }

    static public func print_listReverseAndMapAndIntersperseAndFlatten<A: Sendable>(_ elementToPrint: @Sendable (A) -> Print_Print, _ inBetweenPrint: Print_Print, _ elements: List_List<A>) -> Print_Print {
        ({ () in return switch elements {
            case List_List.Empty:
                print_empty;

            case let List_List.Cons(head, tail):
                list_foldl(
                    { (next, soFar) in
                        print_followedBy(soFar, print_followedBy(inBetweenPrint, elementToPrint(next)))
                    },
                    elementToPrint(head),
                    tail
                );
         }
        }())
    }

    static public let print_space:Print_Print =
        print_exactly(" ");

    static public func print_spaceOrLinebreakIndented(_ lineSpreadToUse: Print_LineSpread) -> Print_Print {
        ({ () in return switch lineSpreadToUse {
            case Print_LineSpread.SingleLine:
                print_space;

            case Print_LineSpread.MultipleLines:
                print_linebreakIndented;
         }
        }())
    }

    static public func print_toString(_ print: Print_Print) -> String {
        print_toStringWithIndent(0.0, print)
    }

    static public func print_toStringWithIndent(_ indent: Double, _ print: Print_Print) -> String {
        print_toStringWithIndentAndLinebreakIndentAsStringWithRight(indent, "\n", "", print)
    }

    static public func print_toStringWithIndentAndLinebreakIndentAsStringWithRight(_ indentIgnoringMultiplesOfBy4: Double, _ linebreakIndentAsString: String, _ right: String, _ print: Print_Print) -> String {
        ({ () in return switch print {
            case let Print_Print.Exact(string, _):
                string_append(string, string_append(right, ""));

            case let Print_Print.FollowedBy(b, a):
                print_toStringWithIndentAndLinebreakIndentAsStringWithRight(indentIgnoringMultiplesOfBy4, linebreakIndentAsString, print_toStringWithIndentAndLinebreakIndentAsStringWithRight(indentIgnoringMultiplesOfBy4, linebreakIndentAsString, right, b), a);

            case Print_Print.Linebreak(_, _):
                string_append("\n", right);

            case Print_Print.LinebreakIndented(_, _):
                string_append(linebreakIndentAsString, string_append(right, ""));

            case let Print_Print.WithIndentIncreasedBy(increase, innerPrint):
                print_toStringWithIndentAndLinebreakIndentAsStringWithRight(basics_add(basics_add(indentIgnoringMultiplesOfBy4, increase), 0.0), string_append(linebreakIndentAsString, string_append(print_indentAtMost4(increase), "")), right, innerPrint);

            case let Print_Print.WithIndentAtNextMultipleOf4(innerPrint, _):
                print_toStringWithIndentAndLinebreakIndentAsStringWithRight(0.0, string_append(linebreakIndentAsString, string_append(print_indentInverseRemainderBy4(basics_sub(indentIgnoringMultiplesOfBy4, basics_mul(basics_idiv(indentIgnoringMultiplesOfBy4, 4.0), 4.0))), "")), right, innerPrint);
         }
        }())
    }

    static public func print_withIndentAtNextMultipleOf4(_ print: Print_Print) -> Print_Print {
        Print_Print.WithIndentAtNextMultipleOf4(print, ())
    }

    static public let print_withIndentIncreasedBy:@Sendable (Double, Print_Print) -> Print_Print =
        Print_Print.WithIndentIncreasedBy;

    static public func result_andThen<A: Sendable, B: Sendable, X: Sendable>(_ callback: @Sendable (A) -> Result_Result<X, B>, _ result: Result_Result<X, A>) -> Result_Result<X, B> {
        ({ () in return switch result {
            case let Result_Result.Ok(value):
                callback(value);

            case let Result_Result.Err(msg):
                Result_Result.Err(msg);
         }
        }())
    }

    static public func result_fromMaybe<A: Sendable, X: Sendable>(_ err: X, _ maybe: Maybe_Maybe<A>) -> Result_Result<X, A> {
        ({ () in return switch maybe {
            case let Maybe_Maybe.Just(v):
                Result_Result.Ok(v);

            case Maybe_Maybe.Nothing:
                Result_Result.Err(err);
         }
        }())
    }

    static public func result_isOk<A: Sendable, X: Sendable>(_ result: Result_Result<X, A>) -> Bool {
        ({ () in return switch result {
            case Result_Result.Ok(_):
                true;

            case Result_Result.Err(_):
                false;
         }
        }())
    }

    static public func result_map<A: Sendable, Value: Sendable, X: Sendable>(_ func_: @Sendable (A) -> Value, _ ra: Result_Result<X, A>) -> Result_Result<X, Value> {
        ({ () in return switch ra {
            case let Result_Result.Ok(a):
                Result_Result.Ok(func_(a));

            case let Result_Result.Err(e):
                Result_Result.Err(e);
         }
        }())
    }

    static public func result_map2<A: Sendable, B: Sendable, Value: Sendable, X: Sendable>(_ func_: @Sendable (A, B) -> Value, _ ra: Result_Result<X, A>, _ rb: Result_Result<X, B>) -> Result_Result<X, Value> {
        ({ () in return switch ra {
            case let Result_Result.Err(x):
                Result_Result.Err(x);

            case let Result_Result.Ok(a):
                ({ () in return switch rb {
                    case let Result_Result.Err(x):
                        Result_Result.Err(x);

                    case let Result_Result.Ok(b):
                        Result_Result.Ok(func_(a, b));
                 }
                }());
         }
        }())
    }

    static public func result_map3<A: Sendable, B: Sendable, C: Sendable, Value: Sendable, X: Sendable>(_ func_: @Sendable (A, B, C) -> Value, _ ra: Result_Result<X, A>, _ rb: Result_Result<X, B>, _ rc: Result_Result<X, C>) -> Result_Result<X, Value> {
        ({ () in return switch ra {
            case let Result_Result.Err(x):
                Result_Result.Err(x);

            case let Result_Result.Ok(a):
                ({ () in return switch rb {
                    case let Result_Result.Err(x):
                        Result_Result.Err(x);

                    case let Result_Result.Ok(b):
                        ({ () in return switch rc {
                            case let Result_Result.Err(x):
                                Result_Result.Err(x);

                            case let Result_Result.Ok(c):
                                Result_Result.Ok(func_(a, b, c));
                         }
                        }());
                 }
                }());
         }
        }())
    }

    static public func result_map4<A: Sendable, B: Sendable, C: Sendable, D: Sendable, Value: Sendable, X: Sendable>(_ func_: @Sendable (A, B, C, D) -> Value, _ ra: Result_Result<X, A>, _ rb: Result_Result<X, B>, _ rc: Result_Result<X, C>, _ rd: Result_Result<X, D>) -> Result_Result<X, Value> {
        ({ () in return switch ra {
            case let Result_Result.Err(x):
                Result_Result.Err(x);

            case let Result_Result.Ok(a):
                ({ () in return switch rb {
                    case let Result_Result.Err(x):
                        Result_Result.Err(x);

                    case let Result_Result.Ok(b):
                        ({ () in return switch rc {
                            case let Result_Result.Err(x):
                                Result_Result.Err(x);

                            case let Result_Result.Ok(c):
                                ({ () in return switch rd {
                                    case let Result_Result.Err(x):
                                        Result_Result.Err(x);

                                    case let Result_Result.Ok(d):
                                        Result_Result.Ok(func_(a, b, c, d));
                                 }
                                }());
                         }
                        }());
                 }
                }());
         }
        }())
    }

    static public func result_map5<A: Sendable, B: Sendable, C: Sendable, D: Sendable, E: Sendable, Value: Sendable, X: Sendable>(_ func_: @Sendable (A, B, C, D, E) -> Value, _ ra: Result_Result<X, A>, _ rb: Result_Result<X, B>, _ rc: Result_Result<X, C>, _ rd: Result_Result<X, D>, _ re: Result_Result<X, E>) -> Result_Result<X, Value> {
        ({ () in return switch ra {
            case let Result_Result.Err(x):
                Result_Result.Err(x);

            case let Result_Result.Ok(a):
                ({ () in return switch rb {
                    case let Result_Result.Err(x):
                        Result_Result.Err(x);

                    case let Result_Result.Ok(b):
                        ({ () in return switch rc {
                            case let Result_Result.Err(x):
                                Result_Result.Err(x);

                            case let Result_Result.Ok(c):
                                ({ () in return switch rd {
                                    case let Result_Result.Err(x):
                                        Result_Result.Err(x);

                                    case let Result_Result.Ok(d):
                                        ({ () in return switch re {
                                            case let Result_Result.Err(x):
                                                Result_Result.Err(x);

                                            case let Result_Result.Ok(e):
                                                Result_Result.Ok(func_(a, b, c, d, e));
                                         }
                                        }());
                                 }
                                }());
                         }
                        }());
                 }
                }());
         }
        }())
    }

    static public func result_mapError<A: Sendable, X: Sendable, Y: Sendable>(_ f: @Sendable (X) -> Y, _ result: Result_Result<X, A>) -> Result_Result<Y, A> {
        ({ () in return switch result {
            case let Result_Result.Ok(v):
                Result_Result.Ok(v);

            case let Result_Result.Err(e):
                Result_Result.Err(f(e));
         }
        }())
    }

    static public func result_toMaybe<A: Sendable, X: Sendable>(_ result: Result_Result<X, A>) -> Maybe_Maybe<A> {
        ({ () in return switch result {
            case let Result_Result.Ok(v):
                Maybe_Maybe.Just(v);

            case Result_Result.Err(_):
                Maybe_Maybe.Nothing;
         }
        }())
    }

    static public func result_withDefault<A: Sendable, X: Sendable>(_ def: A, _ result: Result_Result<X, A>) -> A {
        ({ () in return switch result {
            case let Result_Result.Ok(a):
                a;

            case Result_Result.Err(_):
                def;
         }
        }())
    }

    static public func tuple_first<A: Sendable, B: Sendable>(_ generated_x:
        (first: A,
         second: B
        )) -> A {
        ({ () in return switch (generated_x: generated_x, unusedDummyFieldToMakeSwiftHappy: ()) {
            case let (generated_x: (first: x, second: _), unusedDummyFieldToMakeSwiftHappy: ()):
                x;
         }
        }())
    }

    static public func tuple_mapBoth<A: Sendable, B: Sendable, X: Sendable, Y: Sendable>(_ funcA: @Sendable (A) -> X, _ funcB: @Sendable (B) -> Y, _ generated_x_y:
        (first: A,
         second: B
        )) ->
        (first: X,
         second: Y
        ) {
        ({ () in return switch (generated_x_y: generated_x_y, unusedDummyFieldToMakeSwiftHappy: ()) {
            case let (generated_x_y: (first: x, second: y), unusedDummyFieldToMakeSwiftHappy: ()):
                (first: funcA(x), second: funcB(y));
         }
        }())
    }

    static public func tuple_mapFirst<A: Sendable, B: Sendable, X: Sendable>(_ func_: @Sendable (A) -> X, _ generated_x_y:
        (first: A,
         second: B
        )) ->
        (first: X,
         second: B
        ) {
        ({ () in return switch (generated_x_y: generated_x_y, unusedDummyFieldToMakeSwiftHappy: ()) {
            case let (generated_x_y: (first: x, second: y), unusedDummyFieldToMakeSwiftHappy: ()):
                (first: func_(x), second: y);
         }
        }())
    }

    static public func tuple_mapSecond<A: Sendable, B: Sendable, Y: Sendable>(_ func_: @Sendable (B) -> Y, _ generated_x_y:
        (first: A,
         second: B
        )) ->
        (first: A,
         second: Y
        ) {
        ({ () in return switch (generated_x_y: generated_x_y, unusedDummyFieldToMakeSwiftHappy: ()) {
            case let (generated_x_y: (first: x, second: y), unusedDummyFieldToMakeSwiftHappy: ()):
                (first: x, second: func_(y));
         }
        }())
    }

    static public func tuple_pair<A: Sendable, B: Sendable>(_ a: A, _ b: B) ->
        (first: A,
         second: B
        ) {
        (first: a, second: b)
    }

    static public func tuple_second<A: Sendable, B: Sendable>(_ generated_y:
        (first: A,
         second: B
        )) -> B {
        ({ () in return switch (generated_y: generated_y, unusedDummyFieldToMakeSwiftHappy: ()) {
            case let (generated_y: (first: _, second: y), unusedDummyFieldToMakeSwiftHappy: ()):
                y;
         }
        }())
    }

    static public func unicode_categoryFromString(_ generalCategory: String) -> Maybe_Maybe<Unicode_Category> {
        ({ () in return switch generalCategory {
            case "Lu":
                Maybe_Maybe.Just(Unicode_Category.LetterUppercase);

            case "Ll":
                Maybe_Maybe.Just(Unicode_Category.LetterLowercase);

            case "Lt":
                Maybe_Maybe.Just(Unicode_Category.LetterTitlecase);

            case "Mn":
                Maybe_Maybe.Just(Unicode_Category.MarkNonSpacing);

            case "Mc":
                Maybe_Maybe.Just(Unicode_Category.MarkSpacingCombining);

            case "Me":
                Maybe_Maybe.Just(Unicode_Category.MarkEnclosing);

            case "Nd":
                Maybe_Maybe.Just(Unicode_Category.NumberDecimalDigit);

            case "Nl":
                Maybe_Maybe.Just(Unicode_Category.NumberLetter);

            case "No":
                Maybe_Maybe.Just(Unicode_Category.NumberOther);

            case "Zs":
                Maybe_Maybe.Just(Unicode_Category.SeparatorSpace);

            case "Zl":
                Maybe_Maybe.Just(Unicode_Category.SeparatorLine);

            case "Zp":
                Maybe_Maybe.Just(Unicode_Category.SeparatorParagraph);

            case "Cc":
                Maybe_Maybe.Just(Unicode_Category.OtherControl);

            case "Cf":
                Maybe_Maybe.Just(Unicode_Category.OtherFormat);

            case "Cs":
                Maybe_Maybe.Just(Unicode_Category.OtherSurrogate);

            case "Co":
                Maybe_Maybe.Just(Unicode_Category.OtherPrivateUse);

            case "Cn":
                Maybe_Maybe.Just(Unicode_Category.OtherNotAssigned);

            case "Lm":
                Maybe_Maybe.Just(Unicode_Category.LetterModifier);

            case "Lo":
                Maybe_Maybe.Just(Unicode_Category.LetterOther);

            case "Pc":
                Maybe_Maybe.Just(Unicode_Category.PunctuationConnector);

            case "Pd":
                Maybe_Maybe.Just(Unicode_Category.PunctuationDash);

            case "Ps":
                Maybe_Maybe.Just(Unicode_Category.PunctuationOpen);

            case "Pe":
                Maybe_Maybe.Just(Unicode_Category.PunctuationClose);

            case "Pi":
                Maybe_Maybe.Just(Unicode_Category.PunctuationInitialQuote);

            case "Pf":
                Maybe_Maybe.Just(Unicode_Category.PunctuationFinalQuote);

            case "Po":
                Maybe_Maybe.Just(Unicode_Category.PunctuationOther);

            case "Sm":
                Maybe_Maybe.Just(Unicode_Category.SymbolMath);

            case "Sc":
                Maybe_Maybe.Just(Unicode_Category.SymbolCurrency);

            case "Sk":
                Maybe_Maybe.Just(Unicode_Category.SymbolModifier);

            case "So":
                Maybe_Maybe.Just(Unicode_Category.SymbolOther);

            case _:
                Maybe_Maybe.Nothing;
         }
        }())
    }

    static public func unicode_categoryToDescription(_ generalCategory: Unicode_Category) -> String {
        ({ () in return switch generalCategory {
            case Unicode_Category.LetterUppercase:
                "Letter, Uppercase";

            case Unicode_Category.LetterLowercase:
                "Letter, Lowercase";

            case Unicode_Category.LetterTitlecase:
                "Letter, Titlecase";

            case Unicode_Category.MarkNonSpacing:
                "Mark, Non-Spacing";

            case Unicode_Category.MarkSpacingCombining:
                "Mark, Spacing Combining";

            case Unicode_Category.MarkEnclosing:
                "Mark, Enclosing";

            case Unicode_Category.NumberDecimalDigit:
                "Number, Decimal Digit";

            case Unicode_Category.NumberLetter:
                "Number, Letter";

            case Unicode_Category.NumberOther:
                "Number, Other";

            case Unicode_Category.SeparatorSpace:
                "Separator, Space";

            case Unicode_Category.SeparatorLine:
                "Separator, Line";

            case Unicode_Category.SeparatorParagraph:
                "Separator, Paragraph";

            case Unicode_Category.OtherControl:
                "Other, Control";

            case Unicode_Category.OtherFormat:
                "Other, Format";

            case Unicode_Category.OtherSurrogate:
                "Other, Surrogate";

            case Unicode_Category.OtherPrivateUse:
                "Other, Private Use";

            case Unicode_Category.OtherNotAssigned:
                "Other, Not Assigned";

            case Unicode_Category.LetterModifier:
                "Letter, Modifier";

            case Unicode_Category.LetterOther:
                "Letter, Other";

            case Unicode_Category.PunctuationConnector:
                "Punctuation, Connector";

            case Unicode_Category.PunctuationDash:
                "Punctuation, Dash";

            case Unicode_Category.PunctuationOpen:
                "Punctuation, Open";

            case Unicode_Category.PunctuationClose:
                "Punctuation, Close";

            case Unicode_Category.PunctuationInitialQuote:
                "Punctuation, Initial quote";

            case Unicode_Category.PunctuationFinalQuote:
                "Punctuation, Final quote";

            case Unicode_Category.PunctuationOther:
                "Punctuation, Other";

            case Unicode_Category.SymbolMath:
                "Symbol, Math";

            case Unicode_Category.SymbolCurrency:
                "Symbol, Currency";

            case Unicode_Category.SymbolModifier:
                "Symbol, Modifier";

            case Unicode_Category.SymbolOther:
                "Symbol, Other";
         }
        }())
    }

    static public func unicode_categoryToString(_ generalCategory: Unicode_Category) -> String {
        ({ () in return switch generalCategory {
            case Unicode_Category.LetterUppercase:
                "Lu";

            case Unicode_Category.LetterLowercase:
                "Ll";

            case Unicode_Category.LetterTitlecase:
                "Lt";

            case Unicode_Category.MarkNonSpacing:
                "Mn";

            case Unicode_Category.MarkSpacingCombining:
                "Mc";

            case Unicode_Category.MarkEnclosing:
                "Me";

            case Unicode_Category.NumberDecimalDigit:
                "Nd";

            case Unicode_Category.NumberLetter:
                "Nl";

            case Unicode_Category.NumberOther:
                "No";

            case Unicode_Category.SeparatorSpace:
                "Zs";

            case Unicode_Category.SeparatorLine:
                "Zl";

            case Unicode_Category.SeparatorParagraph:
                "Zp";

            case Unicode_Category.OtherControl:
                "Cc";

            case Unicode_Category.OtherFormat:
                "Cf";

            case Unicode_Category.OtherSurrogate:
                "Cs";

            case Unicode_Category.OtherPrivateUse:
                "Co";

            case Unicode_Category.OtherNotAssigned:
                "Cn";

            case Unicode_Category.LetterModifier:
                "Lm";

            case Unicode_Category.LetterOther:
                "Lo";

            case Unicode_Category.PunctuationConnector:
                "Pc";

            case Unicode_Category.PunctuationDash:
                "Pd";

            case Unicode_Category.PunctuationOpen:
                "Ps";

            case Unicode_Category.PunctuationClose:
                "Pe";

            case Unicode_Category.PunctuationInitialQuote:
                "Pi";

            case Unicode_Category.PunctuationFinalQuote:
                "Pf";

            case Unicode_Category.PunctuationOther:
                "Po";

            case Unicode_Category.SymbolMath:
                "Sm";

            case Unicode_Category.SymbolCurrency:
                "Sc";

            case Unicode_Category.SymbolModifier:
                "Sk";

            case Unicode_Category.SymbolOther:
                "So";
         }
        }())
    }

    static public func unicode_getCategory(_ c: Character) -> Maybe_Maybe<Unicode_Category> {
        ({ () in let code =
            char_toCode(c);

         let e =
            { (hex) in
                basics_eq(hex, code)
            };

         let l =
            { (hex) in
                basics_lt(code, hex)
            };

         let r =
            { (from, to) in
                basics_and(basics_le(from, code), basics_le(code, to))
            };

         return ({ () in return switch l(256.0) {
            case true:
                ({ () in return switch l(160.0) {
                    case true:
                        ({ () in return switch l(59.0) {
                            case true:
                                ({ () in return switch l(41.0) {
                                    case true:
                                        ({ () in return switch basics_le(code, 31.0) {
                                            case true:
                                                Maybe_Maybe.Just(Unicode_Category.OtherControl);

                                            case false:
                                                ({ () in return switch e(32.0) {
                                                    case true:
                                                        Maybe_Maybe.Just(Unicode_Category.SeparatorSpace);

                                                    case false:
                                                        ({ () in return switch basics_or(r(33.0, 35.0), r(37.0, 39.0)) {
                                                            case true:
                                                                Maybe_Maybe.Just(Unicode_Category.PunctuationOther);

                                                            case false:
                                                                ({ () in return switch e(36.0) {
                                                                    case true:
                                                                        Maybe_Maybe.Just(Unicode_Category.SymbolCurrency);

                                                                    case false:
                                                                        ({ () in return switch e(40.0) {
                                                                            case true:
                                                                                Maybe_Maybe.Just(Unicode_Category.PunctuationOpen);

                                                                            case false:
                                                                                Maybe_Maybe.Nothing;
                                                                         }
                                                                        }());
                                                                 }
                                                                }());
                                                         }
                                                        }());
                                                 }
                                                }());
                                         }
                                        }());

                                    case false:
                                        ({ () in return switch e(41.0) {
                                            case true:
                                                Maybe_Maybe.Just(Unicode_Category.PunctuationClose);

                                            case false:
                                                ({ () in return switch basics_or(e(42.0), basics_or(e(44.0), basics_or(r(46.0, 47.0), e(58.0)))) {
                                                    case true:
                                                        Maybe_Maybe.Just(Unicode_Category.PunctuationOther);

                                                    case false:
                                                        ({ () in return switch e(43.0) {
                                                            case true:
                                                                Maybe_Maybe.Just(Unicode_Category.SymbolMath);

                                                            case false:
                                                                ({ () in return switch e(45.0) {
                                                                    case true:
                                                                        Maybe_Maybe.Just(Unicode_Category.PunctuationDash);

                                                                    case false:
                                                                        ({ () in return switch r(48.0, 57.0) {
                                                                            case true:
                                                                                Maybe_Maybe.Just(Unicode_Category.NumberDecimalDigit);

                                                                            case false:
                                                                                Maybe_Maybe.Nothing;
                                                                         }
                                                                        }());
                                                                 }
                                                                }());
                                                         }
                                                        }());
                                                 }
                                                }());
                                         }
                                        }());
                                 }
                                }());

                            case false:
                                ({ () in return switch l(94.0) {
                                    case true:
                                        ({ () in return switch basics_or(e(59.0), basics_or(r(63.0, 64.0), e(92.0))) {
                                            case true:
                                                Maybe_Maybe.Just(Unicode_Category.PunctuationOther);

                                            case false:
                                                ({ () in return switch r(60.0, 62.0) {
                                                    case true:
                                                        Maybe_Maybe.Just(Unicode_Category.SymbolMath);

                                                    case false:
                                                        ({ () in return switch r(65.0, 90.0) {
                                                            case true:
                                                                Maybe_Maybe.Just(Unicode_Category.LetterUppercase);

                                                            case false:
                                                                ({ () in return switch e(91.0) {
                                                                    case true:
                                                                        Maybe_Maybe.Just(Unicode_Category.PunctuationOpen);

                                                                    case false:
                                                                        ({ () in return switch e(93.0) {
                                                                            case true:
                                                                                Maybe_Maybe.Just(Unicode_Category.PunctuationClose);

                                                                            case false:
                                                                                Maybe_Maybe.Nothing;
                                                                         }
                                                                        }());
                                                                 }
                                                                }());
                                                         }
                                                        }());
                                                 }
                                                }());
                                         }
                                        }());

                                    case false:
                                        ({ () in return switch basics_or(e(94.0), e(96.0)) {
                                            case true:
                                                Maybe_Maybe.Just(Unicode_Category.SymbolModifier);

                                            case false:
                                                ({ () in return switch e(95.0) {
                                                    case true:
                                                        Maybe_Maybe.Just(Unicode_Category.PunctuationConnector);

                                                    case false:
                                                        ({ () in return switch r(97.0, 122.0) {
                                                            case true:
                                                                Maybe_Maybe.Just(Unicode_Category.LetterLowercase);

                                                            case false:
                                                                ({ () in return switch e(123.0) {
                                                                    case true:
                                                                        Maybe_Maybe.Just(Unicode_Category.PunctuationOpen);

                                                                    case false:
                                                                        ({ () in return switch basics_or(e(124.0), e(126.0)) {
                                                                            case true:
                                                                                Maybe_Maybe.Just(Unicode_Category.SymbolMath);

                                                                            case false:
                                                                                ({ () in return switch e(125.0) {
                                                                                    case true:
                                                                                        Maybe_Maybe.Just(Unicode_Category.PunctuationClose);

                                                                                    case false:
                                                                                        ({ () in return switch r(127.0, 159.0) {
                                                                                            case true:
                                                                                                Maybe_Maybe.Just(Unicode_Category.OtherControl);

                                                                                            case false:
                                                                                                Maybe_Maybe.Nothing;
                                                                                         }
                                                                                        }());
                                                                                 }
                                                                                }());
                                                                         }
                                                                        }());
                                                                 }
                                                                }());
                                                         }
                                                        }());
                                                 }
                                                }());
                                         }
                                        }());
                                 }
                                }());
                         }
                        }());

                    case false:
                        ({ () in return switch l(177.0) {
                            case true:
                                ({ () in return switch l(169.0) {
                                    case true:
                                        ({ () in return switch e(160.0) {
                                            case true:
                                                Maybe_Maybe.Just(Unicode_Category.SeparatorSpace);

                                            case false:
                                                ({ () in return switch basics_or(e(161.0), e(167.0)) {
                                                    case true:
                                                        Maybe_Maybe.Just(Unicode_Category.PunctuationOther);

                                                    case false:
                                                        ({ () in return switch r(162.0, 165.0) {
                                                            case true:
                                                                Maybe_Maybe.Just(Unicode_Category.SymbolCurrency);

                                                            case false:
                                                                ({ () in return switch e(166.0) {
                                                                    case true:
                                                                        Maybe_Maybe.Just(Unicode_Category.SymbolOther);

                                                                    case false:
                                                                        ({ () in return switch e(168.0) {
                                                                            case true:
                                                                                Maybe_Maybe.Just(Unicode_Category.SymbolModifier);

                                                                            case false:
                                                                                Maybe_Maybe.Nothing;
                                                                         }
                                                                        }());
                                                                 }
                                                                }());
                                                         }
                                                        }());
                                                 }
                                                }());
                                         }
                                        }());

                                    case false:
                                        ({ () in return switch basics_or(e(169.0), basics_or(e(174.0), e(176.0))) {
                                            case true:
                                                Maybe_Maybe.Just(Unicode_Category.SymbolOther);

                                            case false:
                                                ({ () in return switch e(170.0) {
                                                    case true:
                                                        Maybe_Maybe.Just(Unicode_Category.LetterOther);

                                                    case false:
                                                        ({ () in return switch e(171.0) {
                                                            case true:
                                                                Maybe_Maybe.Just(Unicode_Category.PunctuationInitialQuote);

                                                            case false:
                                                                ({ () in return switch e(172.0) {
                                                                    case true:
                                                                        Maybe_Maybe.Just(Unicode_Category.SymbolMath);

                                                                    case false:
                                                                        ({ () in return switch e(173.0) {
                                                                            case true:
                                                                                Maybe_Maybe.Just(Unicode_Category.OtherFormat);

                                                                            case false:
                                                                                ({ () in return switch e(175.0) {
                                                                                    case true:
                                                                                        Maybe_Maybe.Just(Unicode_Category.SymbolModifier);

                                                                                    case false:
                                                                                        Maybe_Maybe.Nothing;
                                                                                 }
                                                                                }());
                                                                         }
                                                                        }());
                                                                 }
                                                                }());
                                                         }
                                                        }());
                                                 }
                                                }());
                                         }
                                        }());
                                 }
                                }());

                            case false:
                                ({ () in return switch l(186.0) {
                                    case true:
                                        ({ () in return switch e(177.0) {
                                            case true:
                                                Maybe_Maybe.Just(Unicode_Category.SymbolMath);

                                            case false:
                                                ({ () in return switch basics_or(r(178.0, 179.0), e(185.0)) {
                                                    case true:
                                                        Maybe_Maybe.Just(Unicode_Category.NumberOther);

                                                    case false:
                                                        ({ () in return switch basics_or(e(180.0), e(184.0)) {
                                                            case true:
                                                                Maybe_Maybe.Just(Unicode_Category.SymbolModifier);

                                                            case false:
                                                                ({ () in return switch e(181.0) {
                                                                    case true:
                                                                        Maybe_Maybe.Just(Unicode_Category.LetterLowercase);

                                                                    case false:
                                                                        ({ () in return switch r(182.0, 183.0) {
                                                                            case true:
                                                                                Maybe_Maybe.Just(Unicode_Category.PunctuationOther);

                                                                            case false:
                                                                                Maybe_Maybe.Nothing;
                                                                         }
                                                                        }());
                                                                 }
                                                                }());
                                                         }
                                                        }());
                                                 }
                                                }());
                                         }
                                        }());

                                    case false:
                                        ({ () in return switch e(186.0) {
                                            case true:
                                                Maybe_Maybe.Just(Unicode_Category.LetterOther);

                                            case false:
                                                ({ () in return switch e(187.0) {
                                                    case true:
                                                        Maybe_Maybe.Just(Unicode_Category.PunctuationFinalQuote);

                                                    case false:
                                                        ({ () in return switch r(188.0, 190.0) {
                                                            case true:
                                                                Maybe_Maybe.Just(Unicode_Category.NumberOther);

                                                            case false:
                                                                ({ () in return switch e(191.0) {
                                                                    case true:
                                                                        Maybe_Maybe.Just(Unicode_Category.PunctuationOther);

                                                                    case false:
                                                                        ({ () in return switch basics_or(r(192.0, 214.0), r(216.0, 222.0)) {
                                                                            case true:
                                                                                Maybe_Maybe.Just(Unicode_Category.LetterUppercase);

                                                                            case false:
                                                                                ({ () in return switch basics_or(e(215.0), e(247.0)) {
                                                                                    case true:
                                                                                        Maybe_Maybe.Just(Unicode_Category.SymbolMath);

                                                                                    case false:
                                                                                        ({ () in return switch basics_or(r(223.0, 246.0), r(248.0, 255.0)) {
                                                                                            case true:
                                                                                                Maybe_Maybe.Just(Unicode_Category.LetterLowercase);

                                                                                            case false:
                                                                                                Maybe_Maybe.Nothing;
                                                                                         }
                                                                                        }());
                                                                                 }
                                                                                }());
                                                                         }
                                                                        }());
                                                                 }
                                                                }());
                                                         }
                                                        }());
                                                 }
                                                }());
                                         }
                                        }());
                                 }
                                }());
                         }
                        }());
                 }
                }());

            case false:
                ({ () in return switch l(9084.0) {
                    case true:
                        ({ () in return switch l(3085.0) {
                            case true:
                                ({ () in return switch l(1166.0) {
                                    case true:
                                        ({ () in return switch l(488.0) {
                                            case true:
                                                ({ () in return switch l(356.0) {
                                                    case true:
                                                        ({ () in return switch l(304.0) {
                                                            case true:
                                                                ({ () in return switch l(279.0) {
                                                                    case true:
                                                                        ({ () in return switch l(266.0) {
                                                                            case true:
                                                                                ({ () in return switch basics_or(e(256.0), basics_or(e(258.0), basics_or(e(260.0), basics_or(e(262.0), e(264.0))))) {
                                                                                    case true:
                                                                                        Maybe_Maybe.Just(Unicode_Category.LetterUppercase);

                                                                                    case false:
                                                                                        ({ () in return switch basics_or(e(257.0), basics_or(e(259.0), basics_or(e(261.0), basics_or(e(263.0), e(265.0))))) {
                                                                                            case true:
                                                                                                Maybe_Maybe.Just(Unicode_Category.LetterLowercase);

                                                                                            case false:
                                                                                                Maybe_Maybe.Nothing;
                                                                                         }
                                                                                        }());
                                                                                 }
                                                                                }());

                                                                            case false:
                                                                                ({ () in return switch l(271.0) {
                                                                                    case true:
                                                                                        ({ () in return switch basics_or(e(266.0), basics_or(e(268.0), e(270.0))) {
                                                                                            case true:
                                                                                                Maybe_Maybe.Just(Unicode_Category.LetterUppercase);

                                                                                            case false:
                                                                                                ({ () in return switch basics_or(e(267.0), e(269.0)) {
                                                                                                    case true:
                                                                                                        Maybe_Maybe.Just(Unicode_Category.LetterLowercase);

                                                                                                    case false:
                                                                                                        Maybe_Maybe.Nothing;
                                                                                                 }
                                                                                                }());
                                                                                         }
                                                                                        }());

                                                                                    case false:
                                                                                        ({ () in return switch basics_or(e(271.0), basics_or(e(273.0), basics_or(e(275.0), e(277.0)))) {
                                                                                            case true:
                                                                                                Maybe_Maybe.Just(Unicode_Category.LetterLowercase);

                                                                                            case false:
                                                                                                ({ () in return switch basics_or(e(272.0), basics_or(e(274.0), basics_or(e(276.0), e(278.0)))) {
                                                                                                    case true:
                                                                                                        Maybe_Maybe.Just(Unicode_Category.LetterUppercase);

                                                                                                    case false:
                                                                                                        Maybe_Maybe.Nothing;
                                                                                                 }
                                                                                                }());
                                                                                         }
                                                                                        }());
                                                                                 }
                                                                                }());
                                                                         }
                                                                        }());

                                                                    case false:
                                                                        ({ () in return switch l(290.0) {
                                                                            case true:
                                                                                ({ () in return switch basics_or(e(279.0), basics_or(e(281.0), basics_or(e(283.0), basics_or(e(285.0), basics_or(e(287.0), e(289.0)))))) {
                                                                                    case true:
                                                                                        Maybe_Maybe.Just(Unicode_Category.LetterLowercase);

                                                                                    case false:
                                                                                        ({ () in return switch basics_or(e(280.0), basics_or(e(282.0), basics_or(e(284.0), basics_or(e(286.0), e(288.0))))) {
                                                                                            case true:
                                                                                                Maybe_Maybe.Just(Unicode_Category.LetterUppercase);

                                                                                            case false:
                                                                                                Maybe_Maybe.Nothing;
                                                                                         }
                                                                                        }());
                                                                                 }
                                                                                }());

                                                                            case false:
                                                                                ({ () in return switch l(296.0) {
                                                                                    case true:
                                                                                        ({ () in return switch basics_or(e(290.0), basics_or(e(292.0), e(294.0))) {
                                                                                            case true:
                                                                                                Maybe_Maybe.Just(Unicode_Category.LetterUppercase);

                                                                                            case false:
                                                                                                ({ () in return switch basics_or(e(291.0), basics_or(e(293.0), e(295.0))) {
                                                                                                    case true:
                                                                                                        Maybe_Maybe.Just(Unicode_Category.LetterLowercase);

                                                                                                    case false:
                                                                                                        Maybe_Maybe.Nothing;
                                                                                                 }
                                                                                                }());
                                                                                         }
                                                                                        }());

                                                                                    case false:
                                                                                        ({ () in return switch basics_or(e(296.0), basics_or(e(298.0), basics_or(e(300.0), e(302.0)))) {
                                                                                            case true:
                                                                                                Maybe_Maybe.Just(Unicode_Category.LetterUppercase);

                                                                                            case false:
                                                                                                ({ () in return switch basics_or(e(297.0), basics_or(e(299.0), basics_or(e(301.0), e(303.0)))) {
                                                                                                    case true:
                                                                                                        Maybe_Maybe.Just(Unicode_Category.LetterLowercase);

                                                                                                    case false:
                                                                                                        Maybe_Maybe.Nothing;
                                                                                                 }
                                                                                                }());
                                                                                         }
                                                                                        }());
                                                                                 }
                                                                                }());
                                                                         }
                                                                        }());
                                                                 }
                                                                }());

                                                            case false:
                                                                ({ () in return switch l(330.0) {
                                                                    case true:
                                                                        ({ () in return switch l(316.0) {
                                                                            case true:
                                                                                ({ () in return switch basics_or(e(304.0), basics_or(e(306.0), basics_or(e(308.0), basics_or(e(310.0), basics_or(e(313.0), e(315.0)))))) {
                                                                                    case true:
                                                                                        Maybe_Maybe.Just(Unicode_Category.LetterUppercase);

                                                                                    case false:
                                                                                        ({ () in return switch basics_or(e(305.0), basics_or(e(307.0), basics_or(e(309.0), basics_or(r(311.0, 312.0), e(314.0))))) {
                                                                                            case true:
                                                                                                Maybe_Maybe.Just(Unicode_Category.LetterLowercase);

                                                                                            case false:
                                                                                                Maybe_Maybe.Nothing;
                                                                                         }
                                                                                        }());
                                                                                 }
                                                                                }());

                                                                            case false:
                                                                                ({ () in return switch l(321.0) {
                                                                                    case true:
                                                                                        ({ () in return switch basics_or(e(316.0), basics_or(e(318.0), e(320.0))) {
                                                                                            case true:
                                                                                                Maybe_Maybe.Just(Unicode_Category.LetterLowercase);

                                                                                            case false:
                                                                                                ({ () in return switch basics_or(e(317.0), e(319.0)) {
                                                                                                    case true:
                                                                                                        Maybe_Maybe.Just(Unicode_Category.LetterUppercase);

                                                                                                    case false:
                                                                                                        Maybe_Maybe.Nothing;
                                                                                                 }
                                                                                                }());
                                                                                         }
                                                                                        }());

                                                                                    case false:
                                                                                        ({ () in return switch basics_or(e(321.0), basics_or(e(323.0), basics_or(e(325.0), e(327.0)))) {
                                                                                            case true:
                                                                                                Maybe_Maybe.Just(Unicode_Category.LetterUppercase);

                                                                                            case false:
                                                                                                ({ () in return switch basics_or(e(322.0), basics_or(e(324.0), basics_or(e(326.0), r(328.0, 329.0)))) {
                                                                                                    case true:
                                                                                                        Maybe_Maybe.Just(Unicode_Category.LetterLowercase);

                                                                                                    case false:
                                                                                                        Maybe_Maybe.Nothing;
                                                                                                 }
                                                                                                }());
                                                                                         }
                                                                                        }());
                                                                                 }
                                                                                }());
                                                                         }
                                                                        }());

                                                                    case false:
                                                                        ({ () in return switch l(342.0) {
                                                                            case true:
                                                                                ({ () in return switch basics_or(e(330.0), basics_or(e(332.0), basics_or(e(334.0), basics_or(e(336.0), basics_or(e(338.0), e(340.0)))))) {
                                                                                    case true:
                                                                                        Maybe_Maybe.Just(Unicode_Category.LetterUppercase);

                                                                                    case false:
                                                                                        ({ () in return switch basics_or(e(331.0), basics_or(e(333.0), basics_or(e(335.0), basics_or(e(337.0), basics_or(e(339.0), e(341.0)))))) {
                                                                                            case true:
                                                                                                Maybe_Maybe.Just(Unicode_Category.LetterLowercase);

                                                                                            case false:
                                                                                                Maybe_Maybe.Nothing;
                                                                                         }
                                                                                        }());
                                                                                 }
                                                                                }());

                                                                            case false:
                                                                                ({ () in return switch l(348.0) {
                                                                                    case true:
                                                                                        ({ () in return switch basics_or(e(342.0), basics_or(e(344.0), e(346.0))) {
                                                                                            case true:
                                                                                                Maybe_Maybe.Just(Unicode_Category.LetterUppercase);

                                                                                            case false:
                                                                                                ({ () in return switch basics_or(e(343.0), basics_or(e(345.0), e(347.0))) {
                                                                                                    case true:
                                                                                                        Maybe_Maybe.Just(Unicode_Category.LetterLowercase);

                                                                                                    case false:
                                                                                                        Maybe_Maybe.Nothing;
                                                                                                 }
                                                                                                }());
                                                                                         }
                                                                                        }());

                                                                                    case false:
                                                                                        ({ () in return switch basics_or(e(348.0), basics_or(e(350.0), basics_or(e(352.0), e(354.0)))) {
                                                                                            case true:
                                                                                                Maybe_Maybe.Just(Unicode_Category.LetterUppercase);

                                                                                            case false:
                                                                                                ({ () in return switch basics_or(e(349.0), basics_or(e(351.0), basics_or(e(353.0), e(355.0)))) {
                                                                                                    case true:
                                                                                                        Maybe_Maybe.Just(Unicode_Category.LetterLowercase);

                                                                                                    case false:
                                                                                                        Maybe_Maybe.Nothing;
                                                                                                 }
                                                                                                }());
                                                                                         }
                                                                                        }());
                                                                                 }
                                                                                }());
                                                                         }
                                                                        }());
                                                                 }
                                                                }());
                                                         }
                                                        }());

                                                    case false:
                                                        ({ () in return switch l(424.0) {
                                                            case true:
                                                                ({ () in return switch l(380.0) {
                                                                    case true:
                                                                        ({ () in return switch l(366.0) {
                                                                            case true:
                                                                                ({ () in return switch basics_or(e(356.0), basics_or(e(358.0), basics_or(e(360.0), basics_or(e(362.0), e(364.0))))) {
                                                                                    case true:
                                                                                        Maybe_Maybe.Just(Unicode_Category.LetterUppercase);

                                                                                    case false:
                                                                                        ({ () in return switch basics_or(e(357.0), basics_or(e(359.0), basics_or(e(361.0), basics_or(e(363.0), e(365.0))))) {
                                                                                            case true:
                                                                                                Maybe_Maybe.Just(Unicode_Category.LetterLowercase);

                                                                                            case false:
                                                                                                Maybe_Maybe.Nothing;
                                                                                         }
                                                                                        }());
                                                                                 }
                                                                                }());

                                                                            case false:
                                                                                ({ () in return switch l(371.0) {
                                                                                    case true:
                                                                                        ({ () in return switch basics_or(e(366.0), basics_or(e(368.0), e(370.0))) {
                                                                                            case true:
                                                                                                Maybe_Maybe.Just(Unicode_Category.LetterUppercase);

                                                                                            case false:
                                                                                                ({ () in return switch basics_or(e(367.0), e(369.0)) {
                                                                                                    case true:
                                                                                                        Maybe_Maybe.Just(Unicode_Category.LetterLowercase);

                                                                                                    case false:
                                                                                                        Maybe_Maybe.Nothing;
                                                                                                 }
                                                                                                }());
                                                                                         }
                                                                                        }());

                                                                                    case false:
                                                                                        ({ () in return switch basics_or(e(371.0), basics_or(e(373.0), basics_or(e(375.0), e(378.0)))) {
                                                                                            case true:
                                                                                                Maybe_Maybe.Just(Unicode_Category.LetterLowercase);

                                                                                            case false:
                                                                                                ({ () in return switch basics_or(e(372.0), basics_or(e(374.0), basics_or(r(376.0, 377.0), e(379.0)))) {
                                                                                                    case true:
                                                                                                        Maybe_Maybe.Just(Unicode_Category.LetterUppercase);

                                                                                                    case false:
                                                                                                        Maybe_Maybe.Nothing;
                                                                                                 }
                                                                                                }());
                                                                                         }
                                                                                        }());
                                                                                 }
                                                                                }());
                                                                         }
                                                                        }());

                                                                    case false:
                                                                        ({ () in return switch l(402.0) {
                                                                            case true:
                                                                                ({ () in return switch basics_or(e(380.0), basics_or(r(382.0, 384.0), basics_or(e(387.0), basics_or(e(389.0), basics_or(e(392.0), r(396.0, 397.0)))))) {
                                                                                    case true:
                                                                                        Maybe_Maybe.Just(Unicode_Category.LetterLowercase);

                                                                                    case false:
                                                                                        ({ () in return switch basics_or(e(381.0), basics_or(r(385.0, 386.0), basics_or(e(388.0), basics_or(r(390.0, 391.0), basics_or(r(393.0, 395.0), r(398.0, 401.0)))))) {
                                                                                            case true:
                                                                                                Maybe_Maybe.Just(Unicode_Category.LetterUppercase);

                                                                                            case false:
                                                                                                Maybe_Maybe.Nothing;
                                                                                         }
                                                                                        }());
                                                                                 }
                                                                                }());

                                                                            case false:
                                                                                ({ () in return switch l(414.0) {
                                                                                    case true:
                                                                                        ({ () in return switch basics_or(e(402.0), basics_or(e(405.0), r(409.0, 411.0))) {
                                                                                            case true:
                                                                                                Maybe_Maybe.Just(Unicode_Category.LetterLowercase);

                                                                                            case false:
                                                                                                ({ () in return switch basics_or(r(403.0, 404.0), basics_or(r(406.0, 408.0), r(412.0, 413.0))) {
                                                                                                    case true:
                                                                                                        Maybe_Maybe.Just(Unicode_Category.LetterUppercase);

                                                                                                    case false:
                                                                                                        Maybe_Maybe.Nothing;
                                                                                                 }
                                                                                                }());
                                                                                         }
                                                                                        }());

                                                                                    case false:
                                                                                        ({ () in return switch basics_or(e(414.0), basics_or(e(417.0), basics_or(e(419.0), e(421.0)))) {
                                                                                            case true:
                                                                                                Maybe_Maybe.Just(Unicode_Category.LetterLowercase);

                                                                                            case false:
                                                                                                ({ () in return switch basics_or(r(415.0, 416.0), basics_or(e(418.0), basics_or(e(420.0), r(422.0, 423.0)))) {
                                                                                                    case true:
                                                                                                        Maybe_Maybe.Just(Unicode_Category.LetterUppercase);

                                                                                                    case false:
                                                                                                        Maybe_Maybe.Nothing;
                                                                                                 }
                                                                                                }());
                                                                                         }
                                                                                        }());
                                                                                 }
                                                                                }());
                                                                         }
                                                                        }());
                                                                 }
                                                                }());

                                                            case false:
                                                                ({ () in return switch l(460.0) {
                                                                    case true:
                                                                        ({ () in return switch l(440.0) {
                                                                            case true:
                                                                                ({ () in return switch basics_or(e(424.0), basics_or(r(426.0, 427.0), basics_or(e(429.0), basics_or(e(432.0), basics_or(e(436.0), e(438.0)))))) {
                                                                                    case true:
                                                                                        Maybe_Maybe.Just(Unicode_Category.LetterLowercase);

                                                                                    case false:
                                                                                        ({ () in return switch basics_or(e(425.0), basics_or(e(428.0), basics_or(r(430.0, 431.0), basics_or(r(433.0, 435.0), basics_or(e(437.0), e(439.0)))))) {
                                                                                            case true:
                                                                                                Maybe_Maybe.Just(Unicode_Category.LetterUppercase);

                                                                                            case false:
                                                                                                Maybe_Maybe.Nothing;
                                                                                         }
                                                                                        }());
                                                                                 }
                                                                                }());

                                                                            case false:
                                                                                ({ () in return switch l(452.0) {
                                                                                    case true:
                                                                                        ({ () in return switch basics_or(e(440.0), e(444.0)) {
                                                                                            case true:
                                                                                                Maybe_Maybe.Just(Unicode_Category.LetterUppercase);

                                                                                            case false:
                                                                                                ({ () in return switch basics_or(r(441.0, 442.0), r(445.0, 447.0)) {
                                                                                                    case true:
                                                                                                        Maybe_Maybe.Just(Unicode_Category.LetterLowercase);

                                                                                                    case false:
                                                                                                        ({ () in return switch basics_or(e(443.0), r(448.0, 451.0)) {
                                                                                                            case true:
                                                                                                                Maybe_Maybe.Just(Unicode_Category.LetterOther);

                                                                                                            case false:
                                                                                                                Maybe_Maybe.Nothing;
                                                                                                         }
                                                                                                        }());
                                                                                                 }
                                                                                                }());
                                                                                         }
                                                                                        }());

                                                                                    case false:
                                                                                        ({ () in return switch basics_or(e(452.0), basics_or(e(455.0), e(458.0))) {
                                                                                            case true:
                                                                                                Maybe_Maybe.Just(Unicode_Category.LetterUppercase);

                                                                                            case false:
                                                                                                ({ () in return switch basics_or(e(453.0), basics_or(e(456.0), e(459.0))) {
                                                                                                    case true:
                                                                                                        Maybe_Maybe.Just(Unicode_Category.LetterTitlecase);

                                                                                                    case false:
                                                                                                        ({ () in return switch basics_or(e(454.0), e(457.0)) {
                                                                                                            case true:
                                                                                                                Maybe_Maybe.Just(Unicode_Category.LetterLowercase);

                                                                                                            case false:
                                                                                                                Maybe_Maybe.Nothing;
                                                                                                         }
                                                                                                        }());
                                                                                                 }
                                                                                                }());
                                                                                         }
                                                                                        }());
                                                                                 }
                                                                                }());
                                                                         }
                                                                        }());

                                                                    case false:
                                                                        ({ () in return switch l(472.0) {
                                                                            case true:
                                                                                ({ () in return switch basics_or(e(460.0), basics_or(e(462.0), basics_or(e(464.0), basics_or(e(466.0), basics_or(e(468.0), e(470.0)))))) {
                                                                                    case true:
                                                                                        Maybe_Maybe.Just(Unicode_Category.LetterLowercase);

                                                                                    case false:
                                                                                        ({ () in return switch basics_or(e(461.0), basics_or(e(463.0), basics_or(e(465.0), basics_or(e(467.0), basics_or(e(469.0), e(471.0)))))) {
                                                                                            case true:
                                                                                                Maybe_Maybe.Just(Unicode_Category.LetterUppercase);

                                                                                            case false:
                                                                                                Maybe_Maybe.Nothing;
                                                                                         }
                                                                                        }());
                                                                                 }
                                                                                }());

                                                                            case false:
                                                                                ({ () in return switch l(479.0) {
                                                                                    case true:
                                                                                        ({ () in return switch basics_or(e(472.0), basics_or(e(474.0), r(476.0, 477.0))) {
                                                                                            case true:
                                                                                                Maybe_Maybe.Just(Unicode_Category.LetterLowercase);

                                                                                            case false:
                                                                                                ({ () in return switch basics_or(e(473.0), basics_or(e(475.0), e(478.0))) {
                                                                                                    case true:
                                                                                                        Maybe_Maybe.Just(Unicode_Category.LetterUppercase);

                                                                                                    case false:
                                                                                                        Maybe_Maybe.Nothing;
                                                                                                 }
                                                                                                }());
                                                                                         }
                                                                                        }());

                                                                                    case false:
                                                                                        ({ () in return switch basics_or(e(479.0), basics_or(e(481.0), basics_or(e(483.0), basics_or(e(485.0), e(487.0))))) {
                                                                                            case true:
                                                                                                Maybe_Maybe.Just(Unicode_Category.LetterLowercase);

                                                                                            case false:
                                                                                                ({ () in return switch basics_or(e(480.0), basics_or(e(482.0), basics_or(e(484.0), e(486.0)))) {
                                                                                                    case true:
                                                                                                        Maybe_Maybe.Just(Unicode_Category.LetterUppercase);

                                                                                                    case false:
                                                                                                        Maybe_Maybe.Nothing;
                                                                                                 }
                                                                                                }());
                                                                                         }
                                                                                        }());
                                                                                 }
                                                                                }());
                                                                         }
                                                                        }());
                                                                 }
                                                                }());
                                                         }
                                                        }());
                                                 }
                                                }());

                                            case false:
                                                ({ () in return switch l(767.0) {
                                                    case true:
                                                        ({ () in return switch l(540.0) {
                                                            case true:
                                                                ({ () in return switch l(514.0) {
                                                                    case true:
                                                                        ({ () in return switch l(499.0) {
                                                                            case true:
                                                                                ({ () in return switch basics_or(e(488.0), basics_or(e(490.0), basics_or(e(492.0), basics_or(e(494.0), e(497.0))))) {
                                                                                    case true:
                                                                                        Maybe_Maybe.Just(Unicode_Category.LetterUppercase);

                                                                                    case false:
                                                                                        ({ () in return switch basics_or(e(489.0), basics_or(e(491.0), basics_or(e(493.0), r(495.0, 496.0)))) {
                                                                                            case true:
                                                                                                Maybe_Maybe.Just(Unicode_Category.LetterLowercase);

                                                                                            case false:
                                                                                                ({ () in return switch e(498.0) {
                                                                                                    case true:
                                                                                                        Maybe_Maybe.Just(Unicode_Category.LetterTitlecase);

                                                                                                    case false:
                                                                                                        Maybe_Maybe.Nothing;
                                                                                                 }
                                                                                                }());
                                                                                         }
                                                                                        }());
                                                                                 }
                                                                                }());

                                                                            case false:
                                                                                ({ () in return switch l(506.0) {
                                                                                    case true:
                                                                                        ({ () in return switch basics_or(e(499.0), basics_or(e(501.0), e(505.0))) {
                                                                                            case true:
                                                                                                Maybe_Maybe.Just(Unicode_Category.LetterLowercase);

                                                                                            case false:
                                                                                                ({ () in return switch basics_or(e(500.0), r(502.0, 504.0)) {
                                                                                                    case true:
                                                                                                        Maybe_Maybe.Just(Unicode_Category.LetterUppercase);

                                                                                                    case false:
                                                                                                        Maybe_Maybe.Nothing;
                                                                                                 }
                                                                                                }());
                                                                                         }
                                                                                        }());

                                                                                    case false:
                                                                                        ({ () in return switch basics_or(e(506.0), basics_or(e(508.0), basics_or(e(510.0), e(512.0)))) {
                                                                                            case true:
                                                                                                Maybe_Maybe.Just(Unicode_Category.LetterUppercase);

                                                                                            case false:
                                                                                                ({ () in return switch basics_or(e(507.0), basics_or(e(509.0), basics_or(e(511.0), e(513.0)))) {
                                                                                                    case true:
                                                                                                        Maybe_Maybe.Just(Unicode_Category.LetterLowercase);

                                                                                                    case false:
                                                                                                        Maybe_Maybe.Nothing;
                                                                                                 }
                                                                                                }());
                                                                                         }
                                                                                        }());
                                                                                 }
                                                                                }());
                                                                         }
                                                                        }());

                                                                    case false:
                                                                        ({ () in return switch l(526.0) {
                                                                            case true:
                                                                                ({ () in return switch basics_or(e(514.0), basics_or(e(516.0), basics_or(e(518.0), basics_or(e(520.0), basics_or(e(522.0), e(524.0)))))) {
                                                                                    case true:
                                                                                        Maybe_Maybe.Just(Unicode_Category.LetterUppercase);

                                                                                    case false:
                                                                                        ({ () in return switch basics_or(e(515.0), basics_or(e(517.0), basics_or(e(519.0), basics_or(e(521.0), basics_or(e(523.0), e(525.0)))))) {
                                                                                            case true:
                                                                                                Maybe_Maybe.Just(Unicode_Category.LetterLowercase);

                                                                                            case false:
                                                                                                Maybe_Maybe.Nothing;
                                                                                         }
                                                                                        }());
                                                                                 }
                                                                                }());

                                                                            case false:
                                                                                ({ () in return switch l(532.0) {
                                                                                    case true:
                                                                                        ({ () in return switch basics_or(e(526.0), basics_or(e(528.0), e(530.0))) {
                                                                                            case true:
                                                                                                Maybe_Maybe.Just(Unicode_Category.LetterUppercase);

                                                                                            case false:
                                                                                                ({ () in return switch basics_or(e(527.0), basics_or(e(529.0), e(531.0))) {
                                                                                                    case true:
                                                                                                        Maybe_Maybe.Just(Unicode_Category.LetterLowercase);

                                                                                                    case false:
                                                                                                        Maybe_Maybe.Nothing;
                                                                                                 }
                                                                                                }());
                                                                                         }
                                                                                        }());

                                                                                    case false:
                                                                                        ({ () in return switch basics_or(e(532.0), basics_or(e(534.0), basics_or(e(536.0), e(538.0)))) {
                                                                                            case true:
                                                                                                Maybe_Maybe.Just(Unicode_Category.LetterUppercase);

                                                                                            case false:
                                                                                                ({ () in return switch basics_or(e(533.0), basics_or(e(535.0), basics_or(e(537.0), e(539.0)))) {
                                                                                                    case true:
                                                                                                        Maybe_Maybe.Just(Unicode_Category.LetterLowercase);

                                                                                                    case false:
                                                                                                        Maybe_Maybe.Nothing;
                                                                                                 }
                                                                                                }());
                                                                                         }
                                                                                        }());
                                                                                 }
                                                                                }());
                                                                         }
                                                                        }());
                                                                 }
                                                                }());

                                                            case false:
                                                                ({ () in return switch l(572.0) {
                                                                    case true:
                                                                        ({ () in return switch l(551.0) {
                                                                            case true:
                                                                                ({ () in return switch basics_or(e(540.0), basics_or(e(542.0), basics_or(e(544.0), basics_or(e(546.0), basics_or(e(548.0), e(550.0)))))) {
                                                                                    case true:
                                                                                        Maybe_Maybe.Just(Unicode_Category.LetterUppercase);

                                                                                    case false:
                                                                                        ({ () in return switch basics_or(e(541.0), basics_or(e(543.0), basics_or(e(545.0), basics_or(e(547.0), e(549.0))))) {
                                                                                            case true:
                                                                                                Maybe_Maybe.Just(Unicode_Category.LetterLowercase);

                                                                                            case false:
                                                                                                Maybe_Maybe.Nothing;
                                                                                         }
                                                                                        }());
                                                                                 }
                                                                                }());

                                                                            case false:
                                                                                ({ () in return switch l(557.0) {
                                                                                    case true:
                                                                                        ({ () in return switch basics_or(e(551.0), basics_or(e(553.0), e(555.0))) {
                                                                                            case true:
                                                                                                Maybe_Maybe.Just(Unicode_Category.LetterLowercase);

                                                                                            case false:
                                                                                                ({ () in return switch basics_or(e(552.0), basics_or(e(554.0), e(556.0))) {
                                                                                                    case true:
                                                                                                        Maybe_Maybe.Just(Unicode_Category.LetterUppercase);

                                                                                                    case false:
                                                                                                        Maybe_Maybe.Nothing;
                                                                                                 }
                                                                                                }());
                                                                                         }
                                                                                        }());

                                                                                    case false:
                                                                                        ({ () in return switch basics_or(e(557.0), basics_or(e(559.0), basics_or(e(561.0), r(563.0, 569.0)))) {
                                                                                            case true:
                                                                                                Maybe_Maybe.Just(Unicode_Category.LetterLowercase);

                                                                                            case false:
                                                                                                ({ () in return switch basics_or(e(558.0), basics_or(e(560.0), basics_or(e(562.0), r(570.0, 571.0)))) {
                                                                                                    case true:
                                                                                                        Maybe_Maybe.Just(Unicode_Category.LetterUppercase);

                                                                                                    case false:
                                                                                                        Maybe_Maybe.Nothing;
                                                                                                 }
                                                                                                }());
                                                                                         }
                                                                                        }());
                                                                                 }
                                                                                }());
                                                                         }
                                                                        }());

                                                                    case false:
                                                                        ({ () in return switch l(589.0) {
                                                                            case true:
                                                                                ({ () in return switch basics_or(e(572.0), basics_or(r(575.0, 576.0), basics_or(e(578.0), basics_or(e(583.0), basics_or(e(585.0), e(587.0)))))) {
                                                                                    case true:
                                                                                        Maybe_Maybe.Just(Unicode_Category.LetterLowercase);

                                                                                    case false:
                                                                                        ({ () in return switch basics_or(r(573.0, 574.0), basics_or(e(577.0), basics_or(r(579.0, 582.0), basics_or(e(584.0), basics_or(e(586.0), e(588.0)))))) {
                                                                                            case true:
                                                                                                Maybe_Maybe.Just(Unicode_Category.LetterUppercase);

                                                                                            case false:
                                                                                                Maybe_Maybe.Nothing;
                                                                                         }
                                                                                        }());
                                                                                 }
                                                                                }());

                                                                            case false:
                                                                                ({ () in return switch l(709.0) {
                                                                                    case true:
                                                                                        ({ () in return switch basics_or(e(589.0), basics_or(r(591.0, 659.0), r(661.0, 687.0))) {
                                                                                            case true:
                                                                                                Maybe_Maybe.Just(Unicode_Category.LetterLowercase);

                                                                                            case false:
                                                                                                ({ () in return switch e(590.0) {
                                                                                                    case true:
                                                                                                        Maybe_Maybe.Just(Unicode_Category.LetterUppercase);

                                                                                                    case false:
                                                                                                        ({ () in return switch e(660.0) {
                                                                                                            case true:
                                                                                                                Maybe_Maybe.Just(Unicode_Category.LetterOther);

                                                                                                            case false:
                                                                                                                ({ () in return switch r(688.0, 705.0) {
                                                                                                                    case true:
                                                                                                                        Maybe_Maybe.Just(Unicode_Category.LetterModifier);

                                                                                                                    case false:
                                                                                                                        ({ () in return switch r(706.0, 708.0) {
                                                                                                                            case true:
                                                                                                                                Maybe_Maybe.Just(Unicode_Category.SymbolModifier);

                                                                                                                            case false:
                                                                                                                                Maybe_Maybe.Nothing;
                                                                                                                         }
                                                                                                                        }());
                                                                                                                 }
                                                                                                                }());
                                                                                                         }
                                                                                                        }());
                                                                                                 }
                                                                                                }());
                                                                                         }
                                                                                        }());

                                                                                    case false:
                                                                                        ({ () in return switch basics_or(e(709.0), basics_or(r(722.0, 735.0), basics_or(r(741.0, 747.0), basics_or(e(749.0), r(751.0, 766.0))))) {
                                                                                            case true:
                                                                                                Maybe_Maybe.Just(Unicode_Category.SymbolModifier);

                                                                                            case false:
                                                                                                ({ () in return switch basics_or(r(710.0, 721.0), basics_or(r(736.0, 740.0), basics_or(e(748.0), e(750.0)))) {
                                                                                                    case true:
                                                                                                        Maybe_Maybe.Just(Unicode_Category.LetterModifier);

                                                                                                    case false:
                                                                                                        Maybe_Maybe.Nothing;
                                                                                                 }
                                                                                                }());
                                                                                         }
                                                                                        }());
                                                                                 }
                                                                                }());
                                                                         }
                                                                        }());
                                                                 }
                                                                }());
                                                         }
                                                        }());

                                                    case false:
                                                        ({ () in return switch l(1006.0) {
                                                            case true:
                                                                ({ () in return switch l(975.0) {
                                                                    case true:
                                                                        ({ () in return switch l(893.0) {
                                                                            case true:
                                                                                ({ () in return switch basics_or(e(767.0), e(885.0)) {
                                                                                    case true:
                                                                                        Maybe_Maybe.Just(Unicode_Category.SymbolModifier);

                                                                                    case false:
                                                                                        ({ () in return switch r(768.0, 879.0) {
                                                                                            case true:
                                                                                                Maybe_Maybe.Just(Unicode_Category.MarkNonSpacing);

                                                                                            case false:
                                                                                                ({ () in return switch basics_or(e(880.0), basics_or(e(882.0), e(886.0))) {
                                                                                                    case true:
                                                                                                        Maybe_Maybe.Just(Unicode_Category.LetterUppercase);

                                                                                                    case false:
                                                                                                        ({ () in return switch basics_or(e(881.0), basics_or(e(883.0), basics_or(e(887.0), r(891.0, 892.0)))) {
                                                                                                            case true:
                                                                                                                Maybe_Maybe.Just(Unicode_Category.LetterLowercase);

                                                                                                            case false:
                                                                                                                ({ () in return switch basics_or(e(884.0), e(890.0)) {
                                                                                                                    case true:
                                                                                                                        Maybe_Maybe.Just(Unicode_Category.LetterModifier);

                                                                                                                    case false:
                                                                                                                        Maybe_Maybe.Nothing;
                                                                                                                 }
                                                                                                                }());
                                                                                                         }
                                                                                                        }());
                                                                                                 }
                                                                                                }());
                                                                                         }
                                                                                        }());
                                                                                 }
                                                                                }());

                                                                            case false:
                                                                                ({ () in return switch l(903.0) {
                                                                                    case true:
                                                                                        ({ () in return switch e(893.0) {
                                                                                            case true:
                                                                                                Maybe_Maybe.Just(Unicode_Category.LetterLowercase);

                                                                                            case false:
                                                                                                ({ () in return switch e(894.0) {
                                                                                                    case true:
                                                                                                        Maybe_Maybe.Just(Unicode_Category.PunctuationOther);

                                                                                                    case false:
                                                                                                        ({ () in return switch basics_or(e(895.0), e(902.0)) {
                                                                                                            case true:
                                                                                                                Maybe_Maybe.Just(Unicode_Category.LetterUppercase);

                                                                                                            case false:
                                                                                                                ({ () in return switch r(900.0, 901.0) {
                                                                                                                    case true:
                                                                                                                        Maybe_Maybe.Just(Unicode_Category.SymbolModifier);

                                                                                                                    case false:
                                                                                                                        Maybe_Maybe.Nothing;
                                                                                                                 }
                                                                                                                }());
                                                                                                         }
                                                                                                        }());
                                                                                                 }
                                                                                                }());
                                                                                         }
                                                                                        }());

                                                                                    case false:
                                                                                        ({ () in return switch e(903.0) {
                                                                                            case true:
                                                                                                Maybe_Maybe.Just(Unicode_Category.PunctuationOther);

                                                                                            case false:
                                                                                                ({ () in return switch basics_or(r(904.0, 906.0), basics_or(e(908.0), basics_or(r(910.0, 911.0), basics_or(r(913.0, 929.0), r(931.0, 939.0))))) {
                                                                                                    case true:
                                                                                                        Maybe_Maybe.Just(Unicode_Category.LetterUppercase);

                                                                                                    case false:
                                                                                                        ({ () in return switch basics_or(e(912.0), r(940.0, 974.0)) {
                                                                                                            case true:
                                                                                                                Maybe_Maybe.Just(Unicode_Category.LetterLowercase);

                                                                                                            case false:
                                                                                                                Maybe_Maybe.Nothing;
                                                                                                         }
                                                                                                        }());
                                                                                                 }
                                                                                                }());
                                                                                         }
                                                                                        }());
                                                                                 }
                                                                                }());
                                                                         }
                                                                        }());

                                                                    case false:
                                                                        ({ () in return switch l(992.0) {
                                                                            case true:
                                                                                ({ () in return switch basics_or(e(975.0), basics_or(r(978.0, 980.0), basics_or(e(984.0), basics_or(e(986.0), basics_or(e(988.0), e(990.0)))))) {
                                                                                    case true:
                                                                                        Maybe_Maybe.Just(Unicode_Category.LetterUppercase);

                                                                                    case false:
                                                                                        ({ () in return switch basics_or(r(976.0, 977.0), basics_or(r(981.0, 983.0), basics_or(e(985.0), basics_or(e(987.0), basics_or(e(989.0), e(991.0)))))) {
                                                                                            case true:
                                                                                                Maybe_Maybe.Just(Unicode_Category.LetterLowercase);

                                                                                            case false:
                                                                                                Maybe_Maybe.Nothing;
                                                                                         }
                                                                                        }());
                                                                                 }
                                                                                }());

                                                                            case false:
                                                                                ({ () in return switch l(998.0) {
                                                                                    case true:
                                                                                        ({ () in return switch basics_or(e(992.0), basics_or(e(994.0), e(996.0))) {
                                                                                            case true:
                                                                                                Maybe_Maybe.Just(Unicode_Category.LetterUppercase);

                                                                                            case false:
                                                                                                ({ () in return switch basics_or(e(993.0), basics_or(e(995.0), e(997.0))) {
                                                                                                    case true:
                                                                                                        Maybe_Maybe.Just(Unicode_Category.LetterLowercase);

                                                                                                    case false:
                                                                                                        Maybe_Maybe.Nothing;
                                                                                                 }
                                                                                                }());
                                                                                         }
                                                                                        }());

                                                                                    case false:
                                                                                        ({ () in return switch basics_or(e(998.0), basics_or(e(1000.0), basics_or(e(1002.0), e(1004.0)))) {
                                                                                            case true:
                                                                                                Maybe_Maybe.Just(Unicode_Category.LetterUppercase);

                                                                                            case false:
                                                                                                ({ () in return switch basics_or(e(999.0), basics_or(e(1001.0), basics_or(e(1003.0), e(1005.0)))) {
                                                                                                    case true:
                                                                                                        Maybe_Maybe.Just(Unicode_Category.LetterLowercase);

                                                                                                    case false:
                                                                                                        Maybe_Maybe.Nothing;
                                                                                                 }
                                                                                                }());
                                                                                         }
                                                                                        }());
                                                                                 }
                                                                                }());
                                                                         }
                                                                        }());
                                                                 }
                                                                }());

                                                            case false:
                                                                ({ () in return switch l(1134.0) {
                                                                    case true:
                                                                        ({ () in return switch l(1120.0) {
                                                                            case true:
                                                                                ({ () in return switch basics_or(e(1006.0), basics_or(e(1012.0), basics_or(e(1015.0), basics_or(r(1017.0, 1018.0), r(1021.0, 1071.0))))) {
                                                                                    case true:
                                                                                        Maybe_Maybe.Just(Unicode_Category.LetterUppercase);

                                                                                    case false:
                                                                                        ({ () in return switch basics_or(r(1007.0, 1011.0), basics_or(e(1013.0), basics_or(e(1016.0), basics_or(r(1019.0, 1020.0), r(1072.0, 1119.0))))) {
                                                                                            case true:
                                                                                                Maybe_Maybe.Just(Unicode_Category.LetterLowercase);

                                                                                            case false:
                                                                                                ({ () in return switch e(1014.0) {
                                                                                                    case true:
                                                                                                        Maybe_Maybe.Just(Unicode_Category.SymbolMath);

                                                                                                    case false:
                                                                                                        Maybe_Maybe.Nothing;
                                                                                                 }
                                                                                                }());
                                                                                         }
                                                                                        }());
                                                                                 }
                                                                                }());

                                                                            case false:
                                                                                ({ () in return switch l(1126.0) {
                                                                                    case true:
                                                                                        ({ () in return switch basics_or(e(1120.0), basics_or(e(1122.0), e(1124.0))) {
                                                                                            case true:
                                                                                                Maybe_Maybe.Just(Unicode_Category.LetterUppercase);

                                                                                            case false:
                                                                                                ({ () in return switch basics_or(e(1121.0), basics_or(e(1123.0), e(1125.0))) {
                                                                                                    case true:
                                                                                                        Maybe_Maybe.Just(Unicode_Category.LetterLowercase);

                                                                                                    case false:
                                                                                                        Maybe_Maybe.Nothing;
                                                                                                 }
                                                                                                }());
                                                                                         }
                                                                                        }());

                                                                                    case false:
                                                                                        ({ () in return switch basics_or(e(1126.0), basics_or(e(1128.0), basics_or(e(1130.0), e(1132.0)))) {
                                                                                            case true:
                                                                                                Maybe_Maybe.Just(Unicode_Category.LetterUppercase);

                                                                                            case false:
                                                                                                ({ () in return switch basics_or(e(1127.0), basics_or(e(1129.0), basics_or(e(1131.0), e(1133.0)))) {
                                                                                                    case true:
                                                                                                        Maybe_Maybe.Just(Unicode_Category.LetterLowercase);

                                                                                                    case false:
                                                                                                        Maybe_Maybe.Nothing;
                                                                                                 }
                                                                                                }());
                                                                                         }
                                                                                        }());
                                                                                 }
                                                                                }());
                                                                         }
                                                                        }());

                                                                    case false:
                                                                        ({ () in return switch l(1146.0) {
                                                                            case true:
                                                                                ({ () in return switch basics_or(e(1134.0), basics_or(e(1136.0), basics_or(e(1138.0), basics_or(e(1140.0), basics_or(e(1142.0), e(1144.0)))))) {
                                                                                    case true:
                                                                                        Maybe_Maybe.Just(Unicode_Category.LetterUppercase);

                                                                                    case false:
                                                                                        ({ () in return switch basics_or(e(1135.0), basics_or(e(1137.0), basics_or(e(1139.0), basics_or(e(1141.0), basics_or(e(1143.0), e(1145.0)))))) {
                                                                                            case true:
                                                                                                Maybe_Maybe.Just(Unicode_Category.LetterLowercase);

                                                                                            case false:
                                                                                                Maybe_Maybe.Nothing;
                                                                                         }
                                                                                        }());
                                                                                 }
                                                                                }());

                                                                            case false:
                                                                                ({ () in return switch l(1152.0) {
                                                                                    case true:
                                                                                        ({ () in return switch basics_or(e(1146.0), basics_or(e(1148.0), e(1150.0))) {
                                                                                            case true:
                                                                                                Maybe_Maybe.Just(Unicode_Category.LetterUppercase);

                                                                                            case false:
                                                                                                ({ () in return switch basics_or(e(1147.0), basics_or(e(1149.0), e(1151.0))) {
                                                                                                    case true:
                                                                                                        Maybe_Maybe.Just(Unicode_Category.LetterLowercase);

                                                                                                    case false:
                                                                                                        Maybe_Maybe.Nothing;
                                                                                                 }
                                                                                                }());
                                                                                         }
                                                                                        }());

                                                                                    case false:
                                                                                        ({ () in return switch basics_or(e(1152.0), basics_or(e(1162.0), e(1164.0))) {
                                                                                            case true:
                                                                                                Maybe_Maybe.Just(Unicode_Category.LetterUppercase);

                                                                                            case false:
                                                                                                ({ () in return switch basics_or(e(1153.0), basics_or(e(1163.0), e(1165.0))) {
                                                                                                    case true:
                                                                                                        Maybe_Maybe.Just(Unicode_Category.LetterLowercase);

                                                                                                    case false:
                                                                                                        ({ () in return switch e(1154.0) {
                                                                                                            case true:
                                                                                                                Maybe_Maybe.Just(Unicode_Category.SymbolOther);

                                                                                                            case false:
                                                                                                                ({ () in return switch r(1155.0, 1159.0) {
                                                                                                                    case true:
                                                                                                                        Maybe_Maybe.Just(Unicode_Category.MarkNonSpacing);

                                                                                                                    case false:
                                                                                                                        ({ () in return switch r(1160.0, 1161.0) {
                                                                                                                            case true:
                                                                                                                                Maybe_Maybe.Just(Unicode_Category.MarkEnclosing);

                                                                                                                            case false:
                                                                                                                                Maybe_Maybe.Nothing;
                                                                                                                         }
                                                                                                                        }());
                                                                                                                 }
                                                                                                                }());
                                                                                                         }
                                                                                                        }());
                                                                                                 }
                                                                                                }());
                                                                                         }
                                                                                        }());
                                                                                 }
                                                                                }());
                                                                         }
                                                                        }());
                                                                 }
                                                                }());
                                                         }
                                                        }());
                                                 }
                                                }());
                                         }
                                        }());

                                    case false:
                                        ({ () in return switch l(1756.0) {
                                            case true:
                                                ({ () in return switch l(1268.0) {
                                                    case true:
                                                        ({ () in return switch l(1215.0) {
                                                            case true:
                                                                ({ () in return switch l(1189.0) {
                                                                    case true:
                                                                        ({ () in return switch l(1176.0) {
                                                                            case true:
                                                                                ({ () in return switch basics_or(e(1166.0), basics_or(e(1168.0), basics_or(e(1170.0), basics_or(e(1172.0), e(1174.0))))) {
                                                                                    case true:
                                                                                        Maybe_Maybe.Just(Unicode_Category.LetterUppercase);

                                                                                    case false:
                                                                                        ({ () in return switch basics_or(e(1167.0), basics_or(e(1169.0), basics_or(e(1171.0), basics_or(e(1173.0), e(1175.0))))) {
                                                                                            case true:
                                                                                                Maybe_Maybe.Just(Unicode_Category.LetterLowercase);

                                                                                            case false:
                                                                                                Maybe_Maybe.Nothing;
                                                                                         }
                                                                                        }());
                                                                                 }
                                                                                }());

                                                                            case false:
                                                                                ({ () in return switch l(1181.0) {
                                                                                    case true:
                                                                                        ({ () in return switch basics_or(e(1176.0), basics_or(e(1178.0), e(1180.0))) {
                                                                                            case true:
                                                                                                Maybe_Maybe.Just(Unicode_Category.LetterUppercase);

                                                                                            case false:
                                                                                                ({ () in return switch basics_or(e(1177.0), e(1179.0)) {
                                                                                                    case true:
                                                                                                        Maybe_Maybe.Just(Unicode_Category.LetterLowercase);

                                                                                                    case false:
                                                                                                        Maybe_Maybe.Nothing;
                                                                                                 }
                                                                                                }());
                                                                                         }
                                                                                        }());

                                                                                    case false:
                                                                                        ({ () in return switch basics_or(e(1181.0), basics_or(e(1183.0), basics_or(e(1185.0), e(1187.0)))) {
                                                                                            case true:
                                                                                                Maybe_Maybe.Just(Unicode_Category.LetterLowercase);

                                                                                            case false:
                                                                                                ({ () in return switch basics_or(e(1182.0), basics_or(e(1184.0), basics_or(e(1186.0), e(1188.0)))) {
                                                                                                    case true:
                                                                                                        Maybe_Maybe.Just(Unicode_Category.LetterUppercase);

                                                                                                    case false:
                                                                                                        Maybe_Maybe.Nothing;
                                                                                                 }
                                                                                                }());
                                                                                         }
                                                                                        }());
                                                                                 }
                                                                                }());
                                                                         }
                                                                        }());

                                                                    case false:
                                                                        ({ () in return switch l(1201.0) {
                                                                            case true:
                                                                                ({ () in return switch basics_or(e(1189.0), basics_or(e(1191.0), basics_or(e(1193.0), basics_or(e(1195.0), basics_or(e(1197.0), e(1199.0)))))) {
                                                                                    case true:
                                                                                        Maybe_Maybe.Just(Unicode_Category.LetterLowercase);

                                                                                    case false:
                                                                                        ({ () in return switch basics_or(e(1190.0), basics_or(e(1192.0), basics_or(e(1194.0), basics_or(e(1196.0), basics_or(e(1198.0), e(1200.0)))))) {
                                                                                            case true:
                                                                                                Maybe_Maybe.Just(Unicode_Category.LetterUppercase);

                                                                                            case false:
                                                                                                Maybe_Maybe.Nothing;
                                                                                         }
                                                                                        }());
                                                                                 }
                                                                                }());

                                                                            case false:
                                                                                ({ () in return switch l(1207.0) {
                                                                                    case true:
                                                                                        ({ () in return switch basics_or(e(1201.0), basics_or(e(1203.0), e(1205.0))) {
                                                                                            case true:
                                                                                                Maybe_Maybe.Just(Unicode_Category.LetterLowercase);

                                                                                            case false:
                                                                                                ({ () in return switch basics_or(e(1202.0), basics_or(e(1204.0), e(1206.0))) {
                                                                                                    case true:
                                                                                                        Maybe_Maybe.Just(Unicode_Category.LetterUppercase);

                                                                                                    case false:
                                                                                                        Maybe_Maybe.Nothing;
                                                                                                 }
                                                                                                }());
                                                                                         }
                                                                                        }());

                                                                                    case false:
                                                                                        ({ () in return switch basics_or(e(1207.0), basics_or(e(1209.0), basics_or(e(1211.0), e(1213.0)))) {
                                                                                            case true:
                                                                                                Maybe_Maybe.Just(Unicode_Category.LetterLowercase);

                                                                                            case false:
                                                                                                ({ () in return switch basics_or(e(1208.0), basics_or(e(1210.0), basics_or(e(1212.0), e(1214.0)))) {
                                                                                                    case true:
                                                                                                        Maybe_Maybe.Just(Unicode_Category.LetterUppercase);

                                                                                                    case false:
                                                                                                        Maybe_Maybe.Nothing;
                                                                                                 }
                                                                                                }());
                                                                                         }
                                                                                        }());
                                                                                 }
                                                                                }());
                                                                         }
                                                                        }());
                                                                 }
                                                                }());

                                                            case false:
                                                                ({ () in return switch l(1241.0) {
                                                                    case true:
                                                                        ({ () in return switch l(1227.0) {
                                                                            case true:
                                                                                ({ () in return switch basics_or(e(1215.0), basics_or(e(1218.0), basics_or(e(1220.0), basics_or(e(1222.0), basics_or(e(1224.0), e(1226.0)))))) {
                                                                                    case true:
                                                                                        Maybe_Maybe.Just(Unicode_Category.LetterLowercase);

                                                                                    case false:
                                                                                        ({ () in return switch basics_or(r(1216.0, 1217.0), basics_or(e(1219.0), basics_or(e(1221.0), basics_or(e(1223.0), e(1225.0))))) {
                                                                                            case true:
                                                                                                Maybe_Maybe.Just(Unicode_Category.LetterUppercase);

                                                                                            case false:
                                                                                                Maybe_Maybe.Nothing;
                                                                                         }
                                                                                        }());
                                                                                 }
                                                                                }());

                                                                            case false:
                                                                                ({ () in return switch l(1233.0) {
                                                                                    case true:
                                                                                        ({ () in return switch basics_or(e(1227.0), basics_or(e(1229.0), e(1232.0))) {
                                                                                            case true:
                                                                                                Maybe_Maybe.Just(Unicode_Category.LetterUppercase);

                                                                                            case false:
                                                                                                ({ () in return switch basics_or(e(1228.0), r(1230.0, 1231.0)) {
                                                                                                    case true:
                                                                                                        Maybe_Maybe.Just(Unicode_Category.LetterLowercase);

                                                                                                    case false:
                                                                                                        Maybe_Maybe.Nothing;
                                                                                                 }
                                                                                                }());
                                                                                         }
                                                                                        }());

                                                                                    case false:
                                                                                        ({ () in return switch basics_or(e(1233.0), basics_or(e(1235.0), basics_or(e(1237.0), e(1239.0)))) {
                                                                                            case true:
                                                                                                Maybe_Maybe.Just(Unicode_Category.LetterLowercase);

                                                                                            case false:
                                                                                                ({ () in return switch basics_or(e(1234.0), basics_or(e(1236.0), basics_or(e(1238.0), e(1240.0)))) {
                                                                                                    case true:
                                                                                                        Maybe_Maybe.Just(Unicode_Category.LetterUppercase);

                                                                                                    case false:
                                                                                                        Maybe_Maybe.Nothing;
                                                                                                 }
                                                                                                }());
                                                                                         }
                                                                                        }());
                                                                                 }
                                                                                }());
                                                                         }
                                                                        }());

                                                                    case false:
                                                                        ({ () in return switch l(1253.0) {
                                                                            case true:
                                                                                ({ () in return switch basics_or(e(1241.0), basics_or(e(1243.0), basics_or(e(1245.0), basics_or(e(1247.0), basics_or(e(1249.0), e(1251.0)))))) {
                                                                                    case true:
                                                                                        Maybe_Maybe.Just(Unicode_Category.LetterLowercase);

                                                                                    case false:
                                                                                        ({ () in return switch basics_or(e(1242.0), basics_or(e(1244.0), basics_or(e(1246.0), basics_or(e(1248.0), basics_or(e(1250.0), e(1252.0)))))) {
                                                                                            case true:
                                                                                                Maybe_Maybe.Just(Unicode_Category.LetterUppercase);

                                                                                            case false:
                                                                                                Maybe_Maybe.Nothing;
                                                                                         }
                                                                                        }());
                                                                                 }
                                                                                }());

                                                                            case false:
                                                                                ({ () in return switch l(1259.0) {
                                                                                    case true:
                                                                                        ({ () in return switch basics_or(e(1253.0), basics_or(e(1255.0), e(1257.0))) {
                                                                                            case true:
                                                                                                Maybe_Maybe.Just(Unicode_Category.LetterLowercase);

                                                                                            case false:
                                                                                                ({ () in return switch basics_or(e(1254.0), basics_or(e(1256.0), e(1258.0))) {
                                                                                                    case true:
                                                                                                        Maybe_Maybe.Just(Unicode_Category.LetterUppercase);

                                                                                                    case false:
                                                                                                        Maybe_Maybe.Nothing;
                                                                                                 }
                                                                                                }());
                                                                                         }
                                                                                        }());

                                                                                    case false:
                                                                                        ({ () in return switch basics_or(e(1259.0), basics_or(e(1261.0), basics_or(e(1263.0), basics_or(e(1265.0), e(1267.0))))) {
                                                                                            case true:
                                                                                                Maybe_Maybe.Just(Unicode_Category.LetterLowercase);

                                                                                            case false:
                                                                                                ({ () in return switch basics_or(e(1260.0), basics_or(e(1262.0), basics_or(e(1264.0), e(1266.0)))) {
                                                                                                    case true:
                                                                                                        Maybe_Maybe.Just(Unicode_Category.LetterUppercase);

                                                                                                    case false:
                                                                                                        Maybe_Maybe.Nothing;
                                                                                                 }
                                                                                                }());
                                                                                         }
                                                                                        }());
                                                                                 }
                                                                                }());
                                                                         }
                                                                        }());
                                                                 }
                                                                }());
                                                         }
                                                        }());

                                                    case false:
                                                        ({ () in return switch l(1318.0) {
                                                            case true:
                                                                ({ () in return switch l(1292.0) {
                                                                    case true:
                                                                        ({ () in return switch l(1279.0) {
                                                                            case true:
                                                                                ({ () in return switch basics_or(e(1268.0), basics_or(e(1270.0), basics_or(e(1272.0), basics_or(e(1274.0), basics_or(e(1276.0), e(1278.0)))))) {
                                                                                    case true:
                                                                                        Maybe_Maybe.Just(Unicode_Category.LetterUppercase);

                                                                                    case false:
                                                                                        ({ () in return switch basics_or(e(1269.0), basics_or(e(1271.0), basics_or(e(1273.0), basics_or(e(1275.0), e(1277.0))))) {
                                                                                            case true:
                                                                                                Maybe_Maybe.Just(Unicode_Category.LetterLowercase);

                                                                                            case false:
                                                                                                Maybe_Maybe.Nothing;
                                                                                         }
                                                                                        }());
                                                                                 }
                                                                                }());

                                                                            case false:
                                                                                ({ () in return switch l(1284.0) {
                                                                                    case true:
                                                                                        ({ () in return switch basics_or(e(1279.0), basics_or(e(1281.0), e(1283.0))) {
                                                                                            case true:
                                                                                                Maybe_Maybe.Just(Unicode_Category.LetterLowercase);

                                                                                            case false:
                                                                                                ({ () in return switch basics_or(e(1280.0), e(1282.0)) {
                                                                                                    case true:
                                                                                                        Maybe_Maybe.Just(Unicode_Category.LetterUppercase);

                                                                                                    case false:
                                                                                                        Maybe_Maybe.Nothing;
                                                                                                 }
                                                                                                }());
                                                                                         }
                                                                                        }());

                                                                                    case false:
                                                                                        ({ () in return switch basics_or(e(1284.0), basics_or(e(1286.0), basics_or(e(1288.0), e(1290.0)))) {
                                                                                            case true:
                                                                                                Maybe_Maybe.Just(Unicode_Category.LetterUppercase);

                                                                                            case false:
                                                                                                ({ () in return switch basics_or(e(1285.0), basics_or(e(1287.0), basics_or(e(1289.0), e(1291.0)))) {
                                                                                                    case true:
                                                                                                        Maybe_Maybe.Just(Unicode_Category.LetterLowercase);

                                                                                                    case false:
                                                                                                        Maybe_Maybe.Nothing;
                                                                                                 }
                                                                                                }());
                                                                                         }
                                                                                        }());
                                                                                 }
                                                                                }());
                                                                         }
                                                                        }());

                                                                    case false:
                                                                        ({ () in return switch l(1304.0) {
                                                                            case true:
                                                                                ({ () in return switch basics_or(e(1292.0), basics_or(e(1294.0), basics_or(e(1296.0), basics_or(e(1298.0), basics_or(e(1300.0), e(1302.0)))))) {
                                                                                    case true:
                                                                                        Maybe_Maybe.Just(Unicode_Category.LetterUppercase);

                                                                                    case false:
                                                                                        ({ () in return switch basics_or(e(1293.0), basics_or(e(1295.0), basics_or(e(1297.0), basics_or(e(1299.0), basics_or(e(1301.0), e(1303.0)))))) {
                                                                                            case true:
                                                                                                Maybe_Maybe.Just(Unicode_Category.LetterLowercase);

                                                                                            case false:
                                                                                                Maybe_Maybe.Nothing;
                                                                                         }
                                                                                        }());
                                                                                 }
                                                                                }());

                                                                            case false:
                                                                                ({ () in return switch l(1310.0) {
                                                                                    case true:
                                                                                        ({ () in return switch basics_or(e(1304.0), basics_or(e(1306.0), e(1308.0))) {
                                                                                            case true:
                                                                                                Maybe_Maybe.Just(Unicode_Category.LetterUppercase);

                                                                                            case false:
                                                                                                ({ () in return switch basics_or(e(1305.0), basics_or(e(1307.0), e(1309.0))) {
                                                                                                    case true:
                                                                                                        Maybe_Maybe.Just(Unicode_Category.LetterLowercase);

                                                                                                    case false:
                                                                                                        Maybe_Maybe.Nothing;
                                                                                                 }
                                                                                                }());
                                                                                         }
                                                                                        }());

                                                                                    case false:
                                                                                        ({ () in return switch basics_or(e(1310.0), basics_or(e(1312.0), basics_or(e(1314.0), e(1316.0)))) {
                                                                                            case true:
                                                                                                Maybe_Maybe.Just(Unicode_Category.LetterUppercase);

                                                                                            case false:
                                                                                                ({ () in return switch basics_or(e(1311.0), basics_or(e(1313.0), basics_or(e(1315.0), e(1317.0)))) {
                                                                                                    case true:
                                                                                                        Maybe_Maybe.Just(Unicode_Category.LetterLowercase);

                                                                                                    case false:
                                                                                                        Maybe_Maybe.Nothing;
                                                                                                 }
                                                                                                }());
                                                                                         }
                                                                                        }());
                                                                                 }
                                                                                }());
                                                                         }
                                                                        }());
                                                                 }
                                                                }());

                                                            case false:
                                                                ({ () in return switch l(1478.0) {
                                                                    case true:
                                                                        ({ () in return switch l(1369.0) {
                                                                            case true:
                                                                                ({ () in return switch basics_or(e(1318.0), basics_or(e(1320.0), basics_or(e(1322.0), basics_or(e(1324.0), basics_or(e(1326.0), r(1329.0, 1366.0)))))) {
                                                                                    case true:
                                                                                        Maybe_Maybe.Just(Unicode_Category.LetterUppercase);

                                                                                    case false:
                                                                                        ({ () in return switch basics_or(e(1319.0), basics_or(e(1321.0), basics_or(e(1323.0), basics_or(e(1325.0), e(1327.0))))) {
                                                                                            case true:
                                                                                                Maybe_Maybe.Just(Unicode_Category.LetterLowercase);

                                                                                            case false:
                                                                                                Maybe_Maybe.Nothing;
                                                                                         }
                                                                                        }());
                                                                                 }
                                                                                }());

                                                                            case false:
                                                                                ({ () in return switch l(1424.0) {
                                                                                    case true:
                                                                                        ({ () in return switch e(1369.0) {
                                                                                            case true:
                                                                                                Maybe_Maybe.Just(Unicode_Category.LetterModifier);

                                                                                            case false:
                                                                                                ({ () in return switch basics_or(r(1370.0, 1375.0), e(1417.0)) {
                                                                                                    case true:
                                                                                                        Maybe_Maybe.Just(Unicode_Category.PunctuationOther);

                                                                                                    case false:
                                                                                                        ({ () in return switch r(1376.0, 1416.0) {
                                                                                                            case true:
                                                                                                                Maybe_Maybe.Just(Unicode_Category.LetterLowercase);

                                                                                                            case false:
                                                                                                                ({ () in return switch e(1418.0) {
                                                                                                                    case true:
                                                                                                                        Maybe_Maybe.Just(Unicode_Category.PunctuationDash);

                                                                                                                    case false:
                                                                                                                        ({ () in return switch r(1421.0, 1422.0) {
                                                                                                                            case true:
                                                                                                                                Maybe_Maybe.Just(Unicode_Category.SymbolOther);

                                                                                                                            case false:
                                                                                                                                ({ () in return switch e(1423.0) {
                                                                                                                                    case true:
                                                                                                                                        Maybe_Maybe.Just(Unicode_Category.SymbolCurrency);

                                                                                                                                    case false:
                                                                                                                                        Maybe_Maybe.Nothing;
                                                                                                                                 }
                                                                                                                                }());
                                                                                                                         }
                                                                                                                        }());
                                                                                                                 }
                                                                                                                }());
                                                                                                         }
                                                                                                        }());
                                                                                                 }
                                                                                                }());
                                                                                         }
                                                                                        }());

                                                                                    case false:
                                                                                        ({ () in return switch basics_or(r(1425.0, 1469.0), basics_or(e(1471.0), basics_or(r(1473.0, 1474.0), r(1476.0, 1477.0)))) {
                                                                                            case true:
                                                                                                Maybe_Maybe.Just(Unicode_Category.MarkNonSpacing);

                                                                                            case false:
                                                                                                ({ () in return switch e(1470.0) {
                                                                                                    case true:
                                                                                                        Maybe_Maybe.Just(Unicode_Category.PunctuationDash);

                                                                                                    case false:
                                                                                                        ({ () in return switch basics_or(e(1472.0), e(1475.0)) {
                                                                                                            case true:
                                                                                                                Maybe_Maybe.Just(Unicode_Category.PunctuationOther);

                                                                                                            case false:
                                                                                                                Maybe_Maybe.Nothing;
                                                                                                         }
                                                                                                        }());
                                                                                                 }
                                                                                                }());
                                                                                         }
                                                                                        }());
                                                                                 }
                                                                                }());
                                                                         }
                                                                        }());

                                                                    case false:
                                                                        ({ () in return switch l(1563.0) {
                                                                            case true:
                                                                                ({ () in return switch basics_or(e(1478.0), basics_or(r(1523.0, 1524.0), basics_or(r(1545.0, 1546.0), r(1548.0, 1549.0)))) {
                                                                                    case true:
                                                                                        Maybe_Maybe.Just(Unicode_Category.PunctuationOther);

                                                                                    case false:
                                                                                        ({ () in return switch basics_or(e(1479.0), r(1552.0, 1562.0)) {
                                                                                            case true:
                                                                                                Maybe_Maybe.Just(Unicode_Category.MarkNonSpacing);

                                                                                            case false:
                                                                                                ({ () in return switch basics_or(r(1488.0, 1514.0), r(1519.0, 1522.0)) {
                                                                                                    case true:
                                                                                                        Maybe_Maybe.Just(Unicode_Category.LetterOther);

                                                                                                    case false:
                                                                                                        ({ () in return switch r(1536.0, 1541.0) {
                                                                                                            case true:
                                                                                                                Maybe_Maybe.Just(Unicode_Category.OtherFormat);

                                                                                                            case false:
                                                                                                                ({ () in return switch r(1542.0, 1544.0) {
                                                                                                                    case true:
                                                                                                                        Maybe_Maybe.Just(Unicode_Category.SymbolMath);

                                                                                                                    case false:
                                                                                                                        ({ () in return switch e(1547.0) {
                                                                                                                            case true:
                                                                                                                                Maybe_Maybe.Just(Unicode_Category.SymbolCurrency);

                                                                                                                            case false:
                                                                                                                                ({ () in return switch r(1550.0, 1551.0) {
                                                                                                                                    case true:
                                                                                                                                        Maybe_Maybe.Just(Unicode_Category.SymbolOther);

                                                                                                                                    case false:
                                                                                                                                        Maybe_Maybe.Nothing;
                                                                                                                                 }
                                                                                                                                }());
                                                                                                                         }
                                                                                                                        }());
                                                                                                                 }
                                                                                                                }());
                                                                                                         }
                                                                                                        }());
                                                                                                 }
                                                                                                }());
                                                                                         }
                                                                                        }());
                                                                                 }
                                                                                }());

                                                                            case false:
                                                                                ({ () in return switch l(1631.0) {
                                                                                    case true:
                                                                                        ({ () in return switch basics_or(e(1563.0), r(1565.0, 1567.0)) {
                                                                                            case true:
                                                                                                Maybe_Maybe.Just(Unicode_Category.PunctuationOther);

                                                                                            case false:
                                                                                                ({ () in return switch e(1564.0) {
                                                                                                    case true:
                                                                                                        Maybe_Maybe.Just(Unicode_Category.OtherFormat);

                                                                                                    case false:
                                                                                                        ({ () in return switch basics_or(r(1568.0, 1599.0), r(1601.0, 1610.0)) {
                                                                                                            case true:
                                                                                                                Maybe_Maybe.Just(Unicode_Category.LetterOther);

                                                                                                            case false:
                                                                                                                ({ () in return switch e(1600.0) {
                                                                                                                    case true:
                                                                                                                        Maybe_Maybe.Just(Unicode_Category.LetterModifier);

                                                                                                                    case false:
                                                                                                                        ({ () in return switch r(1611.0, 1630.0) {
                                                                                                                            case true:
                                                                                                                                Maybe_Maybe.Just(Unicode_Category.MarkNonSpacing);

                                                                                                                            case false:
                                                                                                                                Maybe_Maybe.Nothing;
                                                                                                                         }
                                                                                                                        }());
                                                                                                                 }
                                                                                                                }());
                                                                                                         }
                                                                                                        }());
                                                                                                 }
                                                                                                }());
                                                                                         }
                                                                                        }());

                                                                                    case false:
                                                                                        ({ () in return switch basics_or(e(1631.0), basics_or(e(1648.0), r(1750.0, 1755.0))) {
                                                                                            case true:
                                                                                                Maybe_Maybe.Just(Unicode_Category.MarkNonSpacing);

                                                                                            case false:
                                                                                                ({ () in return switch r(1632.0, 1641.0) {
                                                                                                    case true:
                                                                                                        Maybe_Maybe.Just(Unicode_Category.NumberDecimalDigit);

                                                                                                    case false:
                                                                                                        ({ () in return switch basics_or(r(1642.0, 1645.0), e(1748.0)) {
                                                                                                            case true:
                                                                                                                Maybe_Maybe.Just(Unicode_Category.PunctuationOther);

                                                                                                            case false:
                                                                                                                ({ () in return switch basics_or(r(1646.0, 1647.0), basics_or(r(1649.0, 1747.0), e(1749.0))) {
                                                                                                                    case true:
                                                                                                                        Maybe_Maybe.Just(Unicode_Category.LetterOther);

                                                                                                                    case false:
                                                                                                                        Maybe_Maybe.Nothing;
                                                                                                                 }
                                                                                                                }());
                                                                                                         }
                                                                                                        }());
                                                                                                 }
                                                                                                }());
                                                                                         }
                                                                                        }());
                                                                                 }
                                                                                }());
                                                                         }
                                                                        }());
                                                                 }
                                                                }());
                                                         }
                                                        }());
                                                 }
                                                }());

                                            case false:
                                                ({ () in return switch l(2556.0) {
                                                    case true:
                                                        ({ () in return switch l(2248.0) {
                                                            case true:
                                                                ({ () in return switch l(2035.0) {
                                                                    case true:
                                                                        ({ () in return switch l(1790.0) {
                                                                            case true:
                                                                                ({ () in return switch basics_or(e(1756.0), basics_or(r(1759.0, 1764.0), basics_or(r(1767.0, 1768.0), r(1770.0, 1773.0)))) {
                                                                                    case true:
                                                                                        Maybe_Maybe.Just(Unicode_Category.MarkNonSpacing);

                                                                                    case false:
                                                                                        ({ () in return switch e(1757.0) {
                                                                                            case true:
                                                                                                Maybe_Maybe.Just(Unicode_Category.OtherFormat);

                                                                                            case false:
                                                                                                ({ () in return switch basics_or(e(1758.0), basics_or(e(1769.0), e(1789.0))) {
                                                                                                    case true:
                                                                                                        Maybe_Maybe.Just(Unicode_Category.SymbolOther);

                                                                                                    case false:
                                                                                                        ({ () in return switch r(1765.0, 1766.0) {
                                                                                                            case true:
                                                                                                                Maybe_Maybe.Just(Unicode_Category.LetterModifier);

                                                                                                            case false:
                                                                                                                ({ () in return switch basics_or(r(1774.0, 1775.0), r(1786.0, 1788.0)) {
                                                                                                                    case true:
                                                                                                                        Maybe_Maybe.Just(Unicode_Category.LetterOther);

                                                                                                                    case false:
                                                                                                                        ({ () in return switch r(1776.0, 1785.0) {
                                                                                                                            case true:
                                                                                                                                Maybe_Maybe.Just(Unicode_Category.NumberDecimalDigit);

                                                                                                                            case false:
                                                                                                                                Maybe_Maybe.Nothing;
                                                                                                                         }
                                                                                                                        }());
                                                                                                                 }
                                                                                                                }());
                                                                                                         }
                                                                                                        }());
                                                                                                 }
                                                                                                }());
                                                                                         }
                                                                                        }());
                                                                                 }
                                                                                }());

                                                                            case false:
                                                                                ({ () in return switch l(1839.0) {
                                                                                    case true:
                                                                                        ({ () in return switch e(1790.0) {
                                                                                            case true:
                                                                                                Maybe_Maybe.Just(Unicode_Category.SymbolOther);

                                                                                            case false:
                                                                                                ({ () in return switch basics_or(e(1791.0), basics_or(e(1808.0), r(1810.0, 1838.0))) {
                                                                                                    case true:
                                                                                                        Maybe_Maybe.Just(Unicode_Category.LetterOther);

                                                                                                    case false:
                                                                                                        ({ () in return switch r(1792.0, 1805.0) {
                                                                                                            case true:
                                                                                                                Maybe_Maybe.Just(Unicode_Category.PunctuationOther);

                                                                                                            case false:
                                                                                                                ({ () in return switch e(1807.0) {
                                                                                                                    case true:
                                                                                                                        Maybe_Maybe.Just(Unicode_Category.OtherFormat);

                                                                                                                    case false:
                                                                                                                        ({ () in return switch e(1809.0) {
                                                                                                                            case true:
                                                                                                                                Maybe_Maybe.Just(Unicode_Category.MarkNonSpacing);

                                                                                                                            case false:
                                                                                                                                Maybe_Maybe.Nothing;
                                                                                                                         }
                                                                                                                        }());
                                                                                                                 }
                                                                                                                }());
                                                                                                         }
                                                                                                        }());
                                                                                                 }
                                                                                                }());
                                                                                         }
                                                                                        }());

                                                                                    case false:
                                                                                        ({ () in return switch basics_or(e(1839.0), basics_or(r(1869.0, 1957.0), basics_or(e(1969.0), r(1994.0, 2026.0)))) {
                                                                                            case true:
                                                                                                Maybe_Maybe.Just(Unicode_Category.LetterOther);

                                                                                            case false:
                                                                                                ({ () in return switch basics_or(r(1840.0, 1866.0), basics_or(r(1958.0, 1968.0), r(2027.0, 2034.0))) {
                                                                                                    case true:
                                                                                                        Maybe_Maybe.Just(Unicode_Category.MarkNonSpacing);

                                                                                                    case false:
                                                                                                        ({ () in return switch r(1984.0, 1993.0) {
                                                                                                            case true:
                                                                                                                Maybe_Maybe.Just(Unicode_Category.NumberDecimalDigit);

                                                                                                            case false:
                                                                                                                Maybe_Maybe.Nothing;
                                                                                                         }
                                                                                                        }());
                                                                                                 }
                                                                                                }());
                                                                                         }
                                                                                        }());
                                                                                 }
                                                                                }());
                                                                         }
                                                                        }());

                                                                    case false:
                                                                        ({ () in return switch l(2087.0) {
                                                                            case true:
                                                                                ({ () in return switch l(2045.0) {
                                                                                    case true:
                                                                                        ({ () in return switch e(2035.0) {
                                                                                            case true:
                                                                                                Maybe_Maybe.Just(Unicode_Category.MarkNonSpacing);

                                                                                            case false:
                                                                                                ({ () in return switch basics_or(r(2036.0, 2037.0), e(2042.0)) {
                                                                                                    case true:
                                                                                                        Maybe_Maybe.Just(Unicode_Category.LetterModifier);

                                                                                                    case false:
                                                                                                        ({ () in return switch e(2038.0) {
                                                                                                            case true:
                                                                                                                Maybe_Maybe.Just(Unicode_Category.SymbolOther);

                                                                                                            case false:
                                                                                                                ({ () in return switch r(2039.0, 2041.0) {
                                                                                                                    case true:
                                                                                                                        Maybe_Maybe.Just(Unicode_Category.PunctuationOther);

                                                                                                                    case false:
                                                                                                                        Maybe_Maybe.Nothing;
                                                                                                                 }
                                                                                                                }());
                                                                                                         }
                                                                                                        }());
                                                                                                 }
                                                                                                }());
                                                                                         }
                                                                                        }());

                                                                                    case false:
                                                                                        ({ () in return switch basics_or(e(2045.0), basics_or(r(2070.0, 2073.0), basics_or(r(2075.0, 2083.0), r(2085.0, 2086.0)))) {
                                                                                            case true:
                                                                                                Maybe_Maybe.Just(Unicode_Category.MarkNonSpacing);

                                                                                            case false:
                                                                                                ({ () in return switch r(2046.0, 2047.0) {
                                                                                                    case true:
                                                                                                        Maybe_Maybe.Just(Unicode_Category.SymbolCurrency);

                                                                                                    case false:
                                                                                                        ({ () in return switch r(2048.0, 2069.0) {
                                                                                                            case true:
                                                                                                                Maybe_Maybe.Just(Unicode_Category.LetterOther);

                                                                                                            case false:
                                                                                                                ({ () in return switch basics_or(e(2074.0), e(2084.0)) {
                                                                                                                    case true:
                                                                                                                        Maybe_Maybe.Just(Unicode_Category.LetterModifier);

                                                                                                                    case false:
                                                                                                                        Maybe_Maybe.Nothing;
                                                                                                                 }
                                                                                                                }());
                                                                                                         }
                                                                                                        }());
                                                                                                 }
                                                                                                }());
                                                                                         }
                                                                                        }());
                                                                                 }
                                                                                }());

                                                                            case false:
                                                                                ({ () in return switch l(2143.0) {
                                                                                    case true:
                                                                                        ({ () in return switch basics_or(e(2087.0), basics_or(r(2089.0, 2093.0), r(2137.0, 2139.0))) {
                                                                                            case true:
                                                                                                Maybe_Maybe.Just(Unicode_Category.MarkNonSpacing);

                                                                                            case false:
                                                                                                ({ () in return switch e(2088.0) {
                                                                                                    case true:
                                                                                                        Maybe_Maybe.Just(Unicode_Category.LetterModifier);

                                                                                                    case false:
                                                                                                        ({ () in return switch basics_or(r(2096.0, 2110.0), e(2142.0)) {
                                                                                                            case true:
                                                                                                                Maybe_Maybe.Just(Unicode_Category.PunctuationOther);

                                                                                                            case false:
                                                                                                                ({ () in return switch r(2112.0, 2136.0) {
                                                                                                                    case true:
                                                                                                                        Maybe_Maybe.Just(Unicode_Category.LetterOther);

                                                                                                                    case false:
                                                                                                                        Maybe_Maybe.Nothing;
                                                                                                                 }
                                                                                                                }());
                                                                                                         }
                                                                                                        }());
                                                                                                 }
                                                                                                }());
                                                                                         }
                                                                                        }());

                                                                                    case false:
                                                                                        ({ () in return switch basics_or(r(2144.0, 2154.0), basics_or(r(2160.0, 2183.0), basics_or(r(2185.0, 2190.0), r(2208.0, 2247.0)))) {
                                                                                            case true:
                                                                                                Maybe_Maybe.Just(Unicode_Category.LetterOther);

                                                                                            case false:
                                                                                                ({ () in return switch e(2184.0) {
                                                                                                    case true:
                                                                                                        Maybe_Maybe.Just(Unicode_Category.SymbolModifier);

                                                                                                    case false:
                                                                                                        ({ () in return switch r(2192.0, 2193.0) {
                                                                                                            case true:
                                                                                                                Maybe_Maybe.Just(Unicode_Category.OtherFormat);

                                                                                                            case false:
                                                                                                                ({ () in return switch r(2200.0, 2207.0) {
                                                                                                                    case true:
                                                                                                                        Maybe_Maybe.Just(Unicode_Category.MarkNonSpacing);

                                                                                                                    case false:
                                                                                                                        Maybe_Maybe.Nothing;
                                                                                                                 }
                                                                                                                }());
                                                                                                         }
                                                                                                        }());
                                                                                                 }
                                                                                                }());
                                                                                         }
                                                                                        }());
                                                                                 }
                                                                                }());
                                                                         }
                                                                        }());
                                                                 }
                                                                }());

                                                            case false:
                                                                ({ () in return switch l(2432.0) {
                                                                    case true:
                                                                        ({ () in return switch l(2368.0) {
                                                                            case true:
                                                                                ({ () in return switch basics_or(e(2248.0), basics_or(r(2308.0, 2361.0), e(2365.0))) {
                                                                                    case true:
                                                                                        Maybe_Maybe.Just(Unicode_Category.LetterOther);

                                                                                    case false:
                                                                                        ({ () in return switch e(2249.0) {
                                                                                            case true:
                                                                                                Maybe_Maybe.Just(Unicode_Category.LetterModifier);

                                                                                            case false:
                                                                                                ({ () in return switch basics_or(r(2250.0, 2273.0), basics_or(r(2275.0, 2306.0), basics_or(e(2362.0), e(2364.0)))) {
                                                                                                    case true:
                                                                                                        Maybe_Maybe.Just(Unicode_Category.MarkNonSpacing);

                                                                                                    case false:
                                                                                                        ({ () in return switch e(2274.0) {
                                                                                                            case true:
                                                                                                                Maybe_Maybe.Just(Unicode_Category.OtherFormat);

                                                                                                            case false:
                                                                                                                ({ () in return switch basics_or(e(2307.0), basics_or(e(2363.0), r(2366.0, 2367.0))) {
                                                                                                                    case true:
                                                                                                                        Maybe_Maybe.Just(Unicode_Category.MarkSpacingCombining);

                                                                                                                    case false:
                                                                                                                        Maybe_Maybe.Nothing;
                                                                                                                 }
                                                                                                                }());
                                                                                                         }
                                                                                                        }());
                                                                                                 }
                                                                                                }());
                                                                                         }
                                                                                        }());
                                                                                 }
                                                                                }());

                                                                            case false:
                                                                                ({ () in return switch l(2391.0) {
                                                                                    case true:
                                                                                        ({ () in return switch basics_or(e(2368.0), basics_or(r(2377.0, 2380.0), r(2382.0, 2383.0))) {
                                                                                            case true:
                                                                                                Maybe_Maybe.Just(Unicode_Category.MarkSpacingCombining);

                                                                                            case false:
                                                                                                ({ () in return switch basics_or(r(2369.0, 2376.0), basics_or(e(2381.0), r(2385.0, 2390.0))) {
                                                                                                    case true:
                                                                                                        Maybe_Maybe.Just(Unicode_Category.MarkNonSpacing);

                                                                                                    case false:
                                                                                                        ({ () in return switch e(2384.0) {
                                                                                                            case true:
                                                                                                                Maybe_Maybe.Just(Unicode_Category.LetterOther);

                                                                                                            case false:
                                                                                                                Maybe_Maybe.Nothing;
                                                                                                         }
                                                                                                        }());
                                                                                                 }
                                                                                                }());
                                                                                         }
                                                                                        }());

                                                                                    case false:
                                                                                        ({ () in return switch basics_or(e(2391.0), r(2402.0, 2403.0)) {
                                                                                            case true:
                                                                                                Maybe_Maybe.Just(Unicode_Category.MarkNonSpacing);

                                                                                            case false:
                                                                                                ({ () in return switch basics_or(r(2392.0, 2401.0), r(2418.0, 2431.0)) {
                                                                                                    case true:
                                                                                                        Maybe_Maybe.Just(Unicode_Category.LetterOther);

                                                                                                    case false:
                                                                                                        ({ () in return switch basics_or(r(2404.0, 2405.0), e(2416.0)) {
                                                                                                            case true:
                                                                                                                Maybe_Maybe.Just(Unicode_Category.PunctuationOther);

                                                                                                            case false:
                                                                                                                ({ () in return switch r(2406.0, 2415.0) {
                                                                                                                    case true:
                                                                                                                        Maybe_Maybe.Just(Unicode_Category.NumberDecimalDigit);

                                                                                                                    case false:
                                                                                                                        ({ () in return switch e(2417.0) {
                                                                                                                            case true:
                                                                                                                                Maybe_Maybe.Just(Unicode_Category.LetterModifier);

                                                                                                                            case false:
                                                                                                                                Maybe_Maybe.Nothing;
                                                                                                                         }
                                                                                                                        }());
                                                                                                                 }
                                                                                                                }());
                                                                                                         }
                                                                                                        }());
                                                                                                 }
                                                                                                }());
                                                                                         }
                                                                                        }());
                                                                                 }
                                                                                }());
                                                                         }
                                                                        }());

                                                                    case false:
                                                                        ({ () in return switch l(2502.0) {
                                                                            case true:
                                                                                ({ () in return switch l(2473.0) {
                                                                                    case true:
                                                                                        ({ () in return switch basics_or(e(2432.0), basics_or(r(2437.0, 2444.0), basics_or(r(2447.0, 2448.0), r(2451.0, 2472.0)))) {
                                                                                            case true:
                                                                                                Maybe_Maybe.Just(Unicode_Category.LetterOther);

                                                                                            case false:
                                                                                                ({ () in return switch e(2433.0) {
                                                                                                    case true:
                                                                                                        Maybe_Maybe.Just(Unicode_Category.MarkNonSpacing);

                                                                                                    case false:
                                                                                                        ({ () in return switch r(2434.0, 2435.0) {
                                                                                                            case true:
                                                                                                                Maybe_Maybe.Just(Unicode_Category.MarkSpacingCombining);

                                                                                                            case false:
                                                                                                                Maybe_Maybe.Nothing;
                                                                                                         }
                                                                                                        }());
                                                                                                 }
                                                                                                }());
                                                                                         }
                                                                                        }());

                                                                                    case false:
                                                                                        ({ () in return switch basics_or(r(2474.0, 2480.0), basics_or(e(2482.0), basics_or(r(2486.0, 2489.0), e(2493.0)))) {
                                                                                            case true:
                                                                                                Maybe_Maybe.Just(Unicode_Category.LetterOther);

                                                                                            case false:
                                                                                                ({ () in return switch basics_or(e(2492.0), r(2497.0, 2500.0)) {
                                                                                                    case true:
                                                                                                        Maybe_Maybe.Just(Unicode_Category.MarkNonSpacing);

                                                                                                    case false:
                                                                                                        ({ () in return switch r(2494.0, 2496.0) {
                                                                                                            case true:
                                                                                                                Maybe_Maybe.Just(Unicode_Category.MarkSpacingCombining);

                                                                                                            case false:
                                                                                                                Maybe_Maybe.Nothing;
                                                                                                         }
                                                                                                        }());
                                                                                                 }
                                                                                                }());
                                                                                         }
                                                                                        }());
                                                                                 }
                                                                                }());

                                                                            case false:
                                                                                ({ () in return switch l(2529.0) {
                                                                                    case true:
                                                                                        ({ () in return switch basics_or(r(2503.0, 2504.0), basics_or(r(2507.0, 2508.0), e(2519.0))) {
                                                                                            case true:
                                                                                                Maybe_Maybe.Just(Unicode_Category.MarkSpacingCombining);

                                                                                            case false:
                                                                                                ({ () in return switch e(2509.0) {
                                                                                                    case true:
                                                                                                        Maybe_Maybe.Just(Unicode_Category.MarkNonSpacing);

                                                                                                    case false:
                                                                                                        ({ () in return switch basics_or(e(2510.0), basics_or(r(2524.0, 2525.0), r(2527.0, 2528.0))) {
                                                                                                            case true:
                                                                                                                Maybe_Maybe.Just(Unicode_Category.LetterOther);

                                                                                                            case false:
                                                                                                                Maybe_Maybe.Nothing;
                                                                                                         }
                                                                                                        }());
                                                                                                 }
                                                                                                }());
                                                                                         }
                                                                                        }());

                                                                                    case false:
                                                                                        ({ () in return switch basics_or(e(2529.0), r(2544.0, 2545.0)) {
                                                                                            case true:
                                                                                                Maybe_Maybe.Just(Unicode_Category.LetterOther);

                                                                                            case false:
                                                                                                ({ () in return switch r(2530.0, 2531.0) {
                                                                                                    case true:
                                                                                                        Maybe_Maybe.Just(Unicode_Category.MarkNonSpacing);

                                                                                                    case false:
                                                                                                        ({ () in return switch r(2534.0, 2543.0) {
                                                                                                            case true:
                                                                                                                Maybe_Maybe.Just(Unicode_Category.NumberDecimalDigit);

                                                                                                            case false:
                                                                                                                ({ () in return switch basics_or(r(2546.0, 2547.0), e(2555.0)) {
                                                                                                                    case true:
                                                                                                                        Maybe_Maybe.Just(Unicode_Category.SymbolCurrency);

                                                                                                                    case false:
                                                                                                                        ({ () in return switch r(2548.0, 2553.0) {
                                                                                                                            case true:
                                                                                                                                Maybe_Maybe.Just(Unicode_Category.NumberOther);

                                                                                                                            case false:
                                                                                                                                ({ () in return switch e(2554.0) {
                                                                                                                                    case true:
                                                                                                                                        Maybe_Maybe.Just(Unicode_Category.SymbolOther);

                                                                                                                                    case false:
                                                                                                                                        Maybe_Maybe.Nothing;
                                                                                                                                 }
                                                                                                                                }());
                                                                                                                         }
                                                                                                                        }());
                                                                                                                 }
                                                                                                                }());
                                                                                                         }
                                                                                                        }());
                                                                                                 }
                                                                                                }());
                                                                                         }
                                                                                        }());
                                                                                 }
                                                                                }());
                                                                         }
                                                                        }());
                                                                 }
                                                                }());
                                                         }
                                                        }());

                                                    case false:
                                                        ({ () in return switch l(2820.0) {
                                                            case true:
                                                                ({ () in return switch l(2688.0) {
                                                                    case true:
                                                                        ({ () in return switch l(2619.0) {
                                                                            case true:
                                                                                ({ () in return switch basics_or(e(2556.0), basics_or(r(2565.0, 2570.0), basics_or(r(2575.0, 2576.0), basics_or(r(2579.0, 2600.0), basics_or(r(2602.0, 2608.0), basics_or(r(2610.0, 2611.0), basics_or(r(2613.0, 2614.0), r(2616.0, 2617.0)))))))) {
                                                                                    case true:
                                                                                        Maybe_Maybe.Just(Unicode_Category.LetterOther);

                                                                                    case false:
                                                                                        ({ () in return switch e(2557.0) {
                                                                                            case true:
                                                                                                Maybe_Maybe.Just(Unicode_Category.PunctuationOther);

                                                                                            case false:
                                                                                                ({ () in return switch basics_or(e(2558.0), r(2561.0, 2562.0)) {
                                                                                                    case true:
                                                                                                        Maybe_Maybe.Just(Unicode_Category.MarkNonSpacing);

                                                                                                    case false:
                                                                                                        ({ () in return switch e(2563.0) {
                                                                                                            case true:
                                                                                                                Maybe_Maybe.Just(Unicode_Category.MarkSpacingCombining);

                                                                                                            case false:
                                                                                                                Maybe_Maybe.Nothing;
                                                                                                         }
                                                                                                        }());
                                                                                                 }
                                                                                                }());
                                                                                         }
                                                                                        }());
                                                                                 }
                                                                                }());

                                                                            case false:
                                                                                ({ () in return switch l(2648.0) {
                                                                                    case true:
                                                                                        ({ () in return switch basics_or(e(2620.0), basics_or(r(2625.0, 2626.0), basics_or(r(2631.0, 2632.0), basics_or(r(2635.0, 2637.0), e(2641.0))))) {
                                                                                            case true:
                                                                                                Maybe_Maybe.Just(Unicode_Category.MarkNonSpacing);

                                                                                            case false:
                                                                                                ({ () in return switch r(2622.0, 2624.0) {
                                                                                                    case true:
                                                                                                        Maybe_Maybe.Just(Unicode_Category.MarkSpacingCombining);

                                                                                                    case false:
                                                                                                        Maybe_Maybe.Nothing;
                                                                                                 }
                                                                                                }());
                                                                                         }
                                                                                        }());

                                                                                    case false:
                                                                                        ({ () in return switch basics_or(r(2649.0, 2652.0), basics_or(e(2654.0), r(2674.0, 2676.0))) {
                                                                                            case true:
                                                                                                Maybe_Maybe.Just(Unicode_Category.LetterOther);

                                                                                            case false:
                                                                                                ({ () in return switch r(2662.0, 2671.0) {
                                                                                                    case true:
                                                                                                        Maybe_Maybe.Just(Unicode_Category.NumberDecimalDigit);

                                                                                                    case false:
                                                                                                        ({ () in return switch basics_or(r(2672.0, 2673.0), e(2677.0)) {
                                                                                                            case true:
                                                                                                                Maybe_Maybe.Just(Unicode_Category.MarkNonSpacing);

                                                                                                            case false:
                                                                                                                ({ () in return switch e(2678.0) {
                                                                                                                    case true:
                                                                                                                        Maybe_Maybe.Just(Unicode_Category.PunctuationOther);

                                                                                                                    case false:
                                                                                                                        Maybe_Maybe.Nothing;
                                                                                                                 }
                                                                                                                }());
                                                                                                         }
                                                                                                        }());
                                                                                                 }
                                                                                                }());
                                                                                         }
                                                                                        }());
                                                                                 }
                                                                                }());
                                                                         }
                                                                        }());

                                                                    case false:
                                                                        ({ () in return switch l(2760.0) {
                                                                            case true:
                                                                                ({ () in return switch l(2737.0) {
                                                                                    case true:
                                                                                        ({ () in return switch r(2689.0, 2690.0) {
                                                                                            case true:
                                                                                                Maybe_Maybe.Just(Unicode_Category.MarkNonSpacing);

                                                                                            case false:
                                                                                                ({ () in return switch e(2691.0) {
                                                                                                    case true:
                                                                                                        Maybe_Maybe.Just(Unicode_Category.MarkSpacingCombining);

                                                                                                    case false:
                                                                                                        ({ () in return switch basics_or(r(2693.0, 2701.0), basics_or(r(2703.0, 2705.0), basics_or(r(2707.0, 2728.0), r(2730.0, 2736.0)))) {
                                                                                                            case true:
                                                                                                                Maybe_Maybe.Just(Unicode_Category.LetterOther);

                                                                                                            case false:
                                                                                                                Maybe_Maybe.Nothing;
                                                                                                         }
                                                                                                        }());
                                                                                                 }
                                                                                                }());
                                                                                         }
                                                                                        }());

                                                                                    case false:
                                                                                        ({ () in return switch basics_or(r(2738.0, 2739.0), basics_or(r(2741.0, 2745.0), e(2749.0))) {
                                                                                            case true:
                                                                                                Maybe_Maybe.Just(Unicode_Category.LetterOther);

                                                                                            case false:
                                                                                                ({ () in return switch basics_or(e(2748.0), basics_or(r(2753.0, 2757.0), e(2759.0))) {
                                                                                                    case true:
                                                                                                        Maybe_Maybe.Just(Unicode_Category.MarkNonSpacing);

                                                                                                    case false:
                                                                                                        ({ () in return switch r(2750.0, 2752.0) {
                                                                                                            case true:
                                                                                                                Maybe_Maybe.Just(Unicode_Category.MarkSpacingCombining);

                                                                                                            case false:
                                                                                                                Maybe_Maybe.Nothing;
                                                                                                         }
                                                                                                        }());
                                                                                                 }
                                                                                                }());
                                                                                         }
                                                                                        }());
                                                                                 }
                                                                                }());

                                                                            case false:
                                                                                ({ () in return switch l(2789.0) {
                                                                                    case true:
                                                                                        ({ () in return switch basics_or(e(2760.0), basics_or(e(2765.0), r(2786.0, 2787.0))) {
                                                                                            case true:
                                                                                                Maybe_Maybe.Just(Unicode_Category.MarkNonSpacing);

                                                                                            case false:
                                                                                                ({ () in return switch basics_or(e(2761.0), r(2763.0, 2764.0)) {
                                                                                                    case true:
                                                                                                        Maybe_Maybe.Just(Unicode_Category.MarkSpacingCombining);

                                                                                                    case false:
                                                                                                        ({ () in return switch basics_or(e(2768.0), r(2784.0, 2785.0)) {
                                                                                                            case true:
                                                                                                                Maybe_Maybe.Just(Unicode_Category.LetterOther);

                                                                                                            case false:
                                                                                                                Maybe_Maybe.Nothing;
                                                                                                         }
                                                                                                        }());
                                                                                                 }
                                                                                                }());
                                                                                         }
                                                                                        }());

                                                                                    case false:
                                                                                        ({ () in return switch r(2790.0, 2799.0) {
                                                                                            case true:
                                                                                                Maybe_Maybe.Just(Unicode_Category.NumberDecimalDigit);

                                                                                            case false:
                                                                                                ({ () in return switch e(2800.0) {
                                                                                                    case true:
                                                                                                        Maybe_Maybe.Just(Unicode_Category.PunctuationOther);

                                                                                                    case false:
                                                                                                        ({ () in return switch e(2801.0) {
                                                                                                            case true:
                                                                                                                Maybe_Maybe.Just(Unicode_Category.SymbolCurrency);

                                                                                                            case false:
                                                                                                                ({ () in return switch e(2809.0) {
                                                                                                                    case true:
                                                                                                                        Maybe_Maybe.Just(Unicode_Category.LetterOther);

                                                                                                                    case false:
                                                                                                                        ({ () in return switch basics_or(r(2810.0, 2815.0), e(2817.0)) {
                                                                                                                            case true:
                                                                                                                                Maybe_Maybe.Just(Unicode_Category.MarkNonSpacing);

                                                                                                                            case false:
                                                                                                                                ({ () in return switch r(2818.0, 2819.0) {
                                                                                                                                    case true:
                                                                                                                                        Maybe_Maybe.Just(Unicode_Category.MarkSpacingCombining);

                                                                                                                                    case false:
                                                                                                                                        Maybe_Maybe.Nothing;
                                                                                                                                 }
                                                                                                                                }());
                                                                                                                         }
                                                                                                                        }());
                                                                                                                 }
                                                                                                                }());
                                                                                                         }
                                                                                                        }());
                                                                                                 }
                                                                                                }());
                                                                                         }
                                                                                        }());
                                                                                 }
                                                                                }());
                                                                         }
                                                                        }());
                                                                 }
                                                                }());

                                                            case false:
                                                                ({ () in return switch l(2948.0) {
                                                                    case true:
                                                                        ({ () in return switch l(2890.0) {
                                                                            case true:
                                                                                ({ () in return switch l(2875.0) {
                                                                                    case true:
                                                                                        ({ () in return switch basics_or(r(2821.0, 2828.0), basics_or(r(2831.0, 2832.0), basics_or(r(2835.0, 2856.0), basics_or(r(2858.0, 2864.0), basics_or(r(2866.0, 2867.0), r(2869.0, 2873.0)))))) {
                                                                                            case true:
                                                                                                Maybe_Maybe.Just(Unicode_Category.LetterOther);

                                                                                            case false:
                                                                                                Maybe_Maybe.Nothing;
                                                                                         }
                                                                                        }());

                                                                                    case false:
                                                                                        ({ () in return switch basics_or(e(2876.0), basics_or(e(2879.0), r(2881.0, 2884.0))) {
                                                                                            case true:
                                                                                                Maybe_Maybe.Just(Unicode_Category.MarkNonSpacing);

                                                                                            case false:
                                                                                                ({ () in return switch e(2877.0) {
                                                                                                    case true:
                                                                                                        Maybe_Maybe.Just(Unicode_Category.LetterOther);

                                                                                                    case false:
                                                                                                        ({ () in return switch basics_or(e(2878.0), basics_or(e(2880.0), r(2887.0, 2888.0))) {
                                                                                                            case true:
                                                                                                                Maybe_Maybe.Just(Unicode_Category.MarkSpacingCombining);

                                                                                                            case false:
                                                                                                                Maybe_Maybe.Nothing;
                                                                                                         }
                                                                                                        }());
                                                                                                 }
                                                                                                }());
                                                                                         }
                                                                                        }());
                                                                                 }
                                                                                }());

                                                                            case false:
                                                                                ({ () in return switch l(2913.0) {
                                                                                    case true:
                                                                                        ({ () in return switch basics_or(r(2891.0, 2892.0), e(2903.0)) {
                                                                                            case true:
                                                                                                Maybe_Maybe.Just(Unicode_Category.MarkSpacingCombining);

                                                                                            case false:
                                                                                                ({ () in return switch basics_or(e(2893.0), r(2901.0, 2902.0)) {
                                                                                                    case true:
                                                                                                        Maybe_Maybe.Just(Unicode_Category.MarkNonSpacing);

                                                                                                    case false:
                                                                                                        ({ () in return switch basics_or(r(2908.0, 2909.0), r(2911.0, 2912.0)) {
                                                                                                            case true:
                                                                                                                Maybe_Maybe.Just(Unicode_Category.LetterOther);

                                                                                                            case false:
                                                                                                                Maybe_Maybe.Nothing;
                                                                                                         }
                                                                                                        }());
                                                                                                 }
                                                                                                }());
                                                                                         }
                                                                                        }());

                                                                                    case false:
                                                                                        ({ () in return switch basics_or(e(2913.0), basics_or(e(2929.0), e(2947.0))) {
                                                                                            case true:
                                                                                                Maybe_Maybe.Just(Unicode_Category.LetterOther);

                                                                                            case false:
                                                                                                ({ () in return switch basics_or(r(2914.0, 2915.0), e(2946.0)) {
                                                                                                    case true:
                                                                                                        Maybe_Maybe.Just(Unicode_Category.MarkNonSpacing);

                                                                                                    case false:
                                                                                                        ({ () in return switch r(2918.0, 2927.0) {
                                                                                                            case true:
                                                                                                                Maybe_Maybe.Just(Unicode_Category.NumberDecimalDigit);

                                                                                                            case false:
                                                                                                                ({ () in return switch e(2928.0) {
                                                                                                                    case true:
                                                                                                                        Maybe_Maybe.Just(Unicode_Category.SymbolOther);

                                                                                                                    case false:
                                                                                                                        ({ () in return switch r(2930.0, 2935.0) {
                                                                                                                            case true:
                                                                                                                                Maybe_Maybe.Just(Unicode_Category.NumberOther);

                                                                                                                            case false:
                                                                                                                                Maybe_Maybe.Nothing;
                                                                                                                         }
                                                                                                                        }());
                                                                                                                 }
                                                                                                                }());
                                                                                                         }
                                                                                                        }());
                                                                                                 }
                                                                                                }());
                                                                                         }
                                                                                        }());
                                                                                 }
                                                                                }());
                                                                         }
                                                                        }());

                                                                    case false:
                                                                        ({ () in return switch l(3017.0) {
                                                                            case true:
                                                                                ({ () in return switch l(2978.0) {
                                                                                    case true:
                                                                                        ({ () in return switch basics_or(r(2949.0, 2954.0), basics_or(r(2958.0, 2960.0), basics_or(r(2962.0, 2965.0), basics_or(r(2969.0, 2970.0), basics_or(e(2972.0), r(2974.0, 2975.0)))))) {
                                                                                            case true:
                                                                                                Maybe_Maybe.Just(Unicode_Category.LetterOther);

                                                                                            case false:
                                                                                                Maybe_Maybe.Nothing;
                                                                                         }
                                                                                        }());

                                                                                    case false:
                                                                                        ({ () in return switch basics_or(r(2979.0, 2980.0), basics_or(r(2984.0, 2986.0), r(2990.0, 3001.0))) {
                                                                                            case true:
                                                                                                Maybe_Maybe.Just(Unicode_Category.LetterOther);

                                                                                            case false:
                                                                                                ({ () in return switch basics_or(r(3006.0, 3007.0), basics_or(r(3009.0, 3010.0), r(3014.0, 3016.0))) {
                                                                                                    case true:
                                                                                                        Maybe_Maybe.Just(Unicode_Category.MarkSpacingCombining);

                                                                                                    case false:
                                                                                                        ({ () in return switch e(3008.0) {
                                                                                                            case true:
                                                                                                                Maybe_Maybe.Just(Unicode_Category.MarkNonSpacing);

                                                                                                            case false:
                                                                                                                Maybe_Maybe.Nothing;
                                                                                                         }
                                                                                                        }());
                                                                                                 }
                                                                                                }());
                                                                                         }
                                                                                        }());
                                                                                 }
                                                                                }());

                                                                            case false:
                                                                                ({ () in return switch l(3058.0) {
                                                                                    case true:
                                                                                        ({ () in return switch basics_or(r(3018.0, 3020.0), e(3031.0)) {
                                                                                            case true:
                                                                                                Maybe_Maybe.Just(Unicode_Category.MarkSpacingCombining);

                                                                                            case false:
                                                                                                ({ () in return switch e(3021.0) {
                                                                                                    case true:
                                                                                                        Maybe_Maybe.Just(Unicode_Category.MarkNonSpacing);

                                                                                                    case false:
                                                                                                        ({ () in return switch e(3024.0) {
                                                                                                            case true:
                                                                                                                Maybe_Maybe.Just(Unicode_Category.LetterOther);

                                                                                                            case false:
                                                                                                                ({ () in return switch r(3046.0, 3055.0) {
                                                                                                                    case true:
                                                                                                                        Maybe_Maybe.Just(Unicode_Category.NumberDecimalDigit);

                                                                                                                    case false:
                                                                                                                        ({ () in return switch r(3056.0, 3057.0) {
                                                                                                                            case true:
                                                                                                                                Maybe_Maybe.Just(Unicode_Category.NumberOther);

                                                                                                                            case false:
                                                                                                                                Maybe_Maybe.Nothing;
                                                                                                                         }
                                                                                                                        }());
                                                                                                                 }
                                                                                                                }());
                                                                                                         }
                                                                                                        }());
                                                                                                 }
                                                                                                }());
                                                                                         }
                                                                                        }());

                                                                                    case false:
                                                                                        ({ () in return switch e(3058.0) {
                                                                                            case true:
                                                                                                Maybe_Maybe.Just(Unicode_Category.NumberOther);

                                                                                            case false:
                                                                                                ({ () in return switch basics_or(r(3059.0, 3064.0), e(3066.0)) {
                                                                                                    case true:
                                                                                                        Maybe_Maybe.Just(Unicode_Category.SymbolOther);

                                                                                                    case false:
                                                                                                        ({ () in return switch e(3065.0) {
                                                                                                            case true:
                                                                                                                Maybe_Maybe.Just(Unicode_Category.SymbolCurrency);

                                                                                                            case false:
                                                                                                                ({ () in return switch basics_or(e(3072.0), e(3076.0)) {
                                                                                                                    case true:
                                                                                                                        Maybe_Maybe.Just(Unicode_Category.MarkNonSpacing);

                                                                                                                    case false:
                                                                                                                        ({ () in return switch r(3073.0, 3075.0) {
                                                                                                                            case true:
                                                                                                                                Maybe_Maybe.Just(Unicode_Category.MarkSpacingCombining);

                                                                                                                            case false:
                                                                                                                                ({ () in return switch r(3077.0, 3084.0) {
                                                                                                                                    case true:
                                                                                                                                        Maybe_Maybe.Just(Unicode_Category.LetterOther);

                                                                                                                                    case false:
                                                                                                                                        Maybe_Maybe.Nothing;
                                                                                                                                 }
                                                                                                                                }());
                                                                                                                         }
                                                                                                                        }());
                                                                                                                 }
                                                                                                                }());
                                                                                                         }
                                                                                                        }());
                                                                                                 }
                                                                                                }());
                                                                                         }
                                                                                        }());
                                                                                 }
                                                                                }());
                                                                         }
                                                                        }());
                                                                 }
                                                                }());
                                                         }
                                                        }());
                                                 }
                                                }());
                                         }
                                        }());
                                 }
                                }());

                            case false:
                                ({ () in return switch l(7695.0) {
                                    case true:
                                        ({ () in return switch l(4881.0) {
                                            case true:
                                                ({ () in return switch l(3763.0) {
                                                    case true:
                                                        ({ () in return switch l(3389.0) {
                                                            case true:
                                                                ({ () in return switch l(3217.0) {
                                                                    case true:
                                                                        ({ () in return switch l(3167.0) {
                                                                            case true:
                                                                                ({ () in return switch basics_or(r(3086.0, 3088.0), basics_or(r(3090.0, 3112.0), basics_or(r(3114.0, 3129.0), basics_or(e(3133.0), basics_or(r(3160.0, 3162.0), e(3165.0)))))) {
                                                                                    case true:
                                                                                        Maybe_Maybe.Just(Unicode_Category.LetterOther);

                                                                                    case false:
                                                                                        ({ () in return switch basics_or(e(3132.0), basics_or(r(3134.0, 3136.0), basics_or(r(3142.0, 3144.0), basics_or(r(3146.0, 3149.0), r(3157.0, 3158.0))))) {
                                                                                            case true:
                                                                                                Maybe_Maybe.Just(Unicode_Category.MarkNonSpacing);

                                                                                            case false:
                                                                                                ({ () in return switch r(3137.0, 3140.0) {
                                                                                                    case true:
                                                                                                        Maybe_Maybe.Just(Unicode_Category.MarkSpacingCombining);

                                                                                                    case false:
                                                                                                        Maybe_Maybe.Nothing;
                                                                                                 }
                                                                                                }());
                                                                                         }
                                                                                        }());
                                                                                 }
                                                                                }());

                                                                            case false:
                                                                                ({ () in return switch basics_or(r(3168.0, 3169.0), basics_or(e(3200.0), basics_or(r(3205.0, 3212.0), r(3214.0, 3216.0)))) {
                                                                                    case true:
                                                                                        Maybe_Maybe.Just(Unicode_Category.LetterOther);

                                                                                    case false:
                                                                                        ({ () in return switch basics_or(r(3170.0, 3171.0), e(3201.0)) {
                                                                                            case true:
                                                                                                Maybe_Maybe.Just(Unicode_Category.MarkNonSpacing);

                                                                                            case false:
                                                                                                ({ () in return switch r(3174.0, 3183.0) {
                                                                                                    case true:
                                                                                                        Maybe_Maybe.Just(Unicode_Category.NumberDecimalDigit);

                                                                                                    case false:
                                                                                                        ({ () in return switch basics_or(e(3191.0), e(3204.0)) {
                                                                                                            case true:
                                                                                                                Maybe_Maybe.Just(Unicode_Category.PunctuationOther);

                                                                                                            case false:
                                                                                                                ({ () in return switch r(3192.0, 3198.0) {
                                                                                                                    case true:
                                                                                                                        Maybe_Maybe.Just(Unicode_Category.NumberOther);

                                                                                                                    case false:
                                                                                                                        ({ () in return switch e(3199.0) {
                                                                                                                            case true:
                                                                                                                                Maybe_Maybe.Just(Unicode_Category.SymbolOther);

                                                                                                                            case false:
                                                                                                                                ({ () in return switch r(3202.0, 3203.0) {
                                                                                                                                    case true:
                                                                                                                                        Maybe_Maybe.Just(Unicode_Category.MarkSpacingCombining);

                                                                                                                                    case false:
                                                                                                                                        Maybe_Maybe.Nothing;
                                                                                                                                 }
                                                                                                                                }());
                                                                                                                         }
                                                                                                                        }());
                                                                                                                 }
                                                                                                                }());
                                                                                                         }
                                                                                                        }());
                                                                                                 }
                                                                                                }());
                                                                                         }
                                                                                        }());
                                                                                 }
                                                                                }());
                                                                         }
                                                                        }());

                                                                    case false:
                                                                        ({ () in return switch l(3284.0) {
                                                                            case true:
                                                                                ({ () in return switch basics_or(r(3218.0, 3240.0), basics_or(r(3242.0, 3251.0), basics_or(r(3253.0, 3257.0), e(3261.0)))) {
                                                                                    case true:
                                                                                        Maybe_Maybe.Just(Unicode_Category.LetterOther);

                                                                                    case false:
                                                                                        ({ () in return switch basics_or(e(3260.0), basics_or(e(3263.0), basics_or(e(3270.0), r(3276.0, 3277.0)))) {
                                                                                            case true:
                                                                                                Maybe_Maybe.Just(Unicode_Category.MarkNonSpacing);

                                                                                            case false:
                                                                                                ({ () in return switch basics_or(e(3262.0), basics_or(r(3264.0, 3268.0), basics_or(r(3271.0, 3272.0), r(3274.0, 3275.0)))) {
                                                                                                    case true:
                                                                                                        Maybe_Maybe.Just(Unicode_Category.MarkSpacingCombining);

                                                                                                    case false:
                                                                                                        Maybe_Maybe.Nothing;
                                                                                                 }
                                                                                                }());
                                                                                         }
                                                                                        }());
                                                                                 }
                                                                                }());

                                                                            case false:
                                                                                ({ () in return switch l(3314.0) {
                                                                                    case true:
                                                                                        ({ () in return switch r(3285.0, 3286.0) {
                                                                                            case true:
                                                                                                Maybe_Maybe.Just(Unicode_Category.MarkSpacingCombining);

                                                                                            case false:
                                                                                                ({ () in return switch basics_or(r(3293.0, 3294.0), basics_or(r(3296.0, 3297.0), e(3313.0))) {
                                                                                                    case true:
                                                                                                        Maybe_Maybe.Just(Unicode_Category.LetterOther);

                                                                                                    case false:
                                                                                                        ({ () in return switch r(3298.0, 3299.0) {
                                                                                                            case true:
                                                                                                                Maybe_Maybe.Just(Unicode_Category.MarkNonSpacing);

                                                                                                            case false:
                                                                                                                ({ () in return switch r(3302.0, 3311.0) {
                                                                                                                    case true:
                                                                                                                        Maybe_Maybe.Just(Unicode_Category.NumberDecimalDigit);

                                                                                                                    case false:
                                                                                                                        Maybe_Maybe.Nothing;
                                                                                                                 }
                                                                                                                }());
                                                                                                         }
                                                                                                        }());
                                                                                                 }
                                                                                                }());
                                                                                         }
                                                                                        }());

                                                                                    case false:
                                                                                        ({ () in return switch basics_or(e(3314.0), basics_or(r(3332.0, 3340.0), basics_or(r(3342.0, 3344.0), r(3346.0, 3386.0)))) {
                                                                                            case true:
                                                                                                Maybe_Maybe.Just(Unicode_Category.LetterOther);

                                                                                            case false:
                                                                                                ({ () in return switch basics_or(e(3315.0), r(3330.0, 3331.0)) {
                                                                                                    case true:
                                                                                                        Maybe_Maybe.Just(Unicode_Category.MarkSpacingCombining);

                                                                                                    case false:
                                                                                                        ({ () in return switch basics_or(r(3328.0, 3329.0), r(3387.0, 3388.0)) {
                                                                                                            case true:
                                                                                                                Maybe_Maybe.Just(Unicode_Category.MarkNonSpacing);

                                                                                                            case false:
                                                                                                                Maybe_Maybe.Nothing;
                                                                                                         }
                                                                                                        }());
                                                                                                 }
                                                                                                }());
                                                                                         }
                                                                                        }());
                                                                                 }
                                                                                }());
                                                                         }
                                                                        }());
                                                                 }
                                                                }());

                                                            case false:
                                                                ({ () in return switch l(3534.0) {
                                                                    case true:
                                                                        ({ () in return switch l(3425.0) {
                                                                            case true:
                                                                                ({ () in return switch basics_or(e(3389.0), basics_or(e(3406.0), basics_or(r(3412.0, 3414.0), r(3423.0, 3424.0)))) {
                                                                                    case true:
                                                                                        Maybe_Maybe.Just(Unicode_Category.LetterOther);

                                                                                    case false:
                                                                                        ({ () in return switch basics_or(r(3390.0, 3392.0), basics_or(r(3398.0, 3400.0), basics_or(r(3402.0, 3404.0), e(3415.0)))) {
                                                                                            case true:
                                                                                                Maybe_Maybe.Just(Unicode_Category.MarkSpacingCombining);

                                                                                            case false:
                                                                                                ({ () in return switch basics_or(r(3393.0, 3396.0), e(3405.0)) {
                                                                                                    case true:
                                                                                                        Maybe_Maybe.Just(Unicode_Category.MarkNonSpacing);

                                                                                                    case false:
                                                                                                        ({ () in return switch e(3407.0) {
                                                                                                            case true:
                                                                                                                Maybe_Maybe.Just(Unicode_Category.SymbolOther);

                                                                                                            case false:
                                                                                                                ({ () in return switch r(3416.0, 3422.0) {
                                                                                                                    case true:
                                                                                                                        Maybe_Maybe.Just(Unicode_Category.NumberOther);

                                                                                                                    case false:
                                                                                                                        Maybe_Maybe.Nothing;
                                                                                                                 }
                                                                                                                }());
                                                                                                         }
                                                                                                        }());
                                                                                                 }
                                                                                                }());
                                                                                         }
                                                                                        }());
                                                                                 }
                                                                                }());

                                                                            case false:
                                                                                ({ () in return switch l(3457.0) {
                                                                                    case true:
                                                                                        ({ () in return switch basics_or(e(3425.0), r(3450.0, 3455.0)) {
                                                                                            case true:
                                                                                                Maybe_Maybe.Just(Unicode_Category.LetterOther);

                                                                                            case false:
                                                                                                ({ () in return switch r(3426.0, 3427.0) {
                                                                                                    case true:
                                                                                                        Maybe_Maybe.Just(Unicode_Category.MarkNonSpacing);

                                                                                                    case false:
                                                                                                        ({ () in return switch r(3430.0, 3439.0) {
                                                                                                            case true:
                                                                                                                Maybe_Maybe.Just(Unicode_Category.NumberDecimalDigit);

                                                                                                            case false:
                                                                                                                ({ () in return switch r(3440.0, 3448.0) {
                                                                                                                    case true:
                                                                                                                        Maybe_Maybe.Just(Unicode_Category.NumberOther);

                                                                                                                    case false:
                                                                                                                        ({ () in return switch e(3449.0) {
                                                                                                                            case true:
                                                                                                                                Maybe_Maybe.Just(Unicode_Category.SymbolOther);

                                                                                                                            case false:
                                                                                                                                Maybe_Maybe.Nothing;
                                                                                                                         }
                                                                                                                        }());
                                                                                                                 }
                                                                                                                }());
                                                                                                         }
                                                                                                        }());
                                                                                                 }
                                                                                                }());
                                                                                         }
                                                                                        }());

                                                                                    case false:
                                                                                        ({ () in return switch basics_or(e(3457.0), e(3530.0)) {
                                                                                            case true:
                                                                                                Maybe_Maybe.Just(Unicode_Category.MarkNonSpacing);

                                                                                            case false:
                                                                                                ({ () in return switch r(3458.0, 3459.0) {
                                                                                                    case true:
                                                                                                        Maybe_Maybe.Just(Unicode_Category.MarkSpacingCombining);

                                                                                                    case false:
                                                                                                        ({ () in return switch basics_or(r(3461.0, 3478.0), basics_or(r(3482.0, 3505.0), basics_or(r(3507.0, 3515.0), basics_or(e(3517.0), r(3520.0, 3526.0))))) {
                                                                                                            case true:
                                                                                                                Maybe_Maybe.Just(Unicode_Category.LetterOther);

                                                                                                            case false:
                                                                                                                Maybe_Maybe.Nothing;
                                                                                                         }
                                                                                                        }());
                                                                                                 }
                                                                                                }());
                                                                                         }
                                                                                        }());
                                                                                 }
                                                                                }());
                                                                         }
                                                                        }());

                                                                    case false:
                                                                        ({ () in return switch l(3653.0) {
                                                                            case true:
                                                                                ({ () in return switch l(3571.0) {
                                                                                    case true:
                                                                                        ({ () in return switch basics_or(r(3535.0, 3537.0), basics_or(r(3544.0, 3551.0), e(3570.0))) {
                                                                                            case true:
                                                                                                Maybe_Maybe.Just(Unicode_Category.MarkSpacingCombining);

                                                                                            case false:
                                                                                                ({ () in return switch basics_or(r(3538.0, 3540.0), e(3542.0)) {
                                                                                                    case true:
                                                                                                        Maybe_Maybe.Just(Unicode_Category.MarkNonSpacing);

                                                                                                    case false:
                                                                                                        ({ () in return switch r(3558.0, 3567.0) {
                                                                                                            case true:
                                                                                                                Maybe_Maybe.Just(Unicode_Category.NumberDecimalDigit);

                                                                                                            case false:
                                                                                                                Maybe_Maybe.Nothing;
                                                                                                         }
                                                                                                        }());
                                                                                                 }
                                                                                                }());
                                                                                         }
                                                                                        }());

                                                                                    case false:
                                                                                        ({ () in return switch e(3571.0) {
                                                                                            case true:
                                                                                                Maybe_Maybe.Just(Unicode_Category.MarkSpacingCombining);

                                                                                            case false:
                                                                                                ({ () in return switch e(3572.0) {
                                                                                                    case true:
                                                                                                        Maybe_Maybe.Just(Unicode_Category.PunctuationOther);

                                                                                                    case false:
                                                                                                        ({ () in return switch basics_or(r(3585.0, 3632.0), basics_or(r(3634.0, 3635.0), r(3648.0, 3652.0))) {
                                                                                                            case true:
                                                                                                                Maybe_Maybe.Just(Unicode_Category.LetterOther);

                                                                                                            case false:
                                                                                                                ({ () in return switch basics_or(e(3633.0), r(3636.0, 3642.0)) {
                                                                                                                    case true:
                                                                                                                        Maybe_Maybe.Just(Unicode_Category.MarkNonSpacing);

                                                                                                                    case false:
                                                                                                                        ({ () in return switch e(3647.0) {
                                                                                                                            case true:
                                                                                                                                Maybe_Maybe.Just(Unicode_Category.SymbolCurrency);

                                                                                                                            case false:
                                                                                                                                Maybe_Maybe.Nothing;
                                                                                                                         }
                                                                                                                        }());
                                                                                                                 }
                                                                                                                }());
                                                                                                         }
                                                                                                        }());
                                                                                                 }
                                                                                                }());
                                                                                         }
                                                                                        }());
                                                                                 }
                                                                                }());

                                                                            case false:
                                                                                ({ () in return switch l(3715.0) {
                                                                                    case true:
                                                                                        ({ () in return switch basics_or(e(3653.0), r(3713.0, 3714.0)) {
                                                                                            case true:
                                                                                                Maybe_Maybe.Just(Unicode_Category.LetterOther);

                                                                                            case false:
                                                                                                ({ () in return switch e(3654.0) {
                                                                                                    case true:
                                                                                                        Maybe_Maybe.Just(Unicode_Category.LetterModifier);

                                                                                                    case false:
                                                                                                        ({ () in return switch r(3655.0, 3662.0) {
                                                                                                            case true:
                                                                                                                Maybe_Maybe.Just(Unicode_Category.MarkNonSpacing);

                                                                                                            case false:
                                                                                                                ({ () in return switch basics_or(e(3663.0), r(3674.0, 3675.0)) {
                                                                                                                    case true:
                                                                                                                        Maybe_Maybe.Just(Unicode_Category.PunctuationOther);

                                                                                                                    case false:
                                                                                                                        ({ () in return switch r(3664.0, 3673.0) {
                                                                                                                            case true:
                                                                                                                                Maybe_Maybe.Just(Unicode_Category.NumberDecimalDigit);

                                                                                                                            case false:
                                                                                                                                Maybe_Maybe.Nothing;
                                                                                                                         }
                                                                                                                        }());
                                                                                                                 }
                                                                                                                }());
                                                                                                         }
                                                                                                        }());
                                                                                                 }
                                                                                                }());
                                                                                         }
                                                                                        }());

                                                                                    case false:
                                                                                        ({ () in return switch basics_or(e(3716.0), basics_or(r(3718.0, 3722.0), basics_or(r(3724.0, 3747.0), basics_or(e(3749.0), basics_or(r(3751.0, 3760.0), e(3762.0)))))) {
                                                                                            case true:
                                                                                                Maybe_Maybe.Just(Unicode_Category.LetterOther);

                                                                                            case false:
                                                                                                ({ () in return switch e(3761.0) {
                                                                                                    case true:
                                                                                                        Maybe_Maybe.Just(Unicode_Category.MarkNonSpacing);

                                                                                                    case false:
                                                                                                        Maybe_Maybe.Nothing;
                                                                                                 }
                                                                                                }());
                                                                                         }
                                                                                        }());
                                                                                 }
                                                                                }());
                                                                         }
                                                                        }());
                                                                 }
                                                                }());
                                                         }
                                                        }());

                                                    case false:
                                                        ({ () in return switch l(4151.0) {
                                                            case true:
                                                                ({ () in return switch l(3898.0) {
                                                                    case true:
                                                                        ({ () in return switch l(3859.0) {
                                                                            case true:
                                                                                ({ () in return switch basics_or(e(3763.0), basics_or(e(3773.0), basics_or(r(3776.0, 3780.0), basics_or(r(3804.0, 3807.0), e(3840.0))))) {
                                                                                    case true:
                                                                                        Maybe_Maybe.Just(Unicode_Category.LetterOther);

                                                                                    case false:
                                                                                        ({ () in return switch basics_or(r(3764.0, 3772.0), r(3784.0, 3790.0)) {
                                                                                            case true:
                                                                                                Maybe_Maybe.Just(Unicode_Category.MarkNonSpacing);

                                                                                            case false:
                                                                                                ({ () in return switch e(3782.0) {
                                                                                                    case true:
                                                                                                        Maybe_Maybe.Just(Unicode_Category.LetterModifier);

                                                                                                    case false:
                                                                                                        ({ () in return switch r(3792.0, 3801.0) {
                                                                                                            case true:
                                                                                                                Maybe_Maybe.Just(Unicode_Category.NumberDecimalDigit);

                                                                                                            case false:
                                                                                                                ({ () in return switch r(3841.0, 3843.0) {
                                                                                                                    case true:
                                                                                                                        Maybe_Maybe.Just(Unicode_Category.SymbolOther);

                                                                                                                    case false:
                                                                                                                        ({ () in return switch r(3844.0, 3858.0) {
                                                                                                                            case true:
                                                                                                                                Maybe_Maybe.Just(Unicode_Category.PunctuationOther);

                                                                                                                            case false:
                                                                                                                                Maybe_Maybe.Nothing;
                                                                                                                         }
                                                                                                                        }());
                                                                                                                 }
                                                                                                                }());
                                                                                                         }
                                                                                                        }());
                                                                                                 }
                                                                                                }());
                                                                                         }
                                                                                        }());
                                                                                 }
                                                                                }());

                                                                            case false:
                                                                                ({ () in return switch l(3881.0) {
                                                                                    case true:
                                                                                        ({ () in return switch basics_or(e(3859.0), basics_or(r(3861.0, 3863.0), r(3866.0, 3871.0))) {
                                                                                            case true:
                                                                                                Maybe_Maybe.Just(Unicode_Category.SymbolOther);

                                                                                            case false:
                                                                                                ({ () in return switch e(3860.0) {
                                                                                                    case true:
                                                                                                        Maybe_Maybe.Just(Unicode_Category.PunctuationOther);

                                                                                                    case false:
                                                                                                        ({ () in return switch r(3864.0, 3865.0) {
                                                                                                            case true:
                                                                                                                Maybe_Maybe.Just(Unicode_Category.MarkNonSpacing);

                                                                                                            case false:
                                                                                                                ({ () in return switch r(3872.0, 3880.0) {
                                                                                                                    case true:
                                                                                                                        Maybe_Maybe.Just(Unicode_Category.NumberDecimalDigit);

                                                                                                                    case false:
                                                                                                                        Maybe_Maybe.Nothing;
                                                                                                                 }
                                                                                                                }());
                                                                                                         }
                                                                                                        }());
                                                                                                 }
                                                                                                }());
                                                                                         }
                                                                                        }());

                                                                                    case false:
                                                                                        ({ () in return switch e(3881.0) {
                                                                                            case true:
                                                                                                Maybe_Maybe.Just(Unicode_Category.NumberDecimalDigit);

                                                                                            case false:
                                                                                                ({ () in return switch r(3882.0, 3891.0) {
                                                                                                    case true:
                                                                                                        Maybe_Maybe.Just(Unicode_Category.NumberOther);

                                                                                                    case false:
                                                                                                        ({ () in return switch basics_or(e(3892.0), basics_or(e(3894.0), e(3896.0))) {
                                                                                                            case true:
                                                                                                                Maybe_Maybe.Just(Unicode_Category.SymbolOther);

                                                                                                            case false:
                                                                                                                ({ () in return switch basics_or(e(3893.0), basics_or(e(3895.0), e(3897.0))) {
                                                                                                                    case true:
                                                                                                                        Maybe_Maybe.Just(Unicode_Category.MarkNonSpacing);

                                                                                                                    case false:
                                                                                                                        Maybe_Maybe.Nothing;
                                                                                                                 }
                                                                                                                }());
                                                                                                         }
                                                                                                        }());
                                                                                                 }
                                                                                                }());
                                                                                         }
                                                                                        }());
                                                                                 }
                                                                                }());
                                                                         }
                                                                        }());

                                                                    case false:
                                                                        ({ () in return switch l(3980.0) {
                                                                            case true:
                                                                                ({ () in return switch l(3912.0) {
                                                                                    case true:
                                                                                        ({ () in return switch basics_or(e(3898.0), e(3900.0)) {
                                                                                            case true:
                                                                                                Maybe_Maybe.Just(Unicode_Category.PunctuationOpen);

                                                                                            case false:
                                                                                                ({ () in return switch basics_or(e(3899.0), e(3901.0)) {
                                                                                                    case true:
                                                                                                        Maybe_Maybe.Just(Unicode_Category.PunctuationClose);

                                                                                                    case false:
                                                                                                        ({ () in return switch r(3902.0, 3903.0) {
                                                                                                            case true:
                                                                                                                Maybe_Maybe.Just(Unicode_Category.MarkSpacingCombining);

                                                                                                            case false:
                                                                                                                ({ () in return switch r(3904.0, 3911.0) {
                                                                                                                    case true:
                                                                                                                        Maybe_Maybe.Just(Unicode_Category.LetterOther);

                                                                                                                    case false:
                                                                                                                        Maybe_Maybe.Nothing;
                                                                                                                 }
                                                                                                                }());
                                                                                                         }
                                                                                                        }());
                                                                                                 }
                                                                                                }());
                                                                                         }
                                                                                        }());

                                                                                    case false:
                                                                                        ({ () in return switch basics_or(r(3913.0, 3948.0), r(3976.0, 3979.0)) {
                                                                                            case true:
                                                                                                Maybe_Maybe.Just(Unicode_Category.LetterOther);

                                                                                            case false:
                                                                                                ({ () in return switch basics_or(r(3953.0, 3966.0), basics_or(r(3968.0, 3972.0), r(3974.0, 3975.0))) {
                                                                                                    case true:
                                                                                                        Maybe_Maybe.Just(Unicode_Category.MarkNonSpacing);

                                                                                                    case false:
                                                                                                        ({ () in return switch e(3967.0) {
                                                                                                            case true:
                                                                                                                Maybe_Maybe.Just(Unicode_Category.MarkSpacingCombining);

                                                                                                            case false:
                                                                                                                ({ () in return switch e(3973.0) {
                                                                                                                    case true:
                                                                                                                        Maybe_Maybe.Just(Unicode_Category.PunctuationOther);

                                                                                                                    case false:
                                                                                                                        Maybe_Maybe.Nothing;
                                                                                                                 }
                                                                                                                }());
                                                                                                         }
                                                                                                        }());
                                                                                                 }
                                                                                                }());
                                                                                         }
                                                                                        }());
                                                                                 }
                                                                                }());

                                                                            case false:
                                                                                ({ () in return switch l(4047.0) {
                                                                                    case true:
                                                                                        ({ () in return switch e(3980.0) {
                                                                                            case true:
                                                                                                Maybe_Maybe.Just(Unicode_Category.LetterOther);

                                                                                            case false:
                                                                                                ({ () in return switch basics_or(r(3981.0, 3991.0), basics_or(r(3993.0, 4028.0), e(4038.0))) {
                                                                                                    case true:
                                                                                                        Maybe_Maybe.Just(Unicode_Category.MarkNonSpacing);

                                                                                                    case false:
                                                                                                        ({ () in return switch basics_or(r(4030.0, 4037.0), basics_or(r(4039.0, 4044.0), e(4046.0))) {
                                                                                                            case true:
                                                                                                                Maybe_Maybe.Just(Unicode_Category.SymbolOther);

                                                                                                            case false:
                                                                                                                Maybe_Maybe.Nothing;
                                                                                                         }
                                                                                                        }());
                                                                                                 }
                                                                                                }());
                                                                                         }
                                                                                        }());

                                                                                    case false:
                                                                                        ({ () in return switch basics_or(e(4047.0), r(4053.0, 4056.0)) {
                                                                                            case true:
                                                                                                Maybe_Maybe.Just(Unicode_Category.SymbolOther);

                                                                                            case false:
                                                                                                ({ () in return switch basics_or(r(4048.0, 4052.0), r(4057.0, 4058.0)) {
                                                                                                    case true:
                                                                                                        Maybe_Maybe.Just(Unicode_Category.PunctuationOther);

                                                                                                    case false:
                                                                                                        ({ () in return switch r(4096.0, 4138.0) {
                                                                                                            case true:
                                                                                                                Maybe_Maybe.Just(Unicode_Category.LetterOther);

                                                                                                            case false:
                                                                                                                ({ () in return switch basics_or(r(4139.0, 4140.0), e(4145.0)) {
                                                                                                                    case true:
                                                                                                                        Maybe_Maybe.Just(Unicode_Category.MarkSpacingCombining);

                                                                                                                    case false:
                                                                                                                        ({ () in return switch basics_or(r(4141.0, 4144.0), r(4146.0, 4150.0)) {
                                                                                                                            case true:
                                                                                                                                Maybe_Maybe.Just(Unicode_Category.MarkNonSpacing);

                                                                                                                            case false:
                                                                                                                                Maybe_Maybe.Nothing;
                                                                                                                         }
                                                                                                                        }());
                                                                                                                 }
                                                                                                                }());
                                                                                                         }
                                                                                                        }());
                                                                                                 }
                                                                                                }());
                                                                                         }
                                                                                        }());
                                                                                 }
                                                                                }());
                                                                         }
                                                                        }());
                                                                 }
                                                                }());

                                                            case false:
                                                                ({ () in return switch l(4238.0) {
                                                                    case true:
                                                                        ({ () in return switch l(4189.0) {
                                                                            case true:
                                                                                ({ () in return switch basics_or(e(4151.0), basics_or(r(4153.0, 4154.0), basics_or(r(4157.0, 4158.0), r(4184.0, 4185.0)))) {
                                                                                    case true:
                                                                                        Maybe_Maybe.Just(Unicode_Category.MarkNonSpacing);

                                                                                    case false:
                                                                                        ({ () in return switch basics_or(e(4152.0), basics_or(r(4155.0, 4156.0), r(4182.0, 4183.0))) {
                                                                                            case true:
                                                                                                Maybe_Maybe.Just(Unicode_Category.MarkSpacingCombining);

                                                                                            case false:
                                                                                                ({ () in return switch basics_or(e(4159.0), basics_or(r(4176.0, 4181.0), r(4186.0, 4188.0))) {
                                                                                                    case true:
                                                                                                        Maybe_Maybe.Just(Unicode_Category.LetterOther);

                                                                                                    case false:
                                                                                                        ({ () in return switch r(4160.0, 4169.0) {
                                                                                                            case true:
                                                                                                                Maybe_Maybe.Just(Unicode_Category.NumberDecimalDigit);

                                                                                                            case false:
                                                                                                                ({ () in return switch r(4170.0, 4175.0) {
                                                                                                                    case true:
                                                                                                                        Maybe_Maybe.Just(Unicode_Category.PunctuationOther);

                                                                                                                    case false:
                                                                                                                        Maybe_Maybe.Nothing;
                                                                                                                 }
                                                                                                                }());
                                                                                                         }
                                                                                                        }());
                                                                                                 }
                                                                                                }());
                                                                                         }
                                                                                        }());
                                                                                 }
                                                                                }());

                                                                            case false:
                                                                                ({ () in return switch l(4208.0) {
                                                                                    case true:
                                                                                        ({ () in return switch basics_or(e(4189.0), basics_or(e(4193.0), basics_or(r(4197.0, 4198.0), r(4206.0, 4207.0)))) {
                                                                                            case true:
                                                                                                Maybe_Maybe.Just(Unicode_Category.LetterOther);

                                                                                            case false:
                                                                                                ({ () in return switch r(4190.0, 4192.0) {
                                                                                                    case true:
                                                                                                        Maybe_Maybe.Just(Unicode_Category.MarkNonSpacing);

                                                                                                    case false:
                                                                                                        ({ () in return switch basics_or(r(4194.0, 4196.0), r(4199.0, 4205.0)) {
                                                                                                            case true:
                                                                                                                Maybe_Maybe.Just(Unicode_Category.MarkSpacingCombining);

                                                                                                            case false:
                                                                                                                Maybe_Maybe.Nothing;
                                                                                                         }
                                                                                                        }());
                                                                                                 }
                                                                                                }());
                                                                                         }
                                                                                        }());

                                                                                    case false:
                                                                                        ({ () in return switch basics_or(e(4208.0), r(4213.0, 4225.0)) {
                                                                                            case true:
                                                                                                Maybe_Maybe.Just(Unicode_Category.LetterOther);

                                                                                            case false:
                                                                                                ({ () in return switch basics_or(r(4209.0, 4212.0), basics_or(e(4226.0), basics_or(r(4229.0, 4230.0), e(4237.0)))) {
                                                                                                    case true:
                                                                                                        Maybe_Maybe.Just(Unicode_Category.MarkNonSpacing);

                                                                                                    case false:
                                                                                                        ({ () in return switch basics_or(r(4227.0, 4228.0), r(4231.0, 4236.0)) {
                                                                                                            case true:
                                                                                                                Maybe_Maybe.Just(Unicode_Category.MarkSpacingCombining);

                                                                                                            case false:
                                                                                                                Maybe_Maybe.Nothing;
                                                                                                         }
                                                                                                        }());
                                                                                                 }
                                                                                                }());
                                                                                         }
                                                                                        }());
                                                                                 }
                                                                                }());
                                                                         }
                                                                        }());

                                                                    case false:
                                                                        ({ () in return switch l(4351.0) {
                                                                            case true:
                                                                                ({ () in return switch l(4255.0) {
                                                                                    case true:
                                                                                        ({ () in return switch e(4238.0) {
                                                                                            case true:
                                                                                                Maybe_Maybe.Just(Unicode_Category.LetterOther);

                                                                                            case false:
                                                                                                ({ () in return switch basics_or(e(4239.0), r(4250.0, 4252.0)) {
                                                                                                    case true:
                                                                                                        Maybe_Maybe.Just(Unicode_Category.MarkSpacingCombining);

                                                                                                    case false:
                                                                                                        ({ () in return switch r(4240.0, 4249.0) {
                                                                                                            case true:
                                                                                                                Maybe_Maybe.Just(Unicode_Category.NumberDecimalDigit);

                                                                                                            case false:
                                                                                                                ({ () in return switch e(4253.0) {
                                                                                                                    case true:
                                                                                                                        Maybe_Maybe.Just(Unicode_Category.MarkNonSpacing);

                                                                                                                    case false:
                                                                                                                        ({ () in return switch e(4254.0) {
                                                                                                                            case true:
                                                                                                                                Maybe_Maybe.Just(Unicode_Category.SymbolOther);

                                                                                                                            case false:
                                                                                                                                Maybe_Maybe.Nothing;
                                                                                                                         }
                                                                                                                        }());
                                                                                                                 }
                                                                                                                }());
                                                                                                         }
                                                                                                        }());
                                                                                                 }
                                                                                                }());
                                                                                         }
                                                                                        }());

                                                                                    case false:
                                                                                        ({ () in return switch e(4255.0) {
                                                                                            case true:
                                                                                                Maybe_Maybe.Just(Unicode_Category.SymbolOther);

                                                                                            case false:
                                                                                                ({ () in return switch basics_or(r(4256.0, 4293.0), basics_or(e(4295.0), e(4301.0))) {
                                                                                                    case true:
                                                                                                        Maybe_Maybe.Just(Unicode_Category.LetterUppercase);

                                                                                                    case false:
                                                                                                        ({ () in return switch basics_or(r(4304.0, 4346.0), r(4349.0, 4350.0)) {
                                                                                                            case true:
                                                                                                                Maybe_Maybe.Just(Unicode_Category.LetterLowercase);

                                                                                                            case false:
                                                                                                                ({ () in return switch e(4347.0) {
                                                                                                                    case true:
                                                                                                                        Maybe_Maybe.Just(Unicode_Category.PunctuationOther);

                                                                                                                    case false:
                                                                                                                        ({ () in return switch e(4348.0) {
                                                                                                                            case true:
                                                                                                                                Maybe_Maybe.Just(Unicode_Category.LetterModifier);

                                                                                                                            case false:
                                                                                                                                Maybe_Maybe.Nothing;
                                                                                                                         }
                                                                                                                        }());
                                                                                                                 }
                                                                                                                }());
                                                                                                         }
                                                                                                        }());
                                                                                                 }
                                                                                                }());
                                                                                         }
                                                                                        }());
                                                                                 }
                                                                                }());

                                                                            case false:
                                                                                ({ () in return switch l(4745.0) {
                                                                                    case true:
                                                                                        ({ () in return switch e(4351.0) {
                                                                                            case true:
                                                                                                Maybe_Maybe.Just(Unicode_Category.LetterLowercase);

                                                                                            case false:
                                                                                                ({ () in return switch basics_or(r(4352.0, 4680.0), basics_or(r(4682.0, 4685.0), basics_or(r(4688.0, 4694.0), basics_or(e(4696.0), basics_or(r(4698.0, 4701.0), r(4704.0, 4744.0)))))) {
                                                                                                    case true:
                                                                                                        Maybe_Maybe.Just(Unicode_Category.LetterOther);

                                                                                                    case false:
                                                                                                        Maybe_Maybe.Nothing;
                                                                                                 }
                                                                                                }());
                                                                                         }
                                                                                        }());

                                                                                    case false:
                                                                                        ({ () in return switch basics_or(r(4746.0, 4749.0), basics_or(r(4752.0, 4784.0), basics_or(r(4786.0, 4789.0), basics_or(r(4792.0, 4798.0), basics_or(e(4800.0), basics_or(r(4802.0, 4805.0), basics_or(r(4808.0, 4822.0), r(4824.0, 4880.0)))))))) {
                                                                                            case true:
                                                                                                Maybe_Maybe.Just(Unicode_Category.LetterOther);

                                                                                            case false:
                                                                                                Maybe_Maybe.Nothing;
                                                                                         }
                                                                                        }());
                                                                                 }
                                                                                }());
                                                                         }
                                                                        }());
                                                                 }
                                                                }());
                                                         }
                                                        }());
                                                 }
                                                }());

                                            case false:
                                                ({ () in return switch l(6764.0) {
                                                    case true:
                                                        ({ () in return switch l(6143.0) {
                                                            case true:
                                                                ({ () in return switch l(5918.0) {
                                                                    case true:
                                                                        ({ () in return switch l(5741.0) {
                                                                            case true:
                                                                                ({ () in return switch basics_or(r(4882.0, 4885.0), basics_or(r(4888.0, 4954.0), basics_or(r(4992.0, 5007.0), r(5121.0, 5740.0)))) {
                                                                                    case true:
                                                                                        Maybe_Maybe.Just(Unicode_Category.LetterOther);

                                                                                    case false:
                                                                                        ({ () in return switch r(4957.0, 4959.0) {
                                                                                            case true:
                                                                                                Maybe_Maybe.Just(Unicode_Category.MarkNonSpacing);

                                                                                            case false:
                                                                                                ({ () in return switch r(4960.0, 4968.0) {
                                                                                                    case true:
                                                                                                        Maybe_Maybe.Just(Unicode_Category.PunctuationOther);

                                                                                                    case false:
                                                                                                        ({ () in return switch r(4969.0, 4988.0) {
                                                                                                            case true:
                                                                                                                Maybe_Maybe.Just(Unicode_Category.NumberOther);

                                                                                                            case false:
                                                                                                                ({ () in return switch r(5008.0, 5017.0) {
                                                                                                                    case true:
                                                                                                                        Maybe_Maybe.Just(Unicode_Category.SymbolOther);

                                                                                                                    case false:
                                                                                                                        ({ () in return switch r(5024.0, 5109.0) {
                                                                                                                            case true:
                                                                                                                                Maybe_Maybe.Just(Unicode_Category.LetterUppercase);

                                                                                                                            case false:
                                                                                                                                ({ () in return switch r(5112.0, 5117.0) {
                                                                                                                                    case true:
                                                                                                                                        Maybe_Maybe.Just(Unicode_Category.LetterLowercase);

                                                                                                                                    case false:
                                                                                                                                        ({ () in return switch e(5120.0) {
                                                                                                                                            case true:
                                                                                                                                                Maybe_Maybe.Just(Unicode_Category.PunctuationDash);

                                                                                                                                            case false:
                                                                                                                                                Maybe_Maybe.Nothing;
                                                                                                                                         }
                                                                                                                                        }());
                                                                                                                                 }
                                                                                                                                }());
                                                                                                                         }
                                                                                                                        }());
                                                                                                                 }
                                                                                                                }());
                                                                                                         }
                                                                                                        }());
                                                                                                 }
                                                                                                }());
                                                                                         }
                                                                                        }());
                                                                                 }
                                                                                }());

                                                                            case false:
                                                                                ({ () in return switch l(5791.0) {
                                                                                    case true:
                                                                                        ({ () in return switch e(5741.0) {
                                                                                            case true:
                                                                                                Maybe_Maybe.Just(Unicode_Category.SymbolOther);

                                                                                            case false:
                                                                                                ({ () in return switch e(5742.0) {
                                                                                                    case true:
                                                                                                        Maybe_Maybe.Just(Unicode_Category.PunctuationOther);

                                                                                                    case false:
                                                                                                        ({ () in return switch basics_or(r(5743.0, 5759.0), r(5761.0, 5786.0)) {
                                                                                                            case true:
                                                                                                                Maybe_Maybe.Just(Unicode_Category.LetterOther);

                                                                                                            case false:
                                                                                                                ({ () in return switch e(5760.0) {
                                                                                                                    case true:
                                                                                                                        Maybe_Maybe.Just(Unicode_Category.SeparatorSpace);

                                                                                                                    case false:
                                                                                                                        ({ () in return switch e(5787.0) {
                                                                                                                            case true:
                                                                                                                                Maybe_Maybe.Just(Unicode_Category.PunctuationOpen);

                                                                                                                            case false:
                                                                                                                                ({ () in return switch e(5788.0) {
                                                                                                                                    case true:
                                                                                                                                        Maybe_Maybe.Just(Unicode_Category.PunctuationClose);

                                                                                                                                    case false:
                                                                                                                                        Maybe_Maybe.Nothing;
                                                                                                                                 }
                                                                                                                                }());
                                                                                                                         }
                                                                                                                        }());
                                                                                                                 }
                                                                                                                }());
                                                                                                         }
                                                                                                        }());
                                                                                                 }
                                                                                                }());
                                                                                         }
                                                                                        }());

                                                                                    case false:
                                                                                        ({ () in return switch basics_or(r(5792.0, 5866.0), basics_or(r(5873.0, 5880.0), r(5888.0, 5905.0))) {
                                                                                            case true:
                                                                                                Maybe_Maybe.Just(Unicode_Category.LetterOther);

                                                                                            case false:
                                                                                                ({ () in return switch r(5867.0, 5869.0) {
                                                                                                    case true:
                                                                                                        Maybe_Maybe.Just(Unicode_Category.PunctuationOther);

                                                                                                    case false:
                                                                                                        ({ () in return switch r(5870.0, 5872.0) {
                                                                                                            case true:
                                                                                                                Maybe_Maybe.Just(Unicode_Category.NumberLetter);

                                                                                                            case false:
                                                                                                                ({ () in return switch r(5906.0, 5908.0) {
                                                                                                                    case true:
                                                                                                                        Maybe_Maybe.Just(Unicode_Category.MarkNonSpacing);

                                                                                                                    case false:
                                                                                                                        ({ () in return switch e(5909.0) {
                                                                                                                            case true:
                                                                                                                                Maybe_Maybe.Just(Unicode_Category.MarkSpacingCombining);

                                                                                                                            case false:
                                                                                                                                Maybe_Maybe.Nothing;
                                                                                                                         }
                                                                                                                        }());
                                                                                                                 }
                                                                                                                }());
                                                                                                         }
                                                                                                        }());
                                                                                                 }
                                                                                                }());
                                                                                         }
                                                                                        }());
                                                                                 }
                                                                                }());
                                                                         }
                                                                        }());

                                                                    case false:
                                                                        ({ () in return switch l(6070.0) {
                                                                            case true:
                                                                                ({ () in return switch basics_or(r(5919.0, 5937.0), basics_or(r(5952.0, 5969.0), basics_or(r(5984.0, 5996.0), basics_or(r(5998.0, 6000.0), r(6016.0, 6067.0))))) {
                                                                                    case true:
                                                                                        Maybe_Maybe.Just(Unicode_Category.LetterOther);

                                                                                    case false:
                                                                                        ({ () in return switch basics_or(r(5938.0, 5939.0), basics_or(r(5970.0, 5971.0), basics_or(r(6002.0, 6003.0), r(6068.0, 6069.0)))) {
                                                                                            case true:
                                                                                                Maybe_Maybe.Just(Unicode_Category.MarkNonSpacing);

                                                                                            case false:
                                                                                                ({ () in return switch e(5940.0) {
                                                                                                    case true:
                                                                                                        Maybe_Maybe.Just(Unicode_Category.MarkSpacingCombining);

                                                                                                    case false:
                                                                                                        ({ () in return switch r(5941.0, 5942.0) {
                                                                                                            case true:
                                                                                                                Maybe_Maybe.Just(Unicode_Category.PunctuationOther);

                                                                                                            case false:
                                                                                                                Maybe_Maybe.Nothing;
                                                                                                         }
                                                                                                        }());
                                                                                                 }
                                                                                                }());
                                                                                         }
                                                                                        }());
                                                                                 }
                                                                                }());

                                                                            case false:
                                                                                ({ () in return switch l(6102.0) {
                                                                                    case true:
                                                                                        ({ () in return switch basics_or(e(6070.0), basics_or(r(6078.0, 6085.0), r(6087.0, 6088.0))) {
                                                                                            case true:
                                                                                                Maybe_Maybe.Just(Unicode_Category.MarkSpacingCombining);

                                                                                            case false:
                                                                                                ({ () in return switch basics_or(r(6071.0, 6077.0), basics_or(e(6086.0), r(6089.0, 6099.0))) {
                                                                                                    case true:
                                                                                                        Maybe_Maybe.Just(Unicode_Category.MarkNonSpacing);

                                                                                                    case false:
                                                                                                        ({ () in return switch r(6100.0, 6101.0) {
                                                                                                            case true:
                                                                                                                Maybe_Maybe.Just(Unicode_Category.PunctuationOther);

                                                                                                            case false:
                                                                                                                Maybe_Maybe.Nothing;
                                                                                                         }
                                                                                                        }());
                                                                                                 }
                                                                                                }());
                                                                                         }
                                                                                        }());

                                                                                    case false:
                                                                                        ({ () in return switch basics_or(e(6102.0), r(6104.0, 6106.0)) {
                                                                                            case true:
                                                                                                Maybe_Maybe.Just(Unicode_Category.PunctuationOther);

                                                                                            case false:
                                                                                                ({ () in return switch e(6103.0) {
                                                                                                    case true:
                                                                                                        Maybe_Maybe.Just(Unicode_Category.LetterModifier);

                                                                                                    case false:
                                                                                                        ({ () in return switch e(6107.0) {
                                                                                                            case true:
                                                                                                                Maybe_Maybe.Just(Unicode_Category.SymbolCurrency);

                                                                                                            case false:
                                                                                                                ({ () in return switch e(6108.0) {
                                                                                                                    case true:
                                                                                                                        Maybe_Maybe.Just(Unicode_Category.LetterOther);

                                                                                                                    case false:
                                                                                                                        ({ () in return switch e(6109.0) {
                                                                                                                            case true:
                                                                                                                                Maybe_Maybe.Just(Unicode_Category.MarkNonSpacing);

                                                                                                                            case false:
                                                                                                                                ({ () in return switch r(6112.0, 6121.0) {
                                                                                                                                    case true:
                                                                                                                                        Maybe_Maybe.Just(Unicode_Category.NumberDecimalDigit);

                                                                                                                                    case false:
                                                                                                                                        ({ () in return switch r(6128.0, 6137.0) {
                                                                                                                                            case true:
                                                                                                                                                Maybe_Maybe.Just(Unicode_Category.NumberOther);

                                                                                                                                            case false:
                                                                                                                                                Maybe_Maybe.Nothing;
                                                                                                                                         }
                                                                                                                                        }());
                                                                                                                                 }
                                                                                                                                }());
                                                                                                                         }
                                                                                                                        }());
                                                                                                                 }
                                                                                                                }());
                                                                                                         }
                                                                                                        }());
                                                                                                 }
                                                                                                }());
                                                                                         }
                                                                                        }());
                                                                                 }
                                                                                }());
                                                                         }
                                                                        }());
                                                                 }
                                                                }());

                                                            case false:
                                                                ({ () in return switch l(6463.0) {
                                                                    case true:
                                                                        ({ () in return switch l(6278.0) {
                                                                            case true:
                                                                                ({ () in return switch basics_or(r(6144.0, 6149.0), r(6151.0, 6154.0)) {
                                                                                    case true:
                                                                                        Maybe_Maybe.Just(Unicode_Category.PunctuationOther);

                                                                                    case false:
                                                                                        ({ () in return switch e(6150.0) {
                                                                                            case true:
                                                                                                Maybe_Maybe.Just(Unicode_Category.PunctuationDash);

                                                                                            case false:
                                                                                                ({ () in return switch basics_or(r(6155.0, 6157.0), basics_or(e(6159.0), e(6277.0))) {
                                                                                                    case true:
                                                                                                        Maybe_Maybe.Just(Unicode_Category.MarkNonSpacing);

                                                                                                    case false:
                                                                                                        ({ () in return switch e(6158.0) {
                                                                                                            case true:
                                                                                                                Maybe_Maybe.Just(Unicode_Category.OtherFormat);

                                                                                                            case false:
                                                                                                                ({ () in return switch r(6160.0, 6169.0) {
                                                                                                                    case true:
                                                                                                                        Maybe_Maybe.Just(Unicode_Category.NumberDecimalDigit);

                                                                                                                    case false:
                                                                                                                        ({ () in return switch basics_or(r(6176.0, 6210.0), basics_or(r(6212.0, 6264.0), r(6272.0, 6276.0))) {
                                                                                                                            case true:
                                                                                                                                Maybe_Maybe.Just(Unicode_Category.LetterOther);

                                                                                                                            case false:
                                                                                                                                ({ () in return switch e(6211.0) {
                                                                                                                                    case true:
                                                                                                                                        Maybe_Maybe.Just(Unicode_Category.LetterModifier);

                                                                                                                                    case false:
                                                                                                                                        Maybe_Maybe.Nothing;
                                                                                                                                 }
                                                                                                                                }());
                                                                                                                         }
                                                                                                                        }());
                                                                                                                 }
                                                                                                                }());
                                                                                                         }
                                                                                                        }());
                                                                                                 }
                                                                                                }());
                                                                                         }
                                                                                        }());
                                                                                 }
                                                                                }());

                                                                            case false:
                                                                                ({ () in return switch l(6434.0) {
                                                                                    case true:
                                                                                        ({ () in return switch basics_or(e(6278.0), basics_or(e(6313.0), r(6432.0, 6433.0))) {
                                                                                            case true:
                                                                                                Maybe_Maybe.Just(Unicode_Category.MarkNonSpacing);

                                                                                            case false:
                                                                                                ({ () in return switch basics_or(r(6279.0, 6312.0), basics_or(e(6314.0), basics_or(r(6320.0, 6389.0), r(6400.0, 6430.0)))) {
                                                                                                    case true:
                                                                                                        Maybe_Maybe.Just(Unicode_Category.LetterOther);

                                                                                                    case false:
                                                                                                        Maybe_Maybe.Nothing;
                                                                                                 }
                                                                                                }());
                                                                                         }
                                                                                        }());

                                                                                    case false:
                                                                                        ({ () in return switch basics_or(e(6434.0), basics_or(r(6439.0, 6440.0), basics_or(e(6450.0), r(6457.0, 6459.0)))) {
                                                                                            case true:
                                                                                                Maybe_Maybe.Just(Unicode_Category.MarkNonSpacing);

                                                                                            case false:
                                                                                                ({ () in return switch basics_or(r(6435.0, 6438.0), basics_or(r(6441.0, 6443.0), basics_or(r(6448.0, 6449.0), r(6451.0, 6456.0)))) {
                                                                                                    case true:
                                                                                                        Maybe_Maybe.Just(Unicode_Category.MarkSpacingCombining);

                                                                                                    case false:
                                                                                                        Maybe_Maybe.Nothing;
                                                                                                 }
                                                                                                }());
                                                                                         }
                                                                                        }());
                                                                                 }
                                                                                }());
                                                                         }
                                                                        }());

                                                                    case false:
                                                                        ({ () in return switch l(6680.0) {
                                                                            case true:
                                                                                ({ () in return switch basics_or(e(6464.0), r(6622.0, 6655.0)) {
                                                                                    case true:
                                                                                        Maybe_Maybe.Just(Unicode_Category.SymbolOther);

                                                                                    case false:
                                                                                        ({ () in return switch r(6468.0, 6469.0) {
                                                                                            case true:
                                                                                                Maybe_Maybe.Just(Unicode_Category.PunctuationOther);

                                                                                            case false:
                                                                                                ({ () in return switch basics_or(r(6470.0, 6479.0), r(6608.0, 6617.0)) {
                                                                                                    case true:
                                                                                                        Maybe_Maybe.Just(Unicode_Category.NumberDecimalDigit);

                                                                                                    case false:
                                                                                                        ({ () in return switch basics_or(r(6480.0, 6509.0), basics_or(r(6512.0, 6516.0), basics_or(r(6528.0, 6571.0), basics_or(r(6576.0, 6601.0), r(6656.0, 6678.0))))) {
                                                                                                            case true:
                                                                                                                Maybe_Maybe.Just(Unicode_Category.LetterOther);

                                                                                                            case false:
                                                                                                                ({ () in return switch e(6618.0) {
                                                                                                                    case true:
                                                                                                                        Maybe_Maybe.Just(Unicode_Category.NumberOther);

                                                                                                                    case false:
                                                                                                                        ({ () in return switch e(6679.0) {
                                                                                                                            case true:
                                                                                                                                Maybe_Maybe.Just(Unicode_Category.MarkNonSpacing);

                                                                                                                            case false:
                                                                                                                                Maybe_Maybe.Nothing;
                                                                                                                         }
                                                                                                                        }());
                                                                                                                 }
                                                                                                                }());
                                                                                                         }
                                                                                                        }());
                                                                                                 }
                                                                                                }());
                                                                                         }
                                                                                        }());
                                                                                 }
                                                                                }());

                                                                            case false:
                                                                                ({ () in return switch l(6742.0) {
                                                                                    case true:
                                                                                        ({ () in return switch basics_or(e(6680.0), e(6683.0)) {
                                                                                            case true:
                                                                                                Maybe_Maybe.Just(Unicode_Category.MarkNonSpacing);

                                                                                            case false:
                                                                                                ({ () in return switch basics_or(r(6681.0, 6682.0), e(6741.0)) {
                                                                                                    case true:
                                                                                                        Maybe_Maybe.Just(Unicode_Category.MarkSpacingCombining);

                                                                                                    case false:
                                                                                                        ({ () in return switch r(6686.0, 6687.0) {
                                                                                                            case true:
                                                                                                                Maybe_Maybe.Just(Unicode_Category.PunctuationOther);

                                                                                                            case false:
                                                                                                                ({ () in return switch r(6688.0, 6740.0) {
                                                                                                                    case true:
                                                                                                                        Maybe_Maybe.Just(Unicode_Category.LetterOther);

                                                                                                                    case false:
                                                                                                                        Maybe_Maybe.Nothing;
                                                                                                                 }
                                                                                                                }());
                                                                                                         }
                                                                                                        }());
                                                                                                 }
                                                                                                }());
                                                                                         }
                                                                                        }());

                                                                                    case false:
                                                                                        ({ () in return switch basics_or(e(6742.0), basics_or(r(6744.0, 6750.0), basics_or(e(6752.0), basics_or(e(6754.0), r(6757.0, 6763.0))))) {
                                                                                            case true:
                                                                                                Maybe_Maybe.Just(Unicode_Category.MarkNonSpacing);

                                                                                            case false:
                                                                                                ({ () in return switch basics_or(e(6743.0), basics_or(e(6753.0), r(6755.0, 6756.0))) {
                                                                                                    case true:
                                                                                                        Maybe_Maybe.Just(Unicode_Category.MarkSpacingCombining);

                                                                                                    case false:
                                                                                                        Maybe_Maybe.Nothing;
                                                                                                 }
                                                                                                }());
                                                                                         }
                                                                                        }());
                                                                                 }
                                                                                }());
                                                                         }
                                                                        }());
                                                                 }
                                                                }());
                                                         }
                                                        }());

                                                    case false:
                                                        ({ () in return switch l(7167.0) {
                                                            case true:
                                                                ({ () in return switch l(7001.0) {
                                                                    case true:
                                                                        ({ () in return switch l(6911.0) {
                                                                            case true:
                                                                                ({ () in return switch basics_or(e(6764.0), basics_or(r(6771.0, 6780.0), basics_or(e(6783.0), basics_or(r(6832.0, 6845.0), r(6847.0, 6862.0))))) {
                                                                                    case true:
                                                                                        Maybe_Maybe.Just(Unicode_Category.MarkNonSpacing);

                                                                                    case false:
                                                                                        ({ () in return switch r(6765.0, 6770.0) {
                                                                                            case true:
                                                                                                Maybe_Maybe.Just(Unicode_Category.MarkSpacingCombining);

                                                                                            case false:
                                                                                                ({ () in return switch basics_or(r(6784.0, 6793.0), r(6800.0, 6809.0)) {
                                                                                                    case true:
                                                                                                        Maybe_Maybe.Just(Unicode_Category.NumberDecimalDigit);

                                                                                                    case false:
                                                                                                        ({ () in return switch basics_or(r(6816.0, 6822.0), r(6824.0, 6829.0)) {
                                                                                                            case true:
                                                                                                                Maybe_Maybe.Just(Unicode_Category.PunctuationOther);

                                                                                                            case false:
                                                                                                                ({ () in return switch e(6823.0) {
                                                                                                                    case true:
                                                                                                                        Maybe_Maybe.Just(Unicode_Category.LetterModifier);

                                                                                                                    case false:
                                                                                                                        ({ () in return switch e(6846.0) {
                                                                                                                            case true:
                                                                                                                                Maybe_Maybe.Just(Unicode_Category.MarkEnclosing);

                                                                                                                            case false:
                                                                                                                                Maybe_Maybe.Nothing;
                                                                                                                         }
                                                                                                                        }());
                                                                                                                 }
                                                                                                                }());
                                                                                                         }
                                                                                                        }());
                                                                                                 }
                                                                                                }());
                                                                                         }
                                                                                        }());
                                                                                 }
                                                                                }());

                                                                            case false:
                                                                                ({ () in return switch l(6970.0) {
                                                                                    case true:
                                                                                        ({ () in return switch basics_or(r(6912.0, 6915.0), basics_or(e(6964.0), r(6966.0, 6969.0))) {
                                                                                            case true:
                                                                                                Maybe_Maybe.Just(Unicode_Category.MarkNonSpacing);

                                                                                            case false:
                                                                                                ({ () in return switch basics_or(e(6916.0), e(6965.0)) {
                                                                                                    case true:
                                                                                                        Maybe_Maybe.Just(Unicode_Category.MarkSpacingCombining);

                                                                                                    case false:
                                                                                                        ({ () in return switch r(6917.0, 6963.0) {
                                                                                                            case true:
                                                                                                                Maybe_Maybe.Just(Unicode_Category.LetterOther);

                                                                                                            case false:
                                                                                                                Maybe_Maybe.Nothing;
                                                                                                         }
                                                                                                        }());
                                                                                                 }
                                                                                                }());
                                                                                         }
                                                                                        }());

                                                                                    case false:
                                                                                        ({ () in return switch basics_or(e(6970.0), basics_or(e(6972.0), e(6978.0))) {
                                                                                            case true:
                                                                                                Maybe_Maybe.Just(Unicode_Category.MarkNonSpacing);

                                                                                            case false:
                                                                                                ({ () in return switch basics_or(e(6971.0), basics_or(r(6973.0, 6977.0), r(6979.0, 6980.0))) {
                                                                                                    case true:
                                                                                                        Maybe_Maybe.Just(Unicode_Category.MarkSpacingCombining);

                                                                                                    case false:
                                                                                                        ({ () in return switch r(6981.0, 6988.0) {
                                                                                                            case true:
                                                                                                                Maybe_Maybe.Just(Unicode_Category.LetterOther);

                                                                                                            case false:
                                                                                                                ({ () in return switch r(6992.0, 7000.0) {
                                                                                                                    case true:
                                                                                                                        Maybe_Maybe.Just(Unicode_Category.NumberDecimalDigit);

                                                                                                                    case false:
                                                                                                                        Maybe_Maybe.Nothing;
                                                                                                                 }
                                                                                                                }());
                                                                                                         }
                                                                                                        }());
                                                                                                 }
                                                                                                }());
                                                                                         }
                                                                                        }());
                                                                                 }
                                                                                }());
                                                                         }
                                                                        }());

                                                                    case false:
                                                                        ({ () in return switch l(7081.0) {
                                                                            case true:
                                                                                ({ () in return switch l(7039.0) {
                                                                                    case true:
                                                                                        ({ () in return switch e(7001.0) {
                                                                                            case true:
                                                                                                Maybe_Maybe.Just(Unicode_Category.NumberDecimalDigit);

                                                                                            case false:
                                                                                                ({ () in return switch basics_or(r(7002.0, 7008.0), r(7037.0, 7038.0)) {
                                                                                                    case true:
                                                                                                        Maybe_Maybe.Just(Unicode_Category.PunctuationOther);

                                                                                                    case false:
                                                                                                        ({ () in return switch basics_or(r(7009.0, 7018.0), r(7028.0, 7036.0)) {
                                                                                                            case true:
                                                                                                                Maybe_Maybe.Just(Unicode_Category.SymbolOther);

                                                                                                            case false:
                                                                                                                ({ () in return switch r(7019.0, 7027.0) {
                                                                                                                    case true:
                                                                                                                        Maybe_Maybe.Just(Unicode_Category.MarkNonSpacing);

                                                                                                                    case false:
                                                                                                                        Maybe_Maybe.Nothing;
                                                                                                                 }
                                                                                                                }());
                                                                                                         }
                                                                                                        }());
                                                                                                 }
                                                                                                }());
                                                                                         }
                                                                                        }());

                                                                                    case false:
                                                                                        ({ () in return switch basics_or(r(7040.0, 7041.0), basics_or(r(7074.0, 7077.0), e(7080.0))) {
                                                                                            case true:
                                                                                                Maybe_Maybe.Just(Unicode_Category.MarkNonSpacing);

                                                                                            case false:
                                                                                                ({ () in return switch basics_or(e(7042.0), basics_or(e(7073.0), r(7078.0, 7079.0))) {
                                                                                                    case true:
                                                                                                        Maybe_Maybe.Just(Unicode_Category.MarkSpacingCombining);

                                                                                                    case false:
                                                                                                        ({ () in return switch r(7043.0, 7072.0) {
                                                                                                            case true:
                                                                                                                Maybe_Maybe.Just(Unicode_Category.LetterOther);

                                                                                                            case false:
                                                                                                                Maybe_Maybe.Nothing;
                                                                                                         }
                                                                                                        }());
                                                                                                 }
                                                                                                }());
                                                                                         }
                                                                                        }());
                                                                                 }
                                                                                }());

                                                                            case false:
                                                                                ({ () in return switch l(7142.0) {
                                                                                    case true:
                                                                                        ({ () in return switch basics_or(e(7081.0), r(7083.0, 7085.0)) {
                                                                                            case true:
                                                                                                Maybe_Maybe.Just(Unicode_Category.MarkNonSpacing);

                                                                                            case false:
                                                                                                ({ () in return switch e(7082.0) {
                                                                                                    case true:
                                                                                                        Maybe_Maybe.Just(Unicode_Category.MarkSpacingCombining);

                                                                                                    case false:
                                                                                                        ({ () in return switch basics_or(r(7086.0, 7087.0), r(7098.0, 7141.0)) {
                                                                                                            case true:
                                                                                                                Maybe_Maybe.Just(Unicode_Category.LetterOther);

                                                                                                            case false:
                                                                                                                ({ () in return switch r(7088.0, 7097.0) {
                                                                                                                    case true:
                                                                                                                        Maybe_Maybe.Just(Unicode_Category.NumberDecimalDigit);

                                                                                                                    case false:
                                                                                                                        Maybe_Maybe.Nothing;
                                                                                                                 }
                                                                                                                }());
                                                                                                         }
                                                                                                        }());
                                                                                                 }
                                                                                                }());
                                                                                         }
                                                                                        }());

                                                                                    case false:
                                                                                        ({ () in return switch basics_or(e(7142.0), basics_or(r(7144.0, 7145.0), basics_or(e(7149.0), r(7151.0, 7153.0)))) {
                                                                                            case true:
                                                                                                Maybe_Maybe.Just(Unicode_Category.MarkNonSpacing);

                                                                                            case false:
                                                                                                ({ () in return switch basics_or(e(7143.0), basics_or(r(7146.0, 7148.0), basics_or(e(7150.0), r(7154.0, 7155.0)))) {
                                                                                                    case true:
                                                                                                        Maybe_Maybe.Just(Unicode_Category.MarkSpacingCombining);

                                                                                                    case false:
                                                                                                        ({ () in return switch r(7164.0, 7166.0) {
                                                                                                            case true:
                                                                                                                Maybe_Maybe.Just(Unicode_Category.PunctuationOther);

                                                                                                            case false:
                                                                                                                Maybe_Maybe.Nothing;
                                                                                                         }
                                                                                                        }());
                                                                                                 }
                                                                                                }());
                                                                                         }
                                                                                        }());
                                                                                 }
                                                                                }());
                                                                         }
                                                                        }());
                                                                 }
                                                                }());

                                                            case false:
                                                                ({ () in return switch l(7412.0) {
                                                                    case true:
                                                                        ({ () in return switch l(7293.0) {
                                                                            case true:
                                                                                ({ () in return switch basics_or(e(7167.0), r(7227.0, 7231.0)) {
                                                                                    case true:
                                                                                        Maybe_Maybe.Just(Unicode_Category.PunctuationOther);

                                                                                    case false:
                                                                                        ({ () in return switch basics_or(r(7168.0, 7203.0), basics_or(r(7245.0, 7247.0), r(7258.0, 7287.0))) {
                                                                                            case true:
                                                                                                Maybe_Maybe.Just(Unicode_Category.LetterOther);

                                                                                            case false:
                                                                                                ({ () in return switch basics_or(r(7204.0, 7211.0), r(7220.0, 7221.0)) {
                                                                                                    case true:
                                                                                                        Maybe_Maybe.Just(Unicode_Category.MarkSpacingCombining);

                                                                                                    case false:
                                                                                                        ({ () in return switch basics_or(r(7212.0, 7219.0), r(7222.0, 7223.0)) {
                                                                                                            case true:
                                                                                                                Maybe_Maybe.Just(Unicode_Category.MarkNonSpacing);

                                                                                                            case false:
                                                                                                                ({ () in return switch basics_or(r(7232.0, 7241.0), r(7248.0, 7257.0)) {
                                                                                                                    case true:
                                                                                                                        Maybe_Maybe.Just(Unicode_Category.NumberDecimalDigit);

                                                                                                                    case false:
                                                                                                                        ({ () in return switch r(7288.0, 7292.0) {
                                                                                                                            case true:
                                                                                                                                Maybe_Maybe.Just(Unicode_Category.LetterModifier);

                                                                                                                            case false:
                                                                                                                                Maybe_Maybe.Nothing;
                                                                                                                         }
                                                                                                                        }());
                                                                                                                 }
                                                                                                                }());
                                                                                                         }
                                                                                                        }());
                                                                                                 }
                                                                                                }());
                                                                                         }
                                                                                        }());
                                                                                 }
                                                                                }());

                                                                            case false:
                                                                                ({ () in return switch l(7378.0) {
                                                                                    case true:
                                                                                        ({ () in return switch e(7293.0) {
                                                                                            case true:
                                                                                                Maybe_Maybe.Just(Unicode_Category.LetterModifier);

                                                                                            case false:
                                                                                                ({ () in return switch basics_or(r(7294.0, 7295.0), r(7360.0, 7367.0)) {
                                                                                                    case true:
                                                                                                        Maybe_Maybe.Just(Unicode_Category.PunctuationOther);

                                                                                                    case false:
                                                                                                        ({ () in return switch r(7296.0, 7304.0) {
                                                                                                            case true:
                                                                                                                Maybe_Maybe.Just(Unicode_Category.LetterLowercase);

                                                                                                            case false:
                                                                                                                ({ () in return switch basics_or(r(7312.0, 7354.0), r(7357.0, 7359.0)) {
                                                                                                                    case true:
                                                                                                                        Maybe_Maybe.Just(Unicode_Category.LetterUppercase);

                                                                                                                    case false:
                                                                                                                        ({ () in return switch r(7376.0, 7377.0) {
                                                                                                                            case true:
                                                                                                                                Maybe_Maybe.Just(Unicode_Category.MarkNonSpacing);

                                                                                                                            case false:
                                                                                                                                Maybe_Maybe.Nothing;
                                                                                                                         }
                                                                                                                        }());
                                                                                                                 }
                                                                                                                }());
                                                                                                         }
                                                                                                        }());
                                                                                                 }
                                                                                                }());
                                                                                         }
                                                                                        }());

                                                                                    case false:
                                                                                        ({ () in return switch basics_or(e(7378.0), basics_or(r(7380.0, 7392.0), basics_or(r(7394.0, 7400.0), e(7405.0)))) {
                                                                                            case true:
                                                                                                Maybe_Maybe.Just(Unicode_Category.MarkNonSpacing);

                                                                                            case false:
                                                                                                ({ () in return switch e(7379.0) {
                                                                                                    case true:
                                                                                                        Maybe_Maybe.Just(Unicode_Category.PunctuationOther);

                                                                                                    case false:
                                                                                                        ({ () in return switch e(7393.0) {
                                                                                                            case true:
                                                                                                                Maybe_Maybe.Just(Unicode_Category.MarkSpacingCombining);

                                                                                                            case false:
                                                                                                                ({ () in return switch basics_or(r(7401.0, 7404.0), r(7406.0, 7411.0)) {
                                                                                                                    case true:
                                                                                                                        Maybe_Maybe.Just(Unicode_Category.LetterOther);

                                                                                                                    case false:
                                                                                                                        Maybe_Maybe.Nothing;
                                                                                                                 }
                                                                                                                }());
                                                                                                         }
                                                                                                        }());
                                                                                                 }
                                                                                                }());
                                                                                         }
                                                                                        }());
                                                                                 }
                                                                                }());
                                                                         }
                                                                        }());

                                                                    case false:
                                                                        ({ () in return switch l(7680.0) {
                                                                            case true:
                                                                                ({ () in return switch basics_or(e(7412.0), basics_or(r(7416.0, 7417.0), r(7616.0, 7679.0))) {
                                                                                    case true:
                                                                                        Maybe_Maybe.Just(Unicode_Category.MarkNonSpacing);

                                                                                    case false:
                                                                                        ({ () in return switch basics_or(r(7413.0, 7414.0), e(7418.0)) {
                                                                                            case true:
                                                                                                Maybe_Maybe.Just(Unicode_Category.LetterOther);

                                                                                            case false:
                                                                                                ({ () in return switch e(7415.0) {
                                                                                                    case true:
                                                                                                        Maybe_Maybe.Just(Unicode_Category.MarkSpacingCombining);

                                                                                                    case false:
                                                                                                        ({ () in return switch basics_or(r(7424.0, 7467.0), basics_or(r(7531.0, 7543.0), r(7545.0, 7578.0))) {
                                                                                                            case true:
                                                                                                                Maybe_Maybe.Just(Unicode_Category.LetterLowercase);

                                                                                                            case false:
                                                                                                                ({ () in return switch basics_or(r(7468.0, 7530.0), basics_or(e(7544.0), r(7579.0, 7615.0))) {
                                                                                                                    case true:
                                                                                                                        Maybe_Maybe.Just(Unicode_Category.LetterModifier);

                                                                                                                    case false:
                                                                                                                        Maybe_Maybe.Nothing;
                                                                                                                 }
                                                                                                                }());
                                                                                                         }
                                                                                                        }());
                                                                                                 }
                                                                                                }());
                                                                                         }
                                                                                        }());
                                                                                 }
                                                                                }());

                                                                            case false:
                                                                                ({ () in return switch l(7686.0) {
                                                                                    case true:
                                                                                        ({ () in return switch basics_or(e(7680.0), basics_or(e(7682.0), e(7684.0))) {
                                                                                            case true:
                                                                                                Maybe_Maybe.Just(Unicode_Category.LetterUppercase);

                                                                                            case false:
                                                                                                ({ () in return switch basics_or(e(7681.0), basics_or(e(7683.0), e(7685.0))) {
                                                                                                    case true:
                                                                                                        Maybe_Maybe.Just(Unicode_Category.LetterLowercase);

                                                                                                    case false:
                                                                                                        Maybe_Maybe.Nothing;
                                                                                                 }
                                                                                                }());
                                                                                         }
                                                                                        }());

                                                                                    case false:
                                                                                        ({ () in return switch basics_or(e(7686.0), basics_or(e(7688.0), basics_or(e(7690.0), basics_or(e(7692.0), e(7694.0))))) {
                                                                                            case true:
                                                                                                Maybe_Maybe.Just(Unicode_Category.LetterUppercase);

                                                                                            case false:
                                                                                                ({ () in return switch basics_or(e(7687.0), basics_or(e(7689.0), basics_or(e(7691.0), e(7693.0)))) {
                                                                                                    case true:
                                                                                                        Maybe_Maybe.Just(Unicode_Category.LetterLowercase);

                                                                                                    case false:
                                                                                                        Maybe_Maybe.Nothing;
                                                                                                 }
                                                                                                }());
                                                                                         }
                                                                                        }());
                                                                                 }
                                                                                }());
                                                                         }
                                                                        }());
                                                                 }
                                                                }());
                                                         }
                                                        }());
                                                 }
                                                }());
                                         }
                                        }());

                                    case false:
                                        ({ () in return switch l(7904.0) {
                                            case true:
                                                ({ () in return switch l(7794.0) {
                                                    case true:
                                                        ({ () in return switch l(7743.0) {
                                                            case true:
                                                                ({ () in return switch l(7718.0) {
                                                                    case true:
                                                                        ({ () in return switch l(7705.0) {
                                                                            case true:
                                                                                ({ () in return switch basics_or(e(7695.0), basics_or(e(7697.0), basics_or(e(7699.0), basics_or(e(7701.0), e(7703.0))))) {
                                                                                    case true:
                                                                                        Maybe_Maybe.Just(Unicode_Category.LetterLowercase);

                                                                                    case false:
                                                                                        ({ () in return switch basics_or(e(7696.0), basics_or(e(7698.0), basics_or(e(7700.0), basics_or(e(7702.0), e(7704.0))))) {
                                                                                            case true:
                                                                                                Maybe_Maybe.Just(Unicode_Category.LetterUppercase);

                                                                                            case false:
                                                                                                Maybe_Maybe.Nothing;
                                                                                         }
                                                                                        }());
                                                                                 }
                                                                                }());

                                                                            case false:
                                                                                ({ () in return switch l(7710.0) {
                                                                                    case true:
                                                                                        ({ () in return switch basics_or(e(7705.0), basics_or(e(7707.0), e(7709.0))) {
                                                                                            case true:
                                                                                                Maybe_Maybe.Just(Unicode_Category.LetterLowercase);

                                                                                            case false:
                                                                                                ({ () in return switch basics_or(e(7706.0), e(7708.0)) {
                                                                                                    case true:
                                                                                                        Maybe_Maybe.Just(Unicode_Category.LetterUppercase);

                                                                                                    case false:
                                                                                                        Maybe_Maybe.Nothing;
                                                                                                 }
                                                                                                }());
                                                                                         }
                                                                                        }());

                                                                                    case false:
                                                                                        ({ () in return switch basics_or(e(7710.0), basics_or(e(7712.0), basics_or(e(7714.0), e(7716.0)))) {
                                                                                            case true:
                                                                                                Maybe_Maybe.Just(Unicode_Category.LetterUppercase);

                                                                                            case false:
                                                                                                ({ () in return switch basics_or(e(7711.0), basics_or(e(7713.0), basics_or(e(7715.0), e(7717.0)))) {
                                                                                                    case true:
                                                                                                        Maybe_Maybe.Just(Unicode_Category.LetterLowercase);

                                                                                                    case false:
                                                                                                        Maybe_Maybe.Nothing;
                                                                                                 }
                                                                                                }());
                                                                                         }
                                                                                        }());
                                                                                 }
                                                                                }());
                                                                         }
                                                                        }());

                                                                    case false:
                                                                        ({ () in return switch l(7729.0) {
                                                                            case true:
                                                                                ({ () in return switch basics_or(e(7718.0), basics_or(e(7720.0), basics_or(e(7722.0), basics_or(e(7724.0), basics_or(e(7726.0), e(7728.0)))))) {
                                                                                    case true:
                                                                                        Maybe_Maybe.Just(Unicode_Category.LetterUppercase);

                                                                                    case false:
                                                                                        ({ () in return switch basics_or(e(7719.0), basics_or(e(7721.0), basics_or(e(7723.0), basics_or(e(7725.0), e(7727.0))))) {
                                                                                            case true:
                                                                                                Maybe_Maybe.Just(Unicode_Category.LetterLowercase);

                                                                                            case false:
                                                                                                Maybe_Maybe.Nothing;
                                                                                         }
                                                                                        }());
                                                                                 }
                                                                                }());

                                                                            case false:
                                                                                ({ () in return switch l(7735.0) {
                                                                                    case true:
                                                                                        ({ () in return switch basics_or(e(7729.0), basics_or(e(7731.0), e(7733.0))) {
                                                                                            case true:
                                                                                                Maybe_Maybe.Just(Unicode_Category.LetterLowercase);

                                                                                            case false:
                                                                                                ({ () in return switch basics_or(e(7730.0), basics_or(e(7732.0), e(7734.0))) {
                                                                                                    case true:
                                                                                                        Maybe_Maybe.Just(Unicode_Category.LetterUppercase);

                                                                                                    case false:
                                                                                                        Maybe_Maybe.Nothing;
                                                                                                 }
                                                                                                }());
                                                                                         }
                                                                                        }());

                                                                                    case false:
                                                                                        ({ () in return switch basics_or(e(7735.0), basics_or(e(7737.0), basics_or(e(7739.0), e(7741.0)))) {
                                                                                            case true:
                                                                                                Maybe_Maybe.Just(Unicode_Category.LetterLowercase);

                                                                                            case false:
                                                                                                ({ () in return switch basics_or(e(7736.0), basics_or(e(7738.0), basics_or(e(7740.0), e(7742.0)))) {
                                                                                                    case true:
                                                                                                        Maybe_Maybe.Just(Unicode_Category.LetterUppercase);

                                                                                                    case false:
                                                                                                        Maybe_Maybe.Nothing;
                                                                                                 }
                                                                                                }());
                                                                                         }
                                                                                        }());
                                                                                 }
                                                                                }());
                                                                         }
                                                                        }());
                                                                 }
                                                                }());

                                                            case false:
                                                                ({ () in return switch l(7767.0) {
                                                                    case true:
                                                                        ({ () in return switch l(7754.0) {
                                                                            case true:
                                                                                ({ () in return switch basics_or(e(7743.0), basics_or(e(7745.0), basics_or(e(7747.0), basics_or(e(7749.0), basics_or(e(7751.0), e(7753.0)))))) {
                                                                                    case true:
                                                                                        Maybe_Maybe.Just(Unicode_Category.LetterLowercase);

                                                                                    case false:
                                                                                        ({ () in return switch basics_or(e(7744.0), basics_or(e(7746.0), basics_or(e(7748.0), basics_or(e(7750.0), e(7752.0))))) {
                                                                                            case true:
                                                                                                Maybe_Maybe.Just(Unicode_Category.LetterUppercase);

                                                                                            case false:
                                                                                                Maybe_Maybe.Nothing;
                                                                                         }
                                                                                        }());
                                                                                 }
                                                                                }());

                                                                            case false:
                                                                                ({ () in return switch l(7759.0) {
                                                                                    case true:
                                                                                        ({ () in return switch basics_or(e(7754.0), basics_or(e(7756.0), e(7758.0))) {
                                                                                            case true:
                                                                                                Maybe_Maybe.Just(Unicode_Category.LetterUppercase);

                                                                                            case false:
                                                                                                ({ () in return switch basics_or(e(7755.0), e(7757.0)) {
                                                                                                    case true:
                                                                                                        Maybe_Maybe.Just(Unicode_Category.LetterLowercase);

                                                                                                    case false:
                                                                                                        Maybe_Maybe.Nothing;
                                                                                                 }
                                                                                                }());
                                                                                         }
                                                                                        }());

                                                                                    case false:
                                                                                        ({ () in return switch basics_or(e(7759.0), basics_or(e(7761.0), basics_or(e(7763.0), e(7765.0)))) {
                                                                                            case true:
                                                                                                Maybe_Maybe.Just(Unicode_Category.LetterLowercase);

                                                                                            case false:
                                                                                                ({ () in return switch basics_or(e(7760.0), basics_or(e(7762.0), basics_or(e(7764.0), e(7766.0)))) {
                                                                                                    case true:
                                                                                                        Maybe_Maybe.Just(Unicode_Category.LetterUppercase);

                                                                                                    case false:
                                                                                                        Maybe_Maybe.Nothing;
                                                                                                 }
                                                                                                }());
                                                                                         }
                                                                                        }());
                                                                                 }
                                                                                }());
                                                                         }
                                                                        }());

                                                                    case false:
                                                                        ({ () in return switch l(7779.0) {
                                                                            case true:
                                                                                ({ () in return switch basics_or(e(7767.0), basics_or(e(7769.0), basics_or(e(7771.0), basics_or(e(7773.0), basics_or(e(7775.0), e(7777.0)))))) {
                                                                                    case true:
                                                                                        Maybe_Maybe.Just(Unicode_Category.LetterLowercase);

                                                                                    case false:
                                                                                        ({ () in return switch basics_or(e(7768.0), basics_or(e(7770.0), basics_or(e(7772.0), basics_or(e(7774.0), basics_or(e(7776.0), e(7778.0)))))) {
                                                                                            case true:
                                                                                                Maybe_Maybe.Just(Unicode_Category.LetterUppercase);

                                                                                            case false:
                                                                                                Maybe_Maybe.Nothing;
                                                                                         }
                                                                                        }());
                                                                                 }
                                                                                }());

                                                                            case false:
                                                                                ({ () in return switch l(7785.0) {
                                                                                    case true:
                                                                                        ({ () in return switch basics_or(e(7779.0), basics_or(e(7781.0), e(7783.0))) {
                                                                                            case true:
                                                                                                Maybe_Maybe.Just(Unicode_Category.LetterLowercase);

                                                                                            case false:
                                                                                                ({ () in return switch basics_or(e(7780.0), basics_or(e(7782.0), e(7784.0))) {
                                                                                                    case true:
                                                                                                        Maybe_Maybe.Just(Unicode_Category.LetterUppercase);

                                                                                                    case false:
                                                                                                        Maybe_Maybe.Nothing;
                                                                                                 }
                                                                                                }());
                                                                                         }
                                                                                        }());

                                                                                    case false:
                                                                                        ({ () in return switch basics_or(e(7785.0), basics_or(e(7787.0), basics_or(e(7789.0), basics_or(e(7791.0), e(7793.0))))) {
                                                                                            case true:
                                                                                                Maybe_Maybe.Just(Unicode_Category.LetterLowercase);

                                                                                            case false:
                                                                                                ({ () in return switch basics_or(e(7786.0), basics_or(e(7788.0), basics_or(e(7790.0), e(7792.0)))) {
                                                                                                    case true:
                                                                                                        Maybe_Maybe.Just(Unicode_Category.LetterUppercase);

                                                                                                    case false:
                                                                                                        Maybe_Maybe.Nothing;
                                                                                                 }
                                                                                                }());
                                                                                         }
                                                                                        }());
                                                                                 }
                                                                                }());
                                                                         }
                                                                        }());
                                                                 }
                                                                }());
                                                         }
                                                        }());

                                                    case false:
                                                        ({ () in return switch l(7852.0) {
                                                            case true:
                                                                ({ () in return switch l(7818.0) {
                                                                    case true:
                                                                        ({ () in return switch l(7805.0) {
                                                                            case true:
                                                                                ({ () in return switch basics_or(e(7794.0), basics_or(e(7796.0), basics_or(e(7798.0), basics_or(e(7800.0), basics_or(e(7802.0), e(7804.0)))))) {
                                                                                    case true:
                                                                                        Maybe_Maybe.Just(Unicode_Category.LetterUppercase);

                                                                                    case false:
                                                                                        ({ () in return switch basics_or(e(7795.0), basics_or(e(7797.0), basics_or(e(7799.0), basics_or(e(7801.0), e(7803.0))))) {
                                                                                            case true:
                                                                                                Maybe_Maybe.Just(Unicode_Category.LetterLowercase);

                                                                                            case false:
                                                                                                Maybe_Maybe.Nothing;
                                                                                         }
                                                                                        }());
                                                                                 }
                                                                                }());

                                                                            case false:
                                                                                ({ () in return switch l(7810.0) {
                                                                                    case true:
                                                                                        ({ () in return switch basics_or(e(7805.0), basics_or(e(7807.0), e(7809.0))) {
                                                                                            case true:
                                                                                                Maybe_Maybe.Just(Unicode_Category.LetterLowercase);

                                                                                            case false:
                                                                                                ({ () in return switch basics_or(e(7806.0), e(7808.0)) {
                                                                                                    case true:
                                                                                                        Maybe_Maybe.Just(Unicode_Category.LetterUppercase);

                                                                                                    case false:
                                                                                                        Maybe_Maybe.Nothing;
                                                                                                 }
                                                                                                }());
                                                                                         }
                                                                                        }());

                                                                                    case false:
                                                                                        ({ () in return switch basics_or(e(7810.0), basics_or(e(7812.0), basics_or(e(7814.0), e(7816.0)))) {
                                                                                            case true:
                                                                                                Maybe_Maybe.Just(Unicode_Category.LetterUppercase);

                                                                                            case false:
                                                                                                ({ () in return switch basics_or(e(7811.0), basics_or(e(7813.0), basics_or(e(7815.0), e(7817.0)))) {
                                                                                                    case true:
                                                                                                        Maybe_Maybe.Just(Unicode_Category.LetterLowercase);

                                                                                                    case false:
                                                                                                        Maybe_Maybe.Nothing;
                                                                                                 }
                                                                                                }());
                                                                                         }
                                                                                        }());
                                                                                 }
                                                                                }());
                                                                         }
                                                                        }());

                                                                    case false:
                                                                        ({ () in return switch l(7838.0) {
                                                                            case true:
                                                                                ({ () in return switch basics_or(e(7818.0), basics_or(e(7820.0), basics_or(e(7822.0), basics_or(e(7824.0), basics_or(e(7826.0), e(7828.0)))))) {
                                                                                    case true:
                                                                                        Maybe_Maybe.Just(Unicode_Category.LetterUppercase);

                                                                                    case false:
                                                                                        ({ () in return switch basics_or(e(7819.0), basics_or(e(7821.0), basics_or(e(7823.0), basics_or(e(7825.0), basics_or(e(7827.0), r(7829.0, 7837.0)))))) {
                                                                                            case true:
                                                                                                Maybe_Maybe.Just(Unicode_Category.LetterLowercase);

                                                                                            case false:
                                                                                                Maybe_Maybe.Nothing;
                                                                                         }
                                                                                        }());
                                                                                 }
                                                                                }());

                                                                            case false:
                                                                                ({ () in return switch l(7844.0) {
                                                                                    case true:
                                                                                        ({ () in return switch basics_or(e(7838.0), basics_or(e(7840.0), e(7842.0))) {
                                                                                            case true:
                                                                                                Maybe_Maybe.Just(Unicode_Category.LetterUppercase);

                                                                                            case false:
                                                                                                ({ () in return switch basics_or(e(7839.0), basics_or(e(7841.0), e(7843.0))) {
                                                                                                    case true:
                                                                                                        Maybe_Maybe.Just(Unicode_Category.LetterLowercase);

                                                                                                    case false:
                                                                                                        Maybe_Maybe.Nothing;
                                                                                                 }
                                                                                                }());
                                                                                         }
                                                                                        }());

                                                                                    case false:
                                                                                        ({ () in return switch basics_or(e(7844.0), basics_or(e(7846.0), basics_or(e(7848.0), e(7850.0)))) {
                                                                                            case true:
                                                                                                Maybe_Maybe.Just(Unicode_Category.LetterUppercase);

                                                                                            case false:
                                                                                                ({ () in return switch basics_or(e(7845.0), basics_or(e(7847.0), basics_or(e(7849.0), e(7851.0)))) {
                                                                                                    case true:
                                                                                                        Maybe_Maybe.Just(Unicode_Category.LetterLowercase);

                                                                                                    case false:
                                                                                                        Maybe_Maybe.Nothing;
                                                                                                 }
                                                                                                }());
                                                                                         }
                                                                                        }());
                                                                                 }
                                                                                }());
                                                                         }
                                                                        }());
                                                                 }
                                                                }());

                                                            case false:
                                                                ({ () in return switch l(7877.0) {
                                                                    case true:
                                                                        ({ () in return switch l(7863.0) {
                                                                            case true:
                                                                                ({ () in return switch basics_or(e(7852.0), basics_or(e(7854.0), basics_or(e(7856.0), basics_or(e(7858.0), basics_or(e(7860.0), e(7862.0)))))) {
                                                                                    case true:
                                                                                        Maybe_Maybe.Just(Unicode_Category.LetterUppercase);

                                                                                    case false:
                                                                                        ({ () in return switch basics_or(e(7853.0), basics_or(e(7855.0), basics_or(e(7857.0), basics_or(e(7859.0), e(7861.0))))) {
                                                                                            case true:
                                                                                                Maybe_Maybe.Just(Unicode_Category.LetterLowercase);

                                                                                            case false:
                                                                                                Maybe_Maybe.Nothing;
                                                                                         }
                                                                                        }());
                                                                                 }
                                                                                }());

                                                                            case false:
                                                                                ({ () in return switch l(7869.0) {
                                                                                    case true:
                                                                                        ({ () in return switch basics_or(e(7863.0), basics_or(e(7865.0), e(7867.0))) {
                                                                                            case true:
                                                                                                Maybe_Maybe.Just(Unicode_Category.LetterLowercase);

                                                                                            case false:
                                                                                                ({ () in return switch basics_or(e(7864.0), basics_or(e(7866.0), e(7868.0))) {
                                                                                                    case true:
                                                                                                        Maybe_Maybe.Just(Unicode_Category.LetterUppercase);

                                                                                                    case false:
                                                                                                        Maybe_Maybe.Nothing;
                                                                                                 }
                                                                                                }());
                                                                                         }
                                                                                        }());

                                                                                    case false:
                                                                                        ({ () in return switch basics_or(e(7869.0), basics_or(e(7871.0), basics_or(e(7873.0), e(7875.0)))) {
                                                                                            case true:
                                                                                                Maybe_Maybe.Just(Unicode_Category.LetterLowercase);

                                                                                            case false:
                                                                                                ({ () in return switch basics_or(e(7870.0), basics_or(e(7872.0), basics_or(e(7874.0), e(7876.0)))) {
                                                                                                    case true:
                                                                                                        Maybe_Maybe.Just(Unicode_Category.LetterUppercase);

                                                                                                    case false:
                                                                                                        Maybe_Maybe.Nothing;
                                                                                                 }
                                                                                                }());
                                                                                         }
                                                                                        }());
                                                                                 }
                                                                                }());
                                                                         }
                                                                        }());

                                                                    case false:
                                                                        ({ () in return switch l(7889.0) {
                                                                            case true:
                                                                                ({ () in return switch basics_or(e(7877.0), basics_or(e(7879.0), basics_or(e(7881.0), basics_or(e(7883.0), basics_or(e(7885.0), e(7887.0)))))) {
                                                                                    case true:
                                                                                        Maybe_Maybe.Just(Unicode_Category.LetterLowercase);

                                                                                    case false:
                                                                                        ({ () in return switch basics_or(e(7878.0), basics_or(e(7880.0), basics_or(e(7882.0), basics_or(e(7884.0), basics_or(e(7886.0), e(7888.0)))))) {
                                                                                            case true:
                                                                                                Maybe_Maybe.Just(Unicode_Category.LetterUppercase);

                                                                                            case false:
                                                                                                Maybe_Maybe.Nothing;
                                                                                         }
                                                                                        }());
                                                                                 }
                                                                                }());

                                                                            case false:
                                                                                ({ () in return switch l(7895.0) {
                                                                                    case true:
                                                                                        ({ () in return switch basics_or(e(7889.0), basics_or(e(7891.0), e(7893.0))) {
                                                                                            case true:
                                                                                                Maybe_Maybe.Just(Unicode_Category.LetterLowercase);

                                                                                            case false:
                                                                                                ({ () in return switch basics_or(e(7890.0), basics_or(e(7892.0), e(7894.0))) {
                                                                                                    case true:
                                                                                                        Maybe_Maybe.Just(Unicode_Category.LetterUppercase);

                                                                                                    case false:
                                                                                                        Maybe_Maybe.Nothing;
                                                                                                 }
                                                                                                }());
                                                                                         }
                                                                                        }());

                                                                                    case false:
                                                                                        ({ () in return switch basics_or(e(7895.0), basics_or(e(7897.0), basics_or(e(7899.0), basics_or(e(7901.0), e(7903.0))))) {
                                                                                            case true:
                                                                                                Maybe_Maybe.Just(Unicode_Category.LetterLowercase);

                                                                                            case false:
                                                                                                ({ () in return switch basics_or(e(7896.0), basics_or(e(7898.0), basics_or(e(7900.0), e(7902.0)))) {
                                                                                                    case true:
                                                                                                        Maybe_Maybe.Just(Unicode_Category.LetterUppercase);

                                                                                                    case false:
                                                                                                        Maybe_Maybe.Nothing;
                                                                                                 }
                                                                                                }());
                                                                                         }
                                                                                        }());
                                                                                 }
                                                                                }());
                                                                         }
                                                                        }());
                                                                 }
                                                                }());
                                                         }
                                                        }());
                                                 }
                                                }());

                                            case false:
                                                ({ () in return switch l(8273.0) {
                                                    case true:
                                                        ({ () in return switch l(8103.0) {
                                                            case true:
                                                                ({ () in return switch l(7928.0) {
                                                                    case true:
                                                                        ({ () in return switch l(7915.0) {
                                                                            case true:
                                                                                ({ () in return switch basics_or(e(7904.0), basics_or(e(7906.0), basics_or(e(7908.0), basics_or(e(7910.0), basics_or(e(7912.0), e(7914.0)))))) {
                                                                                    case true:
                                                                                        Maybe_Maybe.Just(Unicode_Category.LetterUppercase);

                                                                                    case false:
                                                                                        ({ () in return switch basics_or(e(7905.0), basics_or(e(7907.0), basics_or(e(7909.0), basics_or(e(7911.0), e(7913.0))))) {
                                                                                            case true:
                                                                                                Maybe_Maybe.Just(Unicode_Category.LetterLowercase);

                                                                                            case false:
                                                                                                Maybe_Maybe.Nothing;
                                                                                         }
                                                                                        }());
                                                                                 }
                                                                                }());

                                                                            case false:
                                                                                ({ () in return switch l(7920.0) {
                                                                                    case true:
                                                                                        ({ () in return switch basics_or(e(7915.0), basics_or(e(7917.0), e(7919.0))) {
                                                                                            case true:
                                                                                                Maybe_Maybe.Just(Unicode_Category.LetterLowercase);

                                                                                            case false:
                                                                                                ({ () in return switch basics_or(e(7916.0), e(7918.0)) {
                                                                                                    case true:
                                                                                                        Maybe_Maybe.Just(Unicode_Category.LetterUppercase);

                                                                                                    case false:
                                                                                                        Maybe_Maybe.Nothing;
                                                                                                 }
                                                                                                }());
                                                                                         }
                                                                                        }());

                                                                                    case false:
                                                                                        ({ () in return switch basics_or(e(7920.0), basics_or(e(7922.0), basics_or(e(7924.0), e(7926.0)))) {
                                                                                            case true:
                                                                                                Maybe_Maybe.Just(Unicode_Category.LetterUppercase);

                                                                                            case false:
                                                                                                ({ () in return switch basics_or(e(7921.0), basics_or(e(7923.0), basics_or(e(7925.0), e(7927.0)))) {
                                                                                                    case true:
                                                                                                        Maybe_Maybe.Just(Unicode_Category.LetterLowercase);

                                                                                                    case false:
                                                                                                        Maybe_Maybe.Nothing;
                                                                                                 }
                                                                                                }());
                                                                                         }
                                                                                        }());
                                                                                 }
                                                                                }());
                                                                         }
                                                                        }());

                                                                    case false:
                                                                        ({ () in return switch l(7983.0) {
                                                                            case true:
                                                                                ({ () in return switch l(7933.0) {
                                                                                    case true:
                                                                                        ({ () in return switch basics_or(e(7928.0), basics_or(e(7930.0), e(7932.0))) {
                                                                                            case true:
                                                                                                Maybe_Maybe.Just(Unicode_Category.LetterUppercase);

                                                                                            case false:
                                                                                                ({ () in return switch basics_or(e(7929.0), e(7931.0)) {
                                                                                                    case true:
                                                                                                        Maybe_Maybe.Just(Unicode_Category.LetterLowercase);

                                                                                                    case false:
                                                                                                        Maybe_Maybe.Nothing;
                                                                                                 }
                                                                                                }());
                                                                                         }
                                                                                        }());

                                                                                    case false:
                                                                                        ({ () in return switch basics_or(e(7933.0), basics_or(r(7935.0, 7943.0), basics_or(r(7952.0, 7957.0), r(7968.0, 7975.0)))) {
                                                                                            case true:
                                                                                                Maybe_Maybe.Just(Unicode_Category.LetterLowercase);

                                                                                            case false:
                                                                                                ({ () in return switch basics_or(e(7934.0), basics_or(r(7944.0, 7951.0), basics_or(r(7960.0, 7965.0), r(7976.0, 7982.0)))) {
                                                                                                    case true:
                                                                                                        Maybe_Maybe.Just(Unicode_Category.LetterUppercase);

                                                                                                    case false:
                                                                                                        Maybe_Maybe.Nothing;
                                                                                                 }
                                                                                                }());
                                                                                         }
                                                                                        }());
                                                                                 }
                                                                                }());

                                                                            case false:
                                                                                ({ () in return switch l(8039.0) {
                                                                                    case true:
                                                                                        ({ () in return switch basics_or(e(7983.0), basics_or(r(7992.0, 7999.0), basics_or(r(8008.0, 8013.0), basics_and(basics_eq(basics_modBy(2.0, code), 1.0), r(8025.0, 8031.0))))) {
                                                                                            case true:
                                                                                                Maybe_Maybe.Just(Unicode_Category.LetterUppercase);

                                                                                            case false:
                                                                                                ({ () in return switch basics_or(r(7984.0, 7991.0), basics_or(r(8000.0, 8005.0), basics_or(r(8016.0, 8023.0), r(8032.0, 8038.0)))) {
                                                                                                    case true:
                                                                                                        Maybe_Maybe.Just(Unicode_Category.LetterLowercase);

                                                                                                    case false:
                                                                                                        Maybe_Maybe.Nothing;
                                                                                                 }
                                                                                                }());
                                                                                         }
                                                                                        }());

                                                                                    case false:
                                                                                        ({ () in return switch basics_or(e(8039.0), basics_or(r(8048.0, 8061.0), basics_or(r(8064.0, 8071.0), basics_or(r(8080.0, 8087.0), r(8096.0, 8102.0))))) {
                                                                                            case true:
                                                                                                Maybe_Maybe.Just(Unicode_Category.LetterLowercase);

                                                                                            case false:
                                                                                                ({ () in return switch r(8040.0, 8047.0) {
                                                                                                    case true:
                                                                                                        Maybe_Maybe.Just(Unicode_Category.LetterUppercase);

                                                                                                    case false:
                                                                                                        ({ () in return switch basics_or(r(8072.0, 8079.0), r(8088.0, 8095.0)) {
                                                                                                            case true:
                                                                                                                Maybe_Maybe.Just(Unicode_Category.LetterTitlecase);

                                                                                                            case false:
                                                                                                                Maybe_Maybe.Nothing;
                                                                                                         }
                                                                                                        }());
                                                                                                 }
                                                                                                }());
                                                                                         }
                                                                                        }());
                                                                                 }
                                                                                }());
                                                                         }
                                                                        }());
                                                                 }
                                                                }());

                                                            case false:
                                                                ({ () in return switch l(8191.0) {
                                                                    case true:
                                                                        ({ () in return switch l(8140.0) {
                                                                            case true:
                                                                                ({ () in return switch basics_or(e(8103.0), basics_or(r(8112.0, 8116.0), basics_or(r(8118.0, 8119.0), basics_or(e(8126.0), basics_or(r(8130.0, 8132.0), r(8134.0, 8135.0)))))) {
                                                                                    case true:
                                                                                        Maybe_Maybe.Just(Unicode_Category.LetterLowercase);

                                                                                    case false:
                                                                                        ({ () in return switch basics_or(r(8104.0, 8111.0), e(8124.0)) {
                                                                                            case true:
                                                                                                Maybe_Maybe.Just(Unicode_Category.LetterTitlecase);

                                                                                            case false:
                                                                                                ({ () in return switch basics_or(r(8120.0, 8123.0), r(8136.0, 8139.0)) {
                                                                                                    case true:
                                                                                                        Maybe_Maybe.Just(Unicode_Category.LetterUppercase);

                                                                                                    case false:
                                                                                                        ({ () in return switch basics_or(e(8125.0), r(8127.0, 8129.0)) {
                                                                                                            case true:
                                                                                                                Maybe_Maybe.Just(Unicode_Category.SymbolModifier);

                                                                                                            case false:
                                                                                                                Maybe_Maybe.Nothing;
                                                                                                         }
                                                                                                        }());
                                                                                                 }
                                                                                                }());
                                                                                         }
                                                                                        }());
                                                                                 }
                                                                                }());

                                                                            case false:
                                                                                ({ () in return switch l(8167.0) {
                                                                                    case true:
                                                                                        ({ () in return switch e(8140.0) {
                                                                                            case true:
                                                                                                Maybe_Maybe.Just(Unicode_Category.LetterTitlecase);

                                                                                            case false:
                                                                                                ({ () in return switch basics_or(r(8141.0, 8143.0), r(8157.0, 8159.0)) {
                                                                                                    case true:
                                                                                                        Maybe_Maybe.Just(Unicode_Category.SymbolModifier);

                                                                                                    case false:
                                                                                                        ({ () in return switch basics_or(r(8144.0, 8147.0), basics_or(r(8150.0, 8151.0), r(8160.0, 8166.0))) {
                                                                                                            case true:
                                                                                                                Maybe_Maybe.Just(Unicode_Category.LetterLowercase);

                                                                                                            case false:
                                                                                                                ({ () in return switch r(8152.0, 8155.0) {
                                                                                                                    case true:
                                                                                                                        Maybe_Maybe.Just(Unicode_Category.LetterUppercase);

                                                                                                                    case false:
                                                                                                                        Maybe_Maybe.Nothing;
                                                                                                                 }
                                                                                                                }());
                                                                                                         }
                                                                                                        }());
                                                                                                 }
                                                                                                }());
                                                                                         }
                                                                                        }());

                                                                                    case false:
                                                                                        ({ () in return switch basics_or(e(8167.0), basics_or(r(8178.0, 8180.0), r(8182.0, 8183.0))) {
                                                                                            case true:
                                                                                                Maybe_Maybe.Just(Unicode_Category.LetterLowercase);

                                                                                            case false:
                                                                                                ({ () in return switch basics_or(r(8168.0, 8172.0), r(8184.0, 8187.0)) {
                                                                                                    case true:
                                                                                                        Maybe_Maybe.Just(Unicode_Category.LetterUppercase);

                                                                                                    case false:
                                                                                                        ({ () in return switch basics_or(r(8173.0, 8175.0), r(8189.0, 8190.0)) {
                                                                                                            case true:
                                                                                                                Maybe_Maybe.Just(Unicode_Category.SymbolModifier);

                                                                                                            case false:
                                                                                                                ({ () in return switch e(8188.0) {
                                                                                                                    case true:
                                                                                                                        Maybe_Maybe.Just(Unicode_Category.LetterTitlecase);

                                                                                                                    case false:
                                                                                                                        Maybe_Maybe.Nothing;
                                                                                                                 }
                                                                                                                }());
                                                                                                         }
                                                                                                        }());
                                                                                                 }
                                                                                                }());
                                                                                         }
                                                                                        }());
                                                                                 }
                                                                                }());
                                                                         }
                                                                        }());

                                                                    case false:
                                                                        ({ () in return switch l(8232.0) {
                                                                            case true:
                                                                                ({ () in return switch r(8192.0, 8202.0) {
                                                                                    case true:
                                                                                        Maybe_Maybe.Just(Unicode_Category.SeparatorSpace);

                                                                                    case false:
                                                                                        ({ () in return switch r(8203.0, 8207.0) {
                                                                                            case true:
                                                                                                Maybe_Maybe.Just(Unicode_Category.OtherFormat);

                                                                                            case false:
                                                                                                ({ () in return switch r(8208.0, 8213.0) {
                                                                                                    case true:
                                                                                                        Maybe_Maybe.Just(Unicode_Category.PunctuationDash);

                                                                                                    case false:
                                                                                                        ({ () in return switch basics_or(r(8214.0, 8215.0), r(8224.0, 8231.0)) {
                                                                                                            case true:
                                                                                                                Maybe_Maybe.Just(Unicode_Category.PunctuationOther);

                                                                                                            case false:
                                                                                                                ({ () in return switch basics_or(e(8216.0), basics_or(r(8219.0, 8220.0), e(8223.0))) {
                                                                                                                    case true:
                                                                                                                        Maybe_Maybe.Just(Unicode_Category.PunctuationInitialQuote);

                                                                                                                    case false:
                                                                                                                        ({ () in return switch basics_or(e(8217.0), e(8221.0)) {
                                                                                                                            case true:
                                                                                                                                Maybe_Maybe.Just(Unicode_Category.PunctuationFinalQuote);

                                                                                                                            case false:
                                                                                                                                ({ () in return switch basics_or(e(8218.0), e(8222.0)) {
                                                                                                                                    case true:
                                                                                                                                        Maybe_Maybe.Just(Unicode_Category.PunctuationOpen);

                                                                                                                                    case false:
                                                                                                                                        Maybe_Maybe.Nothing;
                                                                                                                                 }
                                                                                                                                }());
                                                                                                                         }
                                                                                                                        }());
                                                                                                                 }
                                                                                                                }());
                                                                                                         }
                                                                                                        }());
                                                                                                 }
                                                                                                }());
                                                                                         }
                                                                                        }());
                                                                                 }
                                                                                }());

                                                                            case false:
                                                                                ({ () in return switch l(8250.0) {
                                                                                    case true:
                                                                                        ({ () in return switch e(8232.0) {
                                                                                            case true:
                                                                                                Maybe_Maybe.Just(Unicode_Category.SeparatorLine);

                                                                                            case false:
                                                                                                ({ () in return switch e(8233.0) {
                                                                                                    case true:
                                                                                                        Maybe_Maybe.Just(Unicode_Category.SeparatorParagraph);

                                                                                                    case false:
                                                                                                        ({ () in return switch r(8234.0, 8238.0) {
                                                                                                            case true:
                                                                                                                Maybe_Maybe.Just(Unicode_Category.OtherFormat);

                                                                                                            case false:
                                                                                                                ({ () in return switch e(8239.0) {
                                                                                                                    case true:
                                                                                                                        Maybe_Maybe.Just(Unicode_Category.SeparatorSpace);

                                                                                                                    case false:
                                                                                                                        ({ () in return switch r(8240.0, 8248.0) {
                                                                                                                            case true:
                                                                                                                                Maybe_Maybe.Just(Unicode_Category.PunctuationOther);

                                                                                                                            case false:
                                                                                                                                ({ () in return switch e(8249.0) {
                                                                                                                                    case true:
                                                                                                                                        Maybe_Maybe.Just(Unicode_Category.PunctuationInitialQuote);

                                                                                                                                    case false:
                                                                                                                                        Maybe_Maybe.Nothing;
                                                                                                                                 }
                                                                                                                                }());
                                                                                                                         }
                                                                                                                        }());
                                                                                                                 }
                                                                                                                }());
                                                                                                         }
                                                                                                        }());
                                                                                                 }
                                                                                                }());
                                                                                         }
                                                                                        }());

                                                                                    case false:
                                                                                        ({ () in return switch e(8250.0) {
                                                                                            case true:
                                                                                                Maybe_Maybe.Just(Unicode_Category.PunctuationFinalQuote);

                                                                                            case false:
                                                                                                ({ () in return switch basics_or(r(8251.0, 8254.0), basics_or(r(8257.0, 8259.0), r(8263.0, 8272.0))) {
                                                                                                    case true:
                                                                                                        Maybe_Maybe.Just(Unicode_Category.PunctuationOther);

                                                                                                    case false:
                                                                                                        ({ () in return switch r(8255.0, 8256.0) {
                                                                                                            case true:
                                                                                                                Maybe_Maybe.Just(Unicode_Category.PunctuationConnector);

                                                                                                            case false:
                                                                                                                ({ () in return switch e(8260.0) {
                                                                                                                    case true:
                                                                                                                        Maybe_Maybe.Just(Unicode_Category.SymbolMath);

                                                                                                                    case false:
                                                                                                                        ({ () in return switch e(8261.0) {
                                                                                                                            case true:
                                                                                                                                Maybe_Maybe.Just(Unicode_Category.PunctuationOpen);

                                                                                                                            case false:
                                                                                                                                ({ () in return switch e(8262.0) {
                                                                                                                                    case true:
                                                                                                                                        Maybe_Maybe.Just(Unicode_Category.PunctuationClose);

                                                                                                                                    case false:
                                                                                                                                        Maybe_Maybe.Nothing;
                                                                                                                                 }
                                                                                                                                }());
                                                                                                                         }
                                                                                                                        }());
                                                                                                                 }
                                                                                                                }());
                                                                                                         }
                                                                                                        }());
                                                                                                 }
                                                                                                }());
                                                                                         }
                                                                                        }());
                                                                                 }
                                                                                }());
                                                                         }
                                                                        }());
                                                                 }
                                                                }());
                                                         }
                                                        }());

                                                    case false:
                                                        ({ () in return switch l(8495.0) {
                                                            case true:
                                                                ({ () in return switch l(8420.0) {
                                                                    case true:
                                                                        ({ () in return switch l(8316.0) {
                                                                            case true:
                                                                                ({ () in return switch basics_or(e(8273.0), basics_or(e(8275.0), r(8277.0, 8286.0))) {
                                                                                    case true:
                                                                                        Maybe_Maybe.Just(Unicode_Category.PunctuationOther);

                                                                                    case false:
                                                                                        ({ () in return switch basics_or(e(8274.0), r(8314.0, 8315.0)) {
                                                                                            case true:
                                                                                                Maybe_Maybe.Just(Unicode_Category.SymbolMath);

                                                                                            case false:
                                                                                                ({ () in return switch e(8276.0) {
                                                                                                    case true:
                                                                                                        Maybe_Maybe.Just(Unicode_Category.PunctuationConnector);

                                                                                                    case false:
                                                                                                        ({ () in return switch e(8287.0) {
                                                                                                            case true:
                                                                                                                Maybe_Maybe.Just(Unicode_Category.SeparatorSpace);

                                                                                                            case false:
                                                                                                                ({ () in return switch basics_or(r(8288.0, 8292.0), r(8294.0, 8303.0)) {
                                                                                                                    case true:
                                                                                                                        Maybe_Maybe.Just(Unicode_Category.OtherFormat);

                                                                                                                    case false:
                                                                                                                        ({ () in return switch basics_or(e(8304.0), r(8308.0, 8313.0)) {
                                                                                                                            case true:
                                                                                                                                Maybe_Maybe.Just(Unicode_Category.NumberOther);

                                                                                                                            case false:
                                                                                                                                ({ () in return switch e(8305.0) {
                                                                                                                                    case true:
                                                                                                                                        Maybe_Maybe.Just(Unicode_Category.LetterModifier);

                                                                                                                                    case false:
                                                                                                                                        Maybe_Maybe.Nothing;
                                                                                                                                 }
                                                                                                                                }());
                                                                                                                         }
                                                                                                                        }());
                                                                                                                 }
                                                                                                                }());
                                                                                                         }
                                                                                                        }());
                                                                                                 }
                                                                                                }());
                                                                                         }
                                                                                        }());
                                                                                 }
                                                                                }());

                                                                            case false:
                                                                                ({ () in return switch l(8333.0) {
                                                                                    case true:
                                                                                        ({ () in return switch basics_or(e(8316.0), r(8330.0, 8332.0)) {
                                                                                            case true:
                                                                                                Maybe_Maybe.Just(Unicode_Category.SymbolMath);

                                                                                            case false:
                                                                                                ({ () in return switch e(8317.0) {
                                                                                                    case true:
                                                                                                        Maybe_Maybe.Just(Unicode_Category.PunctuationOpen);

                                                                                                    case false:
                                                                                                        ({ () in return switch e(8318.0) {
                                                                                                            case true:
                                                                                                                Maybe_Maybe.Just(Unicode_Category.PunctuationClose);

                                                                                                            case false:
                                                                                                                ({ () in return switch e(8319.0) {
                                                                                                                    case true:
                                                                                                                        Maybe_Maybe.Just(Unicode_Category.LetterModifier);

                                                                                                                    case false:
                                                                                                                        ({ () in return switch r(8320.0, 8329.0) {
                                                                                                                            case true:
                                                                                                                                Maybe_Maybe.Just(Unicode_Category.NumberOther);

                                                                                                                            case false:
                                                                                                                                Maybe_Maybe.Nothing;
                                                                                                                         }
                                                                                                                        }());
                                                                                                                 }
                                                                                                                }());
                                                                                                         }
                                                                                                        }());
                                                                                                 }
                                                                                                }());
                                                                                         }
                                                                                        }());

                                                                                    case false:
                                                                                        ({ () in return switch e(8333.0) {
                                                                                            case true:
                                                                                                Maybe_Maybe.Just(Unicode_Category.PunctuationOpen);

                                                                                            case false:
                                                                                                ({ () in return switch e(8334.0) {
                                                                                                    case true:
                                                                                                        Maybe_Maybe.Just(Unicode_Category.PunctuationClose);

                                                                                                    case false:
                                                                                                        ({ () in return switch r(8336.0, 8348.0) {
                                                                                                            case true:
                                                                                                                Maybe_Maybe.Just(Unicode_Category.LetterModifier);

                                                                                                            case false:
                                                                                                                ({ () in return switch r(8352.0, 8384.0) {
                                                                                                                    case true:
                                                                                                                        Maybe_Maybe.Just(Unicode_Category.SymbolCurrency);

                                                                                                                    case false:
                                                                                                                        ({ () in return switch basics_or(r(8400.0, 8412.0), e(8417.0)) {
                                                                                                                            case true:
                                                                                                                                Maybe_Maybe.Just(Unicode_Category.MarkNonSpacing);

                                                                                                                            case false:
                                                                                                                                ({ () in return switch basics_or(r(8413.0, 8416.0), r(8418.0, 8419.0)) {
                                                                                                                                    case true:
                                                                                                                                        Maybe_Maybe.Just(Unicode_Category.MarkEnclosing);

                                                                                                                                    case false:
                                                                                                                                        Maybe_Maybe.Nothing;
                                                                                                                                 }
                                                                                                                                }());
                                                                                                                         }
                                                                                                                        }());
                                                                                                                 }
                                                                                                                }());
                                                                                                         }
                                                                                                        }());
                                                                                                 }
                                                                                                }());
                                                                                         }
                                                                                        }());
                                                                                 }
                                                                                }());
                                                                         }
                                                                        }());

                                                                    case false:
                                                                        ({ () in return switch l(8468.0) {
                                                                            case true:
                                                                                ({ () in return switch e(8420.0) {
                                                                                    case true:
                                                                                        Maybe_Maybe.Just(Unicode_Category.MarkEnclosing);

                                                                                    case false:
                                                                                        ({ () in return switch r(8421.0, 8432.0) {
                                                                                            case true:
                                                                                                Maybe_Maybe.Just(Unicode_Category.MarkNonSpacing);

                                                                                            case false:
                                                                                                ({ () in return switch basics_or(r(8448.0, 8449.0), basics_or(r(8451.0, 8454.0), r(8456.0, 8457.0))) {
                                                                                                    case true:
                                                                                                        Maybe_Maybe.Just(Unicode_Category.SymbolOther);

                                                                                                    case false:
                                                                                                        ({ () in return switch basics_or(e(8450.0), basics_or(e(8455.0), basics_or(r(8459.0, 8461.0), r(8464.0, 8466.0)))) {
                                                                                                            case true:
                                                                                                                Maybe_Maybe.Just(Unicode_Category.LetterUppercase);

                                                                                                            case false:
                                                                                                                ({ () in return switch basics_or(e(8458.0), basics_or(r(8462.0, 8463.0), e(8467.0))) {
                                                                                                                    case true:
                                                                                                                        Maybe_Maybe.Just(Unicode_Category.LetterLowercase);

                                                                                                                    case false:
                                                                                                                        Maybe_Maybe.Nothing;
                                                                                                                 }
                                                                                                                }());
                                                                                                         }
                                                                                                        }());
                                                                                                 }
                                                                                                }());
                                                                                         }
                                                                                        }());
                                                                                 }
                                                                                }());

                                                                            case false:
                                                                                ({ () in return switch l(8484.0) {
                                                                                    case true:
                                                                                        ({ () in return switch basics_or(e(8468.0), basics_or(r(8470.0, 8471.0), r(8478.0, 8483.0))) {
                                                                                            case true:
                                                                                                Maybe_Maybe.Just(Unicode_Category.SymbolOther);

                                                                                            case false:
                                                                                                ({ () in return switch basics_or(e(8469.0), r(8473.0, 8477.0)) {
                                                                                                    case true:
                                                                                                        Maybe_Maybe.Just(Unicode_Category.LetterUppercase);

                                                                                                    case false:
                                                                                                        ({ () in return switch e(8472.0) {
                                                                                                            case true:
                                                                                                                Maybe_Maybe.Just(Unicode_Category.SymbolMath);

                                                                                                            case false:
                                                                                                                Maybe_Maybe.Nothing;
                                                                                                         }
                                                                                                        }());
                                                                                                 }
                                                                                                }());
                                                                                         }
                                                                                        }());

                                                                                    case false:
                                                                                        ({ () in return switch basics_or(e(8484.0), basics_or(e(8486.0), basics_or(e(8488.0), r(8490.0, 8493.0)))) {
                                                                                            case true:
                                                                                                Maybe_Maybe.Just(Unicode_Category.LetterUppercase);

                                                                                            case false:
                                                                                                ({ () in return switch basics_or(e(8485.0), basics_or(e(8487.0), basics_or(e(8489.0), e(8494.0)))) {
                                                                                                    case true:
                                                                                                        Maybe_Maybe.Just(Unicode_Category.SymbolOther);

                                                                                                    case false:
                                                                                                        Maybe_Maybe.Nothing;
                                                                                                 }
                                                                                                }());
                                                                                         }
                                                                                        }());
                                                                                 }
                                                                                }());
                                                                         }
                                                                        }());
                                                                 }
                                                                }());

                                                            case false:
                                                                ({ () in return switch l(8603.0) {
                                                                    case true:
                                                                        ({ () in return switch l(8523.0) {
                                                                            case true:
                                                                                ({ () in return switch basics_or(e(8495.0), basics_or(e(8500.0), basics_or(e(8505.0), basics_or(r(8508.0, 8509.0), r(8518.0, 8521.0))))) {
                                                                                    case true:
                                                                                        Maybe_Maybe.Just(Unicode_Category.LetterLowercase);

                                                                                    case false:
                                                                                        ({ () in return switch basics_or(r(8496.0, 8499.0), basics_or(r(8510.0, 8511.0), e(8517.0))) {
                                                                                            case true:
                                                                                                Maybe_Maybe.Just(Unicode_Category.LetterUppercase);

                                                                                            case false:
                                                                                                ({ () in return switch r(8501.0, 8504.0) {
                                                                                                    case true:
                                                                                                        Maybe_Maybe.Just(Unicode_Category.LetterOther);

                                                                                                    case false:
                                                                                                        ({ () in return switch basics_or(r(8506.0, 8507.0), e(8522.0)) {
                                                                                                            case true:
                                                                                                                Maybe_Maybe.Just(Unicode_Category.SymbolOther);

                                                                                                            case false:
                                                                                                                ({ () in return switch r(8512.0, 8516.0) {
                                                                                                                    case true:
                                                                                                                        Maybe_Maybe.Just(Unicode_Category.SymbolMath);

                                                                                                                    case false:
                                                                                                                        Maybe_Maybe.Nothing;
                                                                                                                 }
                                                                                                                }());
                                                                                                         }
                                                                                                        }());
                                                                                                 }
                                                                                                }());
                                                                                         }
                                                                                        }());
                                                                                 }
                                                                                }());

                                                                            case false:
                                                                                ({ () in return switch l(8579.0) {
                                                                                    case true:
                                                                                        ({ () in return switch e(8523.0) {
                                                                                            case true:
                                                                                                Maybe_Maybe.Just(Unicode_Category.SymbolMath);

                                                                                            case false:
                                                                                                ({ () in return switch basics_or(r(8524.0, 8525.0), e(8527.0)) {
                                                                                                    case true:
                                                                                                        Maybe_Maybe.Just(Unicode_Category.SymbolOther);

                                                                                                    case false:
                                                                                                        ({ () in return switch e(8526.0) {
                                                                                                            case true:
                                                                                                                Maybe_Maybe.Just(Unicode_Category.LetterLowercase);

                                                                                                            case false:
                                                                                                                ({ () in return switch r(8528.0, 8543.0) {
                                                                                                                    case true:
                                                                                                                        Maybe_Maybe.Just(Unicode_Category.NumberOther);

                                                                                                                    case false:
                                                                                                                        ({ () in return switch r(8544.0, 8578.0) {
                                                                                                                            case true:
                                                                                                                                Maybe_Maybe.Just(Unicode_Category.NumberLetter);

                                                                                                                            case false:
                                                                                                                                Maybe_Maybe.Nothing;
                                                                                                                         }
                                                                                                                        }());
                                                                                                                 }
                                                                                                                }());
                                                                                                         }
                                                                                                        }());
                                                                                                 }
                                                                                                }());
                                                                                         }
                                                                                        }());

                                                                                    case false:
                                                                                        ({ () in return switch e(8579.0) {
                                                                                            case true:
                                                                                                Maybe_Maybe.Just(Unicode_Category.LetterUppercase);

                                                                                            case false:
                                                                                                ({ () in return switch e(8580.0) {
                                                                                                    case true:
                                                                                                        Maybe_Maybe.Just(Unicode_Category.LetterLowercase);

                                                                                                    case false:
                                                                                                        ({ () in return switch r(8581.0, 8584.0) {
                                                                                                            case true:
                                                                                                                Maybe_Maybe.Just(Unicode_Category.NumberLetter);

                                                                                                            case false:
                                                                                                                ({ () in return switch e(8585.0) {
                                                                                                                    case true:
                                                                                                                        Maybe_Maybe.Just(Unicode_Category.NumberOther);

                                                                                                                    case false:
                                                                                                                        ({ () in return switch basics_or(r(8586.0, 8587.0), r(8597.0, 8601.0)) {
                                                                                                                            case true:
                                                                                                                                Maybe_Maybe.Just(Unicode_Category.SymbolOther);

                                                                                                                            case false:
                                                                                                                                ({ () in return switch basics_or(r(8592.0, 8596.0), e(8602.0)) {
                                                                                                                                    case true:
                                                                                                                                        Maybe_Maybe.Just(Unicode_Category.SymbolMath);

                                                                                                                                    case false:
                                                                                                                                        Maybe_Maybe.Nothing;
                                                                                                                                 }
                                                                                                                                }());
                                                                                                                         }
                                                                                                                        }());
                                                                                                                 }
                                                                                                                }());
                                                                                                         }
                                                                                                        }());
                                                                                                 }
                                                                                                }());
                                                                                         }
                                                                                        }());
                                                                                 }
                                                                                }());
                                                                         }
                                                                        }());

                                                                    case false:
                                                                        ({ () in return switch l(8659.0) {
                                                                            case true:
                                                                                ({ () in return switch l(8613.0) {
                                                                                    case true:
                                                                                        ({ () in return switch basics_or(e(8603.0), basics_or(e(8608.0), e(8611.0))) {
                                                                                            case true:
                                                                                                Maybe_Maybe.Just(Unicode_Category.SymbolMath);

                                                                                            case false:
                                                                                                ({ () in return switch basics_or(r(8604.0, 8607.0), basics_or(r(8609.0, 8610.0), e(8612.0))) {
                                                                                                    case true:
                                                                                                        Maybe_Maybe.Just(Unicode_Category.SymbolOther);

                                                                                                    case false:
                                                                                                        Maybe_Maybe.Nothing;
                                                                                                 }
                                                                                                }());
                                                                                         }
                                                                                        }());

                                                                                    case false:
                                                                                        ({ () in return switch basics_or(e(8613.0), basics_or(r(8615.0, 8621.0), basics_or(r(8623.0, 8653.0), r(8656.0, 8657.0)))) {
                                                                                            case true:
                                                                                                Maybe_Maybe.Just(Unicode_Category.SymbolOther);

                                                                                            case false:
                                                                                                ({ () in return switch basics_or(e(8614.0), basics_or(e(8622.0), basics_or(r(8654.0, 8655.0), e(8658.0)))) {
                                                                                                    case true:
                                                                                                        Maybe_Maybe.Just(Unicode_Category.SymbolMath);

                                                                                                    case false:
                                                                                                        Maybe_Maybe.Nothing;
                                                                                                 }
                                                                                                }());
                                                                                         }
                                                                                        }());
                                                                                 }
                                                                                }());

                                                                            case false:
                                                                                ({ () in return switch l(8969.0) {
                                                                                    case true:
                                                                                        ({ () in return switch basics_or(e(8659.0), basics_or(r(8661.0, 8691.0), r(8960.0, 8967.0))) {
                                                                                            case true:
                                                                                                Maybe_Maybe.Just(Unicode_Category.SymbolOther);

                                                                                            case false:
                                                                                                ({ () in return switch basics_or(e(8660.0), r(8692.0, 8959.0)) {
                                                                                                    case true:
                                                                                                        Maybe_Maybe.Just(Unicode_Category.SymbolMath);

                                                                                                    case false:
                                                                                                        ({ () in return switch e(8968.0) {
                                                                                                            case true:
                                                                                                                Maybe_Maybe.Just(Unicode_Category.PunctuationOpen);

                                                                                                            case false:
                                                                                                                Maybe_Maybe.Nothing;
                                                                                                         }
                                                                                                        }());
                                                                                                 }
                                                                                                }());
                                                                                         }
                                                                                        }());

                                                                                    case false:
                                                                                        ({ () in return switch basics_or(e(8969.0), basics_or(e(8971.0), e(9002.0))) {
                                                                                            case true:
                                                                                                Maybe_Maybe.Just(Unicode_Category.PunctuationClose);

                                                                                            case false:
                                                                                                ({ () in return switch basics_or(e(8970.0), e(9001.0)) {
                                                                                                    case true:
                                                                                                        Maybe_Maybe.Just(Unicode_Category.PunctuationOpen);

                                                                                                    case false:
                                                                                                        ({ () in return switch basics_or(r(8972.0, 8991.0), basics_or(r(8994.0, 9000.0), r(9003.0, 9083.0))) {
                                                                                                            case true:
                                                                                                                Maybe_Maybe.Just(Unicode_Category.SymbolOther);

                                                                                                            case false:
                                                                                                                ({ () in return switch r(8992.0, 8993.0) {
                                                                                                                    case true:
                                                                                                                        Maybe_Maybe.Just(Unicode_Category.SymbolMath);

                                                                                                                    case false:
                                                                                                                        Maybe_Maybe.Nothing;
                                                                                                                 }
                                                                                                                }());
                                                                                                         }
                                                                                                        }());
                                                                                                 }
                                                                                                }());
                                                                                         }
                                                                                        }());
                                                                                 }
                                                                                }());
                                                                         }
                                                                        }());
                                                                 }
                                                                }());
                                                         }
                                                        }());
                                                 }
                                                }());
                                         }
                                        }());
                                 }
                                }());
                         }
                        }());

                    case false:
                        ({ () in return switch l(65103.0) {
                            case true:
                                ({ () in return switch l(42587.0) {
                                    case true:
                                        ({ () in return switch l(11483.0) {
                                            case true:
                                                ({ () in return switch l(11370.0) {
                                                    case true:
                                                        ({ () in return switch l(10223.0) {
                                                            case true:
                                                                ({ () in return switch l(10092.0) {
                                                                    case true:
                                                                        ({ () in return switch l(9654.0) {
                                                                            case true:
                                                                                ({ () in return switch basics_or(e(9084.0), basics_or(r(9115.0, 9139.0), r(9180.0, 9185.0))) {
                                                                                    case true:
                                                                                        Maybe_Maybe.Just(Unicode_Category.SymbolMath);

                                                                                    case false:
                                                                                        ({ () in return switch basics_or(r(9085.0, 9114.0), basics_or(r(9140.0, 9179.0), basics_or(r(9186.0, 9254.0), basics_or(r(9280.0, 9290.0), basics_or(r(9372.0, 9449.0), r(9472.0, 9653.0)))))) {
                                                                                            case true:
                                                                                                Maybe_Maybe.Just(Unicode_Category.SymbolOther);

                                                                                            case false:
                                                                                                ({ () in return switch basics_or(r(9312.0, 9371.0), r(9450.0, 9471.0)) {
                                                                                                    case true:
                                                                                                        Maybe_Maybe.Just(Unicode_Category.NumberOther);

                                                                                                    case false:
                                                                                                        Maybe_Maybe.Nothing;
                                                                                                 }
                                                                                                }());
                                                                                         }
                                                                                        }());
                                                                                 }
                                                                                }());

                                                                            case false:
                                                                                ({ () in return switch l(9727.0) {
                                                                                    case true:
                                                                                        ({ () in return switch basics_or(e(9654.0), basics_or(r(9656.0, 9664.0), r(9666.0, 9719.0))) {
                                                                                            case true:
                                                                                                Maybe_Maybe.Just(Unicode_Category.SymbolOther);

                                                                                            case false:
                                                                                                ({ () in return switch basics_or(e(9655.0), basics_or(e(9665.0), r(9720.0, 9726.0))) {
                                                                                                    case true:
                                                                                                        Maybe_Maybe.Just(Unicode_Category.SymbolMath);

                                                                                                    case false:
                                                                                                        Maybe_Maybe.Nothing;
                                                                                                 }
                                                                                                }());
                                                                                         }
                                                                                        }());

                                                                                    case false:
                                                                                        ({ () in return switch basics_or(e(9727.0), e(9839.0)) {
                                                                                            case true:
                                                                                                Maybe_Maybe.Just(Unicode_Category.SymbolMath);

                                                                                            case false:
                                                                                                ({ () in return switch basics_or(r(9728.0, 9838.0), r(9840.0, 10087.0)) {
                                                                                                    case true:
                                                                                                        Maybe_Maybe.Just(Unicode_Category.SymbolOther);

                                                                                                    case false:
                                                                                                        ({ () in return switch basics_or(e(10088.0), e(10090.0)) {
                                                                                                            case true:
                                                                                                                Maybe_Maybe.Just(Unicode_Category.PunctuationOpen);

                                                                                                            case false:
                                                                                                                ({ () in return switch basics_or(e(10089.0), e(10091.0)) {
                                                                                                                    case true:
                                                                                                                        Maybe_Maybe.Just(Unicode_Category.PunctuationClose);

                                                                                                                    case false:
                                                                                                                        Maybe_Maybe.Nothing;
                                                                                                                 }
                                                                                                                }());
                                                                                                         }
                                                                                                        }());
                                                                                                 }
                                                                                                }());
                                                                                         }
                                                                                        }());
                                                                                 }
                                                                                }());
                                                                         }
                                                                        }());

                                                                    case false:
                                                                        ({ () in return switch l(10175.0) {
                                                                            case true:
                                                                                ({ () in return switch basics_or(e(10092.0), basics_or(e(10094.0), basics_or(e(10096.0), basics_or(e(10098.0), e(10100.0))))) {
                                                                                    case true:
                                                                                        Maybe_Maybe.Just(Unicode_Category.PunctuationOpen);

                                                                                    case false:
                                                                                        ({ () in return switch basics_or(e(10093.0), basics_or(e(10095.0), basics_or(e(10097.0), basics_or(e(10099.0), e(10101.0))))) {
                                                                                            case true:
                                                                                                Maybe_Maybe.Just(Unicode_Category.PunctuationClose);

                                                                                            case false:
                                                                                                ({ () in return switch r(10102.0, 10131.0) {
                                                                                                    case true:
                                                                                                        Maybe_Maybe.Just(Unicode_Category.NumberOther);

                                                                                                    case false:
                                                                                                        ({ () in return switch r(10132.0, 10174.0) {
                                                                                                            case true:
                                                                                                                Maybe_Maybe.Just(Unicode_Category.SymbolOther);

                                                                                                            case false:
                                                                                                                Maybe_Maybe.Nothing;
                                                                                                         }
                                                                                                        }());
                                                                                                 }
                                                                                                }());
                                                                                         }
                                                                                        }());
                                                                                 }
                                                                                }());

                                                                            case false:
                                                                                ({ () in return switch l(10215.0) {
                                                                                    case true:
                                                                                        ({ () in return switch e(10175.0) {
                                                                                            case true:
                                                                                                Maybe_Maybe.Just(Unicode_Category.SymbolOther);

                                                                                            case false:
                                                                                                ({ () in return switch basics_or(r(10176.0, 10180.0), r(10183.0, 10213.0)) {
                                                                                                    case true:
                                                                                                        Maybe_Maybe.Just(Unicode_Category.SymbolMath);

                                                                                                    case false:
                                                                                                        ({ () in return switch basics_or(e(10181.0), e(10214.0)) {
                                                                                                            case true:
                                                                                                                Maybe_Maybe.Just(Unicode_Category.PunctuationOpen);

                                                                                                            case false:
                                                                                                                ({ () in return switch e(10182.0) {
                                                                                                                    case true:
                                                                                                                        Maybe_Maybe.Just(Unicode_Category.PunctuationClose);

                                                                                                                    case false:
                                                                                                                        Maybe_Maybe.Nothing;
                                                                                                                 }
                                                                                                                }());
                                                                                                         }
                                                                                                        }());
                                                                                                 }
                                                                                                }());
                                                                                         }
                                                                                        }());

                                                                                    case false:
                                                                                        ({ () in return switch basics_or(e(10215.0), basics_or(e(10217.0), basics_or(e(10219.0), e(10221.0)))) {
                                                                                            case true:
                                                                                                Maybe_Maybe.Just(Unicode_Category.PunctuationClose);

                                                                                            case false:
                                                                                                ({ () in return switch basics_or(e(10216.0), basics_or(e(10218.0), basics_or(e(10220.0), e(10222.0)))) {
                                                                                                    case true:
                                                                                                        Maybe_Maybe.Just(Unicode_Category.PunctuationOpen);

                                                                                                    case false:
                                                                                                        Maybe_Maybe.Nothing;
                                                                                                 }
                                                                                                }());
                                                                                         }
                                                                                        }());
                                                                                 }
                                                                                }());
                                                                         }
                                                                        }());
                                                                 }
                                                                }());

                                                            case false:
                                                                ({ () in return switch l(10647.0) {
                                                                    case true:
                                                                        ({ () in return switch l(10634.0) {
                                                                            case true:
                                                                                ({ () in return switch basics_or(e(10223.0), basics_or(e(10628.0), basics_or(e(10630.0), e(10632.0)))) {
                                                                                    case true:
                                                                                        Maybe_Maybe.Just(Unicode_Category.PunctuationClose);

                                                                                    case false:
                                                                                        ({ () in return switch basics_or(r(10224.0, 10239.0), r(10496.0, 10626.0)) {
                                                                                            case true:
                                                                                                Maybe_Maybe.Just(Unicode_Category.SymbolMath);

                                                                                            case false:
                                                                                                ({ () in return switch r(10240.0, 10495.0) {
                                                                                                    case true:
                                                                                                        Maybe_Maybe.Just(Unicode_Category.SymbolOther);

                                                                                                    case false:
                                                                                                        ({ () in return switch basics_or(e(10627.0), basics_or(e(10629.0), basics_or(e(10631.0), e(10633.0)))) {
                                                                                                            case true:
                                                                                                                Maybe_Maybe.Just(Unicode_Category.PunctuationOpen);

                                                                                                            case false:
                                                                                                                Maybe_Maybe.Nothing;
                                                                                                         }
                                                                                                        }());
                                                                                                 }
                                                                                                }());
                                                                                         }
                                                                                        }());
                                                                                 }
                                                                                }());

                                                                            case false:
                                                                                ({ () in return switch l(10639.0) {
                                                                                    case true:
                                                                                        ({ () in return switch basics_or(e(10634.0), basics_or(e(10636.0), e(10638.0))) {
                                                                                            case true:
                                                                                                Maybe_Maybe.Just(Unicode_Category.PunctuationClose);

                                                                                            case false:
                                                                                                ({ () in return switch basics_or(e(10635.0), e(10637.0)) {
                                                                                                    case true:
                                                                                                        Maybe_Maybe.Just(Unicode_Category.PunctuationOpen);

                                                                                                    case false:
                                                                                                        Maybe_Maybe.Nothing;
                                                                                                 }
                                                                                                }());
                                                                                         }
                                                                                        }());

                                                                                    case false:
                                                                                        ({ () in return switch basics_or(e(10639.0), basics_or(e(10641.0), basics_or(e(10643.0), e(10645.0)))) {
                                                                                            case true:
                                                                                                Maybe_Maybe.Just(Unicode_Category.PunctuationOpen);

                                                                                            case false:
                                                                                                ({ () in return switch basics_or(e(10640.0), basics_or(e(10642.0), basics_or(e(10644.0), e(10646.0)))) {
                                                                                                    case true:
                                                                                                        Maybe_Maybe.Just(Unicode_Category.PunctuationClose);

                                                                                                    case false:
                                                                                                        Maybe_Maybe.Nothing;
                                                                                                 }
                                                                                                }());
                                                                                         }
                                                                                        }());
                                                                                 }
                                                                                }());
                                                                         }
                                                                        }());

                                                                    case false:
                                                                        ({ () in return switch l(11076.0) {
                                                                            case true:
                                                                                ({ () in return switch l(10714.0) {
                                                                                    case true:
                                                                                        ({ () in return switch basics_or(e(10647.0), e(10712.0)) {
                                                                                            case true:
                                                                                                Maybe_Maybe.Just(Unicode_Category.PunctuationOpen);

                                                                                            case false:
                                                                                                ({ () in return switch basics_or(e(10648.0), e(10713.0)) {
                                                                                                    case true:
                                                                                                        Maybe_Maybe.Just(Unicode_Category.PunctuationClose);

                                                                                                    case false:
                                                                                                        ({ () in return switch r(10649.0, 10711.0) {
                                                                                                            case true:
                                                                                                                Maybe_Maybe.Just(Unicode_Category.SymbolMath);

                                                                                                            case false:
                                                                                                                Maybe_Maybe.Nothing;
                                                                                                         }
                                                                                                        }());
                                                                                                 }
                                                                                                }());
                                                                                         }
                                                                                        }());

                                                                                    case false:
                                                                                        ({ () in return switch basics_or(e(10714.0), e(10748.0)) {
                                                                                            case true:
                                                                                                Maybe_Maybe.Just(Unicode_Category.PunctuationOpen);

                                                                                            case false:
                                                                                                ({ () in return switch basics_or(e(10715.0), e(10749.0)) {
                                                                                                    case true:
                                                                                                        Maybe_Maybe.Just(Unicode_Category.PunctuationClose);

                                                                                                    case false:
                                                                                                        ({ () in return switch basics_or(r(10716.0, 10747.0), basics_or(r(10750.0, 11007.0), r(11056.0, 11075.0))) {
                                                                                                            case true:
                                                                                                                Maybe_Maybe.Just(Unicode_Category.SymbolMath);

                                                                                                            case false:
                                                                                                                ({ () in return switch r(11008.0, 11055.0) {
                                                                                                                    case true:
                                                                                                                        Maybe_Maybe.Just(Unicode_Category.SymbolOther);

                                                                                                                    case false:
                                                                                                                        Maybe_Maybe.Nothing;
                                                                                                                 }
                                                                                                                }());
                                                                                                         }
                                                                                                        }());
                                                                                                 }
                                                                                                }());
                                                                                         }
                                                                                        }());
                                                                                 }
                                                                                }());

                                                                            case false:
                                                                                ({ () in return switch l(11311.0) {
                                                                                    case true:
                                                                                        ({ () in return switch basics_or(e(11076.0), r(11079.0, 11084.0)) {
                                                                                            case true:
                                                                                                Maybe_Maybe.Just(Unicode_Category.SymbolMath);

                                                                                            case false:
                                                                                                ({ () in return switch basics_or(r(11077.0, 11078.0), basics_or(r(11085.0, 11123.0), basics_or(r(11126.0, 11157.0), r(11159.0, 11263.0)))) {
                                                                                                    case true:
                                                                                                        Maybe_Maybe.Just(Unicode_Category.SymbolOther);

                                                                                                    case false:
                                                                                                        ({ () in return switch r(11264.0, 11310.0) {
                                                                                                            case true:
                                                                                                                Maybe_Maybe.Just(Unicode_Category.LetterUppercase);

                                                                                                            case false:
                                                                                                                Maybe_Maybe.Nothing;
                                                                                                         }
                                                                                                        }());
                                                                                                 }
                                                                                                }());
                                                                                         }
                                                                                        }());

                                                                                    case false:
                                                                                        ({ () in return switch basics_or(e(11311.0), basics_or(e(11360.0), basics_or(r(11362.0, 11364.0), basics_or(e(11367.0), e(11369.0))))) {
                                                                                            case true:
                                                                                                Maybe_Maybe.Just(Unicode_Category.LetterUppercase);

                                                                                            case false:
                                                                                                ({ () in return switch basics_or(r(11312.0, 11359.0), basics_or(e(11361.0), basics_or(r(11365.0, 11366.0), e(11368.0)))) {
                                                                                                    case true:
                                                                                                        Maybe_Maybe.Just(Unicode_Category.LetterLowercase);

                                                                                                    case false:
                                                                                                        Maybe_Maybe.Nothing;
                                                                                                 }
                                                                                                }());
                                                                                         }
                                                                                        }());
                                                                                 }
                                                                                }());
                                                                         }
                                                                        }());
                                                                 }
                                                                }());
                                                         }
                                                        }());

                                                    case false:
                                                        ({ () in return switch l(11431.0) {
                                                            case true:
                                                                ({ () in return switch l(11405.0) {
                                                                    case true:
                                                                        ({ () in return switch l(11392.0) {
                                                                            case true:
                                                                                ({ () in return switch basics_or(e(11370.0), basics_or(e(11372.0), basics_or(e(11377.0), basics_or(r(11379.0, 11380.0), r(11382.0, 11387.0))))) {
                                                                                    case true:
                                                                                        Maybe_Maybe.Just(Unicode_Category.LetterLowercase);

                                                                                    case false:
                                                                                        ({ () in return switch basics_or(e(11371.0), basics_or(r(11373.0, 11376.0), basics_or(e(11378.0), basics_or(e(11381.0), r(11390.0, 11391.0))))) {
                                                                                            case true:
                                                                                                Maybe_Maybe.Just(Unicode_Category.LetterUppercase);

                                                                                            case false:
                                                                                                ({ () in return switch r(11388.0, 11389.0) {
                                                                                                    case true:
                                                                                                        Maybe_Maybe.Just(Unicode_Category.LetterModifier);

                                                                                                    case false:
                                                                                                        Maybe_Maybe.Nothing;
                                                                                                 }
                                                                                                }());
                                                                                         }
                                                                                        }());
                                                                                 }
                                                                                }());

                                                                            case false:
                                                                                ({ () in return switch l(11397.0) {
                                                                                    case true:
                                                                                        ({ () in return switch basics_or(e(11392.0), basics_or(e(11394.0), e(11396.0))) {
                                                                                            case true:
                                                                                                Maybe_Maybe.Just(Unicode_Category.LetterUppercase);

                                                                                            case false:
                                                                                                ({ () in return switch basics_or(e(11393.0), e(11395.0)) {
                                                                                                    case true:
                                                                                                        Maybe_Maybe.Just(Unicode_Category.LetterLowercase);

                                                                                                    case false:
                                                                                                        Maybe_Maybe.Nothing;
                                                                                                 }
                                                                                                }());
                                                                                         }
                                                                                        }());

                                                                                    case false:
                                                                                        ({ () in return switch basics_or(e(11397.0), basics_or(e(11399.0), basics_or(e(11401.0), e(11403.0)))) {
                                                                                            case true:
                                                                                                Maybe_Maybe.Just(Unicode_Category.LetterLowercase);

                                                                                            case false:
                                                                                                ({ () in return switch basics_or(e(11398.0), basics_or(e(11400.0), basics_or(e(11402.0), e(11404.0)))) {
                                                                                                    case true:
                                                                                                        Maybe_Maybe.Just(Unicode_Category.LetterUppercase);

                                                                                                    case false:
                                                                                                        Maybe_Maybe.Nothing;
                                                                                                 }
                                                                                                }());
                                                                                         }
                                                                                        }());
                                                                                 }
                                                                                }());
                                                                         }
                                                                        }());

                                                                    case false:
                                                                        ({ () in return switch l(11417.0) {
                                                                            case true:
                                                                                ({ () in return switch basics_or(e(11405.0), basics_or(e(11407.0), basics_or(e(11409.0), basics_or(e(11411.0), basics_or(e(11413.0), e(11415.0)))))) {
                                                                                    case true:
                                                                                        Maybe_Maybe.Just(Unicode_Category.LetterLowercase);

                                                                                    case false:
                                                                                        ({ () in return switch basics_or(e(11406.0), basics_or(e(11408.0), basics_or(e(11410.0), basics_or(e(11412.0), basics_or(e(11414.0), e(11416.0)))))) {
                                                                                            case true:
                                                                                                Maybe_Maybe.Just(Unicode_Category.LetterUppercase);

                                                                                            case false:
                                                                                                Maybe_Maybe.Nothing;
                                                                                         }
                                                                                        }());
                                                                                 }
                                                                                }());

                                                                            case false:
                                                                                ({ () in return switch l(11423.0) {
                                                                                    case true:
                                                                                        ({ () in return switch basics_or(e(11417.0), basics_or(e(11419.0), e(11421.0))) {
                                                                                            case true:
                                                                                                Maybe_Maybe.Just(Unicode_Category.LetterLowercase);

                                                                                            case false:
                                                                                                ({ () in return switch basics_or(e(11418.0), basics_or(e(11420.0), e(11422.0))) {
                                                                                                    case true:
                                                                                                        Maybe_Maybe.Just(Unicode_Category.LetterUppercase);

                                                                                                    case false:
                                                                                                        Maybe_Maybe.Nothing;
                                                                                                 }
                                                                                                }());
                                                                                         }
                                                                                        }());

                                                                                    case false:
                                                                                        ({ () in return switch basics_or(e(11423.0), basics_or(e(11425.0), basics_or(e(11427.0), e(11429.0)))) {
                                                                                            case true:
                                                                                                Maybe_Maybe.Just(Unicode_Category.LetterLowercase);

                                                                                            case false:
                                                                                                ({ () in return switch basics_or(e(11424.0), basics_or(e(11426.0), basics_or(e(11428.0), e(11430.0)))) {
                                                                                                    case true:
                                                                                                        Maybe_Maybe.Just(Unicode_Category.LetterUppercase);

                                                                                                    case false:
                                                                                                        Maybe_Maybe.Nothing;
                                                                                                 }
                                                                                                }());
                                                                                         }
                                                                                        }());
                                                                                 }
                                                                                }());
                                                                         }
                                                                        }());
                                                                 }
                                                                }());

                                                            case false:
                                                                ({ () in return switch l(11456.0) {
                                                                    case true:
                                                                        ({ () in return switch l(11442.0) {
                                                                            case true:
                                                                                ({ () in return switch basics_or(e(11431.0), basics_or(e(11433.0), basics_or(e(11435.0), basics_or(e(11437.0), basics_or(e(11439.0), e(11441.0)))))) {
                                                                                    case true:
                                                                                        Maybe_Maybe.Just(Unicode_Category.LetterLowercase);

                                                                                    case false:
                                                                                        ({ () in return switch basics_or(e(11432.0), basics_or(e(11434.0), basics_or(e(11436.0), basics_or(e(11438.0), e(11440.0))))) {
                                                                                            case true:
                                                                                                Maybe_Maybe.Just(Unicode_Category.LetterUppercase);

                                                                                            case false:
                                                                                                Maybe_Maybe.Nothing;
                                                                                         }
                                                                                        }());
                                                                                 }
                                                                                }());

                                                                            case false:
                                                                                ({ () in return switch l(11448.0) {
                                                                                    case true:
                                                                                        ({ () in return switch basics_or(e(11442.0), basics_or(e(11444.0), e(11446.0))) {
                                                                                            case true:
                                                                                                Maybe_Maybe.Just(Unicode_Category.LetterUppercase);

                                                                                            case false:
                                                                                                ({ () in return switch basics_or(e(11443.0), basics_or(e(11445.0), e(11447.0))) {
                                                                                                    case true:
                                                                                                        Maybe_Maybe.Just(Unicode_Category.LetterLowercase);

                                                                                                    case false:
                                                                                                        Maybe_Maybe.Nothing;
                                                                                                 }
                                                                                                }());
                                                                                         }
                                                                                        }());

                                                                                    case false:
                                                                                        ({ () in return switch basics_or(e(11448.0), basics_or(e(11450.0), basics_or(e(11452.0), e(11454.0)))) {
                                                                                            case true:
                                                                                                Maybe_Maybe.Just(Unicode_Category.LetterUppercase);

                                                                                            case false:
                                                                                                ({ () in return switch basics_or(e(11449.0), basics_or(e(11451.0), basics_or(e(11453.0), e(11455.0)))) {
                                                                                                    case true:
                                                                                                        Maybe_Maybe.Just(Unicode_Category.LetterLowercase);

                                                                                                    case false:
                                                                                                        Maybe_Maybe.Nothing;
                                                                                                 }
                                                                                                }());
                                                                                         }
                                                                                        }());
                                                                                 }
                                                                                }());
                                                                         }
                                                                        }());

                                                                    case false:
                                                                        ({ () in return switch l(11468.0) {
                                                                            case true:
                                                                                ({ () in return switch basics_or(e(11456.0), basics_or(e(11458.0), basics_or(e(11460.0), basics_or(e(11462.0), basics_or(e(11464.0), e(11466.0)))))) {
                                                                                    case true:
                                                                                        Maybe_Maybe.Just(Unicode_Category.LetterUppercase);

                                                                                    case false:
                                                                                        ({ () in return switch basics_or(e(11457.0), basics_or(e(11459.0), basics_or(e(11461.0), basics_or(e(11463.0), basics_or(e(11465.0), e(11467.0)))))) {
                                                                                            case true:
                                                                                                Maybe_Maybe.Just(Unicode_Category.LetterLowercase);

                                                                                            case false:
                                                                                                Maybe_Maybe.Nothing;
                                                                                         }
                                                                                        }());
                                                                                 }
                                                                                }());

                                                                            case false:
                                                                                ({ () in return switch l(11474.0) {
                                                                                    case true:
                                                                                        ({ () in return switch basics_or(e(11468.0), basics_or(e(11470.0), e(11472.0))) {
                                                                                            case true:
                                                                                                Maybe_Maybe.Just(Unicode_Category.LetterUppercase);

                                                                                            case false:
                                                                                                ({ () in return switch basics_or(e(11469.0), basics_or(e(11471.0), e(11473.0))) {
                                                                                                    case true:
                                                                                                        Maybe_Maybe.Just(Unicode_Category.LetterLowercase);

                                                                                                    case false:
                                                                                                        Maybe_Maybe.Nothing;
                                                                                                 }
                                                                                                }());
                                                                                         }
                                                                                        }());

                                                                                    case false:
                                                                                        ({ () in return switch basics_or(e(11474.0), basics_or(e(11476.0), basics_or(e(11478.0), basics_or(e(11480.0), e(11482.0))))) {
                                                                                            case true:
                                                                                                Maybe_Maybe.Just(Unicode_Category.LetterUppercase);

                                                                                            case false:
                                                                                                ({ () in return switch basics_or(e(11475.0), basics_or(e(11477.0), basics_or(e(11479.0), e(11481.0)))) {
                                                                                                    case true:
                                                                                                        Maybe_Maybe.Just(Unicode_Category.LetterLowercase);

                                                                                                    case false:
                                                                                                        Maybe_Maybe.Nothing;
                                                                                                 }
                                                                                                }());
                                                                                         }
                                                                                        }());
                                                                                 }
                                                                                }());
                                                                         }
                                                                        }());
                                                                 }
                                                                }());
                                                         }
                                                        }());
                                                 }
                                                }());

                                            case false:
                                                ({ () in return switch l(12300.0) {
                                                    case true:
                                                        ({ () in return switch l(11799.0) {
                                                            case true:
                                                                ({ () in return switch l(11630.0) {
                                                                    case true:
                                                                        ({ () in return switch l(11500.0) {
                                                                            case true:
                                                                                ({ () in return switch basics_or(e(11483.0), basics_or(e(11485.0), basics_or(e(11487.0), basics_or(e(11489.0), r(11491.0, 11492.0))))) {
                                                                                    case true:
                                                                                        Maybe_Maybe.Just(Unicode_Category.LetterLowercase);

                                                                                    case false:
                                                                                        ({ () in return switch basics_or(e(11484.0), basics_or(e(11486.0), basics_or(e(11488.0), basics_or(e(11490.0), e(11499.0))))) {
                                                                                            case true:
                                                                                                Maybe_Maybe.Just(Unicode_Category.LetterUppercase);

                                                                                            case false:
                                                                                                ({ () in return switch r(11493.0, 11498.0) {
                                                                                                    case true:
                                                                                                        Maybe_Maybe.Just(Unicode_Category.SymbolOther);

                                                                                                    case false:
                                                                                                        Maybe_Maybe.Nothing;
                                                                                                 }
                                                                                                }());
                                                                                         }
                                                                                        }());
                                                                                 }
                                                                                }());

                                                                            case false:
                                                                                ({ () in return switch l(11512.0) {
                                                                                    case true:
                                                                                        ({ () in return switch basics_or(e(11500.0), basics_or(e(11502.0), e(11507.0))) {
                                                                                            case true:
                                                                                                Maybe_Maybe.Just(Unicode_Category.LetterLowercase);

                                                                                            case false:
                                                                                                ({ () in return switch basics_or(e(11501.0), e(11506.0)) {
                                                                                                    case true:
                                                                                                        Maybe_Maybe.Just(Unicode_Category.LetterUppercase);

                                                                                                    case false:
                                                                                                        ({ () in return switch r(11503.0, 11505.0) {
                                                                                                            case true:
                                                                                                                Maybe_Maybe.Just(Unicode_Category.MarkNonSpacing);

                                                                                                            case false:
                                                                                                                Maybe_Maybe.Nothing;
                                                                                                         }
                                                                                                        }());
                                                                                                 }
                                                                                                }());
                                                                                         }
                                                                                        }());

                                                                                    case false:
                                                                                        ({ () in return switch basics_or(r(11513.0, 11516.0), r(11518.0, 11519.0)) {
                                                                                            case true:
                                                                                                Maybe_Maybe.Just(Unicode_Category.PunctuationOther);

                                                                                            case false:
                                                                                                ({ () in return switch e(11517.0) {
                                                                                                    case true:
                                                                                                        Maybe_Maybe.Just(Unicode_Category.NumberOther);

                                                                                                    case false:
                                                                                                        ({ () in return switch basics_or(r(11520.0, 11557.0), basics_or(e(11559.0), e(11565.0))) {
                                                                                                            case true:
                                                                                                                Maybe_Maybe.Just(Unicode_Category.LetterLowercase);

                                                                                                            case false:
                                                                                                                ({ () in return switch r(11568.0, 11623.0) {
                                                                                                                    case true:
                                                                                                                        Maybe_Maybe.Just(Unicode_Category.LetterOther);

                                                                                                                    case false:
                                                                                                                        Maybe_Maybe.Nothing;
                                                                                                                 }
                                                                                                                }());
                                                                                                         }
                                                                                                        }());
                                                                                                 }
                                                                                                }());
                                                                                         }
                                                                                        }());
                                                                                 }
                                                                                }());
                                                                         }
                                                                        }());

                                                                    case false:
                                                                        ({ () in return switch l(11743.0) {
                                                                            case true:
                                                                                ({ () in return switch e(11631.0) {
                                                                                    case true:
                                                                                        Maybe_Maybe.Just(Unicode_Category.LetterModifier);

                                                                                    case false:
                                                                                        ({ () in return switch e(11632.0) {
                                                                                            case true:
                                                                                                Maybe_Maybe.Just(Unicode_Category.PunctuationOther);

                                                                                            case false:
                                                                                                ({ () in return switch e(11647.0) {
                                                                                                    case true:
                                                                                                        Maybe_Maybe.Just(Unicode_Category.MarkNonSpacing);

                                                                                                    case false:
                                                                                                        ({ () in return switch basics_or(r(11648.0, 11670.0), basics_or(r(11680.0, 11686.0), basics_or(r(11688.0, 11694.0), basics_or(r(11696.0, 11702.0), basics_or(r(11704.0, 11710.0), basics_or(r(11712.0, 11718.0), basics_or(r(11720.0, 11726.0), basics_or(r(11728.0, 11734.0), r(11736.0, 11742.0))))))))) {
                                                                                                            case true:
                                                                                                                Maybe_Maybe.Just(Unicode_Category.LetterOther);

                                                                                                            case false:
                                                                                                                Maybe_Maybe.Nothing;
                                                                                                         }
                                                                                                        }());
                                                                                                 }
                                                                                                }());
                                                                                         }
                                                                                        }());
                                                                                 }
                                                                                }());

                                                                            case false:
                                                                                ({ () in return switch l(11781.0) {
                                                                                    case true:
                                                                                        ({ () in return switch r(11744.0, 11775.0) {
                                                                                            case true:
                                                                                                Maybe_Maybe.Just(Unicode_Category.MarkNonSpacing);

                                                                                            case false:
                                                                                                ({ () in return switch r(11776.0, 11777.0) {
                                                                                                    case true:
                                                                                                        Maybe_Maybe.Just(Unicode_Category.PunctuationOther);

                                                                                                    case false:
                                                                                                        ({ () in return switch basics_or(e(11778.0), e(11780.0)) {
                                                                                                            case true:
                                                                                                                Maybe_Maybe.Just(Unicode_Category.PunctuationInitialQuote);

                                                                                                            case false:
                                                                                                                ({ () in return switch e(11779.0) {
                                                                                                                    case true:
                                                                                                                        Maybe_Maybe.Just(Unicode_Category.PunctuationFinalQuote);

                                                                                                                    case false:
                                                                                                                        Maybe_Maybe.Nothing;
                                                                                                                 }
                                                                                                                }());
                                                                                                         }
                                                                                                        }());
                                                                                                 }
                                                                                                }());
                                                                                         }
                                                                                        }());

                                                                                    case false:
                                                                                        ({ () in return switch basics_or(e(11781.0), basics_or(e(11786.0), e(11789.0))) {
                                                                                            case true:
                                                                                                Maybe_Maybe.Just(Unicode_Category.PunctuationFinalQuote);

                                                                                            case false:
                                                                                                ({ () in return switch basics_or(r(11782.0, 11784.0), basics_or(e(11787.0), r(11790.0, 11798.0))) {
                                                                                                    case true:
                                                                                                        Maybe_Maybe.Just(Unicode_Category.PunctuationOther);

                                                                                                    case false:
                                                                                                        ({ () in return switch basics_or(e(11785.0), e(11788.0)) {
                                                                                                            case true:
                                                                                                                Maybe_Maybe.Just(Unicode_Category.PunctuationInitialQuote);

                                                                                                            case false:
                                                                                                                Maybe_Maybe.Nothing;
                                                                                                         }
                                                                                                        }());
                                                                                                 }
                                                                                                }());
                                                                                         }
                                                                                        }());
                                                                                 }
                                                                                }());
                                                                         }
                                                                        }());
                                                                 }
                                                                }());

                                                            case false:
                                                                ({ () in return switch l(11842.0) {
                                                                    case true:
                                                                        ({ () in return switch l(11812.0) {
                                                                            case true:
                                                                                ({ () in return switch basics_or(e(11799.0), e(11802.0)) {
                                                                                    case true:
                                                                                        Maybe_Maybe.Just(Unicode_Category.PunctuationDash);

                                                                                    case false:
                                                                                        ({ () in return switch basics_or(r(11800.0, 11801.0), basics_or(e(11803.0), r(11806.0, 11807.0))) {
                                                                                            case true:
                                                                                                Maybe_Maybe.Just(Unicode_Category.PunctuationOther);

                                                                                            case false:
                                                                                                ({ () in return switch basics_or(e(11804.0), e(11808.0)) {
                                                                                                    case true:
                                                                                                        Maybe_Maybe.Just(Unicode_Category.PunctuationInitialQuote);

                                                                                                    case false:
                                                                                                        ({ () in return switch basics_or(e(11805.0), e(11809.0)) {
                                                                                                            case true:
                                                                                                                Maybe_Maybe.Just(Unicode_Category.PunctuationFinalQuote);

                                                                                                            case false:
                                                                                                                ({ () in return switch e(11810.0) {
                                                                                                                    case true:
                                                                                                                        Maybe_Maybe.Just(Unicode_Category.PunctuationOpen);

                                                                                                                    case false:
                                                                                                                        ({ () in return switch e(11811.0) {
                                                                                                                            case true:
                                                                                                                                Maybe_Maybe.Just(Unicode_Category.PunctuationClose);

                                                                                                                            case false:
                                                                                                                                Maybe_Maybe.Nothing;
                                                                                                                         }
                                                                                                                        }());
                                                                                                                 }
                                                                                                                }());
                                                                                                         }
                                                                                                        }());
                                                                                                 }
                                                                                                }());
                                                                                         }
                                                                                        }());
                                                                                 }
                                                                                }());

                                                                            case false:
                                                                                ({ () in return switch l(11817.0) {
                                                                                    case true:
                                                                                        ({ () in return switch basics_or(e(11812.0), basics_or(e(11814.0), e(11816.0))) {
                                                                                            case true:
                                                                                                Maybe_Maybe.Just(Unicode_Category.PunctuationOpen);

                                                                                            case false:
                                                                                                ({ () in return switch basics_or(e(11813.0), e(11815.0)) {
                                                                                                    case true:
                                                                                                        Maybe_Maybe.Just(Unicode_Category.PunctuationClose);

                                                                                                    case false:
                                                                                                        Maybe_Maybe.Nothing;
                                                                                                 }
                                                                                                }());
                                                                                         }
                                                                                        }());

                                                                                    case false:
                                                                                        ({ () in return switch e(11817.0) {
                                                                                            case true:
                                                                                                Maybe_Maybe.Just(Unicode_Category.PunctuationClose);

                                                                                            case false:
                                                                                                ({ () in return switch basics_or(r(11818.0, 11822.0), basics_or(r(11824.0, 11833.0), basics_or(r(11836.0, 11839.0), e(11841.0)))) {
                                                                                                    case true:
                                                                                                        Maybe_Maybe.Just(Unicode_Category.PunctuationOther);

                                                                                                    case false:
                                                                                                        ({ () in return switch e(11823.0) {
                                                                                                            case true:
                                                                                                                Maybe_Maybe.Just(Unicode_Category.LetterModifier);

                                                                                                            case false:
                                                                                                                ({ () in return switch basics_or(r(11834.0, 11835.0), e(11840.0)) {
                                                                                                                    case true:
                                                                                                                        Maybe_Maybe.Just(Unicode_Category.PunctuationDash);

                                                                                                                    case false:
                                                                                                                        Maybe_Maybe.Nothing;
                                                                                                                 }
                                                                                                                }());
                                                                                                         }
                                                                                                        }());
                                                                                                 }
                                                                                                }());
                                                                                         }
                                                                                        }());
                                                                                 }
                                                                                }());
                                                                         }
                                                                        }());

                                                                    case false:
                                                                        ({ () in return switch l(11903.0) {
                                                                            case true:
                                                                                ({ () in return switch l(11862.0) {
                                                                                    case true:
                                                                                        ({ () in return switch basics_or(e(11842.0), e(11861.0)) {
                                                                                            case true:
                                                                                                Maybe_Maybe.Just(Unicode_Category.PunctuationOpen);

                                                                                            case false:
                                                                                                ({ () in return switch basics_or(r(11843.0, 11855.0), r(11858.0, 11860.0)) {
                                                                                                    case true:
                                                                                                        Maybe_Maybe.Just(Unicode_Category.PunctuationOther);

                                                                                                    case false:
                                                                                                        ({ () in return switch r(11856.0, 11857.0) {
                                                                                                            case true:
                                                                                                                Maybe_Maybe.Just(Unicode_Category.SymbolOther);

                                                                                                            case false:
                                                                                                                Maybe_Maybe.Nothing;
                                                                                                         }
                                                                                                        }());
                                                                                                 }
                                                                                                }());
                                                                                         }
                                                                                        }());

                                                                                    case false:
                                                                                        ({ () in return switch basics_or(e(11862.0), basics_or(e(11864.0), basics_or(e(11866.0), e(11868.0)))) {
                                                                                            case true:
                                                                                                Maybe_Maybe.Just(Unicode_Category.PunctuationClose);

                                                                                            case false:
                                                                                                ({ () in return switch basics_or(e(11863.0), basics_or(e(11865.0), e(11867.0))) {
                                                                                                    case true:
                                                                                                        Maybe_Maybe.Just(Unicode_Category.PunctuationOpen);

                                                                                                    case false:
                                                                                                        ({ () in return switch e(11869.0) {
                                                                                                            case true:
                                                                                                                Maybe_Maybe.Just(Unicode_Category.PunctuationDash);

                                                                                                            case false:
                                                                                                                Maybe_Maybe.Nothing;
                                                                                                         }
                                                                                                        }());
                                                                                                 }
                                                                                                }());
                                                                                         }
                                                                                        }());
                                                                                 }
                                                                                }());

                                                                            case false:
                                                                                ({ () in return switch l(12292.0) {
                                                                                    case true:
                                                                                        ({ () in return switch basics_or(r(11904.0, 11929.0), basics_or(r(11931.0, 12019.0), basics_or(r(12032.0, 12245.0), r(12272.0, 12287.0)))) {
                                                                                            case true:
                                                                                                Maybe_Maybe.Just(Unicode_Category.SymbolOther);

                                                                                            case false:
                                                                                                ({ () in return switch e(12288.0) {
                                                                                                    case true:
                                                                                                        Maybe_Maybe.Just(Unicode_Category.SeparatorSpace);

                                                                                                    case false:
                                                                                                        ({ () in return switch r(12289.0, 12291.0) {
                                                                                                            case true:
                                                                                                                Maybe_Maybe.Just(Unicode_Category.PunctuationOther);

                                                                                                            case false:
                                                                                                                Maybe_Maybe.Nothing;
                                                                                                         }
                                                                                                        }());
                                                                                                 }
                                                                                                }());
                                                                                         }
                                                                                        }());

                                                                                    case false:
                                                                                        ({ () in return switch e(12292.0) {
                                                                                            case true:
                                                                                                Maybe_Maybe.Just(Unicode_Category.SymbolOther);

                                                                                            case false:
                                                                                                ({ () in return switch e(12293.0) {
                                                                                                    case true:
                                                                                                        Maybe_Maybe.Just(Unicode_Category.LetterModifier);

                                                                                                    case false:
                                                                                                        ({ () in return switch e(12294.0) {
                                                                                                            case true:
                                                                                                                Maybe_Maybe.Just(Unicode_Category.LetterOther);

                                                                                                            case false:
                                                                                                                ({ () in return switch e(12295.0) {
                                                                                                                    case true:
                                                                                                                        Maybe_Maybe.Just(Unicode_Category.NumberLetter);

                                                                                                                    case false:
                                                                                                                        ({ () in return switch basics_or(e(12296.0), e(12298.0)) {
                                                                                                                            case true:
                                                                                                                                Maybe_Maybe.Just(Unicode_Category.PunctuationOpen);

                                                                                                                            case false:
                                                                                                                                ({ () in return switch basics_or(e(12297.0), e(12299.0)) {
                                                                                                                                    case true:
                                                                                                                                        Maybe_Maybe.Just(Unicode_Category.PunctuationClose);

                                                                                                                                    case false:
                                                                                                                                        Maybe_Maybe.Nothing;
                                                                                                                                 }
                                                                                                                                }());
                                                                                                                         }
                                                                                                                        }());
                                                                                                                 }
                                                                                                                }());
                                                                                                         }
                                                                                                        }());
                                                                                                 }
                                                                                                }());
                                                                                         }
                                                                                        }());
                                                                                 }
                                                                                }());
                                                                         }
                                                                        }());
                                                                 }
                                                                }());
                                                         }
                                                        }());

                                                    case false:
                                                        ({ () in return switch l(12841.0) {
                                                            case true:
                                                                ({ () in return switch l(12343.0) {
                                                                    case true:
                                                                        ({ () in return switch l(12312.0) {
                                                                            case true:
                                                                                ({ () in return switch basics_or(e(12300.0), basics_or(e(12302.0), basics_or(e(12304.0), basics_or(e(12308.0), e(12310.0))))) {
                                                                                    case true:
                                                                                        Maybe_Maybe.Just(Unicode_Category.PunctuationOpen);

                                                                                    case false:
                                                                                        ({ () in return switch basics_or(e(12301.0), basics_or(e(12303.0), basics_or(e(12305.0), basics_or(e(12309.0), e(12311.0))))) {
                                                                                            case true:
                                                                                                Maybe_Maybe.Just(Unicode_Category.PunctuationClose);

                                                                                            case false:
                                                                                                ({ () in return switch r(12306.0, 12307.0) {
                                                                                                    case true:
                                                                                                        Maybe_Maybe.Just(Unicode_Category.SymbolOther);

                                                                                                    case false:
                                                                                                        Maybe_Maybe.Nothing;
                                                                                                 }
                                                                                                }());
                                                                                         }
                                                                                        }());
                                                                                 }
                                                                                }());

                                                                            case false:
                                                                                ({ () in return switch l(12319.0) {
                                                                                    case true:
                                                                                        ({ () in return switch basics_or(e(12312.0), basics_or(e(12314.0), e(12317.0))) {
                                                                                            case true:
                                                                                                Maybe_Maybe.Just(Unicode_Category.PunctuationOpen);

                                                                                            case false:
                                                                                                ({ () in return switch basics_or(e(12313.0), basics_or(e(12315.0), e(12318.0))) {
                                                                                                    case true:
                                                                                                        Maybe_Maybe.Just(Unicode_Category.PunctuationClose);

                                                                                                    case false:
                                                                                                        ({ () in return switch e(12316.0) {
                                                                                                            case true:
                                                                                                                Maybe_Maybe.Just(Unicode_Category.PunctuationDash);

                                                                                                            case false:
                                                                                                                Maybe_Maybe.Nothing;
                                                                                                         }
                                                                                                        }());
                                                                                                 }
                                                                                                }());
                                                                                         }
                                                                                        }());

                                                                                    case false:
                                                                                        ({ () in return switch e(12319.0) {
                                                                                            case true:
                                                                                                Maybe_Maybe.Just(Unicode_Category.PunctuationClose);

                                                                                            case false:
                                                                                                ({ () in return switch basics_or(e(12320.0), e(12342.0)) {
                                                                                                    case true:
                                                                                                        Maybe_Maybe.Just(Unicode_Category.SymbolOther);

                                                                                                    case false:
                                                                                                        ({ () in return switch r(12321.0, 12329.0) {
                                                                                                            case true:
                                                                                                                Maybe_Maybe.Just(Unicode_Category.NumberLetter);

                                                                                                            case false:
                                                                                                                ({ () in return switch r(12330.0, 12333.0) {
                                                                                                                    case true:
                                                                                                                        Maybe_Maybe.Just(Unicode_Category.MarkNonSpacing);

                                                                                                                    case false:
                                                                                                                        ({ () in return switch r(12334.0, 12335.0) {
                                                                                                                            case true:
                                                                                                                                Maybe_Maybe.Just(Unicode_Category.MarkSpacingCombining);

                                                                                                                            case false:
                                                                                                                                ({ () in return switch e(12336.0) {
                                                                                                                                    case true:
                                                                                                                                        Maybe_Maybe.Just(Unicode_Category.PunctuationDash);

                                                                                                                                    case false:
                                                                                                                                        ({ () in return switch r(12337.0, 12341.0) {
                                                                                                                                            case true:
                                                                                                                                                Maybe_Maybe.Just(Unicode_Category.LetterModifier);

                                                                                                                                            case false:
                                                                                                                                                Maybe_Maybe.Nothing;
                                                                                                                                         }
                                                                                                                                        }());
                                                                                                                                 }
                                                                                                                                }());
                                                                                                                         }
                                                                                                                        }());
                                                                                                                 }
                                                                                                                }());
                                                                                                         }
                                                                                                        }());
                                                                                                 }
                                                                                                }());
                                                                                         }
                                                                                        }());
                                                                                 }
                                                                                }());
                                                                         }
                                                                        }());

                                                                    case false:
                                                                        ({ () in return switch l(12538.0) {
                                                                            case true:
                                                                                ({ () in return switch l(12352.0) {
                                                                                    case true:
                                                                                        ({ () in return switch basics_or(e(12343.0), r(12350.0, 12351.0)) {
                                                                                            case true:
                                                                                                Maybe_Maybe.Just(Unicode_Category.SymbolOther);

                                                                                            case false:
                                                                                                ({ () in return switch r(12344.0, 12346.0) {
                                                                                                    case true:
                                                                                                        Maybe_Maybe.Just(Unicode_Category.NumberLetter);

                                                                                                    case false:
                                                                                                        ({ () in return switch e(12347.0) {
                                                                                                            case true:
                                                                                                                Maybe_Maybe.Just(Unicode_Category.LetterModifier);

                                                                                                            case false:
                                                                                                                ({ () in return switch e(12348.0) {
                                                                                                                    case true:
                                                                                                                        Maybe_Maybe.Just(Unicode_Category.LetterOther);

                                                                                                                    case false:
                                                                                                                        ({ () in return switch e(12349.0) {
                                                                                                                            case true:
                                                                                                                                Maybe_Maybe.Just(Unicode_Category.PunctuationOther);

                                                                                                                            case false:
                                                                                                                                Maybe_Maybe.Nothing;
                                                                                                                         }
                                                                                                                        }());
                                                                                                                 }
                                                                                                                }());
                                                                                                         }
                                                                                                        }());
                                                                                                 }
                                                                                                }());
                                                                                         }
                                                                                        }());

                                                                                    case false:
                                                                                        ({ () in return switch basics_or(r(12353.0, 12438.0), basics_or(e(12447.0), r(12449.0, 12537.0))) {
                                                                                            case true:
                                                                                                Maybe_Maybe.Just(Unicode_Category.LetterOther);

                                                                                            case false:
                                                                                                ({ () in return switch r(12441.0, 12442.0) {
                                                                                                    case true:
                                                                                                        Maybe_Maybe.Just(Unicode_Category.MarkNonSpacing);

                                                                                                    case false:
                                                                                                        ({ () in return switch r(12443.0, 12444.0) {
                                                                                                            case true:
                                                                                                                Maybe_Maybe.Just(Unicode_Category.SymbolModifier);

                                                                                                            case false:
                                                                                                                ({ () in return switch r(12445.0, 12446.0) {
                                                                                                                    case true:
                                                                                                                        Maybe_Maybe.Just(Unicode_Category.LetterModifier);

                                                                                                                    case false:
                                                                                                                        ({ () in return switch e(12448.0) {
                                                                                                                            case true:
                                                                                                                                Maybe_Maybe.Just(Unicode_Category.PunctuationDash);

                                                                                                                            case false:
                                                                                                                                Maybe_Maybe.Nothing;
                                                                                                                         }
                                                                                                                        }());
                                                                                                                 }
                                                                                                                }());
                                                                                                         }
                                                                                                        }());
                                                                                                 }
                                                                                                }());
                                                                                         }
                                                                                        }());
                                                                                 }
                                                                                }());

                                                                            case false:
                                                                                ({ () in return switch l(12689.0) {
                                                                                    case true:
                                                                                        ({ () in return switch basics_or(e(12538.0), basics_or(e(12543.0), basics_or(r(12549.0, 12591.0), r(12593.0, 12686.0)))) {
                                                                                            case true:
                                                                                                Maybe_Maybe.Just(Unicode_Category.LetterOther);

                                                                                            case false:
                                                                                                ({ () in return switch e(12539.0) {
                                                                                                    case true:
                                                                                                        Maybe_Maybe.Just(Unicode_Category.PunctuationOther);

                                                                                                    case false:
                                                                                                        ({ () in return switch r(12540.0, 12542.0) {
                                                                                                            case true:
                                                                                                                Maybe_Maybe.Just(Unicode_Category.LetterModifier);

                                                                                                            case false:
                                                                                                                ({ () in return switch e(12688.0) {
                                                                                                                    case true:
                                                                                                                        Maybe_Maybe.Just(Unicode_Category.SymbolOther);

                                                                                                                    case false:
                                                                                                                        Maybe_Maybe.Nothing;
                                                                                                                 }
                                                                                                                }());
                                                                                                         }
                                                                                                        }());
                                                                                                 }
                                                                                                }());
                                                                                         }
                                                                                        }());

                                                                                    case false:
                                                                                        ({ () in return switch basics_or(e(12689.0), basics_or(r(12694.0, 12703.0), basics_or(r(12736.0, 12771.0), basics_or(e(12783.0), r(12800.0, 12830.0))))) {
                                                                                            case true:
                                                                                                Maybe_Maybe.Just(Unicode_Category.SymbolOther);

                                                                                            case false:
                                                                                                ({ () in return switch basics_or(r(12690.0, 12693.0), r(12832.0, 12840.0)) {
                                                                                                    case true:
                                                                                                        Maybe_Maybe.Just(Unicode_Category.NumberOther);

                                                                                                    case false:
                                                                                                        ({ () in return switch basics_or(r(12704.0, 12735.0), r(12784.0, 12799.0)) {
                                                                                                            case true:
                                                                                                                Maybe_Maybe.Just(Unicode_Category.LetterOther);

                                                                                                            case false:
                                                                                                                Maybe_Maybe.Nothing;
                                                                                                         }
                                                                                                        }());
                                                                                                 }
                                                                                                }());
                                                                                         }
                                                                                        }());
                                                                                 }
                                                                                }());
                                                                         }
                                                                        }());
                                                                 }
                                                                }());

                                                            case false:
                                                                ({ () in return switch l(42560.0) {
                                                                    case true:
                                                                        ({ () in return switch l(19967.0) {
                                                                            case true:
                                                                                ({ () in return switch basics_or(e(12841.0), basics_or(r(12872.0, 12879.0), basics_or(r(12881.0, 12895.0), basics_or(r(12928.0, 12937.0), r(12977.0, 12991.0))))) {
                                                                                    case true:
                                                                                        Maybe_Maybe.Just(Unicode_Category.NumberOther);

                                                                                    case false:
                                                                                        ({ () in return switch basics_or(r(12842.0, 12871.0), basics_or(e(12880.0), basics_or(r(12896.0, 12927.0), basics_or(r(12938.0, 12976.0), basics_or(r(12992.0, 13311.0), r(19904.0, 19966.0)))))) {
                                                                                            case true:
                                                                                                Maybe_Maybe.Just(Unicode_Category.SymbolOther);

                                                                                            case false:
                                                                                                ({ () in return switch r(13312.0, 19903.0) {
                                                                                                    case true:
                                                                                                        Maybe_Maybe.Just(Unicode_Category.LetterOther);

                                                                                                    case false:
                                                                                                        Maybe_Maybe.Nothing;
                                                                                                 }
                                                                                                }());
                                                                                         }
                                                                                        }());
                                                                                 }
                                                                                }());

                                                                            case false:
                                                                                ({ () in return switch l(42237.0) {
                                                                                    case true:
                                                                                        ({ () in return switch basics_or(e(19967.0), r(42128.0, 42182.0)) {
                                                                                            case true:
                                                                                                Maybe_Maybe.Just(Unicode_Category.SymbolOther);

                                                                                            case false:
                                                                                                ({ () in return switch basics_or(r(19968.0, 40980.0), basics_or(r(40982.0, 42124.0), r(42192.0, 42231.0))) {
                                                                                                    case true:
                                                                                                        Maybe_Maybe.Just(Unicode_Category.LetterOther);

                                                                                                    case false:
                                                                                                        ({ () in return switch basics_or(e(40981.0), r(42232.0, 42236.0)) {
                                                                                                            case true:
                                                                                                                Maybe_Maybe.Just(Unicode_Category.LetterModifier);

                                                                                                            case false:
                                                                                                                Maybe_Maybe.Nothing;
                                                                                                         }
                                                                                                        }());
                                                                                                 }
                                                                                                }());
                                                                                         }
                                                                                        }());

                                                                                    case false:
                                                                                        ({ () in return switch basics_or(e(42237.0), e(42508.0)) {
                                                                                            case true:
                                                                                                Maybe_Maybe.Just(Unicode_Category.LetterModifier);

                                                                                            case false:
                                                                                                ({ () in return switch basics_or(r(42238.0, 42239.0), r(42509.0, 42511.0)) {
                                                                                                    case true:
                                                                                                        Maybe_Maybe.Just(Unicode_Category.PunctuationOther);

                                                                                                    case false:
                                                                                                        ({ () in return switch basics_or(r(42240.0, 42507.0), basics_or(r(42512.0, 42527.0), r(42538.0, 42539.0))) {
                                                                                                            case true:
                                                                                                                Maybe_Maybe.Just(Unicode_Category.LetterOther);

                                                                                                            case false:
                                                                                                                ({ () in return switch r(42528.0, 42537.0) {
                                                                                                                    case true:
                                                                                                                        Maybe_Maybe.Just(Unicode_Category.NumberDecimalDigit);

                                                                                                                    case false:
                                                                                                                        Maybe_Maybe.Nothing;
                                                                                                                 }
                                                                                                                }());
                                                                                                         }
                                                                                                        }());
                                                                                                 }
                                                                                                }());
                                                                                         }
                                                                                        }());
                                                                                 }
                                                                                }());
                                                                         }
                                                                        }());

                                                                    case false:
                                                                        ({ () in return switch l(42572.0) {
                                                                            case true:
                                                                                ({ () in return switch basics_or(e(42560.0), basics_or(e(42562.0), basics_or(e(42564.0), basics_or(e(42566.0), basics_or(e(42568.0), e(42570.0)))))) {
                                                                                    case true:
                                                                                        Maybe_Maybe.Just(Unicode_Category.LetterUppercase);

                                                                                    case false:
                                                                                        ({ () in return switch basics_or(e(42561.0), basics_or(e(42563.0), basics_or(e(42565.0), basics_or(e(42567.0), basics_or(e(42569.0), e(42571.0)))))) {
                                                                                            case true:
                                                                                                Maybe_Maybe.Just(Unicode_Category.LetterLowercase);

                                                                                            case false:
                                                                                                Maybe_Maybe.Nothing;
                                                                                         }
                                                                                        }());
                                                                                 }
                                                                                }());

                                                                            case false:
                                                                                ({ () in return switch l(42578.0) {
                                                                                    case true:
                                                                                        ({ () in return switch basics_or(e(42572.0), basics_or(e(42574.0), e(42576.0))) {
                                                                                            case true:
                                                                                                Maybe_Maybe.Just(Unicode_Category.LetterUppercase);

                                                                                            case false:
                                                                                                ({ () in return switch basics_or(e(42573.0), basics_or(e(42575.0), e(42577.0))) {
                                                                                                    case true:
                                                                                                        Maybe_Maybe.Just(Unicode_Category.LetterLowercase);

                                                                                                    case false:
                                                                                                        Maybe_Maybe.Nothing;
                                                                                                 }
                                                                                                }());
                                                                                         }
                                                                                        }());

                                                                                    case false:
                                                                                        ({ () in return switch basics_or(e(42578.0), basics_or(e(42580.0), basics_or(e(42582.0), basics_or(e(42584.0), e(42586.0))))) {
                                                                                            case true:
                                                                                                Maybe_Maybe.Just(Unicode_Category.LetterUppercase);

                                                                                            case false:
                                                                                                ({ () in return switch basics_or(e(42579.0), basics_or(e(42581.0), basics_or(e(42583.0), e(42585.0)))) {
                                                                                                    case true:
                                                                                                        Maybe_Maybe.Just(Unicode_Category.LetterLowercase);

                                                                                                    case false:
                                                                                                        Maybe_Maybe.Nothing;
                                                                                                 }
                                                                                                }());
                                                                                         }
                                                                                        }());
                                                                                 }
                                                                                }());
                                                                         }
                                                                        }());
                                                                 }
                                                                }());
                                                         }
                                                        }());
                                                 }
                                                }());
                                         }
                                        }());

                                    case false:
                                        ({ () in return switch l(42945.0) {
                                            case true:
                                                ({ () in return switch l(42824.0) {
                                                    case true:
                                                        ({ () in return switch l(42646.0) {
                                                            case true:
                                                                ({ () in return switch l(42621.0) {
                                                                    case true:
                                                                        ({ () in return switch l(42598.0) {
                                                                            case true:
                                                                                ({ () in return switch basics_or(e(42587.0), basics_or(e(42589.0), basics_or(e(42591.0), basics_or(e(42593.0), basics_or(e(42595.0), e(42597.0)))))) {
                                                                                    case true:
                                                                                        Maybe_Maybe.Just(Unicode_Category.LetterLowercase);

                                                                                    case false:
                                                                                        ({ () in return switch basics_or(e(42588.0), basics_or(e(42590.0), basics_or(e(42592.0), basics_or(e(42594.0), e(42596.0))))) {
                                                                                            case true:
                                                                                                Maybe_Maybe.Just(Unicode_Category.LetterUppercase);

                                                                                            case false:
                                                                                                Maybe_Maybe.Nothing;
                                                                                         }
                                                                                        }());
                                                                                 }
                                                                                }());

                                                                            case false:
                                                                                ({ () in return switch l(42603.0) {
                                                                                    case true:
                                                                                        ({ () in return switch basics_or(e(42598.0), basics_or(e(42600.0), e(42602.0))) {
                                                                                            case true:
                                                                                                Maybe_Maybe.Just(Unicode_Category.LetterUppercase);

                                                                                            case false:
                                                                                                ({ () in return switch basics_or(e(42599.0), e(42601.0)) {
                                                                                                    case true:
                                                                                                        Maybe_Maybe.Just(Unicode_Category.LetterLowercase);

                                                                                                    case false:
                                                                                                        Maybe_Maybe.Nothing;
                                                                                                 }
                                                                                                }());
                                                                                         }
                                                                                        }());

                                                                                    case false:
                                                                                        ({ () in return switch basics_or(e(42603.0), e(42605.0)) {
                                                                                            case true:
                                                                                                Maybe_Maybe.Just(Unicode_Category.LetterLowercase);

                                                                                            case false:
                                                                                                ({ () in return switch e(42604.0) {
                                                                                                    case true:
                                                                                                        Maybe_Maybe.Just(Unicode_Category.LetterUppercase);

                                                                                                    case false:
                                                                                                        ({ () in return switch e(42606.0) {
                                                                                                            case true:
                                                                                                                Maybe_Maybe.Just(Unicode_Category.LetterOther);

                                                                                                            case false:
                                                                                                                ({ () in return switch basics_or(e(42607.0), r(42612.0, 42620.0)) {
                                                                                                                    case true:
                                                                                                                        Maybe_Maybe.Just(Unicode_Category.MarkNonSpacing);

                                                                                                                    case false:
                                                                                                                        ({ () in return switch r(42608.0, 42610.0) {
                                                                                                                            case true:
                                                                                                                                Maybe_Maybe.Just(Unicode_Category.MarkEnclosing);

                                                                                                                            case false:
                                                                                                                                ({ () in return switch e(42611.0) {
                                                                                                                                    case true:
                                                                                                                                        Maybe_Maybe.Just(Unicode_Category.PunctuationOther);

                                                                                                                                    case false:
                                                                                                                                        Maybe_Maybe.Nothing;
                                                                                                                                 }
                                                                                                                                }());
                                                                                                                         }
                                                                                                                        }());
                                                                                                                 }
                                                                                                                }());
                                                                                                         }
                                                                                                        }());
                                                                                                 }
                                                                                                }());
                                                                                         }
                                                                                        }());
                                                                                 }
                                                                                }());
                                                                         }
                                                                        }());

                                                                    case false:
                                                                        ({ () in return switch l(42632.0) {
                                                                            case true:
                                                                                ({ () in return switch e(42621.0) {
                                                                                    case true:
                                                                                        Maybe_Maybe.Just(Unicode_Category.MarkNonSpacing);

                                                                                    case false:
                                                                                        ({ () in return switch e(42622.0) {
                                                                                            case true:
                                                                                                Maybe_Maybe.Just(Unicode_Category.PunctuationOther);

                                                                                            case false:
                                                                                                ({ () in return switch e(42623.0) {
                                                                                                    case true:
                                                                                                        Maybe_Maybe.Just(Unicode_Category.LetterModifier);

                                                                                                    case false:
                                                                                                        ({ () in return switch basics_or(e(42624.0), basics_or(e(42626.0), basics_or(e(42628.0), e(42630.0)))) {
                                                                                                            case true:
                                                                                                                Maybe_Maybe.Just(Unicode_Category.LetterUppercase);

                                                                                                            case false:
                                                                                                                ({ () in return switch basics_or(e(42625.0), basics_or(e(42627.0), basics_or(e(42629.0), e(42631.0)))) {
                                                                                                                    case true:
                                                                                                                        Maybe_Maybe.Just(Unicode_Category.LetterLowercase);

                                                                                                                    case false:
                                                                                                                        Maybe_Maybe.Nothing;
                                                                                                                 }
                                                                                                                }());
                                                                                                         }
                                                                                                        }());
                                                                                                 }
                                                                                                }());
                                                                                         }
                                                                                        }());
                                                                                 }
                                                                                }());

                                                                            case false:
                                                                                ({ () in return switch l(42638.0) {
                                                                                    case true:
                                                                                        ({ () in return switch basics_or(e(42632.0), basics_or(e(42634.0), e(42636.0))) {
                                                                                            case true:
                                                                                                Maybe_Maybe.Just(Unicode_Category.LetterUppercase);

                                                                                            case false:
                                                                                                ({ () in return switch basics_or(e(42633.0), basics_or(e(42635.0), e(42637.0))) {
                                                                                                    case true:
                                                                                                        Maybe_Maybe.Just(Unicode_Category.LetterLowercase);

                                                                                                    case false:
                                                                                                        Maybe_Maybe.Nothing;
                                                                                                 }
                                                                                                }());
                                                                                         }
                                                                                        }());

                                                                                    case false:
                                                                                        ({ () in return switch basics_or(e(42638.0), basics_or(e(42640.0), basics_or(e(42642.0), e(42644.0)))) {
                                                                                            case true:
                                                                                                Maybe_Maybe.Just(Unicode_Category.LetterUppercase);

                                                                                            case false:
                                                                                                ({ () in return switch basics_or(e(42639.0), basics_or(e(42641.0), basics_or(e(42643.0), e(42645.0)))) {
                                                                                                    case true:
                                                                                                        Maybe_Maybe.Just(Unicode_Category.LetterLowercase);

                                                                                                    case false:
                                                                                                        Maybe_Maybe.Nothing;
                                                                                                 }
                                                                                                }());
                                                                                         }
                                                                                        }());
                                                                                 }
                                                                                }());
                                                                         }
                                                                        }());
                                                                 }
                                                                }());

                                                            case false:
                                                                ({ () in return switch l(42795.0) {
                                                                    case true:
                                                                        ({ () in return switch l(42751.0) {
                                                                            case true:
                                                                                ({ () in return switch basics_or(e(42646.0), basics_or(e(42648.0), e(42650.0))) {
                                                                                    case true:
                                                                                        Maybe_Maybe.Just(Unicode_Category.LetterUppercase);

                                                                                    case false:
                                                                                        ({ () in return switch basics_or(e(42647.0), basics_or(e(42649.0), e(42651.0))) {
                                                                                            case true:
                                                                                                Maybe_Maybe.Just(Unicode_Category.LetterLowercase);

                                                                                            case false:
                                                                                                ({ () in return switch r(42652.0, 42653.0) {
                                                                                                    case true:
                                                                                                        Maybe_Maybe.Just(Unicode_Category.LetterModifier);

                                                                                                    case false:
                                                                                                        ({ () in return switch basics_or(r(42654.0, 42655.0), r(42736.0, 42737.0)) {
                                                                                                            case true:
                                                                                                                Maybe_Maybe.Just(Unicode_Category.MarkNonSpacing);

                                                                                                            case false:
                                                                                                                ({ () in return switch r(42656.0, 42725.0) {
                                                                                                                    case true:
                                                                                                                        Maybe_Maybe.Just(Unicode_Category.LetterOther);

                                                                                                                    case false:
                                                                                                                        ({ () in return switch r(42726.0, 42735.0) {
                                                                                                                            case true:
                                                                                                                                Maybe_Maybe.Just(Unicode_Category.NumberLetter);

                                                                                                                            case false:
                                                                                                                                ({ () in return switch r(42738.0, 42743.0) {
                                                                                                                                    case true:
                                                                                                                                        Maybe_Maybe.Just(Unicode_Category.PunctuationOther);

                                                                                                                                    case false:
                                                                                                                                        Maybe_Maybe.Nothing;
                                                                                                                                 }
                                                                                                                                }());
                                                                                                                         }
                                                                                                                        }());
                                                                                                                 }
                                                                                                                }());
                                                                                                         }
                                                                                                        }());
                                                                                                 }
                                                                                                }());
                                                                                         }
                                                                                        }());
                                                                                 }
                                                                                }());

                                                                            case false:
                                                                                ({ () in return switch basics_or(r(42752.0, 42774.0), r(42784.0, 42785.0)) {
                                                                                    case true:
                                                                                        Maybe_Maybe.Just(Unicode_Category.SymbolModifier);

                                                                                    case false:
                                                                                        ({ () in return switch r(42775.0, 42783.0) {
                                                                                            case true:
                                                                                                Maybe_Maybe.Just(Unicode_Category.LetterModifier);

                                                                                            case false:
                                                                                                ({ () in return switch basics_or(e(42786.0), basics_or(e(42788.0), basics_or(e(42790.0), basics_or(e(42792.0), e(42794.0))))) {
                                                                                                    case true:
                                                                                                        Maybe_Maybe.Just(Unicode_Category.LetterUppercase);

                                                                                                    case false:
                                                                                                        ({ () in return switch basics_or(e(42787.0), basics_or(e(42789.0), basics_or(e(42791.0), e(42793.0)))) {
                                                                                                            case true:
                                                                                                                Maybe_Maybe.Just(Unicode_Category.LetterLowercase);

                                                                                                            case false:
                                                                                                                Maybe_Maybe.Nothing;
                                                                                                         }
                                                                                                        }());
                                                                                                 }
                                                                                                }());
                                                                                         }
                                                                                        }());
                                                                                 }
                                                                                }());
                                                                         }
                                                                        }());

                                                                    case false:
                                                                        ({ () in return switch l(42809.0) {
                                                                            case true:
                                                                                ({ () in return switch basics_or(e(42795.0), basics_or(e(42797.0), basics_or(r(42799.0, 42801.0), basics_or(e(42803.0), basics_or(e(42805.0), e(42807.0)))))) {
                                                                                    case true:
                                                                                        Maybe_Maybe.Just(Unicode_Category.LetterLowercase);

                                                                                    case false:
                                                                                        ({ () in return switch basics_or(e(42796.0), basics_or(e(42798.0), basics_or(e(42802.0), basics_or(e(42804.0), basics_or(e(42806.0), e(42808.0)))))) {
                                                                                            case true:
                                                                                                Maybe_Maybe.Just(Unicode_Category.LetterUppercase);

                                                                                            case false:
                                                                                                Maybe_Maybe.Nothing;
                                                                                         }
                                                                                        }());
                                                                                 }
                                                                                }());

                                                                            case false:
                                                                                ({ () in return switch l(42815.0) {
                                                                                    case true:
                                                                                        ({ () in return switch basics_or(e(42809.0), basics_or(e(42811.0), e(42813.0))) {
                                                                                            case true:
                                                                                                Maybe_Maybe.Just(Unicode_Category.LetterLowercase);

                                                                                            case false:
                                                                                                ({ () in return switch basics_or(e(42810.0), basics_or(e(42812.0), e(42814.0))) {
                                                                                                    case true:
                                                                                                        Maybe_Maybe.Just(Unicode_Category.LetterUppercase);

                                                                                                    case false:
                                                                                                        Maybe_Maybe.Nothing;
                                                                                                 }
                                                                                                }());
                                                                                         }
                                                                                        }());

                                                                                    case false:
                                                                                        ({ () in return switch basics_or(e(42815.0), basics_or(e(42817.0), basics_or(e(42819.0), basics_or(e(42821.0), e(42823.0))))) {
                                                                                            case true:
                                                                                                Maybe_Maybe.Just(Unicode_Category.LetterLowercase);

                                                                                            case false:
                                                                                                ({ () in return switch basics_or(e(42816.0), basics_or(e(42818.0), basics_or(e(42820.0), e(42822.0)))) {
                                                                                                    case true:
                                                                                                        Maybe_Maybe.Just(Unicode_Category.LetterUppercase);

                                                                                                    case false:
                                                                                                        Maybe_Maybe.Nothing;
                                                                                                 }
                                                                                                }());
                                                                                         }
                                                                                        }());
                                                                                 }
                                                                                }());
                                                                         }
                                                                        }());
                                                                 }
                                                                }());
                                                         }
                                                        }());

                                                    case false:
                                                        ({ () in return switch l(42882.0) {
                                                            case true:
                                                                ({ () in return switch l(42848.0) {
                                                                    case true:
                                                                        ({ () in return switch l(42835.0) {
                                                                            case true:
                                                                                ({ () in return switch basics_or(e(42824.0), basics_or(e(42826.0), basics_or(e(42828.0), basics_or(e(42830.0), basics_or(e(42832.0), e(42834.0)))))) {
                                                                                    case true:
                                                                                        Maybe_Maybe.Just(Unicode_Category.LetterUppercase);

                                                                                    case false:
                                                                                        ({ () in return switch basics_or(e(42825.0), basics_or(e(42827.0), basics_or(e(42829.0), basics_or(e(42831.0), e(42833.0))))) {
                                                                                            case true:
                                                                                                Maybe_Maybe.Just(Unicode_Category.LetterLowercase);

                                                                                            case false:
                                                                                                Maybe_Maybe.Nothing;
                                                                                         }
                                                                                        }());
                                                                                 }
                                                                                }());

                                                                            case false:
                                                                                ({ () in return switch l(42840.0) {
                                                                                    case true:
                                                                                        ({ () in return switch basics_or(e(42835.0), basics_or(e(42837.0), e(42839.0))) {
                                                                                            case true:
                                                                                                Maybe_Maybe.Just(Unicode_Category.LetterLowercase);

                                                                                            case false:
                                                                                                ({ () in return switch basics_or(e(42836.0), e(42838.0)) {
                                                                                                    case true:
                                                                                                        Maybe_Maybe.Just(Unicode_Category.LetterUppercase);

                                                                                                    case false:
                                                                                                        Maybe_Maybe.Nothing;
                                                                                                 }
                                                                                                }());
                                                                                         }
                                                                                        }());

                                                                                    case false:
                                                                                        ({ () in return switch basics_or(e(42840.0), basics_or(e(42842.0), basics_or(e(42844.0), e(42846.0)))) {
                                                                                            case true:
                                                                                                Maybe_Maybe.Just(Unicode_Category.LetterUppercase);

                                                                                            case false:
                                                                                                ({ () in return switch basics_or(e(42841.0), basics_or(e(42843.0), basics_or(e(42845.0), e(42847.0)))) {
                                                                                                    case true:
                                                                                                        Maybe_Maybe.Just(Unicode_Category.LetterLowercase);

                                                                                                    case false:
                                                                                                        Maybe_Maybe.Nothing;
                                                                                                 }
                                                                                                }());
                                                                                         }
                                                                                        }());
                                                                                 }
                                                                                }());
                                                                         }
                                                                        }());

                                                                    case false:
                                                                        ({ () in return switch l(42860.0) {
                                                                            case true:
                                                                                ({ () in return switch basics_or(e(42848.0), basics_or(e(42850.0), basics_or(e(42852.0), basics_or(e(42854.0), basics_or(e(42856.0), e(42858.0)))))) {
                                                                                    case true:
                                                                                        Maybe_Maybe.Just(Unicode_Category.LetterUppercase);

                                                                                    case false:
                                                                                        ({ () in return switch basics_or(e(42849.0), basics_or(e(42851.0), basics_or(e(42853.0), basics_or(e(42855.0), basics_or(e(42857.0), e(42859.0)))))) {
                                                                                            case true:
                                                                                                Maybe_Maybe.Just(Unicode_Category.LetterLowercase);

                                                                                            case false:
                                                                                                Maybe_Maybe.Nothing;
                                                                                         }
                                                                                        }());
                                                                                 }
                                                                                }());

                                                                            case false:
                                                                                ({ () in return switch l(42873.0) {
                                                                                    case true:
                                                                                        ({ () in return switch basics_or(e(42860.0), e(42862.0)) {
                                                                                            case true:
                                                                                                Maybe_Maybe.Just(Unicode_Category.LetterUppercase);

                                                                                            case false:
                                                                                                ({ () in return switch basics_or(e(42861.0), basics_or(e(42863.0), r(42865.0, 42872.0))) {
                                                                                                    case true:
                                                                                                        Maybe_Maybe.Just(Unicode_Category.LetterLowercase);

                                                                                                    case false:
                                                                                                        ({ () in return switch e(42864.0) {
                                                                                                            case true:
                                                                                                                Maybe_Maybe.Just(Unicode_Category.LetterModifier);

                                                                                                            case false:
                                                                                                                Maybe_Maybe.Nothing;
                                                                                                         }
                                                                                                        }());
                                                                                                 }
                                                                                                }());
                                                                                         }
                                                                                        }());

                                                                                    case false:
                                                                                        ({ () in return switch basics_or(e(42873.0), basics_or(e(42875.0), basics_or(r(42877.0, 42878.0), e(42880.0)))) {
                                                                                            case true:
                                                                                                Maybe_Maybe.Just(Unicode_Category.LetterUppercase);

                                                                                            case false:
                                                                                                ({ () in return switch basics_or(e(42874.0), basics_or(e(42876.0), basics_or(e(42879.0), e(42881.0)))) {
                                                                                                    case true:
                                                                                                        Maybe_Maybe.Just(Unicode_Category.LetterLowercase);

                                                                                                    case false:
                                                                                                        Maybe_Maybe.Nothing;
                                                                                                 }
                                                                                                }());
                                                                                         }
                                                                                        }());
                                                                                 }
                                                                                }());
                                                                         }
                                                                        }());
                                                                 }
                                                                }());

                                                            case false:
                                                                ({ () in return switch l(42910.0) {
                                                                    case true:
                                                                        ({ () in return switch l(42894.0) {
                                                                            case true:
                                                                                ({ () in return switch basics_or(e(42882.0), basics_or(e(42884.0), basics_or(e(42886.0), basics_or(e(42891.0), e(42893.0))))) {
                                                                                    case true:
                                                                                        Maybe_Maybe.Just(Unicode_Category.LetterUppercase);

                                                                                    case false:
                                                                                        ({ () in return switch basics_or(e(42883.0), basics_or(e(42885.0), basics_or(e(42887.0), e(42892.0)))) {
                                                                                            case true:
                                                                                                Maybe_Maybe.Just(Unicode_Category.LetterLowercase);

                                                                                            case false:
                                                                                                ({ () in return switch e(42888.0) {
                                                                                                    case true:
                                                                                                        Maybe_Maybe.Just(Unicode_Category.LetterModifier);

                                                                                                    case false:
                                                                                                        ({ () in return switch r(42889.0, 42890.0) {
                                                                                                            case true:
                                                                                                                Maybe_Maybe.Just(Unicode_Category.SymbolModifier);

                                                                                                            case false:
                                                                                                                Maybe_Maybe.Nothing;
                                                                                                         }
                                                                                                        }());
                                                                                                 }
                                                                                                }());
                                                                                         }
                                                                                        }());
                                                                                 }
                                                                                }());

                                                                            case false:
                                                                                ({ () in return switch l(42902.0) {
                                                                                    case true:
                                                                                        ({ () in return switch basics_or(e(42894.0), basics_or(e(42897.0), r(42899.0, 42901.0))) {
                                                                                            case true:
                                                                                                Maybe_Maybe.Just(Unicode_Category.LetterLowercase);

                                                                                            case false:
                                                                                                ({ () in return switch e(42895.0) {
                                                                                                    case true:
                                                                                                        Maybe_Maybe.Just(Unicode_Category.LetterOther);

                                                                                                    case false:
                                                                                                        ({ () in return switch basics_or(e(42896.0), e(42898.0)) {
                                                                                                            case true:
                                                                                                                Maybe_Maybe.Just(Unicode_Category.LetterUppercase);

                                                                                                            case false:
                                                                                                                Maybe_Maybe.Nothing;
                                                                                                         }
                                                                                                        }());
                                                                                                 }
                                                                                                }());
                                                                                         }
                                                                                        }());

                                                                                    case false:
                                                                                        ({ () in return switch basics_or(e(42902.0), basics_or(e(42904.0), basics_or(e(42906.0), e(42908.0)))) {
                                                                                            case true:
                                                                                                Maybe_Maybe.Just(Unicode_Category.LetterUppercase);

                                                                                            case false:
                                                                                                ({ () in return switch basics_or(e(42903.0), basics_or(e(42905.0), basics_or(e(42907.0), e(42909.0)))) {
                                                                                                    case true:
                                                                                                        Maybe_Maybe.Just(Unicode_Category.LetterLowercase);

                                                                                                    case false:
                                                                                                        Maybe_Maybe.Nothing;
                                                                                                 }
                                                                                                }());
                                                                                         }
                                                                                        }());
                                                                                 }
                                                                                }());
                                                                         }
                                                                        }());

                                                                    case false:
                                                                        ({ () in return switch l(42926.0) {
                                                                            case true:
                                                                                ({ () in return switch l(42915.0) {
                                                                                    case true:
                                                                                        ({ () in return switch basics_or(e(42910.0), basics_or(e(42912.0), e(42914.0))) {
                                                                                            case true:
                                                                                                Maybe_Maybe.Just(Unicode_Category.LetterUppercase);

                                                                                            case false:
                                                                                                ({ () in return switch basics_or(e(42911.0), e(42913.0)) {
                                                                                                    case true:
                                                                                                        Maybe_Maybe.Just(Unicode_Category.LetterLowercase);

                                                                                                    case false:
                                                                                                        Maybe_Maybe.Nothing;
                                                                                                 }
                                                                                                }());
                                                                                         }
                                                                                        }());

                                                                                    case false:
                                                                                        ({ () in return switch basics_or(e(42915.0), basics_or(e(42917.0), basics_or(e(42919.0), e(42921.0)))) {
                                                                                            case true:
                                                                                                Maybe_Maybe.Just(Unicode_Category.LetterLowercase);

                                                                                            case false:
                                                                                                ({ () in return switch basics_or(e(42916.0), basics_or(e(42918.0), basics_or(e(42920.0), r(42922.0, 42925.0)))) {
                                                                                                    case true:
                                                                                                        Maybe_Maybe.Just(Unicode_Category.LetterUppercase);

                                                                                                    case false:
                                                                                                        Maybe_Maybe.Nothing;
                                                                                                 }
                                                                                                }());
                                                                                         }
                                                                                        }());
                                                                                 }
                                                                                }());

                                                                            case false:
                                                                                ({ () in return switch l(42936.0) {
                                                                                    case true:
                                                                                        ({ () in return switch basics_or(e(42926.0), basics_or(r(42928.0, 42932.0), e(42934.0))) {
                                                                                            case true:
                                                                                                Maybe_Maybe.Just(Unicode_Category.LetterUppercase);

                                                                                            case false:
                                                                                                ({ () in return switch basics_or(e(42927.0), basics_or(e(42933.0), e(42935.0))) {
                                                                                                    case true:
                                                                                                        Maybe_Maybe.Just(Unicode_Category.LetterLowercase);

                                                                                                    case false:
                                                                                                        Maybe_Maybe.Nothing;
                                                                                                 }
                                                                                                }());
                                                                                         }
                                                                                        }());

                                                                                    case false:
                                                                                        ({ () in return switch basics_or(e(42936.0), basics_or(e(42938.0), basics_or(e(42940.0), basics_or(e(42942.0), e(42944.0))))) {
                                                                                            case true:
                                                                                                Maybe_Maybe.Just(Unicode_Category.LetterUppercase);

                                                                                            case false:
                                                                                                ({ () in return switch basics_or(e(42937.0), basics_or(e(42939.0), basics_or(e(42941.0), e(42943.0)))) {
                                                                                                    case true:
                                                                                                        Maybe_Maybe.Just(Unicode_Category.LetterLowercase);

                                                                                                    case false:
                                                                                                        Maybe_Maybe.Nothing;
                                                                                                 }
                                                                                                }());
                                                                                         }
                                                                                        }());
                                                                                 }
                                                                                }());
                                                                         }
                                                                        }());
                                                                 }
                                                                }());
                                                         }
                                                        }());
                                                 }
                                                }());

                                            case false:
                                                ({ () in return switch l(43697.0) {
                                                    case true:
                                                        ({ () in return switch l(43273.0) {
                                                            case true:
                                                                ({ () in return switch l(43042.0) {
                                                                    case true:
                                                                        ({ () in return switch l(42993.0) {
                                                                            case true:
                                                                                ({ () in return switch basics_or(e(42945.0), basics_or(e(42947.0), basics_or(e(42952.0), basics_or(e(42954.0), basics_or(e(42967.0), basics_or(e(42969.0), basics_and(basics_eq(basics_modBy(2.0, code), 1.0), r(42961.0, 42965.0)))))))) {
                                                                                    case true:
                                                                                        Maybe_Maybe.Just(Unicode_Category.LetterLowercase);

                                                                                    case false:
                                                                                        ({ () in return switch basics_or(e(42946.0), basics_or(r(42948.0, 42951.0), basics_or(e(42953.0), basics_or(e(42960.0), basics_or(e(42966.0), e(42968.0)))))) {
                                                                                            case true:
                                                                                                Maybe_Maybe.Just(Unicode_Category.LetterUppercase);

                                                                                            case false:
                                                                                                Maybe_Maybe.Nothing;
                                                                                         }
                                                                                        }());
                                                                                 }
                                                                                }());

                                                                            case false:
                                                                                ({ () in return switch l(43002.0) {
                                                                                    case true:
                                                                                        ({ () in return switch basics_or(r(42994.0, 42996.0), r(43000.0, 43001.0)) {
                                                                                            case true:
                                                                                                Maybe_Maybe.Just(Unicode_Category.LetterModifier);

                                                                                            case false:
                                                                                                ({ () in return switch e(42997.0) {
                                                                                                    case true:
                                                                                                        Maybe_Maybe.Just(Unicode_Category.LetterUppercase);

                                                                                                    case false:
                                                                                                        ({ () in return switch e(42998.0) {
                                                                                                            case true:
                                                                                                                Maybe_Maybe.Just(Unicode_Category.LetterLowercase);

                                                                                                            case false:
                                                                                                                ({ () in return switch e(42999.0) {
                                                                                                                    case true:
                                                                                                                        Maybe_Maybe.Just(Unicode_Category.LetterOther);

                                                                                                                    case false:
                                                                                                                        Maybe_Maybe.Nothing;
                                                                                                                 }
                                                                                                                }());
                                                                                                         }
                                                                                                        }());
                                                                                                 }
                                                                                                }());
                                                                                         }
                                                                                        }());

                                                                                    case false:
                                                                                        ({ () in return switch e(43002.0) {
                                                                                            case true:
                                                                                                Maybe_Maybe.Just(Unicode_Category.LetterLowercase);

                                                                                            case false:
                                                                                                ({ () in return switch basics_or(r(43003.0, 43009.0), basics_or(r(43011.0, 43013.0), basics_or(r(43015.0, 43018.0), r(43020.0, 43041.0)))) {
                                                                                                    case true:
                                                                                                        Maybe_Maybe.Just(Unicode_Category.LetterOther);

                                                                                                    case false:
                                                                                                        ({ () in return switch basics_or(e(43010.0), basics_or(e(43014.0), e(43019.0))) {
                                                                                                            case true:
                                                                                                                Maybe_Maybe.Just(Unicode_Category.MarkNonSpacing);

                                                                                                            case false:
                                                                                                                Maybe_Maybe.Nothing;
                                                                                                         }
                                                                                                        }());
                                                                                                 }
                                                                                                }());
                                                                                         }
                                                                                        }());
                                                                                 }
                                                                                }());
                                                                         }
                                                                        }());

                                                                    case false:
                                                                        ({ () in return switch l(43137.0) {
                                                                            case true:
                                                                                ({ () in return switch l(43055.0) {
                                                                                    case true:
                                                                                        ({ () in return switch e(43042.0) {
                                                                                            case true:
                                                                                                Maybe_Maybe.Just(Unicode_Category.LetterOther);

                                                                                            case false:
                                                                                                ({ () in return switch basics_or(r(43043.0, 43044.0), e(43047.0)) {
                                                                                                    case true:
                                                                                                        Maybe_Maybe.Just(Unicode_Category.MarkSpacingCombining);

                                                                                                    case false:
                                                                                                        ({ () in return switch basics_or(r(43045.0, 43046.0), e(43052.0)) {
                                                                                                            case true:
                                                                                                                Maybe_Maybe.Just(Unicode_Category.MarkNonSpacing);

                                                                                                            case false:
                                                                                                                ({ () in return switch r(43048.0, 43051.0) {
                                                                                                                    case true:
                                                                                                                        Maybe_Maybe.Just(Unicode_Category.SymbolOther);

                                                                                                                    case false:
                                                                                                                        Maybe_Maybe.Nothing;
                                                                                                                 }
                                                                                                                }());
                                                                                                         }
                                                                                                        }());
                                                                                                 }
                                                                                                }());
                                                                                         }
                                                                                        }());

                                                                                    case false:
                                                                                        ({ () in return switch r(43056.0, 43061.0) {
                                                                                            case true:
                                                                                                Maybe_Maybe.Just(Unicode_Category.NumberOther);

                                                                                            case false:
                                                                                                ({ () in return switch basics_or(r(43062.0, 43063.0), e(43065.0)) {
                                                                                                    case true:
                                                                                                        Maybe_Maybe.Just(Unicode_Category.SymbolOther);

                                                                                                    case false:
                                                                                                        ({ () in return switch e(43064.0) {
                                                                                                            case true:
                                                                                                                Maybe_Maybe.Just(Unicode_Category.SymbolCurrency);

                                                                                                            case false:
                                                                                                                ({ () in return switch r(43072.0, 43123.0) {
                                                                                                                    case true:
                                                                                                                        Maybe_Maybe.Just(Unicode_Category.LetterOther);

                                                                                                                    case false:
                                                                                                                        ({ () in return switch r(43124.0, 43127.0) {
                                                                                                                            case true:
                                                                                                                                Maybe_Maybe.Just(Unicode_Category.PunctuationOther);

                                                                                                                            case false:
                                                                                                                                ({ () in return switch e(43136.0) {
                                                                                                                                    case true:
                                                                                                                                        Maybe_Maybe.Just(Unicode_Category.MarkSpacingCombining);

                                                                                                                                    case false:
                                                                                                                                        Maybe_Maybe.Nothing;
                                                                                                                                 }
                                                                                                                                }());
                                                                                                                         }
                                                                                                                        }());
                                                                                                                 }
                                                                                                                }());
                                                                                                         }
                                                                                                        }());
                                                                                                 }
                                                                                                }());
                                                                                         }
                                                                                        }());
                                                                                 }
                                                                                }());

                                                                            case false:
                                                                                ({ () in return switch l(43249.0) {
                                                                                    case true:
                                                                                        ({ () in return switch basics_or(e(43137.0), r(43188.0, 43203.0)) {
                                                                                            case true:
                                                                                                Maybe_Maybe.Just(Unicode_Category.MarkSpacingCombining);

                                                                                            case false:
                                                                                                ({ () in return switch r(43138.0, 43187.0) {
                                                                                                    case true:
                                                                                                        Maybe_Maybe.Just(Unicode_Category.LetterOther);

                                                                                                    case false:
                                                                                                        ({ () in return switch basics_or(r(43204.0, 43205.0), r(43232.0, 43248.0)) {
                                                                                                            case true:
                                                                                                                Maybe_Maybe.Just(Unicode_Category.MarkNonSpacing);

                                                                                                            case false:
                                                                                                                ({ () in return switch r(43214.0, 43215.0) {
                                                                                                                    case true:
                                                                                                                        Maybe_Maybe.Just(Unicode_Category.PunctuationOther);

                                                                                                                    case false:
                                                                                                                        ({ () in return switch r(43216.0, 43225.0) {
                                                                                                                            case true:
                                                                                                                                Maybe_Maybe.Just(Unicode_Category.NumberDecimalDigit);

                                                                                                                            case false:
                                                                                                                                Maybe_Maybe.Nothing;
                                                                                                                         }
                                                                                                                        }());
                                                                                                                 }
                                                                                                                }());
                                                                                                         }
                                                                                                        }());
                                                                                                 }
                                                                                                }());
                                                                                         }
                                                                                        }());

                                                                                    case false:
                                                                                        ({ () in return switch basics_or(e(43249.0), e(43263.0)) {
                                                                                            case true:
                                                                                                Maybe_Maybe.Just(Unicode_Category.MarkNonSpacing);

                                                                                            case false:
                                                                                                ({ () in return switch basics_or(r(43250.0, 43255.0), basics_or(e(43259.0), r(43261.0, 43262.0))) {
                                                                                                    case true:
                                                                                                        Maybe_Maybe.Just(Unicode_Category.LetterOther);

                                                                                                    case false:
                                                                                                        ({ () in return switch basics_or(r(43256.0, 43258.0), e(43260.0)) {
                                                                                                            case true:
                                                                                                                Maybe_Maybe.Just(Unicode_Category.PunctuationOther);

                                                                                                            case false:
                                                                                                                ({ () in return switch r(43264.0, 43272.0) {
                                                                                                                    case true:
                                                                                                                        Maybe_Maybe.Just(Unicode_Category.NumberDecimalDigit);

                                                                                                                    case false:
                                                                                                                        Maybe_Maybe.Nothing;
                                                                                                                 }
                                                                                                                }());
                                                                                                         }
                                                                                                        }());
                                                                                                 }
                                                                                                }());
                                                                                         }
                                                                                        }());
                                                                                 }
                                                                                }());
                                                                         }
                                                                        }());
                                                                 }
                                                                }());

                                                            case false:
                                                                ({ () in return switch l(43494.0) {
                                                                    case true:
                                                                        ({ () in return switch l(43442.0) {
                                                                            case true:
                                                                                ({ () in return switch e(43273.0) {
                                                                                    case true:
                                                                                        Maybe_Maybe.Just(Unicode_Category.NumberDecimalDigit);

                                                                                    case false:
                                                                                        ({ () in return switch basics_or(r(43274.0, 43301.0), basics_or(r(43312.0, 43334.0), basics_or(r(43360.0, 43388.0), r(43396.0, 43441.0)))) {
                                                                                            case true:
                                                                                                Maybe_Maybe.Just(Unicode_Category.LetterOther);

                                                                                            case false:
                                                                                                ({ () in return switch basics_or(r(43302.0, 43309.0), basics_or(r(43335.0, 43345.0), r(43392.0, 43394.0))) {
                                                                                                    case true:
                                                                                                        Maybe_Maybe.Just(Unicode_Category.MarkNonSpacing);

                                                                                                    case false:
                                                                                                        ({ () in return switch basics_or(r(43310.0, 43311.0), e(43359.0)) {
                                                                                                            case true:
                                                                                                                Maybe_Maybe.Just(Unicode_Category.PunctuationOther);

                                                                                                            case false:
                                                                                                                ({ () in return switch basics_or(r(43346.0, 43347.0), e(43395.0)) {
                                                                                                                    case true:
                                                                                                                        Maybe_Maybe.Just(Unicode_Category.MarkSpacingCombining);

                                                                                                                    case false:
                                                                                                                        Maybe_Maybe.Nothing;
                                                                                                                 }
                                                                                                                }());
                                                                                                         }
                                                                                                        }());
                                                                                                 }
                                                                                                }());
                                                                                         }
                                                                                        }());
                                                                                 }
                                                                                }());

                                                                            case false:
                                                                                ({ () in return switch l(43453.0) {
                                                                                    case true:
                                                                                        ({ () in return switch e(43442.0) {
                                                                                            case true:
                                                                                                Maybe_Maybe.Just(Unicode_Category.LetterOther);

                                                                                            case false:
                                                                                                ({ () in return switch basics_or(e(43443.0), basics_or(r(43446.0, 43449.0), e(43452.0))) {
                                                                                                    case true:
                                                                                                        Maybe_Maybe.Just(Unicode_Category.MarkNonSpacing);

                                                                                                    case false:
                                                                                                        ({ () in return switch basics_or(r(43444.0, 43445.0), r(43450.0, 43451.0)) {
                                                                                                            case true:
                                                                                                                Maybe_Maybe.Just(Unicode_Category.MarkSpacingCombining);

                                                                                                            case false:
                                                                                                                Maybe_Maybe.Nothing;
                                                                                                         }
                                                                                                        }());
                                                                                                 }
                                                                                                }());
                                                                                         }
                                                                                        }());

                                                                                    case false:
                                                                                        ({ () in return switch basics_or(e(43453.0), e(43493.0)) {
                                                                                            case true:
                                                                                                Maybe_Maybe.Just(Unicode_Category.MarkNonSpacing);

                                                                                            case false:
                                                                                                ({ () in return switch r(43454.0, 43456.0) {
                                                                                                    case true:
                                                                                                        Maybe_Maybe.Just(Unicode_Category.MarkSpacingCombining);

                                                                                                    case false:
                                                                                                        ({ () in return switch basics_or(r(43457.0, 43469.0), r(43486.0, 43487.0)) {
                                                                                                            case true:
                                                                                                                Maybe_Maybe.Just(Unicode_Category.PunctuationOther);

                                                                                                            case false:
                                                                                                                ({ () in return switch e(43471.0) {
                                                                                                                    case true:
                                                                                                                        Maybe_Maybe.Just(Unicode_Category.LetterModifier);

                                                                                                                    case false:
                                                                                                                        ({ () in return switch r(43472.0, 43481.0) {
                                                                                                                            case true:
                                                                                                                                Maybe_Maybe.Just(Unicode_Category.NumberDecimalDigit);

                                                                                                                            case false:
                                                                                                                                ({ () in return switch r(43488.0, 43492.0) {
                                                                                                                                    case true:
                                                                                                                                        Maybe_Maybe.Just(Unicode_Category.LetterOther);

                                                                                                                                    case false:
                                                                                                                                        Maybe_Maybe.Nothing;
                                                                                                                                 }
                                                                                                                                }());
                                                                                                                         }
                                                                                                                        }());
                                                                                                                 }
                                                                                                                }());
                                                                                                         }
                                                                                                        }());
                                                                                                 }
                                                                                                }());
                                                                                         }
                                                                                        }());
                                                                                 }
                                                                                }());
                                                                         }
                                                                        }());

                                                                    case false:
                                                                        ({ () in return switch l(43595.0) {
                                                                            case true:
                                                                                ({ () in return switch l(43566.0) {
                                                                                    case true:
                                                                                        ({ () in return switch e(43494.0) {
                                                                                            case true:
                                                                                                Maybe_Maybe.Just(Unicode_Category.LetterModifier);

                                                                                            case false:
                                                                                                ({ () in return switch basics_or(r(43495.0, 43503.0), basics_or(r(43514.0, 43518.0), r(43520.0, 43560.0))) {
                                                                                                    case true:
                                                                                                        Maybe_Maybe.Just(Unicode_Category.LetterOther);

                                                                                                    case false:
                                                                                                        ({ () in return switch r(43504.0, 43513.0) {
                                                                                                            case true:
                                                                                                                Maybe_Maybe.Just(Unicode_Category.NumberDecimalDigit);

                                                                                                            case false:
                                                                                                                ({ () in return switch r(43561.0, 43565.0) {
                                                                                                                    case true:
                                                                                                                        Maybe_Maybe.Just(Unicode_Category.MarkNonSpacing);

                                                                                                                    case false:
                                                                                                                        Maybe_Maybe.Nothing;
                                                                                                                 }
                                                                                                                }());
                                                                                                         }
                                                                                                        }());
                                                                                                 }
                                                                                                }());
                                                                                         }
                                                                                        }());

                                                                                    case false:
                                                                                        ({ () in return switch basics_or(e(43566.0), basics_or(r(43569.0, 43570.0), basics_or(r(43573.0, 43574.0), e(43587.0)))) {
                                                                                            case true:
                                                                                                Maybe_Maybe.Just(Unicode_Category.MarkNonSpacing);

                                                                                            case false:
                                                                                                ({ () in return switch basics_or(r(43567.0, 43568.0), r(43571.0, 43572.0)) {
                                                                                                    case true:
                                                                                                        Maybe_Maybe.Just(Unicode_Category.MarkSpacingCombining);

                                                                                                    case false:
                                                                                                        ({ () in return switch basics_or(r(43584.0, 43586.0), r(43588.0, 43594.0)) {
                                                                                                            case true:
                                                                                                                Maybe_Maybe.Just(Unicode_Category.LetterOther);

                                                                                                            case false:
                                                                                                                Maybe_Maybe.Nothing;
                                                                                                         }
                                                                                                        }());
                                                                                                 }
                                                                                                }());
                                                                                         }
                                                                                        }());
                                                                                 }
                                                                                }());

                                                                            case false:
                                                                                ({ () in return switch l(43632.0) {
                                                                                    case true:
                                                                                        ({ () in return switch basics_or(e(43595.0), r(43616.0, 43631.0)) {
                                                                                            case true:
                                                                                                Maybe_Maybe.Just(Unicode_Category.LetterOther);

                                                                                            case false:
                                                                                                ({ () in return switch e(43596.0) {
                                                                                                    case true:
                                                                                                        Maybe_Maybe.Just(Unicode_Category.MarkNonSpacing);

                                                                                                    case false:
                                                                                                        ({ () in return switch e(43597.0) {
                                                                                                            case true:
                                                                                                                Maybe_Maybe.Just(Unicode_Category.MarkSpacingCombining);

                                                                                                            case false:
                                                                                                                ({ () in return switch r(43600.0, 43609.0) {
                                                                                                                    case true:
                                                                                                                        Maybe_Maybe.Just(Unicode_Category.NumberDecimalDigit);

                                                                                                                    case false:
                                                                                                                        ({ () in return switch r(43612.0, 43615.0) {
                                                                                                                            case true:
                                                                                                                                Maybe_Maybe.Just(Unicode_Category.PunctuationOther);

                                                                                                                            case false:
                                                                                                                                Maybe_Maybe.Nothing;
                                                                                                                         }
                                                                                                                        }());
                                                                                                                 }
                                                                                                                }());
                                                                                                         }
                                                                                                        }());
                                                                                                 }
                                                                                                }());
                                                                                         }
                                                                                        }());

                                                                                    case false:
                                                                                        ({ () in return switch e(43632.0) {
                                                                                            case true:
                                                                                                Maybe_Maybe.Just(Unicode_Category.LetterModifier);

                                                                                            case false:
                                                                                                ({ () in return switch basics_or(r(43633.0, 43638.0), basics_or(e(43642.0), r(43646.0, 43695.0))) {
                                                                                                    case true:
                                                                                                        Maybe_Maybe.Just(Unicode_Category.LetterOther);

                                                                                                    case false:
                                                                                                        ({ () in return switch r(43639.0, 43641.0) {
                                                                                                            case true:
                                                                                                                Maybe_Maybe.Just(Unicode_Category.SymbolOther);

                                                                                                            case false:
                                                                                                                ({ () in return switch basics_or(e(43643.0), e(43645.0)) {
                                                                                                                    case true:
                                                                                                                        Maybe_Maybe.Just(Unicode_Category.MarkSpacingCombining);

                                                                                                                    case false:
                                                                                                                        ({ () in return switch basics_or(e(43644.0), e(43696.0)) {
                                                                                                                            case true:
                                                                                                                                Maybe_Maybe.Just(Unicode_Category.MarkNonSpacing);

                                                                                                                            case false:
                                                                                                                                Maybe_Maybe.Nothing;
                                                                                                                         }
                                                                                                                        }());
                                                                                                                 }
                                                                                                                }());
                                                                                                         }
                                                                                                        }());
                                                                                                 }
                                                                                                }());
                                                                                         }
                                                                                        }());
                                                                                 }
                                                                                }());
                                                                         }
                                                                        }());
                                                                 }
                                                                }());
                                                         }
                                                        }());

                                                    case false:
                                                        ({ () in return switch l(64274.0) {
                                                            case true:
                                                                ({ () in return switch l(43815.0) {
                                                                    case true:
                                                                        ({ () in return switch l(43743.0) {
                                                                            case true:
                                                                                ({ () in return switch basics_or(e(43697.0), basics_or(r(43701.0, 43702.0), basics_or(r(43705.0, 43709.0), basics_or(e(43712.0), basics_or(e(43714.0), r(43739.0, 43740.0)))))) {
                                                                                    case true:
                                                                                        Maybe_Maybe.Just(Unicode_Category.LetterOther);

                                                                                    case false:
                                                                                        ({ () in return switch basics_or(r(43698.0, 43700.0), basics_or(r(43703.0, 43704.0), basics_or(r(43710.0, 43711.0), e(43713.0)))) {
                                                                                            case true:
                                                                                                Maybe_Maybe.Just(Unicode_Category.MarkNonSpacing);

                                                                                            case false:
                                                                                                ({ () in return switch e(43741.0) {
                                                                                                    case true:
                                                                                                        Maybe_Maybe.Just(Unicode_Category.LetterModifier);

                                                                                                    case false:
                                                                                                        ({ () in return switch e(43742.0) {
                                                                                                            case true:
                                                                                                                Maybe_Maybe.Just(Unicode_Category.PunctuationOther);

                                                                                                            case false:
                                                                                                                Maybe_Maybe.Nothing;
                                                                                                         }
                                                                                                        }());
                                                                                                 }
                                                                                                }());
                                                                                         }
                                                                                        }());
                                                                                 }
                                                                                }());

                                                                            case false:
                                                                                ({ () in return switch l(43762.0) {
                                                                                    case true:
                                                                                        ({ () in return switch basics_or(e(43743.0), r(43760.0, 43761.0)) {
                                                                                            case true:
                                                                                                Maybe_Maybe.Just(Unicode_Category.PunctuationOther);

                                                                                            case false:
                                                                                                ({ () in return switch r(43744.0, 43754.0) {
                                                                                                    case true:
                                                                                                        Maybe_Maybe.Just(Unicode_Category.LetterOther);

                                                                                                    case false:
                                                                                                        ({ () in return switch basics_or(e(43755.0), r(43758.0, 43759.0)) {
                                                                                                            case true:
                                                                                                                Maybe_Maybe.Just(Unicode_Category.MarkSpacingCombining);

                                                                                                            case false:
                                                                                                                ({ () in return switch r(43756.0, 43757.0) {
                                                                                                                    case true:
                                                                                                                        Maybe_Maybe.Just(Unicode_Category.MarkNonSpacing);

                                                                                                                    case false:
                                                                                                                        Maybe_Maybe.Nothing;
                                                                                                                 }
                                                                                                                }());
                                                                                                         }
                                                                                                        }());
                                                                                                 }
                                                                                                }());
                                                                                         }
                                                                                        }());

                                                                                    case false:
                                                                                        ({ () in return switch basics_or(e(43762.0), basics_or(r(43777.0, 43782.0), basics_or(r(43785.0, 43790.0), basics_or(r(43793.0, 43798.0), r(43808.0, 43814.0))))) {
                                                                                            case true:
                                                                                                Maybe_Maybe.Just(Unicode_Category.LetterOther);

                                                                                            case false:
                                                                                                ({ () in return switch r(43763.0, 43764.0) {
                                                                                                    case true:
                                                                                                        Maybe_Maybe.Just(Unicode_Category.LetterModifier);

                                                                                                    case false:
                                                                                                        ({ () in return switch e(43765.0) {
                                                                                                            case true:
                                                                                                                Maybe_Maybe.Just(Unicode_Category.MarkSpacingCombining);

                                                                                                            case false:
                                                                                                                ({ () in return switch e(43766.0) {
                                                                                                                    case true:
                                                                                                                        Maybe_Maybe.Just(Unicode_Category.MarkNonSpacing);

                                                                                                                    case false:
                                                                                                                        Maybe_Maybe.Nothing;
                                                                                                                 }
                                                                                                                }());
                                                                                                         }
                                                                                                        }());
                                                                                                 }
                                                                                                }());
                                                                                         }
                                                                                        }());
                                                                                 }
                                                                                }());
                                                                         }
                                                                        }());

                                                                    case false:
                                                                        ({ () in return switch l(44008.0) {
                                                                            case true:
                                                                                ({ () in return switch basics_or(r(43816.0, 43822.0), r(43968.0, 44002.0)) {
                                                                                    case true:
                                                                                        Maybe_Maybe.Just(Unicode_Category.LetterOther);

                                                                                    case false:
                                                                                        ({ () in return switch basics_or(r(43824.0, 43866.0), basics_or(r(43872.0, 43880.0), r(43888.0, 43967.0))) {
                                                                                            case true:
                                                                                                Maybe_Maybe.Just(Unicode_Category.LetterLowercase);

                                                                                            case false:
                                                                                                ({ () in return switch basics_or(e(43867.0), r(43882.0, 43883.0)) {
                                                                                                    case true:
                                                                                                        Maybe_Maybe.Just(Unicode_Category.SymbolModifier);

                                                                                                    case false:
                                                                                                        ({ () in return switch basics_or(r(43868.0, 43871.0), e(43881.0)) {
                                                                                                            case true:
                                                                                                                Maybe_Maybe.Just(Unicode_Category.LetterModifier);

                                                                                                            case false:
                                                                                                                ({ () in return switch basics_or(r(44003.0, 44004.0), r(44006.0, 44007.0)) {
                                                                                                                    case true:
                                                                                                                        Maybe_Maybe.Just(Unicode_Category.MarkSpacingCombining);

                                                                                                                    case false:
                                                                                                                        ({ () in return switch e(44005.0) {
                                                                                                                            case true:
                                                                                                                                Maybe_Maybe.Just(Unicode_Category.MarkNonSpacing);

                                                                                                                            case false:
                                                                                                                                Maybe_Maybe.Nothing;
                                                                                                                         }
                                                                                                                        }());
                                                                                                                 }
                                                                                                                }());
                                                                                                         }
                                                                                                        }());
                                                                                                 }
                                                                                                }());
                                                                                         }
                                                                                        }());
                                                                                 }
                                                                                }());

                                                                            case false:
                                                                                ({ () in return switch l(55215.0) {
                                                                                    case true:
                                                                                        ({ () in return switch basics_or(e(44008.0), e(44013.0)) {
                                                                                            case true:
                                                                                                Maybe_Maybe.Just(Unicode_Category.MarkNonSpacing);

                                                                                            case false:
                                                                                                ({ () in return switch basics_or(r(44009.0, 44010.0), e(44012.0)) {
                                                                                                    case true:
                                                                                                        Maybe_Maybe.Just(Unicode_Category.MarkSpacingCombining);

                                                                                                    case false:
                                                                                                        ({ () in return switch e(44011.0) {
                                                                                                            case true:
                                                                                                                Maybe_Maybe.Just(Unicode_Category.PunctuationOther);

                                                                                                            case false:
                                                                                                                ({ () in return switch r(44016.0, 44025.0) {
                                                                                                                    case true:
                                                                                                                        Maybe_Maybe.Just(Unicode_Category.NumberDecimalDigit);

                                                                                                                    case false:
                                                                                                                        ({ () in return switch r(44032.0, 55203.0) {
                                                                                                                            case true:
                                                                                                                                Maybe_Maybe.Just(Unicode_Category.LetterOther);

                                                                                                                            case false:
                                                                                                                                Maybe_Maybe.Nothing;
                                                                                                                         }
                                                                                                                        }());
                                                                                                                 }
                                                                                                                }());
                                                                                                         }
                                                                                                        }());
                                                                                                 }
                                                                                                }());
                                                                                         }
                                                                                        }());

                                                                                    case false:
                                                                                        ({ () in return switch basics_or(r(55216.0, 55238.0), basics_or(r(55243.0, 55291.0), basics_or(r(63744.0, 64109.0), r(64112.0, 64217.0)))) {
                                                                                            case true:
                                                                                                Maybe_Maybe.Just(Unicode_Category.LetterOther);

                                                                                            case false:
                                                                                                ({ () in return switch r(55296.0, 57343.0) {
                                                                                                    case true:
                                                                                                        Maybe_Maybe.Just(Unicode_Category.OtherSurrogate);

                                                                                                    case false:
                                                                                                        ({ () in return switch r(57344.0, 63743.0) {
                                                                                                            case true:
                                                                                                                Maybe_Maybe.Just(Unicode_Category.OtherPrivateUse);

                                                                                                            case false:
                                                                                                                ({ () in return switch r(64256.0, 64262.0) {
                                                                                                                    case true:
                                                                                                                        Maybe_Maybe.Just(Unicode_Category.LetterLowercase);

                                                                                                                    case false:
                                                                                                                        Maybe_Maybe.Nothing;
                                                                                                                 }
                                                                                                                }());
                                                                                                         }
                                                                                                        }());
                                                                                                 }
                                                                                                }());
                                                                                         }
                                                                                        }());
                                                                                 }
                                                                                }());
                                                                         }
                                                                        }());
                                                                 }
                                                                }());

                                                            case false:
                                                                ({ () in return switch l(65048.0) {
                                                                    case true:
                                                                        ({ () in return switch l(64466.0) {
                                                                            case true:
                                                                                ({ () in return switch r(64275.0, 64279.0) {
                                                                                    case true:
                                                                                        Maybe_Maybe.Just(Unicode_Category.LetterLowercase);

                                                                                    case false:
                                                                                        ({ () in return switch basics_or(e(64285.0), basics_or(r(64287.0, 64296.0), basics_or(r(64298.0, 64310.0), basics_or(r(64312.0, 64316.0), basics_or(e(64318.0), basics_or(r(64320.0, 64321.0), basics_or(r(64323.0, 64324.0), r(64326.0, 64433.0)))))))) {
                                                                                            case true:
                                                                                                Maybe_Maybe.Just(Unicode_Category.LetterOther);

                                                                                            case false:
                                                                                                ({ () in return switch e(64286.0) {
                                                                                                    case true:
                                                                                                        Maybe_Maybe.Just(Unicode_Category.MarkNonSpacing);

                                                                                                    case false:
                                                                                                        ({ () in return switch e(64297.0) {
                                                                                                            case true:
                                                                                                                Maybe_Maybe.Just(Unicode_Category.SymbolMath);

                                                                                                            case false:
                                                                                                                ({ () in return switch r(64434.0, 64450.0) {
                                                                                                                    case true:
                                                                                                                        Maybe_Maybe.Just(Unicode_Category.SymbolModifier);

                                                                                                                    case false:
                                                                                                                        Maybe_Maybe.Nothing;
                                                                                                                 }
                                                                                                                }());
                                                                                                         }
                                                                                                        }());
                                                                                                 }
                                                                                                }());
                                                                                         }
                                                                                        }());
                                                                                 }
                                                                                }());

                                                                            case false:
                                                                                ({ () in return switch l(64974.0) {
                                                                                    case true:
                                                                                        ({ () in return switch basics_or(r(64467.0, 64829.0), basics_or(r(64848.0, 64911.0), r(64914.0, 64967.0))) {
                                                                                            case true:
                                                                                                Maybe_Maybe.Just(Unicode_Category.LetterOther);

                                                                                            case false:
                                                                                                ({ () in return switch e(64830.0) {
                                                                                                    case true:
                                                                                                        Maybe_Maybe.Just(Unicode_Category.PunctuationClose);

                                                                                                    case false:
                                                                                                        ({ () in return switch e(64831.0) {
                                                                                                            case true:
                                                                                                                Maybe_Maybe.Just(Unicode_Category.PunctuationOpen);

                                                                                                            case false:
                                                                                                                ({ () in return switch r(64832.0, 64847.0) {
                                                                                                                    case true:
                                                                                                                        Maybe_Maybe.Just(Unicode_Category.SymbolOther);

                                                                                                                    case false:
                                                                                                                        Maybe_Maybe.Nothing;
                                                                                                                 }
                                                                                                                }());
                                                                                                         }
                                                                                                        }());
                                                                                                 }
                                                                                                }());
                                                                                         }
                                                                                        }());

                                                                                    case false:
                                                                                        ({ () in return switch basics_or(e(64975.0), r(65021.0, 65023.0)) {
                                                                                            case true:
                                                                                                Maybe_Maybe.Just(Unicode_Category.SymbolOther);

                                                                                            case false:
                                                                                                ({ () in return switch r(65008.0, 65019.0) {
                                                                                                    case true:
                                                                                                        Maybe_Maybe.Just(Unicode_Category.LetterOther);

                                                                                                    case false:
                                                                                                        ({ () in return switch e(65020.0) {
                                                                                                            case true:
                                                                                                                Maybe_Maybe.Just(Unicode_Category.SymbolCurrency);

                                                                                                            case false:
                                                                                                                ({ () in return switch r(65024.0, 65039.0) {
                                                                                                                    case true:
                                                                                                                        Maybe_Maybe.Just(Unicode_Category.MarkNonSpacing);

                                                                                                                    case false:
                                                                                                                        ({ () in return switch r(65040.0, 65046.0) {
                                                                                                                            case true:
                                                                                                                                Maybe_Maybe.Just(Unicode_Category.PunctuationOther);

                                                                                                                            case false:
                                                                                                                                ({ () in return switch e(65047.0) {
                                                                                                                                    case true:
                                                                                                                                        Maybe_Maybe.Just(Unicode_Category.PunctuationOpen);

                                                                                                                                    case false:
                                                                                                                                        Maybe_Maybe.Nothing;
                                                                                                                                 }
                                                                                                                                }());
                                                                                                                         }
                                                                                                                        }());
                                                                                                                 }
                                                                                                                }());
                                                                                                         }
                                                                                                        }());
                                                                                                 }
                                                                                                }());
                                                                                         }
                                                                                        }());
                                                                                 }
                                                                                }());
                                                                         }
                                                                        }());

                                                                    case false:
                                                                        ({ () in return switch l(65083.0) {
                                                                            case true:
                                                                                ({ () in return switch basics_or(e(65048.0), basics_or(e(65078.0), basics_or(e(65080.0), e(65082.0)))) {
                                                                                    case true:
                                                                                        Maybe_Maybe.Just(Unicode_Category.PunctuationClose);

                                                                                    case false:
                                                                                        ({ () in return switch basics_or(e(65049.0), e(65072.0)) {
                                                                                            case true:
                                                                                                Maybe_Maybe.Just(Unicode_Category.PunctuationOther);

                                                                                            case false:
                                                                                                ({ () in return switch r(65056.0, 65071.0) {
                                                                                                    case true:
                                                                                                        Maybe_Maybe.Just(Unicode_Category.MarkNonSpacing);

                                                                                                    case false:
                                                                                                        ({ () in return switch r(65073.0, 65074.0) {
                                                                                                            case true:
                                                                                                                Maybe_Maybe.Just(Unicode_Category.PunctuationDash);

                                                                                                            case false:
                                                                                                                ({ () in return switch r(65075.0, 65076.0) {
                                                                                                                    case true:
                                                                                                                        Maybe_Maybe.Just(Unicode_Category.PunctuationConnector);

                                                                                                                    case false:
                                                                                                                        ({ () in return switch basics_or(e(65077.0), basics_or(e(65079.0), e(65081.0))) {
                                                                                                                            case true:
                                                                                                                                Maybe_Maybe.Just(Unicode_Category.PunctuationOpen);

                                                                                                                            case false:
                                                                                                                                Maybe_Maybe.Nothing;
                                                                                                                         }
                                                                                                                        }());
                                                                                                                 }
                                                                                                                }());
                                                                                                         }
                                                                                                        }());
                                                                                                 }
                                                                                                }());
                                                                                         }
                                                                                        }());
                                                                                 }
                                                                                }());

                                                                            case false:
                                                                                ({ () in return switch l(65089.0) {
                                                                                    case true:
                                                                                        ({ () in return switch basics_or(e(65083.0), basics_or(e(65085.0), e(65087.0))) {
                                                                                            case true:
                                                                                                Maybe_Maybe.Just(Unicode_Category.PunctuationOpen);

                                                                                            case false:
                                                                                                ({ () in return switch basics_or(e(65084.0), basics_or(e(65086.0), e(65088.0))) {
                                                                                                    case true:
                                                                                                        Maybe_Maybe.Just(Unicode_Category.PunctuationClose);

                                                                                                    case false:
                                                                                                        Maybe_Maybe.Nothing;
                                                                                                 }
                                                                                                }());
                                                                                         }
                                                                                        }());

                                                                                    case false:
                                                                                        ({ () in return switch basics_or(e(65089.0), basics_or(e(65091.0), e(65095.0))) {
                                                                                            case true:
                                                                                                Maybe_Maybe.Just(Unicode_Category.PunctuationOpen);

                                                                                            case false:
                                                                                                ({ () in return switch basics_or(e(65090.0), basics_or(e(65092.0), e(65096.0))) {
                                                                                                    case true:
                                                                                                        Maybe_Maybe.Just(Unicode_Category.PunctuationClose);

                                                                                                    case false:
                                                                                                        ({ () in return switch basics_or(r(65093.0, 65094.0), r(65097.0, 65100.0)) {
                                                                                                            case true:
                                                                                                                Maybe_Maybe.Just(Unicode_Category.PunctuationOther);

                                                                                                            case false:
                                                                                                                ({ () in return switch r(65101.0, 65102.0) {
                                                                                                                    case true:
                                                                                                                        Maybe_Maybe.Just(Unicode_Category.PunctuationConnector);

                                                                                                                    case false:
                                                                                                                        Maybe_Maybe.Nothing;
                                                                                                                 }
                                                                                                                }());
                                                                                                         }
                                                                                                        }());
                                                                                                 }
                                                                                                }());
                                                                                         }
                                                                                        }());
                                                                                 }
                                                                                }());
                                                                         }
                                                                        }());
                                                                 }
                                                                }());
                                                         }
                                                        }());
                                                 }
                                                }());
                                         }
                                        }());
                                 }
                                }());

                            case false:
                                ({ () in return switch l(71996.0) {
                                    case true:
                                        ({ () in return switch l(69404.0) {
                                            case true:
                                                ({ () in return switch l(66421.0) {
                                                    case true:
                                                        ({ () in return switch l(65378.0) {
                                                            case true:
                                                                ({ () in return switch l(65288.0) {
                                                                    case true:
                                                                        ({ () in return switch l(65121.0) {
                                                                            case true:
                                                                                ({ () in return switch e(65103.0) {
                                                                                    case true:
                                                                                        Maybe_Maybe.Just(Unicode_Category.PunctuationConnector);

                                                                                    case false:
                                                                                        ({ () in return switch basics_or(r(65104.0, 65106.0), basics_or(r(65108.0, 65111.0), r(65119.0, 65120.0))) {
                                                                                            case true:
                                                                                                Maybe_Maybe.Just(Unicode_Category.PunctuationOther);

                                                                                            case false:
                                                                                                ({ () in return switch e(65112.0) {
                                                                                                    case true:
                                                                                                        Maybe_Maybe.Just(Unicode_Category.PunctuationDash);

                                                                                                    case false:
                                                                                                        ({ () in return switch basics_or(e(65113.0), basics_or(e(65115.0), e(65117.0))) {
                                                                                                            case true:
                                                                                                                Maybe_Maybe.Just(Unicode_Category.PunctuationOpen);

                                                                                                            case false:
                                                                                                                ({ () in return switch basics_or(e(65114.0), basics_or(e(65116.0), e(65118.0))) {
                                                                                                                    case true:
                                                                                                                        Maybe_Maybe.Just(Unicode_Category.PunctuationClose);

                                                                                                                    case false:
                                                                                                                        Maybe_Maybe.Nothing;
                                                                                                                 }
                                                                                                                }());
                                                                                                         }
                                                                                                        }());
                                                                                                 }
                                                                                                }());
                                                                                         }
                                                                                        }());
                                                                                 }
                                                                                }());

                                                                            case false:
                                                                                ({ () in return switch l(65129.0) {
                                                                                    case true:
                                                                                        ({ () in return switch basics_or(e(65121.0), e(65128.0)) {
                                                                                            case true:
                                                                                                Maybe_Maybe.Just(Unicode_Category.PunctuationOther);

                                                                                            case false:
                                                                                                ({ () in return switch basics_or(e(65122.0), r(65124.0, 65126.0)) {
                                                                                                    case true:
                                                                                                        Maybe_Maybe.Just(Unicode_Category.SymbolMath);

                                                                                                    case false:
                                                                                                        ({ () in return switch e(65123.0) {
                                                                                                            case true:
                                                                                                                Maybe_Maybe.Just(Unicode_Category.PunctuationDash);

                                                                                                            case false:
                                                                                                                Maybe_Maybe.Nothing;
                                                                                                         }
                                                                                                        }());
                                                                                                 }
                                                                                                }());
                                                                                         }
                                                                                        }());

                                                                                    case false:
                                                                                        ({ () in return switch basics_or(e(65129.0), e(65284.0)) {
                                                                                            case true:
                                                                                                Maybe_Maybe.Just(Unicode_Category.SymbolCurrency);

                                                                                            case false:
                                                                                                ({ () in return switch basics_or(r(65130.0, 65131.0), basics_or(r(65281.0, 65283.0), r(65285.0, 65287.0))) {
                                                                                                    case true:
                                                                                                        Maybe_Maybe.Just(Unicode_Category.PunctuationOther);

                                                                                                    case false:
                                                                                                        ({ () in return switch basics_or(r(65136.0, 65140.0), r(65142.0, 65276.0)) {
                                                                                                            case true:
                                                                                                                Maybe_Maybe.Just(Unicode_Category.LetterOther);

                                                                                                            case false:
                                                                                                                ({ () in return switch e(65279.0) {
                                                                                                                    case true:
                                                                                                                        Maybe_Maybe.Just(Unicode_Category.OtherFormat);

                                                                                                                    case false:
                                                                                                                        Maybe_Maybe.Nothing;
                                                                                                                 }
                                                                                                                }());
                                                                                                         }
                                                                                                        }());
                                                                                                 }
                                                                                                }());
                                                                                         }
                                                                                        }());
                                                                                 }
                                                                                }());
                                                                         }
                                                                        }());

                                                                    case false:
                                                                        ({ () in return switch l(65339.0) {
                                                                            case true:
                                                                                ({ () in return switch e(65288.0) {
                                                                                    case true:
                                                                                        Maybe_Maybe.Just(Unicode_Category.PunctuationOpen);

                                                                                    case false:
                                                                                        ({ () in return switch e(65289.0) {
                                                                                            case true:
                                                                                                Maybe_Maybe.Just(Unicode_Category.PunctuationClose);

                                                                                            case false:
                                                                                                ({ () in return switch basics_or(e(65290.0), basics_or(e(65292.0), basics_or(r(65294.0, 65295.0), basics_or(r(65306.0, 65307.0), r(65311.0, 65312.0))))) {
                                                                                                    case true:
                                                                                                        Maybe_Maybe.Just(Unicode_Category.PunctuationOther);

                                                                                                    case false:
                                                                                                        ({ () in return switch basics_or(e(65291.0), r(65308.0, 65310.0)) {
                                                                                                            case true:
                                                                                                                Maybe_Maybe.Just(Unicode_Category.SymbolMath);

                                                                                                            case false:
                                                                                                                ({ () in return switch e(65293.0) {
                                                                                                                    case true:
                                                                                                                        Maybe_Maybe.Just(Unicode_Category.PunctuationDash);

                                                                                                                    case false:
                                                                                                                        ({ () in return switch r(65296.0, 65305.0) {
                                                                                                                            case true:
                                                                                                                                Maybe_Maybe.Just(Unicode_Category.NumberDecimalDigit);

                                                                                                                            case false:
                                                                                                                                ({ () in return switch r(65313.0, 65338.0) {
                                                                                                                                    case true:
                                                                                                                                        Maybe_Maybe.Just(Unicode_Category.LetterUppercase);

                                                                                                                                    case false:
                                                                                                                                        Maybe_Maybe.Nothing;
                                                                                                                                 }
                                                                                                                                }());
                                                                                                                         }
                                                                                                                        }());
                                                                                                                 }
                                                                                                                }());
                                                                                                         }
                                                                                                        }());
                                                                                                 }
                                                                                                }());
                                                                                         }
                                                                                        }());
                                                                                 }
                                                                                }());

                                                                            case false:
                                                                                ({ () in return switch l(65370.0) {
                                                                                    case true:
                                                                                        ({ () in return switch e(65339.0) {
                                                                                            case true:
                                                                                                Maybe_Maybe.Just(Unicode_Category.PunctuationOpen);

                                                                                            case false:
                                                                                                ({ () in return switch e(65340.0) {
                                                                                                    case true:
                                                                                                        Maybe_Maybe.Just(Unicode_Category.PunctuationOther);

                                                                                                    case false:
                                                                                                        ({ () in return switch e(65341.0) {
                                                                                                            case true:
                                                                                                                Maybe_Maybe.Just(Unicode_Category.PunctuationClose);

                                                                                                            case false:
                                                                                                                ({ () in return switch basics_or(e(65342.0), e(65344.0)) {
                                                                                                                    case true:
                                                                                                                        Maybe_Maybe.Just(Unicode_Category.SymbolModifier);

                                                                                                                    case false:
                                                                                                                        ({ () in return switch e(65343.0) {
                                                                                                                            case true:
                                                                                                                                Maybe_Maybe.Just(Unicode_Category.PunctuationConnector);

                                                                                                                            case false:
                                                                                                                                ({ () in return switch r(65345.0, 65369.0) {
                                                                                                                                    case true:
                                                                                                                                        Maybe_Maybe.Just(Unicode_Category.LetterLowercase);

                                                                                                                                    case false:
                                                                                                                                        Maybe_Maybe.Nothing;
                                                                                                                                 }
                                                                                                                                }());
                                                                                                                         }
                                                                                                                        }());
                                                                                                                 }
                                                                                                                }());
                                                                                                         }
                                                                                                        }());
                                                                                                 }
                                                                                                }());
                                                                                         }
                                                                                        }());

                                                                                    case false:
                                                                                        ({ () in return switch e(65370.0) {
                                                                                            case true:
                                                                                                Maybe_Maybe.Just(Unicode_Category.LetterLowercase);

                                                                                            case false:
                                                                                                ({ () in return switch basics_or(e(65371.0), e(65375.0)) {
                                                                                                    case true:
                                                                                                        Maybe_Maybe.Just(Unicode_Category.PunctuationOpen);

                                                                                                    case false:
                                                                                                        ({ () in return switch basics_or(e(65372.0), e(65374.0)) {
                                                                                                            case true:
                                                                                                                Maybe_Maybe.Just(Unicode_Category.SymbolMath);

                                                                                                            case false:
                                                                                                                ({ () in return switch basics_or(e(65373.0), e(65376.0)) {
                                                                                                                    case true:
                                                                                                                        Maybe_Maybe.Just(Unicode_Category.PunctuationClose);

                                                                                                                    case false:
                                                                                                                        ({ () in return switch e(65377.0) {
                                                                                                                            case true:
                                                                                                                                Maybe_Maybe.Just(Unicode_Category.PunctuationOther);

                                                                                                                            case false:
                                                                                                                                Maybe_Maybe.Nothing;
                                                                                                                         }
                                                                                                                        }());
                                                                                                                 }
                                                                                                                }());
                                                                                                         }
                                                                                                        }());
                                                                                                 }
                                                                                                }());
                                                                                         }
                                                                                        }());
                                                                                 }
                                                                                }());
                                                                         }
                                                                        }());
                                                                 }
                                                                }());

                                                            case false:
                                                                ({ () in return switch l(65598.0) {
                                                                    case true:
                                                                        ({ () in return switch l(65505.0) {
                                                                            case true:
                                                                                ({ () in return switch l(65437.0) {
                                                                                    case true:
                                                                                        ({ () in return switch e(65378.0) {
                                                                                            case true:
                                                                                                Maybe_Maybe.Just(Unicode_Category.PunctuationOpen);

                                                                                            case false:
                                                                                                ({ () in return switch e(65379.0) {
                                                                                                    case true:
                                                                                                        Maybe_Maybe.Just(Unicode_Category.PunctuationClose);

                                                                                                    case false:
                                                                                                        ({ () in return switch r(65380.0, 65381.0) {
                                                                                                            case true:
                                                                                                                Maybe_Maybe.Just(Unicode_Category.PunctuationOther);

                                                                                                            case false:
                                                                                                                ({ () in return switch basics_or(r(65382.0, 65391.0), r(65393.0, 65436.0)) {
                                                                                                                    case true:
                                                                                                                        Maybe_Maybe.Just(Unicode_Category.LetterOther);

                                                                                                                    case false:
                                                                                                                        ({ () in return switch e(65392.0) {
                                                                                                                            case true:
                                                                                                                                Maybe_Maybe.Just(Unicode_Category.LetterModifier);

                                                                                                                            case false:
                                                                                                                                Maybe_Maybe.Nothing;
                                                                                                                         }
                                                                                                                        }());
                                                                                                                 }
                                                                                                                }());
                                                                                                         }
                                                                                                        }());
                                                                                                 }
                                                                                                }());
                                                                                         }
                                                                                        }());

                                                                                    case false:
                                                                                        ({ () in return switch basics_or(e(65437.0), basics_or(r(65440.0, 65470.0), basics_or(r(65474.0, 65479.0), basics_or(r(65482.0, 65487.0), basics_or(r(65490.0, 65495.0), r(65498.0, 65500.0)))))) {
                                                                                            case true:
                                                                                                Maybe_Maybe.Just(Unicode_Category.LetterOther);

                                                                                            case false:
                                                                                                ({ () in return switch r(65438.0, 65439.0) {
                                                                                                    case true:
                                                                                                        Maybe_Maybe.Just(Unicode_Category.LetterModifier);

                                                                                                    case false:
                                                                                                        ({ () in return switch e(65504.0) {
                                                                                                            case true:
                                                                                                                Maybe_Maybe.Just(Unicode_Category.SymbolCurrency);

                                                                                                            case false:
                                                                                                                Maybe_Maybe.Nothing;
                                                                                                         }
                                                                                                        }());
                                                                                                 }
                                                                                                }());
                                                                                         }
                                                                                        }());
                                                                                 }
                                                                                }());

                                                                            case false:
                                                                                ({ () in return switch l(65516.0) {
                                                                                    case true:
                                                                                        ({ () in return switch basics_or(e(65505.0), r(65509.0, 65510.0)) {
                                                                                            case true:
                                                                                                Maybe_Maybe.Just(Unicode_Category.SymbolCurrency);

                                                                                            case false:
                                                                                                ({ () in return switch basics_or(e(65506.0), r(65513.0, 65515.0)) {
                                                                                                    case true:
                                                                                                        Maybe_Maybe.Just(Unicode_Category.SymbolMath);

                                                                                                    case false:
                                                                                                        ({ () in return switch e(65507.0) {
                                                                                                            case true:
                                                                                                                Maybe_Maybe.Just(Unicode_Category.SymbolModifier);

                                                                                                            case false:
                                                                                                                ({ () in return switch basics_or(e(65508.0), e(65512.0)) {
                                                                                                                    case true:
                                                                                                                        Maybe_Maybe.Just(Unicode_Category.SymbolOther);

                                                                                                                    case false:
                                                                                                                        Maybe_Maybe.Nothing;
                                                                                                                 }
                                                                                                                }());
                                                                                                         }
                                                                                                        }());
                                                                                                 }
                                                                                                }());
                                                                                         }
                                                                                        }());

                                                                                    case false:
                                                                                        ({ () in return switch e(65516.0) {
                                                                                            case true:
                                                                                                Maybe_Maybe.Just(Unicode_Category.SymbolMath);

                                                                                            case false:
                                                                                                ({ () in return switch basics_or(r(65517.0, 65518.0), r(65532.0, 65533.0)) {
                                                                                                    case true:
                                                                                                        Maybe_Maybe.Just(Unicode_Category.SymbolOther);

                                                                                                    case false:
                                                                                                        ({ () in return switch r(65529.0, 65531.0) {
                                                                                                            case true:
                                                                                                                Maybe_Maybe.Just(Unicode_Category.OtherFormat);

                                                                                                            case false:
                                                                                                                ({ () in return switch basics_or(r(65536.0, 65547.0), basics_or(r(65549.0, 65574.0), basics_or(r(65576.0, 65594.0), r(65596.0, 65597.0)))) {
                                                                                                                    case true:
                                                                                                                        Maybe_Maybe.Just(Unicode_Category.LetterOther);

                                                                                                                    case false:
                                                                                                                        Maybe_Maybe.Nothing;
                                                                                                                 }
                                                                                                                }());
                                                                                                         }
                                                                                                        }());
                                                                                                 }
                                                                                                }());
                                                                                         }
                                                                                        }());
                                                                                 }
                                                                                }());
                                                                         }
                                                                        }());

                                                                    case false:
                                                                        ({ () in return switch l(65999.0) {
                                                                            case true:
                                                                                ({ () in return switch l(65855.0) {
                                                                                    case true:
                                                                                        ({ () in return switch basics_or(r(65599.0, 65613.0), basics_or(r(65616.0, 65629.0), r(65664.0, 65786.0))) {
                                                                                            case true:
                                                                                                Maybe_Maybe.Just(Unicode_Category.LetterOther);

                                                                                            case false:
                                                                                                ({ () in return switch r(65792.0, 65794.0) {
                                                                                                    case true:
                                                                                                        Maybe_Maybe.Just(Unicode_Category.PunctuationOther);

                                                                                                    case false:
                                                                                                        ({ () in return switch r(65799.0, 65843.0) {
                                                                                                            case true:
                                                                                                                Maybe_Maybe.Just(Unicode_Category.NumberOther);

                                                                                                            case false:
                                                                                                                ({ () in return switch r(65847.0, 65854.0) {
                                                                                                                    case true:
                                                                                                                        Maybe_Maybe.Just(Unicode_Category.SymbolOther);

                                                                                                                    case false:
                                                                                                                        Maybe_Maybe.Nothing;
                                                                                                                 }
                                                                                                                }());
                                                                                                         }
                                                                                                        }());
                                                                                                 }
                                                                                                }());
                                                                                         }
                                                                                        }());

                                                                                    case false:
                                                                                        ({ () in return switch basics_or(e(65855.0), basics_or(r(65913.0, 65929.0), basics_or(r(65932.0, 65934.0), basics_or(r(65936.0, 65948.0), e(65952.0))))) {
                                                                                            case true:
                                                                                                Maybe_Maybe.Just(Unicode_Category.SymbolOther);

                                                                                            case false:
                                                                                                ({ () in return switch r(65856.0, 65908.0) {
                                                                                                    case true:
                                                                                                        Maybe_Maybe.Just(Unicode_Category.NumberLetter);

                                                                                                    case false:
                                                                                                        ({ () in return switch basics_or(r(65909.0, 65912.0), r(65930.0, 65931.0)) {
                                                                                                            case true:
                                                                                                                Maybe_Maybe.Just(Unicode_Category.NumberOther);

                                                                                                            case false:
                                                                                                                Maybe_Maybe.Nothing;
                                                                                                         }
                                                                                                        }());
                                                                                                 }
                                                                                                }());
                                                                                         }
                                                                                        }());
                                                                                 }
                                                                                }());

                                                                            case false:
                                                                                ({ () in return switch l(66303.0) {
                                                                                    case true:
                                                                                        ({ () in return switch r(66000.0, 66044.0) {
                                                                                            case true:
                                                                                                Maybe_Maybe.Just(Unicode_Category.SymbolOther);

                                                                                            case false:
                                                                                                ({ () in return switch basics_or(e(66045.0), e(66272.0)) {
                                                                                                    case true:
                                                                                                        Maybe_Maybe.Just(Unicode_Category.MarkNonSpacing);

                                                                                                    case false:
                                                                                                        ({ () in return switch basics_or(r(66176.0, 66204.0), r(66208.0, 66256.0)) {
                                                                                                            case true:
                                                                                                                Maybe_Maybe.Just(Unicode_Category.LetterOther);

                                                                                                            case false:
                                                                                                                ({ () in return switch r(66273.0, 66299.0) {
                                                                                                                    case true:
                                                                                                                        Maybe_Maybe.Just(Unicode_Category.NumberOther);

                                                                                                                    case false:
                                                                                                                        Maybe_Maybe.Nothing;
                                                                                                                 }
                                                                                                                }());
                                                                                                         }
                                                                                                        }());
                                                                                                 }
                                                                                                }());
                                                                                         }
                                                                                        }());

                                                                                    case false:
                                                                                        ({ () in return switch basics_or(r(66304.0, 66335.0), basics_or(r(66349.0, 66368.0), basics_or(r(66370.0, 66377.0), r(66384.0, 66420.0)))) {
                                                                                            case true:
                                                                                                Maybe_Maybe.Just(Unicode_Category.LetterOther);

                                                                                            case false:
                                                                                                ({ () in return switch r(66336.0, 66339.0) {
                                                                                                    case true:
                                                                                                        Maybe_Maybe.Just(Unicode_Category.NumberOther);

                                                                                                    case false:
                                                                                                        ({ () in return switch basics_or(e(66369.0), e(66378.0)) {
                                                                                                            case true:
                                                                                                                Maybe_Maybe.Just(Unicode_Category.NumberLetter);

                                                                                                            case false:
                                                                                                                Maybe_Maybe.Nothing;
                                                                                                         }
                                                                                                        }());
                                                                                                 }
                                                                                                }());
                                                                                         }
                                                                                        }());
                                                                                 }
                                                                                }());
                                                                         }
                                                                        }());
                                                                 }
                                                                }());
                                                         }
                                                        }());

                                                    case false:
                                                        ({ () in return switch l(67902.0) {
                                                            case true:
                                                                ({ () in return switch l(67071.0) {
                                                                    case true:
                                                                        ({ () in return switch l(66735.0) {
                                                                            case true:
                                                                                ({ () in return switch basics_or(e(66421.0), basics_or(r(66432.0, 66461.0), basics_or(r(66464.0, 66499.0), basics_or(r(66504.0, 66511.0), r(66640.0, 66717.0))))) {
                                                                                    case true:
                                                                                        Maybe_Maybe.Just(Unicode_Category.LetterOther);

                                                                                    case false:
                                                                                        ({ () in return switch r(66422.0, 66426.0) {
                                                                                            case true:
                                                                                                Maybe_Maybe.Just(Unicode_Category.MarkNonSpacing);

                                                                                            case false:
                                                                                                ({ () in return switch basics_or(e(66463.0), e(66512.0)) {
                                                                                                    case true:
                                                                                                        Maybe_Maybe.Just(Unicode_Category.PunctuationOther);

                                                                                                    case false:
                                                                                                        ({ () in return switch r(66513.0, 66517.0) {
                                                                                                            case true:
                                                                                                                Maybe_Maybe.Just(Unicode_Category.NumberLetter);

                                                                                                            case false:
                                                                                                                ({ () in return switch r(66560.0, 66599.0) {
                                                                                                                    case true:
                                                                                                                        Maybe_Maybe.Just(Unicode_Category.LetterUppercase);

                                                                                                                    case false:
                                                                                                                        ({ () in return switch r(66600.0, 66639.0) {
                                                                                                                            case true:
                                                                                                                                Maybe_Maybe.Just(Unicode_Category.LetterLowercase);

                                                                                                                            case false:
                                                                                                                                ({ () in return switch r(66720.0, 66729.0) {
                                                                                                                                    case true:
                                                                                                                                        Maybe_Maybe.Just(Unicode_Category.NumberDecimalDigit);

                                                                                                                                    case false:
                                                                                                                                        Maybe_Maybe.Nothing;
                                                                                                                                 }
                                                                                                                                }());
                                                                                                                         }
                                                                                                                        }());
                                                                                                                 }
                                                                                                                }());
                                                                                                         }
                                                                                                        }());
                                                                                                 }
                                                                                                }());
                                                                                         }
                                                                                        }());
                                                                                 }
                                                                                }());

                                                                            case false:
                                                                                ({ () in return switch l(66939.0) {
                                                                                    case true:
                                                                                        ({ () in return switch basics_or(r(66736.0, 66771.0), r(66928.0, 66938.0)) {
                                                                                            case true:
                                                                                                Maybe_Maybe.Just(Unicode_Category.LetterUppercase);

                                                                                            case false:
                                                                                                ({ () in return switch r(66776.0, 66811.0) {
                                                                                                    case true:
                                                                                                        Maybe_Maybe.Just(Unicode_Category.LetterLowercase);

                                                                                                    case false:
                                                                                                        ({ () in return switch basics_or(r(66816.0, 66855.0), r(66864.0, 66915.0)) {
                                                                                                            case true:
                                                                                                                Maybe_Maybe.Just(Unicode_Category.LetterOther);

                                                                                                            case false:
                                                                                                                ({ () in return switch e(66927.0) {
                                                                                                                    case true:
                                                                                                                        Maybe_Maybe.Just(Unicode_Category.PunctuationOther);

                                                                                                                    case false:
                                                                                                                        Maybe_Maybe.Nothing;
                                                                                                                 }
                                                                                                                }());
                                                                                                         }
                                                                                                        }());
                                                                                                 }
                                                                                                }());
                                                                                         }
                                                                                        }());

                                                                                    case false:
                                                                                        ({ () in return switch basics_or(r(66940.0, 66954.0), basics_or(r(66956.0, 66962.0), r(66964.0, 66965.0))) {
                                                                                            case true:
                                                                                                Maybe_Maybe.Just(Unicode_Category.LetterUppercase);

                                                                                            case false:
                                                                                                ({ () in return switch basics_or(r(66967.0, 66977.0), basics_or(r(66979.0, 66993.0), basics_or(r(66995.0, 67001.0), r(67003.0, 67004.0)))) {
                                                                                                    case true:
                                                                                                        Maybe_Maybe.Just(Unicode_Category.LetterLowercase);

                                                                                                    case false:
                                                                                                        Maybe_Maybe.Nothing;
                                                                                                 }
                                                                                                }());
                                                                                         }
                                                                                        }());
                                                                                 }
                                                                                }());
                                                                         }
                                                                        }());

                                                                    case false:
                                                                        ({ () in return switch l(67671.0) {
                                                                            case true:
                                                                                ({ () in return switch basics_or(r(67072.0, 67382.0), basics_or(r(67392.0, 67413.0), basics_or(r(67424.0, 67431.0), basics_or(r(67584.0, 67589.0), basics_or(e(67592.0), basics_or(r(67594.0, 67637.0), basics_or(r(67639.0, 67640.0), basics_or(e(67644.0), r(67647.0, 67669.0))))))))) {
                                                                                    case true:
                                                                                        Maybe_Maybe.Just(Unicode_Category.LetterOther);

                                                                                    case false:
                                                                                        ({ () in return switch basics_or(r(67456.0, 67461.0), basics_or(r(67463.0, 67504.0), r(67506.0, 67514.0))) {
                                                                                            case true:
                                                                                                Maybe_Maybe.Just(Unicode_Category.LetterModifier);

                                                                                            case false:
                                                                                                Maybe_Maybe.Nothing;
                                                                                         }
                                                                                        }());
                                                                                 }
                                                                                }());

                                                                            case false:
                                                                                ({ () in return switch l(67807.0) {
                                                                                    case true:
                                                                                        ({ () in return switch e(67671.0) {
                                                                                            case true:
                                                                                                Maybe_Maybe.Just(Unicode_Category.PunctuationOther);

                                                                                            case false:
                                                                                                ({ () in return switch basics_or(r(67672.0, 67679.0), basics_or(r(67705.0, 67711.0), r(67751.0, 67759.0))) {
                                                                                                    case true:
                                                                                                        Maybe_Maybe.Just(Unicode_Category.NumberOther);

                                                                                                    case false:
                                                                                                        ({ () in return switch basics_or(r(67680.0, 67702.0), r(67712.0, 67742.0)) {
                                                                                                            case true:
                                                                                                                Maybe_Maybe.Just(Unicode_Category.LetterOther);

                                                                                                            case false:
                                                                                                                ({ () in return switch r(67703.0, 67704.0) {
                                                                                                                    case true:
                                                                                                                        Maybe_Maybe.Just(Unicode_Category.SymbolOther);

                                                                                                                    case false:
                                                                                                                        Maybe_Maybe.Nothing;
                                                                                                                 }
                                                                                                                }());
                                                                                                         }
                                                                                                        }());
                                                                                                 }
                                                                                                }());
                                                                                         }
                                                                                        }());

                                                                                    case false:
                                                                                        ({ () in return switch basics_or(r(67808.0, 67826.0), basics_or(r(67828.0, 67829.0), basics_or(r(67840.0, 67861.0), r(67872.0, 67897.0)))) {
                                                                                            case true:
                                                                                                Maybe_Maybe.Just(Unicode_Category.LetterOther);

                                                                                            case false:
                                                                                                ({ () in return switch basics_or(r(67835.0, 67839.0), r(67862.0, 67867.0)) {
                                                                                                    case true:
                                                                                                        Maybe_Maybe.Just(Unicode_Category.NumberOther);

                                                                                                    case false:
                                                                                                        ({ () in return switch e(67871.0) {
                                                                                                            case true:
                                                                                                                Maybe_Maybe.Just(Unicode_Category.PunctuationOther);

                                                                                                            case false:
                                                                                                                Maybe_Maybe.Nothing;
                                                                                                         }
                                                                                                        }());
                                                                                                 }
                                                                                                }());
                                                                                         }
                                                                                        }());
                                                                                 }
                                                                                }());
                                                                         }
                                                                        }());
                                                                 }
                                                                }());

                                                            case false:
                                                                ({ () in return switch l(68324.0) {
                                                                    case true:
                                                                        ({ () in return switch l(68120.0) {
                                                                            case true:
                                                                                ({ () in return switch e(67903.0) {
                                                                                    case true:
                                                                                        Maybe_Maybe.Just(Unicode_Category.PunctuationOther);

                                                                                    case false:
                                                                                        ({ () in return switch basics_or(r(67968.0, 68023.0), basics_or(r(68030.0, 68031.0), basics_or(e(68096.0), basics_or(r(68112.0, 68115.0), r(68117.0, 68119.0))))) {
                                                                                            case true:
                                                                                                Maybe_Maybe.Just(Unicode_Category.LetterOther);

                                                                                            case false:
                                                                                                ({ () in return switch basics_or(r(68028.0, 68029.0), basics_or(r(68032.0, 68047.0), r(68050.0, 68095.0))) {
                                                                                                    case true:
                                                                                                        Maybe_Maybe.Just(Unicode_Category.NumberOther);

                                                                                                    case false:
                                                                                                        ({ () in return switch basics_or(r(68097.0, 68099.0), basics_or(r(68101.0, 68102.0), r(68108.0, 68111.0))) {
                                                                                                            case true:
                                                                                                                Maybe_Maybe.Just(Unicode_Category.MarkNonSpacing);

                                                                                                            case false:
                                                                                                                Maybe_Maybe.Nothing;
                                                                                                         }
                                                                                                        }());
                                                                                                 }
                                                                                                }());
                                                                                         }
                                                                                        }());
                                                                                 }
                                                                                }());

                                                                            case false:
                                                                                ({ () in return switch l(68220.0) {
                                                                                    case true:
                                                                                        ({ () in return switch basics_or(r(68121.0, 68149.0), r(68192.0, 68219.0)) {
                                                                                            case true:
                                                                                                Maybe_Maybe.Just(Unicode_Category.LetterOther);

                                                                                            case false:
                                                                                                ({ () in return switch basics_or(r(68152.0, 68154.0), e(68159.0)) {
                                                                                                    case true:
                                                                                                        Maybe_Maybe.Just(Unicode_Category.MarkNonSpacing);

                                                                                                    case false:
                                                                                                        ({ () in return switch r(68160.0, 68168.0) {
                                                                                                            case true:
                                                                                                                Maybe_Maybe.Just(Unicode_Category.NumberOther);

                                                                                                            case false:
                                                                                                                ({ () in return switch r(68176.0, 68184.0) {
                                                                                                                    case true:
                                                                                                                        Maybe_Maybe.Just(Unicode_Category.PunctuationOther);

                                                                                                                    case false:
                                                                                                                        Maybe_Maybe.Nothing;
                                                                                                                 }
                                                                                                                }());
                                                                                                         }
                                                                                                        }());
                                                                                                 }
                                                                                                }());
                                                                                         }
                                                                                        }());

                                                                                    case false:
                                                                                        ({ () in return switch basics_or(e(68220.0), basics_or(r(68224.0, 68252.0), basics_or(r(68288.0, 68295.0), r(68297.0, 68323.0)))) {
                                                                                            case true:
                                                                                                Maybe_Maybe.Just(Unicode_Category.LetterOther);

                                                                                            case false:
                                                                                                ({ () in return switch basics_or(r(68221.0, 68222.0), r(68253.0, 68255.0)) {
                                                                                                    case true:
                                                                                                        Maybe_Maybe.Just(Unicode_Category.NumberOther);

                                                                                                    case false:
                                                                                                        ({ () in return switch e(68223.0) {
                                                                                                            case true:
                                                                                                                Maybe_Maybe.Just(Unicode_Category.PunctuationOther);

                                                                                                            case false:
                                                                                                                ({ () in return switch e(68296.0) {
                                                                                                                    case true:
                                                                                                                        Maybe_Maybe.Just(Unicode_Category.SymbolOther);

                                                                                                                    case false:
                                                                                                                        Maybe_Maybe.Nothing;
                                                                                                                 }
                                                                                                                }());
                                                                                                         }
                                                                                                        }());
                                                                                                 }
                                                                                                }());
                                                                                         }
                                                                                        }());
                                                                                 }
                                                                                }());
                                                                         }
                                                                        }());

                                                                    case false:
                                                                        ({ () in return switch l(68607.0) {
                                                                            case true:
                                                                                ({ () in return switch l(68415.0) {
                                                                                    case true:
                                                                                        ({ () in return switch basics_or(e(68324.0), r(68352.0, 68405.0)) {
                                                                                            case true:
                                                                                                Maybe_Maybe.Just(Unicode_Category.LetterOther);

                                                                                            case false:
                                                                                                ({ () in return switch r(68325.0, 68326.0) {
                                                                                                    case true:
                                                                                                        Maybe_Maybe.Just(Unicode_Category.MarkNonSpacing);

                                                                                                    case false:
                                                                                                        ({ () in return switch r(68331.0, 68335.0) {
                                                                                                            case true:
                                                                                                                Maybe_Maybe.Just(Unicode_Category.NumberOther);

                                                                                                            case false:
                                                                                                                ({ () in return switch basics_or(r(68336.0, 68342.0), r(68409.0, 68414.0)) {
                                                                                                                    case true:
                                                                                                                        Maybe_Maybe.Just(Unicode_Category.PunctuationOther);

                                                                                                                    case false:
                                                                                                                        Maybe_Maybe.Nothing;
                                                                                                                 }
                                                                                                                }());
                                                                                                         }
                                                                                                        }());
                                                                                                 }
                                                                                                }());
                                                                                         }
                                                                                        }());

                                                                                    case false:
                                                                                        ({ () in return switch basics_or(e(68415.0), r(68505.0, 68508.0)) {
                                                                                            case true:
                                                                                                Maybe_Maybe.Just(Unicode_Category.PunctuationOther);

                                                                                            case false:
                                                                                                ({ () in return switch basics_or(r(68416.0, 68437.0), basics_or(r(68448.0, 68466.0), r(68480.0, 68497.0))) {
                                                                                                    case true:
                                                                                                        Maybe_Maybe.Just(Unicode_Category.LetterOther);

                                                                                                    case false:
                                                                                                        ({ () in return switch basics_or(r(68440.0, 68447.0), basics_or(r(68472.0, 68479.0), r(68521.0, 68527.0))) {
                                                                                                            case true:
                                                                                                                Maybe_Maybe.Just(Unicode_Category.NumberOther);

                                                                                                            case false:
                                                                                                                Maybe_Maybe.Nothing;
                                                                                                         }
                                                                                                        }());
                                                                                                 }
                                                                                                }());
                                                                                         }
                                                                                        }());
                                                                                 }
                                                                                }());

                                                                            case false:
                                                                                ({ () in return switch l(69215.0) {
                                                                                    case true:
                                                                                        ({ () in return switch basics_or(r(68608.0, 68680.0), r(68864.0, 68899.0)) {
                                                                                            case true:
                                                                                                Maybe_Maybe.Just(Unicode_Category.LetterOther);

                                                                                            case false:
                                                                                                ({ () in return switch r(68736.0, 68786.0) {
                                                                                                    case true:
                                                                                                        Maybe_Maybe.Just(Unicode_Category.LetterUppercase);

                                                                                                    case false:
                                                                                                        ({ () in return switch r(68800.0, 68850.0) {
                                                                                                            case true:
                                                                                                                Maybe_Maybe.Just(Unicode_Category.LetterLowercase);

                                                                                                            case false:
                                                                                                                ({ () in return switch r(68858.0, 68863.0) {
                                                                                                                    case true:
                                                                                                                        Maybe_Maybe.Just(Unicode_Category.NumberOther);

                                                                                                                    case false:
                                                                                                                        ({ () in return switch r(68900.0, 68903.0) {
                                                                                                                            case true:
                                                                                                                                Maybe_Maybe.Just(Unicode_Category.MarkNonSpacing);

                                                                                                                            case false:
                                                                                                                                ({ () in return switch r(68912.0, 68921.0) {
                                                                                                                                    case true:
                                                                                                                                        Maybe_Maybe.Just(Unicode_Category.NumberDecimalDigit);

                                                                                                                                    case false:
                                                                                                                                        Maybe_Maybe.Nothing;
                                                                                                                                 }
                                                                                                                                }());
                                                                                                                         }
                                                                                                                        }());
                                                                                                                 }
                                                                                                                }());
                                                                                                         }
                                                                                                        }());
                                                                                                 }
                                                                                                }());
                                                                                         }
                                                                                        }());

                                                                                    case false:
                                                                                        ({ () in return switch r(69216.0, 69246.0) {
                                                                                            case true:
                                                                                                Maybe_Maybe.Just(Unicode_Category.NumberOther);

                                                                                            case false:
                                                                                                ({ () in return switch basics_or(r(69248.0, 69289.0), basics_or(r(69296.0, 69297.0), r(69376.0, 69403.0))) {
                                                                                                    case true:
                                                                                                        Maybe_Maybe.Just(Unicode_Category.LetterOther);

                                                                                                    case false:
                                                                                                        ({ () in return switch basics_or(r(69291.0, 69292.0), r(69373.0, 69375.0)) {
                                                                                                            case true:
                                                                                                                Maybe_Maybe.Just(Unicode_Category.MarkNonSpacing);

                                                                                                            case false:
                                                                                                                ({ () in return switch e(69293.0) {
                                                                                                                    case true:
                                                                                                                        Maybe_Maybe.Just(Unicode_Category.PunctuationDash);

                                                                                                                    case false:
                                                                                                                        Maybe_Maybe.Nothing;
                                                                                                                 }
                                                                                                                }());
                                                                                                         }
                                                                                                        }());
                                                                                                 }
                                                                                                }());
                                                                                         }
                                                                                        }());
                                                                                 }
                                                                                }());
                                                                         }
                                                                        }());
                                                                 }
                                                                }());
                                                         }
                                                        }());
                                                 }
                                                }());

                                            case false:
                                                ({ () in return switch l(70452.0) {
                                                    case true:
                                                        ({ () in return switch l(70002.0) {
                                                            case true:
                                                                ({ () in return switch l(69758.0) {
                                                                    case true:
                                                                        ({ () in return switch l(69599.0) {
                                                                            case true:
                                                                                ({ () in return switch basics_or(e(69404.0), basics_or(e(69415.0), basics_or(r(69424.0, 69445.0), basics_or(r(69488.0, 69505.0), r(69552.0, 69572.0))))) {
                                                                                    case true:
                                                                                        Maybe_Maybe.Just(Unicode_Category.LetterOther);

                                                                                    case false:
                                                                                        ({ () in return switch basics_or(r(69405.0, 69414.0), basics_or(r(69457.0, 69460.0), r(69573.0, 69579.0))) {
                                                                                            case true:
                                                                                                Maybe_Maybe.Just(Unicode_Category.NumberOther);

                                                                                            case false:
                                                                                                ({ () in return switch basics_or(r(69446.0, 69456.0), r(69506.0, 69509.0)) {
                                                                                                    case true:
                                                                                                        Maybe_Maybe.Just(Unicode_Category.MarkNonSpacing);

                                                                                                    case false:
                                                                                                        ({ () in return switch basics_or(r(69461.0, 69465.0), r(69510.0, 69513.0)) {
                                                                                                            case true:
                                                                                                                Maybe_Maybe.Just(Unicode_Category.PunctuationOther);

                                                                                                            case false:
                                                                                                                Maybe_Maybe.Nothing;
                                                                                                         }
                                                                                                        }());
                                                                                                 }
                                                                                                }());
                                                                                         }
                                                                                        }());
                                                                                 }
                                                                                }());

                                                                            case false:
                                                                                ({ () in return switch l(69702.0) {
                                                                                    case true:
                                                                                        ({ () in return switch basics_or(r(69600.0, 69622.0), r(69635.0, 69687.0)) {
                                                                                            case true:
                                                                                                Maybe_Maybe.Just(Unicode_Category.LetterOther);

                                                                                            case false:
                                                                                                ({ () in return switch basics_or(e(69632.0), e(69634.0)) {
                                                                                                    case true:
                                                                                                        Maybe_Maybe.Just(Unicode_Category.MarkSpacingCombining);

                                                                                                    case false:
                                                                                                        ({ () in return switch basics_or(e(69633.0), r(69688.0, 69701.0)) {
                                                                                                            case true:
                                                                                                                Maybe_Maybe.Just(Unicode_Category.MarkNonSpacing);

                                                                                                            case false:
                                                                                                                Maybe_Maybe.Nothing;
                                                                                                         }
                                                                                                        }());
                                                                                                 }
                                                                                                }());
                                                                                         }
                                                                                        }());

                                                                                    case false:
                                                                                        ({ () in return switch basics_or(e(69702.0), basics_or(e(69744.0), r(69747.0, 69748.0))) {
                                                                                            case true:
                                                                                                Maybe_Maybe.Just(Unicode_Category.MarkNonSpacing);

                                                                                            case false:
                                                                                                ({ () in return switch r(69703.0, 69709.0) {
                                                                                                    case true:
                                                                                                        Maybe_Maybe.Just(Unicode_Category.PunctuationOther);

                                                                                                    case false:
                                                                                                        ({ () in return switch r(69714.0, 69733.0) {
                                                                                                            case true:
                                                                                                                Maybe_Maybe.Just(Unicode_Category.NumberOther);

                                                                                                            case false:
                                                                                                                ({ () in return switch r(69734.0, 69743.0) {
                                                                                                                    case true:
                                                                                                                        Maybe_Maybe.Just(Unicode_Category.NumberDecimalDigit);

                                                                                                                    case false:
                                                                                                                        ({ () in return switch basics_or(r(69745.0, 69746.0), e(69749.0)) {
                                                                                                                            case true:
                                                                                                                                Maybe_Maybe.Just(Unicode_Category.LetterOther);

                                                                                                                            case false:
                                                                                                                                Maybe_Maybe.Nothing;
                                                                                                                         }
                                                                                                                        }());
                                                                                                                 }
                                                                                                                }());
                                                                                                         }
                                                                                                        }());
                                                                                                 }
                                                                                                }());
                                                                                         }
                                                                                        }());
                                                                                 }
                                                                                }());
                                                                         }
                                                                        }());

                                                                    case false:
                                                                        ({ () in return switch l(69839.0) {
                                                                            case true:
                                                                                ({ () in return switch basics_or(r(69759.0, 69761.0), basics_or(r(69811.0, 69814.0), basics_or(r(69817.0, 69818.0), e(69826.0)))) {
                                                                                    case true:
                                                                                        Maybe_Maybe.Just(Unicode_Category.MarkNonSpacing);

                                                                                    case false:
                                                                                        ({ () in return switch basics_or(e(69762.0), basics_or(r(69808.0, 69810.0), r(69815.0, 69816.0))) {
                                                                                            case true:
                                                                                                Maybe_Maybe.Just(Unicode_Category.MarkSpacingCombining);

                                                                                            case false:
                                                                                                ({ () in return switch r(69763.0, 69807.0) {
                                                                                                    case true:
                                                                                                        Maybe_Maybe.Just(Unicode_Category.LetterOther);

                                                                                                    case false:
                                                                                                        ({ () in return switch basics_or(r(69819.0, 69820.0), r(69822.0, 69825.0)) {
                                                                                                            case true:
                                                                                                                Maybe_Maybe.Just(Unicode_Category.PunctuationOther);

                                                                                                            case false:
                                                                                                                ({ () in return switch basics_or(e(69821.0), e(69837.0)) {
                                                                                                                    case true:
                                                                                                                        Maybe_Maybe.Just(Unicode_Category.OtherFormat);

                                                                                                                    case false:
                                                                                                                        Maybe_Maybe.Nothing;
                                                                                                                 }
                                                                                                                }());
                                                                                                         }
                                                                                                        }());
                                                                                                 }
                                                                                                }());
                                                                                         }
                                                                                        }());
                                                                                 }
                                                                                }());

                                                                            case false:
                                                                                ({ () in return switch l(69932.0) {
                                                                                    case true:
                                                                                        ({ () in return switch basics_or(r(69840.0, 69864.0), r(69891.0, 69926.0)) {
                                                                                            case true:
                                                                                                Maybe_Maybe.Just(Unicode_Category.LetterOther);

                                                                                            case false:
                                                                                                ({ () in return switch r(69872.0, 69881.0) {
                                                                                                    case true:
                                                                                                        Maybe_Maybe.Just(Unicode_Category.NumberDecimalDigit);

                                                                                                    case false:
                                                                                                        ({ () in return switch basics_or(r(69888.0, 69890.0), r(69927.0, 69931.0)) {
                                                                                                            case true:
                                                                                                                Maybe_Maybe.Just(Unicode_Category.MarkNonSpacing);

                                                                                                            case false:
                                                                                                                Maybe_Maybe.Nothing;
                                                                                                         }
                                                                                                        }());
                                                                                                 }
                                                                                                }());
                                                                                         }
                                                                                        }());

                                                                                    case false:
                                                                                        ({ () in return switch basics_or(e(69932.0), r(69957.0, 69958.0)) {
                                                                                            case true:
                                                                                                Maybe_Maybe.Just(Unicode_Category.MarkSpacingCombining);

                                                                                            case false:
                                                                                                ({ () in return switch r(69933.0, 69940.0) {
                                                                                                    case true:
                                                                                                        Maybe_Maybe.Just(Unicode_Category.MarkNonSpacing);

                                                                                                    case false:
                                                                                                        ({ () in return switch r(69942.0, 69951.0) {
                                                                                                            case true:
                                                                                                                Maybe_Maybe.Just(Unicode_Category.NumberDecimalDigit);

                                                                                                            case false:
                                                                                                                ({ () in return switch r(69952.0, 69955.0) {
                                                                                                                    case true:
                                                                                                                        Maybe_Maybe.Just(Unicode_Category.PunctuationOther);

                                                                                                                    case false:
                                                                                                                        ({ () in return switch basics_or(e(69956.0), basics_or(e(69959.0), r(69968.0, 70001.0))) {
                                                                                                                            case true:
                                                                                                                                Maybe_Maybe.Just(Unicode_Category.LetterOther);

                                                                                                                            case false:
                                                                                                                                Maybe_Maybe.Nothing;
                                                                                                                         }
                                                                                                                        }());
                                                                                                                 }
                                                                                                                }());
                                                                                                         }
                                                                                                        }());
                                                                                                 }
                                                                                                }());
                                                                                         }
                                                                                        }());
                                                                                 }
                                                                                }());
                                                                         }
                                                                        }());
                                                                 }
                                                                }());

                                                            case false:
                                                                ({ () in return switch l(70193.0) {
                                                                    case true:
                                                                        ({ () in return switch l(70092.0) {
                                                                            case true:
                                                                                ({ () in return switch l(70018.0) {
                                                                                    case true:
                                                                                        ({ () in return switch basics_or(e(70002.0), e(70006.0)) {
                                                                                            case true:
                                                                                                Maybe_Maybe.Just(Unicode_Category.LetterOther);

                                                                                            case false:
                                                                                                ({ () in return switch basics_or(e(70003.0), r(70016.0, 70017.0)) {
                                                                                                    case true:
                                                                                                        Maybe_Maybe.Just(Unicode_Category.MarkNonSpacing);

                                                                                                    case false:
                                                                                                        ({ () in return switch r(70004.0, 70005.0) {
                                                                                                            case true:
                                                                                                                Maybe_Maybe.Just(Unicode_Category.PunctuationOther);

                                                                                                            case false:
                                                                                                                Maybe_Maybe.Nothing;
                                                                                                         }
                                                                                                        }());
                                                                                                 }
                                                                                                }());
                                                                                         }
                                                                                        }());

                                                                                    case false:
                                                                                        ({ () in return switch basics_or(e(70018.0), basics_or(r(70067.0, 70069.0), r(70079.0, 70080.0))) {
                                                                                            case true:
                                                                                                Maybe_Maybe.Just(Unicode_Category.MarkSpacingCombining);

                                                                                            case false:
                                                                                                ({ () in return switch basics_or(r(70019.0, 70066.0), r(70081.0, 70084.0)) {
                                                                                                    case true:
                                                                                                        Maybe_Maybe.Just(Unicode_Category.LetterOther);

                                                                                                    case false:
                                                                                                        ({ () in return switch basics_or(r(70070.0, 70078.0), r(70089.0, 70091.0)) {
                                                                                                            case true:
                                                                                                                Maybe_Maybe.Just(Unicode_Category.MarkNonSpacing);

                                                                                                            case false:
                                                                                                                ({ () in return switch r(70085.0, 70088.0) {
                                                                                                                    case true:
                                                                                                                        Maybe_Maybe.Just(Unicode_Category.PunctuationOther);

                                                                                                                    case false:
                                                                                                                        Maybe_Maybe.Nothing;
                                                                                                                 }
                                                                                                                }());
                                                                                                         }
                                                                                                        }());
                                                                                                 }
                                                                                                }());
                                                                                         }
                                                                                        }());
                                                                                 }
                                                                                }());

                                                                            case false:
                                                                                ({ () in return switch l(70107.0) {
                                                                                    case true:
                                                                                        ({ () in return switch basics_or(e(70092.0), e(70095.0)) {
                                                                                            case true:
                                                                                                Maybe_Maybe.Just(Unicode_Category.MarkNonSpacing);

                                                                                            case false:
                                                                                                ({ () in return switch e(70093.0) {
                                                                                                    case true:
                                                                                                        Maybe_Maybe.Just(Unicode_Category.PunctuationOther);

                                                                                                    case false:
                                                                                                        ({ () in return switch e(70094.0) {
                                                                                                            case true:
                                                                                                                Maybe_Maybe.Just(Unicode_Category.MarkSpacingCombining);

                                                                                                            case false:
                                                                                                                ({ () in return switch r(70096.0, 70105.0) {
                                                                                                                    case true:
                                                                                                                        Maybe_Maybe.Just(Unicode_Category.NumberDecimalDigit);

                                                                                                                    case false:
                                                                                                                        ({ () in return switch e(70106.0) {
                                                                                                                            case true:
                                                                                                                                Maybe_Maybe.Just(Unicode_Category.LetterOther);

                                                                                                                            case false:
                                                                                                                                Maybe_Maybe.Nothing;
                                                                                                                         }
                                                                                                                        }());
                                                                                                                 }
                                                                                                                }());
                                                                                                         }
                                                                                                        }());
                                                                                                 }
                                                                                                }());
                                                                                         }
                                                                                        }());

                                                                                    case false:
                                                                                        ({ () in return switch basics_or(e(70107.0), r(70109.0, 70111.0)) {
                                                                                            case true:
                                                                                                Maybe_Maybe.Just(Unicode_Category.PunctuationOther);

                                                                                            case false:
                                                                                                ({ () in return switch basics_or(e(70108.0), basics_or(r(70144.0, 70161.0), r(70163.0, 70187.0))) {
                                                                                                    case true:
                                                                                                        Maybe_Maybe.Just(Unicode_Category.LetterOther);

                                                                                                    case false:
                                                                                                        ({ () in return switch r(70113.0, 70132.0) {
                                                                                                            case true:
                                                                                                                Maybe_Maybe.Just(Unicode_Category.NumberOther);

                                                                                                            case false:
                                                                                                                ({ () in return switch r(70188.0, 70190.0) {
                                                                                                                    case true:
                                                                                                                        Maybe_Maybe.Just(Unicode_Category.MarkSpacingCombining);

                                                                                                                    case false:
                                                                                                                        ({ () in return switch r(70191.0, 70192.0) {
                                                                                                                            case true:
                                                                                                                                Maybe_Maybe.Just(Unicode_Category.MarkNonSpacing);

                                                                                                                            case false:
                                                                                                                                Maybe_Maybe.Nothing;
                                                                                                                         }
                                                                                                                        }());
                                                                                                                 }
                                                                                                                }());
                                                                                                         }
                                                                                                        }());
                                                                                                 }
                                                                                                }());
                                                                                         }
                                                                                        }());
                                                                                 }
                                                                                }());
                                                                         }
                                                                        }());

                                                                    case false:
                                                                        ({ () in return switch l(70302.0) {
                                                                            case true:
                                                                                ({ () in return switch l(70205.0) {
                                                                                    case true:
                                                                                        ({ () in return switch basics_or(e(70193.0), basics_or(e(70196.0), r(70198.0, 70199.0))) {
                                                                                            case true:
                                                                                                Maybe_Maybe.Just(Unicode_Category.MarkNonSpacing);

                                                                                            case false:
                                                                                                ({ () in return switch basics_or(r(70194.0, 70195.0), e(70197.0)) {
                                                                                                    case true:
                                                                                                        Maybe_Maybe.Just(Unicode_Category.MarkSpacingCombining);

                                                                                                    case false:
                                                                                                        ({ () in return switch r(70200.0, 70204.0) {
                                                                                                            case true:
                                                                                                                Maybe_Maybe.Just(Unicode_Category.PunctuationOther);

                                                                                                            case false:
                                                                                                                Maybe_Maybe.Nothing;
                                                                                                         }
                                                                                                        }());
                                                                                                 }
                                                                                                }());
                                                                                         }
                                                                                        }());

                                                                                    case false:
                                                                                        ({ () in return switch e(70205.0) {
                                                                                            case true:
                                                                                                Maybe_Maybe.Just(Unicode_Category.PunctuationOther);

                                                                                            case false:
                                                                                                ({ () in return switch basics_or(e(70206.0), e(70209.0)) {
                                                                                                    case true:
                                                                                                        Maybe_Maybe.Just(Unicode_Category.MarkNonSpacing);

                                                                                                    case false:
                                                                                                        ({ () in return switch basics_or(r(70207.0, 70208.0), basics_or(r(70272.0, 70278.0), basics_or(e(70280.0), basics_or(r(70282.0, 70285.0), r(70287.0, 70301.0))))) {
                                                                                                            case true:
                                                                                                                Maybe_Maybe.Just(Unicode_Category.LetterOther);

                                                                                                            case false:
                                                                                                                Maybe_Maybe.Nothing;
                                                                                                         }
                                                                                                        }());
                                                                                                 }
                                                                                                }());
                                                                                         }
                                                                                        }());
                                                                                 }
                                                                                }());

                                                                            case false:
                                                                                ({ () in return switch l(70399.0) {
                                                                                    case true:
                                                                                        ({ () in return switch basics_or(r(70303.0, 70312.0), r(70320.0, 70366.0)) {
                                                                                            case true:
                                                                                                Maybe_Maybe.Just(Unicode_Category.LetterOther);

                                                                                            case false:
                                                                                                ({ () in return switch e(70313.0) {
                                                                                                    case true:
                                                                                                        Maybe_Maybe.Just(Unicode_Category.PunctuationOther);

                                                                                                    case false:
                                                                                                        ({ () in return switch basics_or(e(70367.0), r(70371.0, 70378.0)) {
                                                                                                            case true:
                                                                                                                Maybe_Maybe.Just(Unicode_Category.MarkNonSpacing);

                                                                                                            case false:
                                                                                                                ({ () in return switch r(70368.0, 70370.0) {
                                                                                                                    case true:
                                                                                                                        Maybe_Maybe.Just(Unicode_Category.MarkSpacingCombining);

                                                                                                                    case false:
                                                                                                                        ({ () in return switch r(70384.0, 70393.0) {
                                                                                                                            case true:
                                                                                                                                Maybe_Maybe.Just(Unicode_Category.NumberDecimalDigit);

                                                                                                                            case false:
                                                                                                                                Maybe_Maybe.Nothing;
                                                                                                                         }
                                                                                                                        }());
                                                                                                                 }
                                                                                                                }());
                                                                                                         }
                                                                                                        }());
                                                                                                 }
                                                                                                }());
                                                                                         }
                                                                                        }());

                                                                                    case false:
                                                                                        ({ () in return switch r(70400.0, 70401.0) {
                                                                                            case true:
                                                                                                Maybe_Maybe.Just(Unicode_Category.MarkNonSpacing);

                                                                                            case false:
                                                                                                ({ () in return switch r(70402.0, 70403.0) {
                                                                                                    case true:
                                                                                                        Maybe_Maybe.Just(Unicode_Category.MarkSpacingCombining);

                                                                                                    case false:
                                                                                                        ({ () in return switch basics_or(r(70405.0, 70412.0), basics_or(r(70415.0, 70416.0), basics_or(r(70419.0, 70440.0), basics_or(r(70442.0, 70448.0), r(70450.0, 70451.0))))) {
                                                                                                            case true:
                                                                                                                Maybe_Maybe.Just(Unicode_Category.LetterOther);

                                                                                                            case false:
                                                                                                                Maybe_Maybe.Nothing;
                                                                                                         }
                                                                                                        }());
                                                                                                 }
                                                                                                }());
                                                                                         }
                                                                                        }());
                                                                                 }
                                                                                }());
                                                                         }
                                                                        }());
                                                                 }
                                                                }());
                                                         }
                                                        }());

                                                    case false:
                                                        ({ () in return switch l(71167.0) {
                                                            case true:
                                                                ({ () in return switch l(70748.0) {
                                                                    case true:
                                                                        ({ () in return switch l(70501.0) {
                                                                            case true:
                                                                                ({ () in return switch basics_or(r(70453.0, 70457.0), basics_or(e(70461.0), basics_or(e(70480.0), r(70493.0, 70497.0)))) {
                                                                                    case true:
                                                                                        Maybe_Maybe.Just(Unicode_Category.LetterOther);

                                                                                    case false:
                                                                                        ({ () in return switch basics_or(r(70459.0, 70460.0), e(70464.0)) {
                                                                                            case true:
                                                                                                Maybe_Maybe.Just(Unicode_Category.MarkNonSpacing);

                                                                                            case false:
                                                                                                ({ () in return switch basics_or(r(70462.0, 70463.0), basics_or(r(70465.0, 70468.0), basics_or(r(70471.0, 70472.0), basics_or(r(70475.0, 70477.0), basics_or(e(70487.0), r(70498.0, 70499.0)))))) {
                                                                                                    case true:
                                                                                                        Maybe_Maybe.Just(Unicode_Category.MarkSpacingCombining);

                                                                                                    case false:
                                                                                                        Maybe_Maybe.Nothing;
                                                                                                 }
                                                                                                }());
                                                                                         }
                                                                                        }());
                                                                                 }
                                                                                }());

                                                                            case false:
                                                                                ({ () in return switch l(70721.0) {
                                                                                    case true:
                                                                                        ({ () in return switch basics_or(r(70502.0, 70508.0), basics_or(r(70512.0, 70516.0), r(70712.0, 70719.0))) {
                                                                                            case true:
                                                                                                Maybe_Maybe.Just(Unicode_Category.MarkNonSpacing);

                                                                                            case false:
                                                                                                ({ () in return switch r(70656.0, 70708.0) {
                                                                                                    case true:
                                                                                                        Maybe_Maybe.Just(Unicode_Category.LetterOther);

                                                                                                    case false:
                                                                                                        ({ () in return switch basics_or(r(70709.0, 70711.0), e(70720.0)) {
                                                                                                            case true:
                                                                                                                Maybe_Maybe.Just(Unicode_Category.MarkSpacingCombining);

                                                                                                            case false:
                                                                                                                Maybe_Maybe.Nothing;
                                                                                                         }
                                                                                                        }());
                                                                                                 }
                                                                                                }());
                                                                                         }
                                                                                        }());

                                                                                    case false:
                                                                                        ({ () in return switch basics_or(e(70721.0), e(70725.0)) {
                                                                                            case true:
                                                                                                Maybe_Maybe.Just(Unicode_Category.MarkSpacingCombining);

                                                                                            case false:
                                                                                                ({ () in return switch basics_or(r(70722.0, 70724.0), e(70726.0)) {
                                                                                                    case true:
                                                                                                        Maybe_Maybe.Just(Unicode_Category.MarkNonSpacing);

                                                                                                    case false:
                                                                                                        ({ () in return switch r(70727.0, 70730.0) {
                                                                                                            case true:
                                                                                                                Maybe_Maybe.Just(Unicode_Category.LetterOther);

                                                                                                            case false:
                                                                                                                ({ () in return switch basics_or(r(70731.0, 70735.0), r(70746.0, 70747.0)) {
                                                                                                                    case true:
                                                                                                                        Maybe_Maybe.Just(Unicode_Category.PunctuationOther);

                                                                                                                    case false:
                                                                                                                        ({ () in return switch r(70736.0, 70745.0) {
                                                                                                                            case true:
                                                                                                                                Maybe_Maybe.Just(Unicode_Category.NumberDecimalDigit);

                                                                                                                            case false:
                                                                                                                                Maybe_Maybe.Nothing;
                                                                                                                         }
                                                                                                                        }());
                                                                                                                 }
                                                                                                                }());
                                                                                                         }
                                                                                                        }());
                                                                                                 }
                                                                                                }());
                                                                                         }
                                                                                        }());
                                                                                 }
                                                                                }());
                                                                         }
                                                                        }());

                                                                    case false:
                                                                        ({ () in return switch l(70853.0) {
                                                                            case true:
                                                                                ({ () in return switch l(70840.0) {
                                                                                    case true:
                                                                                        ({ () in return switch e(70749.0) {
                                                                                            case true:
                                                                                                Maybe_Maybe.Just(Unicode_Category.PunctuationOther);

                                                                                            case false:
                                                                                                ({ () in return switch basics_or(e(70750.0), r(70835.0, 70839.0)) {
                                                                                                    case true:
                                                                                                        Maybe_Maybe.Just(Unicode_Category.MarkNonSpacing);

                                                                                                    case false:
                                                                                                        ({ () in return switch basics_or(r(70751.0, 70753.0), r(70784.0, 70831.0)) {
                                                                                                            case true:
                                                                                                                Maybe_Maybe.Just(Unicode_Category.LetterOther);

                                                                                                            case false:
                                                                                                                ({ () in return switch r(70832.0, 70834.0) {
                                                                                                                    case true:
                                                                                                                        Maybe_Maybe.Just(Unicode_Category.MarkSpacingCombining);

                                                                                                                    case false:
                                                                                                                        Maybe_Maybe.Nothing;
                                                                                                                 }
                                                                                                                }());
                                                                                                         }
                                                                                                        }());
                                                                                                 }
                                                                                                }());
                                                                                         }
                                                                                        }());

                                                                                    case false:
                                                                                        ({ () in return switch basics_or(e(70840.0), basics_or(e(70842.0), basics_or(r(70847.0, 70848.0), r(70850.0, 70851.0)))) {
                                                                                            case true:
                                                                                                Maybe_Maybe.Just(Unicode_Category.MarkNonSpacing);

                                                                                            case false:
                                                                                                ({ () in return switch basics_or(e(70841.0), basics_or(r(70843.0, 70846.0), e(70849.0))) {
                                                                                                    case true:
                                                                                                        Maybe_Maybe.Just(Unicode_Category.MarkSpacingCombining);

                                                                                                    case false:
                                                                                                        ({ () in return switch e(70852.0) {
                                                                                                            case true:
                                                                                                                Maybe_Maybe.Just(Unicode_Category.LetterOther);

                                                                                                            case false:
                                                                                                                Maybe_Maybe.Nothing;
                                                                                                         }
                                                                                                        }());
                                                                                                 }
                                                                                                }());
                                                                                         }
                                                                                        }());
                                                                                 }
                                                                                }());

                                                                            case false:
                                                                                ({ () in return switch l(71095.0) {
                                                                                    case true:
                                                                                        ({ () in return switch basics_or(e(70853.0), basics_or(e(70855.0), r(71040.0, 71086.0))) {
                                                                                            case true:
                                                                                                Maybe_Maybe.Just(Unicode_Category.LetterOther);

                                                                                            case false:
                                                                                                ({ () in return switch e(70854.0) {
                                                                                                    case true:
                                                                                                        Maybe_Maybe.Just(Unicode_Category.PunctuationOther);

                                                                                                    case false:
                                                                                                        ({ () in return switch r(70864.0, 70873.0) {
                                                                                                            case true:
                                                                                                                Maybe_Maybe.Just(Unicode_Category.NumberDecimalDigit);

                                                                                                            case false:
                                                                                                                ({ () in return switch r(71087.0, 71089.0) {
                                                                                                                    case true:
                                                                                                                        Maybe_Maybe.Just(Unicode_Category.MarkSpacingCombining);

                                                                                                                    case false:
                                                                                                                        ({ () in return switch r(71090.0, 71093.0) {
                                                                                                                            case true:
                                                                                                                                Maybe_Maybe.Just(Unicode_Category.MarkNonSpacing);

                                                                                                                            case false:
                                                                                                                                Maybe_Maybe.Nothing;
                                                                                                                         }
                                                                                                                        }());
                                                                                                                 }
                                                                                                                }());
                                                                                                         }
                                                                                                        }());
                                                                                                 }
                                                                                                }());
                                                                                         }
                                                                                        }());

                                                                                    case false:
                                                                                        ({ () in return switch basics_or(r(71096.0, 71099.0), e(71102.0)) {
                                                                                            case true:
                                                                                                Maybe_Maybe.Just(Unicode_Category.MarkSpacingCombining);

                                                                                            case false:
                                                                                                ({ () in return switch basics_or(r(71100.0, 71101.0), basics_or(r(71103.0, 71104.0), r(71132.0, 71133.0))) {
                                                                                                    case true:
                                                                                                        Maybe_Maybe.Just(Unicode_Category.MarkNonSpacing);

                                                                                                    case false:
                                                                                                        ({ () in return switch r(71105.0, 71127.0) {
                                                                                                            case true:
                                                                                                                Maybe_Maybe.Just(Unicode_Category.PunctuationOther);

                                                                                                            case false:
                                                                                                                ({ () in return switch r(71128.0, 71131.0) {
                                                                                                                    case true:
                                                                                                                        Maybe_Maybe.Just(Unicode_Category.LetterOther);

                                                                                                                    case false:
                                                                                                                        Maybe_Maybe.Nothing;
                                                                                                                 }
                                                                                                                }());
                                                                                                         }
                                                                                                        }());
                                                                                                 }
                                                                                                }());
                                                                                         }
                                                                                        }());
                                                                                 }
                                                                                }());
                                                                         }
                                                                        }());
                                                                 }
                                                                }());

                                                            case false:
                                                                ({ () in return switch l(71457.0) {
                                                                    case true:
                                                                        ({ () in return switch l(71338.0) {
                                                                            case true:
                                                                                ({ () in return switch basics_or(r(71168.0, 71215.0), basics_or(e(71236.0), r(71296.0, 71337.0))) {
                                                                                    case true:
                                                                                        Maybe_Maybe.Just(Unicode_Category.LetterOther);

                                                                                    case false:
                                                                                        ({ () in return switch basics_or(r(71216.0, 71218.0), basics_or(r(71227.0, 71228.0), e(71230.0))) {
                                                                                            case true:
                                                                                                Maybe_Maybe.Just(Unicode_Category.MarkSpacingCombining);

                                                                                            case false:
                                                                                                ({ () in return switch basics_or(r(71219.0, 71226.0), basics_or(e(71229.0), r(71231.0, 71232.0))) {
                                                                                                    case true:
                                                                                                        Maybe_Maybe.Just(Unicode_Category.MarkNonSpacing);

                                                                                                    case false:
                                                                                                        ({ () in return switch basics_or(r(71233.0, 71235.0), r(71264.0, 71276.0)) {
                                                                                                            case true:
                                                                                                                Maybe_Maybe.Just(Unicode_Category.PunctuationOther);

                                                                                                            case false:
                                                                                                                ({ () in return switch r(71248.0, 71257.0) {
                                                                                                                    case true:
                                                                                                                        Maybe_Maybe.Just(Unicode_Category.NumberDecimalDigit);

                                                                                                                    case false:
                                                                                                                        Maybe_Maybe.Nothing;
                                                                                                                 }
                                                                                                                }());
                                                                                                         }
                                                                                                        }());
                                                                                                 }
                                                                                                }());
                                                                                         }
                                                                                        }());
                                                                                 }
                                                                                }());

                                                                            case false:
                                                                                ({ () in return switch l(71350.0) {
                                                                                    case true:
                                                                                        ({ () in return switch e(71338.0) {
                                                                                            case true:
                                                                                                Maybe_Maybe.Just(Unicode_Category.LetterOther);

                                                                                            case false:
                                                                                                ({ () in return switch basics_or(e(71339.0), basics_or(e(71341.0), r(71344.0, 71349.0))) {
                                                                                                    case true:
                                                                                                        Maybe_Maybe.Just(Unicode_Category.MarkNonSpacing);

                                                                                                    case false:
                                                                                                        ({ () in return switch basics_or(e(71340.0), r(71342.0, 71343.0)) {
                                                                                                            case true:
                                                                                                                Maybe_Maybe.Just(Unicode_Category.MarkSpacingCombining);

                                                                                                            case false:
                                                                                                                Maybe_Maybe.Nothing;
                                                                                                         }
                                                                                                        }());
                                                                                                 }
                                                                                                }());
                                                                                         }
                                                                                        }());

                                                                                    case false:
                                                                                        ({ () in return switch basics_or(e(71350.0), e(71456.0)) {
                                                                                            case true:
                                                                                                Maybe_Maybe.Just(Unicode_Category.MarkSpacingCombining);

                                                                                            case false:
                                                                                                ({ () in return switch basics_or(e(71351.0), r(71453.0, 71455.0)) {
                                                                                                    case true:
                                                                                                        Maybe_Maybe.Just(Unicode_Category.MarkNonSpacing);

                                                                                                    case false:
                                                                                                        ({ () in return switch basics_or(e(71352.0), r(71424.0, 71450.0)) {
                                                                                                            case true:
                                                                                                                Maybe_Maybe.Just(Unicode_Category.LetterOther);

                                                                                                            case false:
                                                                                                                ({ () in return switch e(71353.0) {
                                                                                                                    case true:
                                                                                                                        Maybe_Maybe.Just(Unicode_Category.PunctuationOther);

                                                                                                                    case false:
                                                                                                                        ({ () in return switch r(71360.0, 71369.0) {
                                                                                                                            case true:
                                                                                                                                Maybe_Maybe.Just(Unicode_Category.NumberDecimalDigit);

                                                                                                                            case false:
                                                                                                                                Maybe_Maybe.Nothing;
                                                                                                                         }
                                                                                                                        }());
                                                                                                                 }
                                                                                                                }());
                                                                                                         }
                                                                                                        }());
                                                                                                 }
                                                                                                }());
                                                                                         }
                                                                                        }());
                                                                                 }
                                                                                }());
                                                                         }
                                                                        }());

                                                                    case false:
                                                                        ({ () in return switch l(71736.0) {
                                                                            case true:
                                                                                ({ () in return switch basics_or(e(71457.0), basics_or(e(71462.0), r(71724.0, 71726.0))) {
                                                                                    case true:
                                                                                        Maybe_Maybe.Just(Unicode_Category.MarkSpacingCombining);

                                                                                    case false:
                                                                                        ({ () in return switch basics_or(r(71458.0, 71461.0), basics_or(r(71463.0, 71467.0), r(71727.0, 71735.0))) {
                                                                                            case true:
                                                                                                Maybe_Maybe.Just(Unicode_Category.MarkNonSpacing);

                                                                                            case false:
                                                                                                ({ () in return switch r(71472.0, 71481.0) {
                                                                                                    case true:
                                                                                                        Maybe_Maybe.Just(Unicode_Category.NumberDecimalDigit);

                                                                                                    case false:
                                                                                                        ({ () in return switch r(71482.0, 71483.0) {
                                                                                                            case true:
                                                                                                                Maybe_Maybe.Just(Unicode_Category.NumberOther);

                                                                                                            case false:
                                                                                                                ({ () in return switch r(71484.0, 71486.0) {
                                                                                                                    case true:
                                                                                                                        Maybe_Maybe.Just(Unicode_Category.PunctuationOther);

                                                                                                                    case false:
                                                                                                                        ({ () in return switch e(71487.0) {
                                                                                                                            case true:
                                                                                                                                Maybe_Maybe.Just(Unicode_Category.SymbolOther);

                                                                                                                            case false:
                                                                                                                                ({ () in return switch basics_or(r(71488.0, 71494.0), r(71680.0, 71723.0)) {
                                                                                                                                    case true:
                                                                                                                                        Maybe_Maybe.Just(Unicode_Category.LetterOther);

                                                                                                                                    case false:
                                                                                                                                        Maybe_Maybe.Nothing;
                                                                                                                                 }
                                                                                                                                }());
                                                                                                                         }
                                                                                                                        }());
                                                                                                                 }
                                                                                                                }());
                                                                                                         }
                                                                                                        }());
                                                                                                 }
                                                                                                }());
                                                                                         }
                                                                                        }());
                                                                                 }
                                                                                }());

                                                                            case false:
                                                                                ({ () in return switch l(71934.0) {
                                                                                    case true:
                                                                                        ({ () in return switch e(71736.0) {
                                                                                            case true:
                                                                                                Maybe_Maybe.Just(Unicode_Category.MarkSpacingCombining);

                                                                                            case false:
                                                                                                ({ () in return switch r(71737.0, 71738.0) {
                                                                                                    case true:
                                                                                                        Maybe_Maybe.Just(Unicode_Category.MarkNonSpacing);

                                                                                                    case false:
                                                                                                        ({ () in return switch e(71739.0) {
                                                                                                            case true:
                                                                                                                Maybe_Maybe.Just(Unicode_Category.PunctuationOther);

                                                                                                            case false:
                                                                                                                ({ () in return switch r(71840.0, 71871.0) {
                                                                                                                    case true:
                                                                                                                        Maybe_Maybe.Just(Unicode_Category.LetterUppercase);

                                                                                                                    case false:
                                                                                                                        ({ () in return switch r(71872.0, 71903.0) {
                                                                                                                            case true:
                                                                                                                                Maybe_Maybe.Just(Unicode_Category.LetterLowercase);

                                                                                                                            case false:
                                                                                                                                ({ () in return switch r(71904.0, 71913.0) {
                                                                                                                                    case true:
                                                                                                                                        Maybe_Maybe.Just(Unicode_Category.NumberDecimalDigit);

                                                                                                                                    case false:
                                                                                                                                        ({ () in return switch r(71914.0, 71922.0) {
                                                                                                                                            case true:
                                                                                                                                                Maybe_Maybe.Just(Unicode_Category.NumberOther);

                                                                                                                                            case false:
                                                                                                                                                Maybe_Maybe.Nothing;
                                                                                                                                         }
                                                                                                                                        }());
                                                                                                                                 }
                                                                                                                                }());
                                                                                                                         }
                                                                                                                        }());
                                                                                                                 }
                                                                                                                }());
                                                                                                         }
                                                                                                        }());
                                                                                                 }
                                                                                                }());
                                                                                         }
                                                                                        }());

                                                                                    case false:
                                                                                        ({ () in return switch basics_or(r(71935.0, 71942.0), basics_or(e(71945.0), basics_or(r(71948.0, 71955.0), basics_or(r(71957.0, 71958.0), r(71960.0, 71983.0))))) {
                                                                                            case true:
                                                                                                Maybe_Maybe.Just(Unicode_Category.LetterOther);

                                                                                            case false:
                                                                                                ({ () in return switch basics_or(r(71984.0, 71989.0), r(71991.0, 71992.0)) {
                                                                                                    case true:
                                                                                                        Maybe_Maybe.Just(Unicode_Category.MarkSpacingCombining);

                                                                                                    case false:
                                                                                                        ({ () in return switch e(71995.0) {
                                                                                                            case true:
                                                                                                                Maybe_Maybe.Just(Unicode_Category.MarkNonSpacing);

                                                                                                            case false:
                                                                                                                Maybe_Maybe.Nothing;
                                                                                                         }
                                                                                                        }());
                                                                                                 }
                                                                                                }());
                                                                                         }
                                                                                        }());
                                                                                 }
                                                                                }());
                                                                         }
                                                                        }());
                                                                 }
                                                                }());
                                                         }
                                                        }());
                                                 }
                                                }());
                                         }
                                        }());

                                    case false:
                                        ({ () in return switch l(119893.0) {
                                            case true:
                                                ({ () in return switch l(73647.0) {
                                                    case true:
                                                        ({ () in return switch l(72767.0) {
                                                            case true:
                                                                ({ () in return switch l(72242.0) {
                                                                    case true:
                                                                        ({ () in return switch l(72144.0) {
                                                                            case true:
                                                                                ({ () in return switch basics_or(e(71996.0), basics_or(e(71998.0), e(72003.0))) {
                                                                                    case true:
                                                                                        Maybe_Maybe.Just(Unicode_Category.MarkNonSpacing);

                                                                                    case false:
                                                                                        ({ () in return switch basics_or(e(71997.0), basics_or(e(72000.0), e(72002.0))) {
                                                                                            case true:
                                                                                                Maybe_Maybe.Just(Unicode_Category.MarkSpacingCombining);

                                                                                            case false:
                                                                                                ({ () in return switch basics_or(e(71999.0), basics_or(e(72001.0), basics_or(r(72096.0, 72103.0), r(72106.0, 72143.0)))) {
                                                                                                    case true:
                                                                                                        Maybe_Maybe.Just(Unicode_Category.LetterOther);

                                                                                                    case false:
                                                                                                        ({ () in return switch r(72004.0, 72006.0) {
                                                                                                            case true:
                                                                                                                Maybe_Maybe.Just(Unicode_Category.PunctuationOther);

                                                                                                            case false:
                                                                                                                ({ () in return switch r(72016.0, 72025.0) {
                                                                                                                    case true:
                                                                                                                        Maybe_Maybe.Just(Unicode_Category.NumberDecimalDigit);

                                                                                                                    case false:
                                                                                                                        Maybe_Maybe.Nothing;
                                                                                                                 }
                                                                                                                }());
                                                                                                         }
                                                                                                        }());
                                                                                                 }
                                                                                                }());
                                                                                         }
                                                                                        }());
                                                                                 }
                                                                                }());

                                                                            case false:
                                                                                ({ () in return switch l(72160.0) {
                                                                                    case true:
                                                                                        ({ () in return switch e(72144.0) {
                                                                                            case true:
                                                                                                Maybe_Maybe.Just(Unicode_Category.LetterOther);

                                                                                            case false:
                                                                                                ({ () in return switch basics_or(r(72145.0, 72147.0), r(72156.0, 72159.0)) {
                                                                                                    case true:
                                                                                                        Maybe_Maybe.Just(Unicode_Category.MarkSpacingCombining);

                                                                                                    case false:
                                                                                                        ({ () in return switch basics_or(r(72148.0, 72151.0), r(72154.0, 72155.0)) {
                                                                                                            case true:
                                                                                                                Maybe_Maybe.Just(Unicode_Category.MarkNonSpacing);

                                                                                                            case false:
                                                                                                                Maybe_Maybe.Nothing;
                                                                                                         }
                                                                                                        }());
                                                                                                 }
                                                                                                }());
                                                                                         }
                                                                                        }());

                                                                                    case false:
                                                                                        ({ () in return switch basics_or(e(72160.0), r(72193.0, 72202.0)) {
                                                                                            case true:
                                                                                                Maybe_Maybe.Just(Unicode_Category.MarkNonSpacing);

                                                                                            case false:
                                                                                                ({ () in return switch basics_or(e(72161.0), basics_or(e(72163.0), basics_or(e(72192.0), r(72203.0, 72241.0)))) {
                                                                                                    case true:
                                                                                                        Maybe_Maybe.Just(Unicode_Category.LetterOther);

                                                                                                    case false:
                                                                                                        ({ () in return switch e(72162.0) {
                                                                                                            case true:
                                                                                                                Maybe_Maybe.Just(Unicode_Category.PunctuationOther);

                                                                                                            case false:
                                                                                                                ({ () in return switch e(72164.0) {
                                                                                                                    case true:
                                                                                                                        Maybe_Maybe.Just(Unicode_Category.MarkSpacingCombining);

                                                                                                                    case false:
                                                                                                                        Maybe_Maybe.Nothing;
                                                                                                                 }
                                                                                                                }());
                                                                                                         }
                                                                                                        }());
                                                                                                 }
                                                                                                }());
                                                                                         }
                                                                                        }());
                                                                                 }
                                                                                }());
                                                                         }
                                                                        }());

                                                                    case false:
                                                                        ({ () in return switch l(72342.0) {
                                                                            case true:
                                                                                ({ () in return switch l(72262.0) {
                                                                                    case true:
                                                                                        ({ () in return switch basics_or(e(72242.0), e(72250.0)) {
                                                                                            case true:
                                                                                                Maybe_Maybe.Just(Unicode_Category.LetterOther);

                                                                                            case false:
                                                                                                ({ () in return switch basics_or(r(72243.0, 72248.0), r(72251.0, 72254.0)) {
                                                                                                    case true:
                                                                                                        Maybe_Maybe.Just(Unicode_Category.MarkNonSpacing);

                                                                                                    case false:
                                                                                                        ({ () in return switch e(72249.0) {
                                                                                                            case true:
                                                                                                                Maybe_Maybe.Just(Unicode_Category.MarkSpacingCombining);

                                                                                                            case false:
                                                                                                                ({ () in return switch r(72255.0, 72261.0) {
                                                                                                                    case true:
                                                                                                                        Maybe_Maybe.Just(Unicode_Category.PunctuationOther);

                                                                                                                    case false:
                                                                                                                        Maybe_Maybe.Nothing;
                                                                                                                 }
                                                                                                                }());
                                                                                                         }
                                                                                                        }());
                                                                                                 }
                                                                                                }());
                                                                                         }
                                                                                        }());

                                                                                    case false:
                                                                                        ({ () in return switch e(72262.0) {
                                                                                            case true:
                                                                                                Maybe_Maybe.Just(Unicode_Category.PunctuationOther);

                                                                                            case false:
                                                                                                ({ () in return switch basics_or(e(72263.0), basics_or(r(72273.0, 72278.0), basics_or(r(72281.0, 72283.0), r(72330.0, 72341.0)))) {
                                                                                                    case true:
                                                                                                        Maybe_Maybe.Just(Unicode_Category.MarkNonSpacing);

                                                                                                    case false:
                                                                                                        ({ () in return switch basics_or(e(72272.0), r(72284.0, 72329.0)) {
                                                                                                            case true:
                                                                                                                Maybe_Maybe.Just(Unicode_Category.LetterOther);

                                                                                                            case false:
                                                                                                                ({ () in return switch r(72279.0, 72280.0) {
                                                                                                                    case true:
                                                                                                                        Maybe_Maybe.Just(Unicode_Category.MarkSpacingCombining);

                                                                                                                    case false:
                                                                                                                        Maybe_Maybe.Nothing;
                                                                                                                 }
                                                                                                                }());
                                                                                                         }
                                                                                                        }());
                                                                                                 }
                                                                                                }());
                                                                                         }
                                                                                        }());
                                                                                 }
                                                                                }());

                                                                            case false:
                                                                                ({ () in return switch l(72447.0) {
                                                                                    case true:
                                                                                        ({ () in return switch basics_or(e(72342.0), r(72344.0, 72345.0)) {
                                                                                            case true:
                                                                                                Maybe_Maybe.Just(Unicode_Category.MarkNonSpacing);

                                                                                            case false:
                                                                                                ({ () in return switch e(72343.0) {
                                                                                                    case true:
                                                                                                        Maybe_Maybe.Just(Unicode_Category.MarkSpacingCombining);

                                                                                                    case false:
                                                                                                        ({ () in return switch basics_or(r(72346.0, 72348.0), r(72350.0, 72354.0)) {
                                                                                                            case true:
                                                                                                                Maybe_Maybe.Just(Unicode_Category.PunctuationOther);

                                                                                                            case false:
                                                                                                                ({ () in return switch basics_or(e(72349.0), r(72368.0, 72440.0)) {
                                                                                                                    case true:
                                                                                                                        Maybe_Maybe.Just(Unicode_Category.LetterOther);

                                                                                                                    case false:
                                                                                                                        Maybe_Maybe.Nothing;
                                                                                                                 }
                                                                                                                }());
                                                                                                         }
                                                                                                        }());
                                                                                                 }
                                                                                                }());
                                                                                         }
                                                                                        }());

                                                                                    case false:
                                                                                        ({ () in return switch r(72448.0, 72457.0) {
                                                                                            case true:
                                                                                                Maybe_Maybe.Just(Unicode_Category.PunctuationOther);

                                                                                            case false:
                                                                                                ({ () in return switch basics_or(r(72704.0, 72712.0), r(72714.0, 72750.0)) {
                                                                                                    case true:
                                                                                                        Maybe_Maybe.Just(Unicode_Category.LetterOther);

                                                                                                    case false:
                                                                                                        ({ () in return switch basics_or(e(72751.0), e(72766.0)) {
                                                                                                            case true:
                                                                                                                Maybe_Maybe.Just(Unicode_Category.MarkSpacingCombining);

                                                                                                            case false:
                                                                                                                ({ () in return switch basics_or(r(72752.0, 72758.0), r(72760.0, 72765.0)) {
                                                                                                                    case true:
                                                                                                                        Maybe_Maybe.Just(Unicode_Category.MarkNonSpacing);

                                                                                                                    case false:
                                                                                                                        Maybe_Maybe.Nothing;
                                                                                                                 }
                                                                                                                }());
                                                                                                         }
                                                                                                        }());
                                                                                                 }
                                                                                                }());
                                                                                         }
                                                                                        }());
                                                                                 }
                                                                                }());
                                                                         }
                                                                        }());
                                                                 }
                                                                }());

                                                            case false:
                                                                ({ () in return switch l(73065.0) {
                                                                    case true:
                                                                        ({ () in return switch l(72884.0) {
                                                                            case true:
                                                                                ({ () in return switch basics_or(e(72767.0), basics_or(r(72850.0, 72871.0), basics_or(r(72874.0, 72880.0), r(72882.0, 72883.0)))) {
                                                                                    case true:
                                                                                        Maybe_Maybe.Just(Unicode_Category.MarkNonSpacing);

                                                                                    case false:
                                                                                        ({ () in return switch basics_or(e(72768.0), r(72818.0, 72847.0)) {
                                                                                            case true:
                                                                                                Maybe_Maybe.Just(Unicode_Category.LetterOther);

                                                                                            case false:
                                                                                                ({ () in return switch basics_or(r(72769.0, 72773.0), r(72816.0, 72817.0)) {
                                                                                                    case true:
                                                                                                        Maybe_Maybe.Just(Unicode_Category.PunctuationOther);

                                                                                                    case false:
                                                                                                        ({ () in return switch r(72784.0, 72793.0) {
                                                                                                            case true:
                                                                                                                Maybe_Maybe.Just(Unicode_Category.NumberDecimalDigit);

                                                                                                            case false:
                                                                                                                ({ () in return switch r(72794.0, 72812.0) {
                                                                                                                    case true:
                                                                                                                        Maybe_Maybe.Just(Unicode_Category.NumberOther);

                                                                                                                    case false:
                                                                                                                        ({ () in return switch basics_or(e(72873.0), e(72881.0)) {
                                                                                                                            case true:
                                                                                                                                Maybe_Maybe.Just(Unicode_Category.MarkSpacingCombining);

                                                                                                                            case false:
                                                                                                                                Maybe_Maybe.Nothing;
                                                                                                                         }
                                                                                                                        }());
                                                                                                                 }
                                                                                                                }());
                                                                                                         }
                                                                                                        }());
                                                                                                 }
                                                                                                }());
                                                                                         }
                                                                                        }());
                                                                                 }
                                                                                }());

                                                                            case false:
                                                                                ({ () in return switch l(73019.0) {
                                                                                    case true:
                                                                                        ({ () in return switch e(72884.0) {
                                                                                            case true:
                                                                                                Maybe_Maybe.Just(Unicode_Category.MarkSpacingCombining);

                                                                                            case false:
                                                                                                ({ () in return switch basics_or(r(72885.0, 72886.0), basics_or(r(73009.0, 73014.0), e(73018.0))) {
                                                                                                    case true:
                                                                                                        Maybe_Maybe.Just(Unicode_Category.MarkNonSpacing);

                                                                                                    case false:
                                                                                                        ({ () in return switch basics_or(r(72960.0, 72966.0), basics_or(r(72968.0, 72969.0), r(72971.0, 73008.0))) {
                                                                                                            case true:
                                                                                                                Maybe_Maybe.Just(Unicode_Category.LetterOther);

                                                                                                            case false:
                                                                                                                Maybe_Maybe.Nothing;
                                                                                                         }
                                                                                                        }());
                                                                                                 }
                                                                                                }());
                                                                                         }
                                                                                        }());

                                                                                    case false:
                                                                                        ({ () in return switch basics_or(r(73020.0, 73021.0), basics_or(r(73023.0, 73029.0), e(73031.0))) {
                                                                                            case true:
                                                                                                Maybe_Maybe.Just(Unicode_Category.MarkNonSpacing);

                                                                                            case false:
                                                                                                ({ () in return switch basics_or(e(73030.0), basics_or(r(73056.0, 73061.0), r(73063.0, 73064.0))) {
                                                                                                    case true:
                                                                                                        Maybe_Maybe.Just(Unicode_Category.LetterOther);

                                                                                                    case false:
                                                                                                        ({ () in return switch r(73040.0, 73049.0) {
                                                                                                            case true:
                                                                                                                Maybe_Maybe.Just(Unicode_Category.NumberDecimalDigit);

                                                                                                            case false:
                                                                                                                Maybe_Maybe.Nothing;
                                                                                                         }
                                                                                                        }());
                                                                                                 }
                                                                                                }());
                                                                                         }
                                                                                        }());
                                                                                 }
                                                                                }());
                                                                         }
                                                                        }());

                                                                    case false:
                                                                        ({ () in return switch l(73471.0) {
                                                                            case true:
                                                                                ({ () in return switch l(73110.0) {
                                                                                    case true:
                                                                                        ({ () in return switch r(73066.0, 73097.0) {
                                                                                            case true:
                                                                                                Maybe_Maybe.Just(Unicode_Category.LetterOther);

                                                                                            case false:
                                                                                                ({ () in return switch basics_or(r(73098.0, 73102.0), r(73107.0, 73108.0)) {
                                                                                                    case true:
                                                                                                        Maybe_Maybe.Just(Unicode_Category.MarkSpacingCombining);

                                                                                                    case false:
                                                                                                        ({ () in return switch basics_or(r(73104.0, 73105.0), e(73109.0)) {
                                                                                                            case true:
                                                                                                                Maybe_Maybe.Just(Unicode_Category.MarkNonSpacing);

                                                                                                            case false:
                                                                                                                Maybe_Maybe.Nothing;
                                                                                                         }
                                                                                                        }());
                                                                                                 }
                                                                                                }());
                                                                                         }
                                                                                        }());

                                                                                    case false:
                                                                                        ({ () in return switch basics_or(e(73110.0), r(73461.0, 73462.0)) {
                                                                                            case true:
                                                                                                Maybe_Maybe.Just(Unicode_Category.MarkSpacingCombining);

                                                                                            case false:
                                                                                                ({ () in return switch basics_or(e(73111.0), r(73459.0, 73460.0)) {
                                                                                                    case true:
                                                                                                        Maybe_Maybe.Just(Unicode_Category.MarkNonSpacing);

                                                                                                    case false:
                                                                                                        ({ () in return switch basics_or(e(73112.0), r(73440.0, 73458.0)) {
                                                                                                            case true:
                                                                                                                Maybe_Maybe.Just(Unicode_Category.LetterOther);

                                                                                                            case false:
                                                                                                                ({ () in return switch r(73120.0, 73129.0) {
                                                                                                                    case true:
                                                                                                                        Maybe_Maybe.Just(Unicode_Category.NumberDecimalDigit);

                                                                                                                    case false:
                                                                                                                        ({ () in return switch r(73463.0, 73464.0) {
                                                                                                                            case true:
                                                                                                                                Maybe_Maybe.Just(Unicode_Category.PunctuationOther);

                                                                                                                            case false:
                                                                                                                                Maybe_Maybe.Nothing;
                                                                                                                         }
                                                                                                                        }());
                                                                                                                 }
                                                                                                                }());
                                                                                                         }
                                                                                                        }());
                                                                                                 }
                                                                                                }());
                                                                                         }
                                                                                        }());
                                                                                 }
                                                                                }());

                                                                            case false:
                                                                                ({ () in return switch l(73525.0) {
                                                                                    case true:
                                                                                        ({ () in return switch r(73472.0, 73473.0) {
                                                                                            case true:
                                                                                                Maybe_Maybe.Just(Unicode_Category.MarkNonSpacing);

                                                                                            case false:
                                                                                                ({ () in return switch basics_or(e(73474.0), basics_or(r(73476.0, 73488.0), r(73490.0, 73523.0))) {
                                                                                                    case true:
                                                                                                        Maybe_Maybe.Just(Unicode_Category.LetterOther);

                                                                                                    case false:
                                                                                                        ({ () in return switch basics_or(e(73475.0), e(73524.0)) {
                                                                                                            case true:
                                                                                                                Maybe_Maybe.Just(Unicode_Category.MarkSpacingCombining);

                                                                                                            case false:
                                                                                                                Maybe_Maybe.Nothing;
                                                                                                         }
                                                                                                        }());
                                                                                                 }
                                                                                                }());
                                                                                         }
                                                                                        }());

                                                                                    case false:
                                                                                        ({ () in return switch basics_or(e(73525.0), basics_or(r(73534.0, 73535.0), e(73537.0))) {
                                                                                            case true:
                                                                                                Maybe_Maybe.Just(Unicode_Category.MarkSpacingCombining);

                                                                                            case false:
                                                                                                ({ () in return switch basics_or(r(73526.0, 73530.0), basics_or(e(73536.0), e(73538.0))) {
                                                                                                    case true:
                                                                                                        Maybe_Maybe.Just(Unicode_Category.MarkNonSpacing);

                                                                                                    case false:
                                                                                                        ({ () in return switch r(73539.0, 73551.0) {
                                                                                                            case true:
                                                                                                                Maybe_Maybe.Just(Unicode_Category.PunctuationOther);

                                                                                                            case false:
                                                                                                                ({ () in return switch r(73552.0, 73561.0) {
                                                                                                                    case true:
                                                                                                                        Maybe_Maybe.Just(Unicode_Category.NumberDecimalDigit);

                                                                                                                    case false:
                                                                                                                        Maybe_Maybe.Nothing;
                                                                                                                 }
                                                                                                                }());
                                                                                                         }
                                                                                                        }());
                                                                                                 }
                                                                                                }());
                                                                                         }
                                                                                        }());
                                                                                 }
                                                                                }());
                                                                         }
                                                                        }());
                                                                 }
                                                                }());
                                                         }
                                                        }());

                                                    case false:
                                                        ({ () in return switch l(94178.0) {
                                                            case true:
                                                                ({ () in return switch l(92879.0) {
                                                                    case true:
                                                                        ({ () in return switch l(77823.0) {
                                                                            case true:
                                                                                ({ () in return switch basics_or(e(73648.0), basics_or(r(73728.0, 74649.0), basics_or(r(74880.0, 75075.0), r(77712.0, 77808.0)))) {
                                                                                    case true:
                                                                                        Maybe_Maybe.Just(Unicode_Category.LetterOther);

                                                                                    case false:
                                                                                        ({ () in return switch r(73664.0, 73684.0) {
                                                                                            case true:
                                                                                                Maybe_Maybe.Just(Unicode_Category.NumberOther);

                                                                                            case false:
                                                                                                ({ () in return switch basics_or(r(73685.0, 73692.0), r(73697.0, 73713.0)) {
                                                                                                    case true:
                                                                                                        Maybe_Maybe.Just(Unicode_Category.SymbolOther);

                                                                                                    case false:
                                                                                                        ({ () in return switch r(73693.0, 73696.0) {
                                                                                                            case true:
                                                                                                                Maybe_Maybe.Just(Unicode_Category.SymbolCurrency);

                                                                                                            case false:
                                                                                                                ({ () in return switch basics_or(e(73727.0), basics_or(r(74864.0, 74868.0), r(77809.0, 77810.0))) {
                                                                                                                    case true:
                                                                                                                        Maybe_Maybe.Just(Unicode_Category.PunctuationOther);

                                                                                                                    case false:
                                                                                                                        ({ () in return switch r(74752.0, 74862.0) {
                                                                                                                            case true:
                                                                                                                                Maybe_Maybe.Just(Unicode_Category.NumberLetter);

                                                                                                                            case false:
                                                                                                                                Maybe_Maybe.Nothing;
                                                                                                                         }
                                                                                                                        }());
                                                                                                                 }
                                                                                                                }());
                                                                                                         }
                                                                                                        }());
                                                                                                 }
                                                                                                }());
                                                                                         }
                                                                                        }());
                                                                                 }
                                                                                }());

                                                                            case false:
                                                                                ({ () in return switch basics_or(r(77824.0, 78895.0), basics_or(r(78913.0, 78918.0), basics_or(r(82944.0, 83526.0), basics_or(r(92160.0, 92728.0), basics_or(r(92736.0, 92766.0), r(92784.0, 92862.0)))))) {
                                                                                    case true:
                                                                                        Maybe_Maybe.Just(Unicode_Category.LetterOther);

                                                                                    case false:
                                                                                        ({ () in return switch r(78896.0, 78911.0) {
                                                                                            case true:
                                                                                                Maybe_Maybe.Just(Unicode_Category.OtherFormat);

                                                                                            case false:
                                                                                                ({ () in return switch basics_or(e(78912.0), r(78919.0, 78933.0)) {
                                                                                                    case true:
                                                                                                        Maybe_Maybe.Just(Unicode_Category.MarkNonSpacing);

                                                                                                    case false:
                                                                                                        ({ () in return switch basics_or(r(92768.0, 92777.0), r(92864.0, 92873.0)) {
                                                                                                            case true:
                                                                                                                Maybe_Maybe.Just(Unicode_Category.NumberDecimalDigit);

                                                                                                            case false:
                                                                                                                ({ () in return switch r(92782.0, 92783.0) {
                                                                                                                    case true:
                                                                                                                        Maybe_Maybe.Just(Unicode_Category.PunctuationOther);

                                                                                                                    case false:
                                                                                                                        Maybe_Maybe.Nothing;
                                                                                                                 }
                                                                                                                }());
                                                                                                         }
                                                                                                        }());
                                                                                                 }
                                                                                                }());
                                                                                         }
                                                                                        }());
                                                                                 }
                                                                                }());
                                                                         }
                                                                        }());

                                                                    case false:
                                                                        ({ () in return switch l(93026.0) {
                                                                            case true:
                                                                                ({ () in return switch basics_or(r(92880.0, 92909.0), r(92928.0, 92975.0)) {
                                                                                    case true:
                                                                                        Maybe_Maybe.Just(Unicode_Category.LetterOther);

                                                                                    case false:
                                                                                        ({ () in return switch basics_or(r(92912.0, 92916.0), r(92976.0, 92982.0)) {
                                                                                            case true:
                                                                                                Maybe_Maybe.Just(Unicode_Category.MarkNonSpacing);

                                                                                            case false:
                                                                                                ({ () in return switch basics_or(e(92917.0), basics_or(r(92983.0, 92987.0), e(92996.0))) {
                                                                                                    case true:
                                                                                                        Maybe_Maybe.Just(Unicode_Category.PunctuationOther);

                                                                                                    case false:
                                                                                                        ({ () in return switch basics_or(r(92988.0, 92991.0), e(92997.0)) {
                                                                                                            case true:
                                                                                                                Maybe_Maybe.Just(Unicode_Category.SymbolOther);

                                                                                                            case false:
                                                                                                                ({ () in return switch r(92992.0, 92995.0) {
                                                                                                                    case true:
                                                                                                                        Maybe_Maybe.Just(Unicode_Category.LetterModifier);

                                                                                                                    case false:
                                                                                                                        ({ () in return switch r(93008.0, 93017.0) {
                                                                                                                            case true:
                                                                                                                                Maybe_Maybe.Just(Unicode_Category.NumberDecimalDigit);

                                                                                                                            case false:
                                                                                                                                ({ () in return switch r(93019.0, 93025.0) {
                                                                                                                                    case true:
                                                                                                                                        Maybe_Maybe.Just(Unicode_Category.NumberOther);

                                                                                                                                    case false:
                                                                                                                                        Maybe_Maybe.Nothing;
                                                                                                                                 }
                                                                                                                                }());
                                                                                                                         }
                                                                                                                        }());
                                                                                                                 }
                                                                                                                }());
                                                                                                         }
                                                                                                        }());
                                                                                                 }
                                                                                                }());
                                                                                         }
                                                                                        }());
                                                                                 }
                                                                                }());

                                                                            case false:
                                                                                ({ () in return switch l(93951.0) {
                                                                                    case true:
                                                                                        ({ () in return switch basics_or(r(93027.0, 93047.0), r(93053.0, 93071.0)) {
                                                                                            case true:
                                                                                                Maybe_Maybe.Just(Unicode_Category.LetterOther);

                                                                                            case false:
                                                                                                ({ () in return switch r(93760.0, 93791.0) {
                                                                                                    case true:
                                                                                                        Maybe_Maybe.Just(Unicode_Category.LetterUppercase);

                                                                                                    case false:
                                                                                                        ({ () in return switch r(93792.0, 93823.0) {
                                                                                                            case true:
                                                                                                                Maybe_Maybe.Just(Unicode_Category.LetterLowercase);

                                                                                                            case false:
                                                                                                                ({ () in return switch r(93824.0, 93846.0) {
                                                                                                                    case true:
                                                                                                                        Maybe_Maybe.Just(Unicode_Category.NumberOther);

                                                                                                                    case false:
                                                                                                                        ({ () in return switch r(93847.0, 93850.0) {
                                                                                                                            case true:
                                                                                                                                Maybe_Maybe.Just(Unicode_Category.PunctuationOther);

                                                                                                                            case false:
                                                                                                                                Maybe_Maybe.Nothing;
                                                                                                                         }
                                                                                                                        }());
                                                                                                                 }
                                                                                                                }());
                                                                                                         }
                                                                                                        }());
                                                                                                 }
                                                                                                }());
                                                                                         }
                                                                                        }());

                                                                                    case false:
                                                                                        ({ () in return switch basics_or(r(93952.0, 94026.0), e(94032.0)) {
                                                                                            case true:
                                                                                                Maybe_Maybe.Just(Unicode_Category.LetterOther);

                                                                                            case false:
                                                                                                ({ () in return switch basics_or(e(94031.0), r(94095.0, 94098.0)) {
                                                                                                    case true:
                                                                                                        Maybe_Maybe.Just(Unicode_Category.MarkNonSpacing);

                                                                                                    case false:
                                                                                                        ({ () in return switch r(94033.0, 94087.0) {
                                                                                                            case true:
                                                                                                                Maybe_Maybe.Just(Unicode_Category.MarkSpacingCombining);

                                                                                                            case false:
                                                                                                                ({ () in return switch basics_or(r(94099.0, 94111.0), r(94176.0, 94177.0)) {
                                                                                                                    case true:
                                                                                                                        Maybe_Maybe.Just(Unicode_Category.LetterModifier);

                                                                                                                    case false:
                                                                                                                        Maybe_Maybe.Nothing;
                                                                                                                 }
                                                                                                                }());
                                                                                                         }
                                                                                                        }());
                                                                                                 }
                                                                                                }());
                                                                                         }
                                                                                        }());
                                                                                 }
                                                                                }());
                                                                         }
                                                                        }());
                                                                 }
                                                                }());

                                                            case false:
                                                                ({ () in return switch l(118607.0) {
                                                                    case true:
                                                                        ({ () in return switch l(110932.0) {
                                                                            case true:
                                                                                ({ () in return switch l(101631.0) {
                                                                                    case true:
                                                                                        ({ () in return switch e(94178.0) {
                                                                                            case true:
                                                                                                Maybe_Maybe.Just(Unicode_Category.PunctuationOther);

                                                                                            case false:
                                                                                                ({ () in return switch e(94179.0) {
                                                                                                    case true:
                                                                                                        Maybe_Maybe.Just(Unicode_Category.LetterModifier);

                                                                                                    case false:
                                                                                                        ({ () in return switch e(94180.0) {
                                                                                                            case true:
                                                                                                                Maybe_Maybe.Just(Unicode_Category.MarkNonSpacing);

                                                                                                            case false:
                                                                                                                ({ () in return switch r(94192.0, 94193.0) {
                                                                                                                    case true:
                                                                                                                        Maybe_Maybe.Just(Unicode_Category.MarkSpacingCombining);

                                                                                                                    case false:
                                                                                                                        ({ () in return switch basics_or(r(94208.0, 100343.0), r(100352.0, 101589.0)) {
                                                                                                                            case true:
                                                                                                                                Maybe_Maybe.Just(Unicode_Category.LetterOther);

                                                                                                                            case false:
                                                                                                                                Maybe_Maybe.Nothing;
                                                                                                                         }
                                                                                                                        }());
                                                                                                                 }
                                                                                                                }());
                                                                                                         }
                                                                                                        }());
                                                                                                 }
                                                                                                }());
                                                                                         }
                                                                                        }());

                                                                                    case false:
                                                                                        ({ () in return switch basics_or(r(101632.0, 101640.0), basics_or(r(110592.0, 110882.0), basics_or(e(110898.0), r(110928.0, 110930.0)))) {
                                                                                            case true:
                                                                                                Maybe_Maybe.Just(Unicode_Category.LetterOther);

                                                                                            case false:
                                                                                                ({ () in return switch basics_or(r(110576.0, 110579.0), basics_or(r(110581.0, 110587.0), r(110589.0, 110590.0))) {
                                                                                                    case true:
                                                                                                        Maybe_Maybe.Just(Unicode_Category.LetterModifier);

                                                                                                    case false:
                                                                                                        Maybe_Maybe.Nothing;
                                                                                                 }
                                                                                                }());
                                                                                         }
                                                                                        }());
                                                                                 }
                                                                                }());

                                                                            case false:
                                                                                ({ () in return switch l(113807.0) {
                                                                                    case true:
                                                                                        ({ () in return switch basics_or(e(110933.0), basics_or(r(110948.0, 110951.0), basics_or(r(110960.0, 111355.0), basics_or(r(113664.0, 113770.0), basics_or(r(113776.0, 113788.0), r(113792.0, 113800.0)))))) {
                                                                                            case true:
                                                                                                Maybe_Maybe.Just(Unicode_Category.LetterOther);

                                                                                            case false:
                                                                                                Maybe_Maybe.Nothing;
                                                                                         }
                                                                                        }());

                                                                                    case false:
                                                                                        ({ () in return switch r(113808.0, 113817.0) {
                                                                                            case true:
                                                                                                Maybe_Maybe.Just(Unicode_Category.LetterOther);

                                                                                            case false:
                                                                                                ({ () in return switch e(113820.0) {
                                                                                                    case true:
                                                                                                        Maybe_Maybe.Just(Unicode_Category.SymbolOther);

                                                                                                    case false:
                                                                                                        ({ () in return switch basics_or(r(113821.0, 113822.0), basics_or(r(118528.0, 118573.0), r(118576.0, 118598.0))) {
                                                                                                            case true:
                                                                                                                Maybe_Maybe.Just(Unicode_Category.MarkNonSpacing);

                                                                                                            case false:
                                                                                                                ({ () in return switch e(113823.0) {
                                                                                                                    case true:
                                                                                                                        Maybe_Maybe.Just(Unicode_Category.PunctuationOther);

                                                                                                                    case false:
                                                                                                                        ({ () in return switch r(113824.0, 113827.0) {
                                                                                                                            case true:
                                                                                                                                Maybe_Maybe.Just(Unicode_Category.OtherFormat);

                                                                                                                            case false:
                                                                                                                                Maybe_Maybe.Nothing;
                                                                                                                         }
                                                                                                                        }());
                                                                                                                 }
                                                                                                                }());
                                                                                                         }
                                                                                                        }());
                                                                                                 }
                                                                                                }());
                                                                                         }
                                                                                        }());
                                                                                 }
                                                                                }());
                                                                         }
                                                                        }());

                                                                    case false:
                                                                        ({ () in return switch l(119209.0) {
                                                                            case true:
                                                                                ({ () in return switch l(119145.0) {
                                                                                    case true:
                                                                                        ({ () in return switch basics_or(r(118608.0, 118723.0), basics_or(r(118784.0, 119029.0), basics_or(r(119040.0, 119078.0), r(119081.0, 119140.0)))) {
                                                                                            case true:
                                                                                                Maybe_Maybe.Just(Unicode_Category.SymbolOther);

                                                                                            case false:
                                                                                                ({ () in return switch r(119141.0, 119142.0) {
                                                                                                    case true:
                                                                                                        Maybe_Maybe.Just(Unicode_Category.MarkSpacingCombining);

                                                                                                    case false:
                                                                                                        ({ () in return switch r(119143.0, 119144.0) {
                                                                                                            case true:
                                                                                                                Maybe_Maybe.Just(Unicode_Category.MarkNonSpacing);

                                                                                                            case false:
                                                                                                                Maybe_Maybe.Nothing;
                                                                                                         }
                                                                                                        }());
                                                                                                 }
                                                                                                }());
                                                                                         }
                                                                                        }());

                                                                                    case false:
                                                                                        ({ () in return switch basics_or(e(119145.0), basics_or(r(119163.0, 119170.0), r(119173.0, 119179.0))) {
                                                                                            case true:
                                                                                                Maybe_Maybe.Just(Unicode_Category.MarkNonSpacing);

                                                                                            case false:
                                                                                                ({ () in return switch basics_or(r(119146.0, 119148.0), basics_or(r(119171.0, 119172.0), r(119180.0, 119208.0))) {
                                                                                                    case true:
                                                                                                        Maybe_Maybe.Just(Unicode_Category.SymbolOther);

                                                                                                    case false:
                                                                                                        ({ () in return switch r(119149.0, 119154.0) {
                                                                                                            case true:
                                                                                                                Maybe_Maybe.Just(Unicode_Category.MarkSpacingCombining);

                                                                                                            case false:
                                                                                                                ({ () in return switch r(119155.0, 119162.0) {
                                                                                                                    case true:
                                                                                                                        Maybe_Maybe.Just(Unicode_Category.OtherFormat);

                                                                                                                    case false:
                                                                                                                        Maybe_Maybe.Nothing;
                                                                                                                 }
                                                                                                                }());
                                                                                                         }
                                                                                                        }());
                                                                                                 }
                                                                                                }());
                                                                                         }
                                                                                        }());
                                                                                 }
                                                                                }());

                                                                            case false:
                                                                                ({ () in return switch l(119519.0) {
                                                                                    case true:
                                                                                        ({ () in return switch basics_or(e(119209.0), basics_or(r(119214.0, 119274.0), basics_or(r(119296.0, 119361.0), e(119365.0)))) {
                                                                                            case true:
                                                                                                Maybe_Maybe.Just(Unicode_Category.SymbolOther);

                                                                                            case false:
                                                                                                ({ () in return switch basics_or(r(119210.0, 119213.0), r(119362.0, 119364.0)) {
                                                                                                    case true:
                                                                                                        Maybe_Maybe.Just(Unicode_Category.MarkNonSpacing);

                                                                                                    case false:
                                                                                                        ({ () in return switch r(119488.0, 119507.0) {
                                                                                                            case true:
                                                                                                                Maybe_Maybe.Just(Unicode_Category.NumberOther);

                                                                                                            case false:
                                                                                                                Maybe_Maybe.Nothing;
                                                                                                         }
                                                                                                        }());
                                                                                                 }
                                                                                                }());
                                                                                         }
                                                                                        }());

                                                                                    case false:
                                                                                        ({ () in return switch basics_or(r(119520.0, 119539.0), r(119648.0, 119672.0)) {
                                                                                            case true:
                                                                                                Maybe_Maybe.Just(Unicode_Category.NumberOther);

                                                                                            case false:
                                                                                                ({ () in return switch r(119552.0, 119638.0) {
                                                                                                    case true:
                                                                                                        Maybe_Maybe.Just(Unicode_Category.SymbolOther);

                                                                                                    case false:
                                                                                                        ({ () in return switch basics_or(r(119808.0, 119833.0), r(119860.0, 119885.0)) {
                                                                                                            case true:
                                                                                                                Maybe_Maybe.Just(Unicode_Category.LetterUppercase);

                                                                                                            case false:
                                                                                                                ({ () in return switch basics_or(r(119834.0, 119859.0), r(119886.0, 119892.0)) {
                                                                                                                    case true:
                                                                                                                        Maybe_Maybe.Just(Unicode_Category.LetterLowercase);

                                                                                                                    case false:
                                                                                                                        Maybe_Maybe.Nothing;
                                                                                                                 }
                                                                                                                }());
                                                                                                         }
                                                                                                        }());
                                                                                                 }
                                                                                                }());
                                                                                         }
                                                                                        }());
                                                                                 }
                                                                                }());
                                                                         }
                                                                        }());
                                                                 }
                                                                }());
                                                         }
                                                        }());
                                                 }
                                                }());

                                            case false:
                                                ({ () in return switch l(124111.0) {
                                                    case true:
                                                        ({ () in return switch l(120629.0) {
                                                            case true:
                                                                ({ () in return switch l(120137.0) {
                                                                    case true:
                                                                        ({ () in return switch l(120004.0) {
                                                                            case true:
                                                                                ({ () in return switch basics_or(r(119894.0, 119911.0), basics_or(r(119938.0, 119963.0), basics_or(r(119990.0, 119993.0), basics_or(e(119995.0), r(119997.0, 120003.0))))) {
                                                                                    case true:
                                                                                        Maybe_Maybe.Just(Unicode_Category.LetterLowercase);

                                                                                    case false:
                                                                                        ({ () in return switch basics_or(r(119912.0, 119937.0), basics_or(e(119964.0), basics_or(r(119966.0, 119967.0), basics_or(e(119970.0), basics_or(r(119973.0, 119974.0), basics_or(r(119977.0, 119980.0), r(119982.0, 119989.0))))))) {
                                                                                            case true:
                                                                                                Maybe_Maybe.Just(Unicode_Category.LetterUppercase);

                                                                                            case false:
                                                                                                Maybe_Maybe.Nothing;
                                                                                         }
                                                                                        }());
                                                                                 }
                                                                                }());

                                                                            case false:
                                                                                ({ () in return switch basics_or(r(120005.0, 120015.0), basics_or(r(120042.0, 120067.0), r(120094.0, 120119.0))) {
                                                                                    case true:
                                                                                        Maybe_Maybe.Just(Unicode_Category.LetterLowercase);

                                                                                    case false:
                                                                                        ({ () in return switch basics_or(r(120016.0, 120041.0), basics_or(r(120068.0, 120069.0), basics_or(r(120071.0, 120074.0), basics_or(r(120077.0, 120084.0), basics_or(r(120086.0, 120092.0), basics_or(r(120120.0, 120121.0), basics_or(r(120123.0, 120126.0), basics_or(r(120128.0, 120132.0), e(120134.0))))))))) {
                                                                                            case true:
                                                                                                Maybe_Maybe.Just(Unicode_Category.LetterUppercase);

                                                                                            case false:
                                                                                                Maybe_Maybe.Nothing;
                                                                                         }
                                                                                        }());
                                                                                 }
                                                                                }());
                                                                         }
                                                                        }());

                                                                    case false:
                                                                        ({ () in return switch l(120431.0) {
                                                                            case true:
                                                                                ({ () in return switch basics_or(r(120138.0, 120144.0), basics_or(r(120172.0, 120197.0), basics_or(r(120224.0, 120249.0), basics_or(r(120276.0, 120301.0), basics_or(r(120328.0, 120353.0), r(120380.0, 120405.0)))))) {
                                                                                    case true:
                                                                                        Maybe_Maybe.Just(Unicode_Category.LetterUppercase);

                                                                                    case false:
                                                                                        ({ () in return switch basics_or(r(120146.0, 120171.0), basics_or(r(120198.0, 120223.0), basics_or(r(120250.0, 120275.0), basics_or(r(120302.0, 120327.0), basics_or(r(120354.0, 120379.0), r(120406.0, 120430.0)))))) {
                                                                                            case true:
                                                                                                Maybe_Maybe.Just(Unicode_Category.LetterLowercase);

                                                                                            case false:
                                                                                                Maybe_Maybe.Nothing;
                                                                                         }
                                                                                        }());
                                                                                 }
                                                                                }());

                                                                            case false:
                                                                                ({ () in return switch l(120539.0) {
                                                                                    case true:
                                                                                        ({ () in return switch basics_or(e(120431.0), basics_or(r(120458.0, 120485.0), r(120514.0, 120538.0))) {
                                                                                            case true:
                                                                                                Maybe_Maybe.Just(Unicode_Category.LetterLowercase);

                                                                                            case false:
                                                                                                ({ () in return switch basics_or(r(120432.0, 120457.0), r(120488.0, 120512.0)) {
                                                                                                    case true:
                                                                                                        Maybe_Maybe.Just(Unicode_Category.LetterUppercase);

                                                                                                    case false:
                                                                                                        ({ () in return switch e(120513.0) {
                                                                                                            case true:
                                                                                                                Maybe_Maybe.Just(Unicode_Category.SymbolMath);

                                                                                                            case false:
                                                                                                                Maybe_Maybe.Nothing;
                                                                                                         }
                                                                                                        }());
                                                                                                 }
                                                                                                }());
                                                                                         }
                                                                                        }());

                                                                                    case false:
                                                                                        ({ () in return switch basics_or(e(120539.0), basics_or(e(120571.0), e(120597.0))) {
                                                                                            case true:
                                                                                                Maybe_Maybe.Just(Unicode_Category.SymbolMath);

                                                                                            case false:
                                                                                                ({ () in return switch basics_or(r(120540.0, 120545.0), basics_or(r(120572.0, 120596.0), r(120598.0, 120603.0))) {
                                                                                                    case true:
                                                                                                        Maybe_Maybe.Just(Unicode_Category.LetterLowercase);

                                                                                                    case false:
                                                                                                        ({ () in return switch basics_or(r(120546.0, 120570.0), r(120604.0, 120628.0)) {
                                                                                                            case true:
                                                                                                                Maybe_Maybe.Just(Unicode_Category.LetterUppercase);

                                                                                                            case false:
                                                                                                                Maybe_Maybe.Nothing;
                                                                                                         }
                                                                                                        }());
                                                                                                 }
                                                                                                }());
                                                                                         }
                                                                                        }());
                                                                                 }
                                                                                }());
                                                                         }
                                                                        }());
                                                                 }
                                                                }());

                                                            case false:
                                                                ({ () in return switch l(121478.0) {
                                                                    case true:
                                                                        ({ () in return switch l(120771.0) {
                                                                            case true:
                                                                                ({ () in return switch basics_or(e(120629.0), basics_or(e(120655.0), basics_or(e(120687.0), basics_or(e(120713.0), e(120745.0))))) {
                                                                                    case true:
                                                                                        Maybe_Maybe.Just(Unicode_Category.SymbolMath);

                                                                                    case false:
                                                                                        ({ () in return switch basics_or(r(120630.0, 120654.0), basics_or(r(120656.0, 120661.0), basics_or(r(120688.0, 120712.0), basics_or(r(120714.0, 120719.0), r(120746.0, 120770.0))))) {
                                                                                            case true:
                                                                                                Maybe_Maybe.Just(Unicode_Category.LetterLowercase);

                                                                                            case false:
                                                                                                ({ () in return switch basics_or(r(120662.0, 120686.0), r(120720.0, 120744.0)) {
                                                                                                    case true:
                                                                                                        Maybe_Maybe.Just(Unicode_Category.LetterUppercase);

                                                                                                    case false:
                                                                                                        Maybe_Maybe.Nothing;
                                                                                                 }
                                                                                                }());
                                                                                         }
                                                                                        }());
                                                                                 }
                                                                                }());

                                                                            case false:
                                                                                ({ () in return switch l(121398.0) {
                                                                                    case true:
                                                                                        ({ () in return switch e(120771.0) {
                                                                                            case true:
                                                                                                Maybe_Maybe.Just(Unicode_Category.SymbolMath);

                                                                                            case false:
                                                                                                ({ () in return switch basics_or(r(120772.0, 120777.0), e(120779.0)) {
                                                                                                    case true:
                                                                                                        Maybe_Maybe.Just(Unicode_Category.LetterLowercase);

                                                                                                    case false:
                                                                                                        ({ () in return switch e(120778.0) {
                                                                                                            case true:
                                                                                                                Maybe_Maybe.Just(Unicode_Category.LetterUppercase);

                                                                                                            case false:
                                                                                                                ({ () in return switch r(120782.0, 120831.0) {
                                                                                                                    case true:
                                                                                                                        Maybe_Maybe.Just(Unicode_Category.NumberDecimalDigit);

                                                                                                                    case false:
                                                                                                                        ({ () in return switch r(120832.0, 121343.0) {
                                                                                                                            case true:
                                                                                                                                Maybe_Maybe.Just(Unicode_Category.SymbolOther);

                                                                                                                            case false:
                                                                                                                                ({ () in return switch r(121344.0, 121397.0) {
                                                                                                                                    case true:
                                                                                                                                        Maybe_Maybe.Just(Unicode_Category.MarkNonSpacing);

                                                                                                                                    case false:
                                                                                                                                        Maybe_Maybe.Nothing;
                                                                                                                                 }
                                                                                                                                }());
                                                                                                                         }
                                                                                                                        }());
                                                                                                                 }
                                                                                                                }());
                                                                                                         }
                                                                                                        }());
                                                                                                 }
                                                                                                }());
                                                                                         }
                                                                                        }());

                                                                                    case false:
                                                                                        ({ () in return switch basics_or(e(121398.0), basics_or(r(121403.0, 121452.0), basics_or(e(121461.0), e(121476.0)))) {
                                                                                            case true:
                                                                                                Maybe_Maybe.Just(Unicode_Category.MarkNonSpacing);

                                                                                            case false:
                                                                                                ({ () in return switch basics_or(r(121399.0, 121402.0), basics_or(r(121453.0, 121460.0), basics_or(r(121462.0, 121475.0), e(121477.0)))) {
                                                                                                    case true:
                                                                                                        Maybe_Maybe.Just(Unicode_Category.SymbolOther);

                                                                                                    case false:
                                                                                                        Maybe_Maybe.Nothing;
                                                                                                 }
                                                                                                }());
                                                                                         }
                                                                                        }());
                                                                                 }
                                                                                }());
                                                                         }
                                                                        }());

                                                                    case false:
                                                                        ({ () in return switch l(122927.0) {
                                                                            case true:
                                                                                ({ () in return switch l(122634.0) {
                                                                                    case true:
                                                                                        ({ () in return switch e(121478.0) {
                                                                                            case true:
                                                                                                Maybe_Maybe.Just(Unicode_Category.SymbolOther);

                                                                                            case false:
                                                                                                ({ () in return switch r(121479.0, 121483.0) {
                                                                                                    case true:
                                                                                                        Maybe_Maybe.Just(Unicode_Category.PunctuationOther);

                                                                                                    case false:
                                                                                                        ({ () in return switch basics_or(r(121499.0, 121503.0), r(121505.0, 121519.0)) {
                                                                                                            case true:
                                                                                                                Maybe_Maybe.Just(Unicode_Category.MarkNonSpacing);

                                                                                                            case false:
                                                                                                                ({ () in return switch r(122624.0, 122633.0) {
                                                                                                                    case true:
                                                                                                                        Maybe_Maybe.Just(Unicode_Category.LetterLowercase);

                                                                                                                    case false:
                                                                                                                        Maybe_Maybe.Nothing;
                                                                                                                 }
                                                                                                                }());
                                                                                                         }
                                                                                                        }());
                                                                                                 }
                                                                                                }());
                                                                                         }
                                                                                        }());

                                                                                    case false:
                                                                                        ({ () in return switch e(122634.0) {
                                                                                            case true:
                                                                                                Maybe_Maybe.Just(Unicode_Category.LetterOther);

                                                                                            case false:
                                                                                                ({ () in return switch basics_or(r(122635.0, 122654.0), r(122661.0, 122666.0)) {
                                                                                                    case true:
                                                                                                        Maybe_Maybe.Just(Unicode_Category.LetterLowercase);

                                                                                                    case false:
                                                                                                        ({ () in return switch basics_or(r(122880.0, 122886.0), basics_or(r(122888.0, 122904.0), basics_or(r(122907.0, 122913.0), basics_or(r(122915.0, 122916.0), r(122918.0, 122922.0))))) {
                                                                                                            case true:
                                                                                                                Maybe_Maybe.Just(Unicode_Category.MarkNonSpacing);

                                                                                                            case false:
                                                                                                                Maybe_Maybe.Nothing;
                                                                                                         }
                                                                                                        }());
                                                                                                 }
                                                                                                }());
                                                                                         }
                                                                                        }());
                                                                                 }
                                                                                }());

                                                                            case false:
                                                                                ({ () in return switch l(123214.0) {
                                                                                    case true:
                                                                                        ({ () in return switch basics_or(r(122928.0, 122989.0), r(123191.0, 123197.0)) {
                                                                                            case true:
                                                                                                Maybe_Maybe.Just(Unicode_Category.LetterModifier);

                                                                                            case false:
                                                                                                ({ () in return switch basics_or(e(123023.0), r(123184.0, 123190.0)) {
                                                                                                    case true:
                                                                                                        Maybe_Maybe.Just(Unicode_Category.MarkNonSpacing);

                                                                                                    case false:
                                                                                                        ({ () in return switch r(123136.0, 123180.0) {
                                                                                                            case true:
                                                                                                                Maybe_Maybe.Just(Unicode_Category.LetterOther);

                                                                                                            case false:
                                                                                                                ({ () in return switch r(123200.0, 123209.0) {
                                                                                                                    case true:
                                                                                                                        Maybe_Maybe.Just(Unicode_Category.NumberDecimalDigit);

                                                                                                                    case false:
                                                                                                                        Maybe_Maybe.Nothing;
                                                                                                                 }
                                                                                                                }());
                                                                                                         }
                                                                                                        }());
                                                                                                 }
                                                                                                }());
                                                                                         }
                                                                                        }());

                                                                                    case false:
                                                                                        ({ () in return switch basics_or(e(123214.0), basics_or(r(123536.0, 123565.0), r(123584.0, 123627.0))) {
                                                                                            case true:
                                                                                                Maybe_Maybe.Just(Unicode_Category.LetterOther);

                                                                                            case false:
                                                                                                ({ () in return switch e(123215.0) {
                                                                                                    case true:
                                                                                                        Maybe_Maybe.Just(Unicode_Category.SymbolOther);

                                                                                                    case false:
                                                                                                        ({ () in return switch basics_or(e(123566.0), r(123628.0, 123631.0)) {
                                                                                                            case true:
                                                                                                                Maybe_Maybe.Just(Unicode_Category.MarkNonSpacing);

                                                                                                            case false:
                                                                                                                ({ () in return switch r(123632.0, 123641.0) {
                                                                                                                    case true:
                                                                                                                        Maybe_Maybe.Just(Unicode_Category.NumberDecimalDigit);

                                                                                                                    case false:
                                                                                                                        ({ () in return switch e(123647.0) {
                                                                                                                            case true:
                                                                                                                                Maybe_Maybe.Just(Unicode_Category.SymbolCurrency);

                                                                                                                            case false:
                                                                                                                                Maybe_Maybe.Nothing;
                                                                                                                         }
                                                                                                                        }());
                                                                                                                 }
                                                                                                                }());
                                                                                                         }
                                                                                                        }());
                                                                                                 }
                                                                                                }());
                                                                                         }
                                                                                        }());
                                                                                 }
                                                                                }());
                                                                         }
                                                                        }());
                                                                 }
                                                                }());
                                                         }
                                                        }());

                                                    case false:
                                                        ({ () in return switch l(127135.0) {
                                                            case true:
                                                                ({ () in return switch l(126463.0) {
                                                                    case true:
                                                                        ({ () in return switch l(125217.0) {
                                                                            case true:
                                                                                ({ () in return switch basics_or(r(124112.0, 124138.0), basics_or(r(124896.0, 124902.0), basics_or(r(124904.0, 124907.0), basics_or(r(124909.0, 124910.0), basics_or(r(124912.0, 124926.0), r(124928.0, 125124.0)))))) {
                                                                                    case true:
                                                                                        Maybe_Maybe.Just(Unicode_Category.LetterOther);

                                                                                    case false:
                                                                                        ({ () in return switch e(124139.0) {
                                                                                            case true:
                                                                                                Maybe_Maybe.Just(Unicode_Category.LetterModifier);

                                                                                            case false:
                                                                                                ({ () in return switch basics_or(r(124140.0, 124143.0), r(125136.0, 125142.0)) {
                                                                                                    case true:
                                                                                                        Maybe_Maybe.Just(Unicode_Category.MarkNonSpacing);

                                                                                                    case false:
                                                                                                        ({ () in return switch r(124144.0, 124153.0) {
                                                                                                            case true:
                                                                                                                Maybe_Maybe.Just(Unicode_Category.NumberDecimalDigit);

                                                                                                            case false:
                                                                                                                ({ () in return switch r(125127.0, 125135.0) {
                                                                                                                    case true:
                                                                                                                        Maybe_Maybe.Just(Unicode_Category.NumberOther);

                                                                                                                    case false:
                                                                                                                        ({ () in return switch r(125184.0, 125216.0) {
                                                                                                                            case true:
                                                                                                                                Maybe_Maybe.Just(Unicode_Category.LetterUppercase);

                                                                                                                            case false:
                                                                                                                                Maybe_Maybe.Nothing;
                                                                                                                         }
                                                                                                                        }());
                                                                                                                 }
                                                                                                                }());
                                                                                                         }
                                                                                                        }());
                                                                                                 }
                                                                                                }());
                                                                                         }
                                                                                        }());
                                                                                 }
                                                                                }());

                                                                            case false:
                                                                                ({ () in return switch l(126123.0) {
                                                                                    case true:
                                                                                        ({ () in return switch e(125217.0) {
                                                                                            case true:
                                                                                                Maybe_Maybe.Just(Unicode_Category.LetterUppercase);

                                                                                            case false:
                                                                                                ({ () in return switch r(125218.0, 125251.0) {
                                                                                                    case true:
                                                                                                        Maybe_Maybe.Just(Unicode_Category.LetterLowercase);

                                                                                                    case false:
                                                                                                        ({ () in return switch r(125252.0, 125258.0) {
                                                                                                            case true:
                                                                                                                Maybe_Maybe.Just(Unicode_Category.MarkNonSpacing);

                                                                                                            case false:
                                                                                                                ({ () in return switch e(125259.0) {
                                                                                                                    case true:
                                                                                                                        Maybe_Maybe.Just(Unicode_Category.LetterModifier);

                                                                                                                    case false:
                                                                                                                        ({ () in return switch r(125264.0, 125273.0) {
                                                                                                                            case true:
                                                                                                                                Maybe_Maybe.Just(Unicode_Category.NumberDecimalDigit);

                                                                                                                            case false:
                                                                                                                                ({ () in return switch r(125278.0, 125279.0) {
                                                                                                                                    case true:
                                                                                                                                        Maybe_Maybe.Just(Unicode_Category.PunctuationOther);

                                                                                                                                    case false:
                                                                                                                                        ({ () in return switch r(126065.0, 126122.0) {
                                                                                                                                            case true:
                                                                                                                                                Maybe_Maybe.Just(Unicode_Category.NumberOther);

                                                                                                                                            case false:
                                                                                                                                                Maybe_Maybe.Nothing;
                                                                                                                                         }
                                                                                                                                        }());
                                                                                                                                 }
                                                                                                                                }());
                                                                                                                         }
                                                                                                                        }());
                                                                                                                 }
                                                                                                                }());
                                                                                                         }
                                                                                                        }());
                                                                                                 }
                                                                                                }());
                                                                                         }
                                                                                        }());

                                                                                    case false:
                                                                                        ({ () in return switch basics_or(e(126123.0), basics_or(r(126125.0, 126127.0), basics_or(r(126129.0, 126132.0), basics_or(r(126209.0, 126253.0), r(126255.0, 126269.0))))) {
                                                                                            case true:
                                                                                                Maybe_Maybe.Just(Unicode_Category.NumberOther);

                                                                                            case false:
                                                                                                ({ () in return switch basics_or(e(126124.0), e(126254.0)) {
                                                                                                    case true:
                                                                                                        Maybe_Maybe.Just(Unicode_Category.SymbolOther);

                                                                                                    case false:
                                                                                                        ({ () in return switch e(126128.0) {
                                                                                                            case true:
                                                                                                                Maybe_Maybe.Just(Unicode_Category.SymbolCurrency);

                                                                                                            case false:
                                                                                                                Maybe_Maybe.Nothing;
                                                                                                         }
                                                                                                        }());
                                                                                                 }
                                                                                                }());
                                                                                         }
                                                                                        }());
                                                                                 }
                                                                                }());
                                                                         }
                                                                        }());

                                                                    case false:
                                                                        ({ () in return switch l(126566.0) {
                                                                            case true:
                                                                                ({ () in return switch l(126515.0) {
                                                                                    case true:
                                                                                        ({ () in return switch basics_or(r(126464.0, 126467.0), basics_or(r(126469.0, 126495.0), basics_or(r(126497.0, 126498.0), basics_or(e(126500.0), basics_or(e(126503.0), r(126505.0, 126514.0)))))) {
                                                                                            case true:
                                                                                                Maybe_Maybe.Just(Unicode_Category.LetterOther);

                                                                                            case false:
                                                                                                Maybe_Maybe.Nothing;
                                                                                         }
                                                                                        }());

                                                                                    case false:
                                                                                        ({ () in return switch basics_or(r(126516.0, 126519.0), basics_or(e(126530.0), basics_or(r(126541.0, 126543.0), basics_or(r(126545.0, 126546.0), basics_or(e(126548.0), basics_or(r(126561.0, 126562.0), basics_or(e(126564.0), basics_and(basics_eq(basics_modBy(2.0, code), 1.0), basics_or(r(126521.0, 126523.0), basics_or(r(126535.0, 126539.0), r(126551.0, 126559.0))))))))))) {
                                                                                            case true:
                                                                                                Maybe_Maybe.Just(Unicode_Category.LetterOther);

                                                                                            case false:
                                                                                                Maybe_Maybe.Nothing;
                                                                                         }
                                                                                        }());
                                                                                 }
                                                                                }());

                                                                            case false:
                                                                                ({ () in return switch l(126602.0) {
                                                                                    case true:
                                                                                        ({ () in return switch basics_or(r(126567.0, 126570.0), basics_or(r(126572.0, 126578.0), basics_or(r(126580.0, 126583.0), basics_or(r(126585.0, 126588.0), basics_or(e(126590.0), r(126592.0, 126601.0)))))) {
                                                                                            case true:
                                                                                                Maybe_Maybe.Just(Unicode_Category.LetterOther);

                                                                                            case false:
                                                                                                Maybe_Maybe.Nothing;
                                                                                         }
                                                                                        }());

                                                                                    case false:
                                                                                        ({ () in return switch basics_or(r(126603.0, 126619.0), basics_or(r(126625.0, 126627.0), basics_or(r(126629.0, 126633.0), r(126635.0, 126651.0)))) {
                                                                                            case true:
                                                                                                Maybe_Maybe.Just(Unicode_Category.LetterOther);

                                                                                            case false:
                                                                                                ({ () in return switch r(126704.0, 126705.0) {
                                                                                                    case true:
                                                                                                        Maybe_Maybe.Just(Unicode_Category.SymbolMath);

                                                                                                    case false:
                                                                                                        ({ () in return switch basics_or(r(126976.0, 127019.0), r(127024.0, 127123.0)) {
                                                                                                            case true:
                                                                                                                Maybe_Maybe.Just(Unicode_Category.SymbolOther);

                                                                                                            case false:
                                                                                                                Maybe_Maybe.Nothing;
                                                                                                         }
                                                                                                        }());
                                                                                                 }
                                                                                                }());
                                                                                         }
                                                                                        }());
                                                                                 }
                                                                                }());
                                                                         }
                                                                        }());
                                                                 }
                                                                }());

                                                            case false:
                                                                ({ () in return switch l(129199.0) {
                                                                    case true:
                                                                        ({ () in return switch l(127994.0) {
                                                                            case true:
                                                                                ({ () in return switch basics_or(r(127136.0, 127150.0), basics_or(r(127153.0, 127167.0), basics_or(r(127169.0, 127183.0), basics_or(r(127185.0, 127221.0), basics_or(r(127245.0, 127405.0), basics_or(r(127462.0, 127490.0), basics_or(r(127504.0, 127547.0), basics_or(r(127552.0, 127560.0), basics_or(r(127568.0, 127569.0), basics_or(r(127584.0, 127589.0), r(127744.0, 127993.0))))))))))) {
                                                                                    case true:
                                                                                        Maybe_Maybe.Just(Unicode_Category.SymbolOther);

                                                                                    case false:
                                                                                        ({ () in return switch r(127232.0, 127244.0) {
                                                                                            case true:
                                                                                                Maybe_Maybe.Just(Unicode_Category.NumberOther);

                                                                                            case false:
                                                                                                Maybe_Maybe.Nothing;
                                                                                         }
                                                                                        }());
                                                                                 }
                                                                                }());

                                                                            case false:
                                                                                ({ () in return switch l(128991.0) {
                                                                                    case true:
                                                                                        ({ () in return switch basics_or(e(127994.0), basics_or(r(128000.0, 128727.0), basics_or(r(128732.0, 128748.0), basics_or(r(128752.0, 128764.0), basics_or(r(128768.0, 128886.0), r(128891.0, 128985.0)))))) {
                                                                                            case true:
                                                                                                Maybe_Maybe.Just(Unicode_Category.SymbolOther);

                                                                                            case false:
                                                                                                ({ () in return switch r(127995.0, 127999.0) {
                                                                                                    case true:
                                                                                                        Maybe_Maybe.Just(Unicode_Category.SymbolModifier);

                                                                                                    case false:
                                                                                                        Maybe_Maybe.Nothing;
                                                                                                 }
                                                                                                }());
                                                                                         }
                                                                                        }());

                                                                                    case false:
                                                                                        ({ () in return switch basics_or(r(128992.0, 129003.0), basics_or(e(129008.0), basics_or(r(129024.0, 129035.0), basics_or(r(129040.0, 129095.0), basics_or(r(129104.0, 129113.0), basics_or(r(129120.0, 129159.0), r(129168.0, 129197.0))))))) {
                                                                                            case true:
                                                                                                Maybe_Maybe.Just(Unicode_Category.SymbolOther);

                                                                                            case false:
                                                                                                Maybe_Maybe.Nothing;
                                                                                         }
                                                                                        }());
                                                                                 }
                                                                                }());
                                                                         }
                                                                        }());

                                                                    case false:
                                                                        ({ () in return switch l(131071.0) {
                                                                            case true:
                                                                                ({ () in return switch l(129726.0) {
                                                                                    case true:
                                                                                        ({ () in return switch basics_or(r(129200.0, 129201.0), basics_or(r(129280.0, 129619.0), basics_or(r(129632.0, 129645.0), basics_or(r(129648.0, 129660.0), basics_or(r(129664.0, 129672.0), r(129680.0, 129725.0)))))) {
                                                                                            case true:
                                                                                                Maybe_Maybe.Just(Unicode_Category.SymbolOther);

                                                                                            case false:
                                                                                                Maybe_Maybe.Nothing;
                                                                                         }
                                                                                        }());

                                                                                    case false:
                                                                                        ({ () in return switch basics_or(r(129727.0, 129733.0), basics_or(r(129742.0, 129755.0), basics_or(r(129760.0, 129768.0), basics_or(r(129776.0, 129784.0), basics_or(r(129792.0, 129938.0), r(129940.0, 129994.0)))))) {
                                                                                            case true:
                                                                                                Maybe_Maybe.Just(Unicode_Category.SymbolOther);

                                                                                            case false:
                                                                                                ({ () in return switch r(130032.0, 130041.0) {
                                                                                                    case true:
                                                                                                        Maybe_Maybe.Just(Unicode_Category.NumberDecimalDigit);

                                                                                                    case false:
                                                                                                        Maybe_Maybe.Nothing;
                                                                                                 }
                                                                                                }());
                                                                                         }
                                                                                        }());
                                                                                 }
                                                                                }());

                                                                            case false:
                                                                                ({ () in return switch l(194559.0) {
                                                                                    case true:
                                                                                        ({ () in return switch basics_or(r(131072.0, 173791.0), basics_or(r(173824.0, 177977.0), basics_or(r(177984.0, 178205.0), basics_or(r(178208.0, 183969.0), basics_or(r(183984.0, 191456.0), r(191472.0, 192093.0)))))) {
                                                                                            case true:
                                                                                                Maybe_Maybe.Just(Unicode_Category.LetterOther);

                                                                                            case false:
                                                                                                Maybe_Maybe.Nothing;
                                                                                         }
                                                                                        }());

                                                                                    case false:
                                                                                        ({ () in return switch basics_or(r(194560.0, 195101.0), basics_or(r(196608.0, 201546.0), r(201552.0, 205743.0))) {
                                                                                            case true:
                                                                                                Maybe_Maybe.Just(Unicode_Category.LetterOther);

                                                                                            case false:
                                                                                                ({ () in return switch basics_or(e(917505.0), r(917536.0, 917631.0)) {
                                                                                                    case true:
                                                                                                        Maybe_Maybe.Just(Unicode_Category.OtherFormat);

                                                                                                    case false:
                                                                                                        ({ () in return switch r(917760.0, 917999.0) {
                                                                                                            case true:
                                                                                                                Maybe_Maybe.Just(Unicode_Category.MarkNonSpacing);

                                                                                                            case false:
                                                                                                                ({ () in return switch r(983040.0, 1114109.0) {
                                                                                                                    case true:
                                                                                                                        Maybe_Maybe.Just(Unicode_Category.OtherPrivateUse);

                                                                                                                    case false:
                                                                                                                        Maybe_Maybe.Nothing;
                                                                                                                 }
                                                                                                                }());
                                                                                                         }
                                                                                                        }());
                                                                                                 }
                                                                                                }());
                                                                                         }
                                                                                        }());
                                                                                 }
                                                                                }());
                                                                         }
                                                                        }());
                                                                 }
                                                                }());
                                                         }
                                                        }());
                                                 }
                                                }());
                                         }
                                        }());
                                 }
                                }());
                         }
                        }());
                 }
                }());
          }
         }())
        }())
    }

    static public func unicode_isAlpha(_ c: Character) -> Bool {
        ({ () in let code =
            char_toCode(c);

         let e =
            { (hex) in
                basics_eq(hex, code)
            };

         let l =
            { (hex) in
                basics_lt(code, hex)
            };

         let r =
            { (from, to) in
                basics_and(basics_le(from, code), basics_le(code, to))
            };

         return ({ () in return switch l(256.0) {
            case true:
                basics_or(r(65.0, 90.0), basics_or(r(97.0, 122.0), basics_or(e(170.0), basics_or(e(181.0), basics_or(e(186.0), basics_or(r(192.0, 214.0), basics_or(r(216.0, 246.0), r(248.0, 255.0))))))));

            case false:
                ({ () in return switch l(43513.0) {
                    case true:
                        ({ () in return switch l(4205.0) {
                            case true:
                                ({ () in return switch l(2783.0) {
                                    case true:
                                        ({ () in return switch l(2143.0) {
                                            case true:
                                                ({ () in return switch l(1567.0) {
                                                    case true:
                                                        ({ () in return switch l(907.0) {
                                                            case true:
                                                                basics_or(r(256.0, 705.0), basics_or(r(710.0, 721.0), basics_or(r(736.0, 740.0), basics_or(r(880.0, 884.0), basics_or(r(886.0, 887.0), basics_or(r(890.0, 893.0), basics_or(e(895.0), basics_or(e(902.0), basics_or(r(904.0, 906.0), basics_and(basics_eq(basics_modBy(2.0, code), 0.0), r(748.0, 750.0)))))))))));

                                                            case false:
                                                                basics_or(e(908.0), basics_or(r(910.0, 929.0), basics_or(r(931.0, 1013.0), basics_or(r(1015.0, 1153.0), basics_or(r(1162.0, 1327.0), basics_or(r(1329.0, 1366.0), basics_or(e(1369.0), basics_or(r(1376.0, 1416.0), basics_or(r(1488.0, 1514.0), r(1519.0, 1522.0))))))))));
                                                         }
                                                        }());

                                                    case false:
                                                        ({ () in return switch l(1868.0) {
                                                            case true:
                                                                basics_or(r(1568.0, 1610.0), basics_or(r(1646.0, 1647.0), basics_or(r(1649.0, 1747.0), basics_or(e(1749.0), basics_or(r(1765.0, 1766.0), basics_or(r(1774.0, 1775.0), basics_or(r(1786.0, 1788.0), basics_or(e(1791.0), basics_or(e(1808.0), r(1810.0, 1839.0))))))))));

                                                            case false:
                                                                basics_or(r(1869.0, 1957.0), basics_or(e(1969.0), basics_or(r(1994.0, 2026.0), basics_or(r(2036.0, 2037.0), basics_or(e(2042.0), basics_or(r(2048.0, 2069.0), basics_or(e(2074.0), basics_or(e(2084.0), basics_or(e(2088.0), r(2112.0, 2136.0))))))))));
                                                         }
                                                        }());
                                                 }
                                                }());

                                            case false:
                                                ({ () in return switch l(2543.0) {
                                                    case true:
                                                        ({ () in return switch l(2436.0) {
                                                            case true:
                                                                basics_or(r(2144.0, 2154.0), basics_or(r(2160.0, 2183.0), basics_or(r(2185.0, 2190.0), basics_or(r(2208.0, 2249.0), basics_or(r(2308.0, 2361.0), basics_or(e(2365.0), basics_or(e(2384.0), basics_or(r(2392.0, 2401.0), r(2417.0, 2432.0)))))))));

                                                            case false:
                                                                basics_or(r(2437.0, 2444.0), basics_or(r(2447.0, 2448.0), basics_or(r(2451.0, 2472.0), basics_or(r(2474.0, 2480.0), basics_or(e(2482.0), basics_or(r(2486.0, 2489.0), basics_or(e(2493.0), basics_or(e(2510.0), basics_or(r(2524.0, 2525.0), r(2527.0, 2529.0))))))))));
                                                         }
                                                        }());

                                                    case false:
                                                        ({ () in return switch l(2653.0) {
                                                            case true:
                                                                basics_or(r(2544.0, 2545.0), basics_or(e(2556.0), basics_or(r(2565.0, 2570.0), basics_or(r(2575.0, 2576.0), basics_or(r(2579.0, 2600.0), basics_or(r(2602.0, 2608.0), basics_or(r(2610.0, 2611.0), basics_or(r(2613.0, 2614.0), basics_or(r(2616.0, 2617.0), r(2649.0, 2652.0))))))))));

                                                            case false:
                                                                basics_or(e(2654.0), basics_or(r(2674.0, 2676.0), basics_or(r(2693.0, 2701.0), basics_or(r(2703.0, 2705.0), basics_or(r(2707.0, 2728.0), basics_or(r(2730.0, 2736.0), basics_or(r(2738.0, 2739.0), basics_or(r(2741.0, 2745.0), basics_or(e(2749.0), e(2768.0))))))))));
                                                         }
                                                        }());
                                                 }
                                                }());
                                         }
                                        }());

                                    case false:
                                        ({ () in return switch l(3295.0) {
                                            case true:
                                                ({ () in return switch l(2978.0) {
                                                    case true:
                                                        ({ () in return switch l(2907.0) {
                                                            case true:
                                                                basics_or(r(2784.0, 2785.0), basics_or(e(2809.0), basics_or(r(2821.0, 2828.0), basics_or(r(2831.0, 2832.0), basics_or(r(2835.0, 2856.0), basics_or(r(2858.0, 2864.0), basics_or(r(2866.0, 2867.0), basics_or(r(2869.0, 2873.0), e(2877.0)))))))));

                                                            case false:
                                                                basics_or(r(2908.0, 2909.0), basics_or(r(2911.0, 2913.0), basics_or(e(2929.0), basics_or(e(2947.0), basics_or(r(2949.0, 2954.0), basics_or(r(2958.0, 2960.0), basics_or(r(2962.0, 2965.0), basics_or(r(2969.0, 2970.0), basics_or(e(2972.0), r(2974.0, 2975.0))))))))));
                                                         }
                                                        }());

                                                    case false:
                                                        ({ () in return switch l(3164.0) {
                                                            case true:
                                                                basics_or(r(2979.0, 2980.0), basics_or(r(2984.0, 2986.0), basics_or(r(2990.0, 3001.0), basics_or(e(3024.0), basics_or(r(3077.0, 3084.0), basics_or(r(3086.0, 3088.0), basics_or(r(3090.0, 3112.0), basics_or(r(3114.0, 3129.0), basics_or(e(3133.0), r(3160.0, 3162.0))))))))));

                                                            case false:
                                                                basics_or(e(3165.0), basics_or(r(3168.0, 3169.0), basics_or(e(3200.0), basics_or(r(3205.0, 3212.0), basics_or(r(3214.0, 3216.0), basics_or(r(3218.0, 3240.0), basics_or(r(3242.0, 3251.0), basics_or(r(3253.0, 3257.0), basics_or(e(3261.0), r(3293.0, 3294.0))))))))));
                                                         }
                                                        }());
                                                 }
                                                }());

                                            case false:
                                                ({ () in return switch l(3715.0) {
                                                    case true:
                                                        ({ () in return switch l(3449.0) {
                                                            case true:
                                                                basics_or(r(3296.0, 3297.0), basics_or(r(3313.0, 3314.0), basics_or(r(3332.0, 3340.0), basics_or(r(3342.0, 3344.0), basics_or(r(3346.0, 3386.0), basics_or(e(3389.0), basics_or(e(3406.0), basics_or(r(3412.0, 3414.0), r(3423.0, 3425.0)))))))));

                                                            case false:
                                                                basics_or(r(3450.0, 3455.0), basics_or(r(3461.0, 3478.0), basics_or(r(3482.0, 3505.0), basics_or(r(3507.0, 3515.0), basics_or(e(3517.0), basics_or(r(3520.0, 3526.0), basics_or(r(3585.0, 3632.0), basics_or(r(3634.0, 3635.0), basics_or(r(3648.0, 3654.0), r(3713.0, 3714.0))))))))));
                                                         }
                                                        }());

                                                    case false:
                                                        ({ () in return switch l(3839.0) {
                                                            case true:
                                                                basics_or(e(3716.0), basics_or(r(3718.0, 3722.0), basics_or(r(3724.0, 3747.0), basics_or(e(3749.0), basics_or(r(3751.0, 3760.0), basics_or(r(3762.0, 3763.0), basics_or(e(3773.0), basics_or(r(3776.0, 3780.0), basics_or(e(3782.0), r(3804.0, 3807.0))))))))));

                                                            case false:
                                                                basics_or(e(3840.0), basics_or(r(3904.0, 3911.0), basics_or(r(3913.0, 3948.0), basics_or(r(3976.0, 3980.0), basics_or(r(4096.0, 4138.0), basics_or(e(4159.0), basics_or(r(4176.0, 4181.0), basics_or(r(4186.0, 4189.0), basics_or(e(4193.0), r(4197.0, 4198.0))))))))));
                                                         }
                                                        }());
                                                 }
                                                }());
                                         }
                                        }());
                                 }
                                }());

                            case false:
                                ({ () in return switch l(8133.0) {
                                    case true:
                                        ({ () in return switch l(6175.0) {
                                            case true:
                                                ({ () in return switch l(4807.0) {
                                                    case true:
                                                        ({ () in return switch l(4687.0) {
                                                            case true:
                                                                basics_or(r(4206.0, 4208.0), basics_or(r(4213.0, 4225.0), basics_or(e(4238.0), basics_or(r(4256.0, 4293.0), basics_or(e(4295.0), basics_or(e(4301.0), basics_or(r(4304.0, 4346.0), basics_or(r(4348.0, 4680.0), r(4682.0, 4685.0)))))))));

                                                            case false:
                                                                basics_or(r(4688.0, 4694.0), basics_or(e(4696.0), basics_or(r(4698.0, 4701.0), basics_or(r(4704.0, 4744.0), basics_or(r(4746.0, 4749.0), basics_or(r(4752.0, 4784.0), basics_or(r(4786.0, 4789.0), basics_or(r(4792.0, 4798.0), basics_or(e(4800.0), r(4802.0, 4805.0))))))))));
                                                         }
                                                        }());

                                                    case false:
                                                        ({ () in return switch l(5791.0) {
                                                            case true:
                                                                basics_or(r(4808.0, 4822.0), basics_or(r(4824.0, 4880.0), basics_or(r(4882.0, 4885.0), basics_or(r(4888.0, 4954.0), basics_or(r(4992.0, 5007.0), basics_or(r(5024.0, 5109.0), basics_or(r(5112.0, 5117.0), basics_or(r(5121.0, 5740.0), basics_or(r(5743.0, 5759.0), r(5761.0, 5786.0))))))))));

                                                            case false:
                                                                basics_or(r(5792.0, 5866.0), basics_or(r(5873.0, 5880.0), basics_or(r(5888.0, 5905.0), basics_or(r(5919.0, 5937.0), basics_or(r(5952.0, 5969.0), basics_or(r(5984.0, 5996.0), basics_or(r(5998.0, 6000.0), basics_or(r(6016.0, 6067.0), basics_or(e(6103.0), e(6108.0))))))))));
                                                         }
                                                        }());
                                                 }
                                                }());

                                            case false:
                                                ({ () in return switch l(7244.0) {
                                                    case true:
                                                        ({ () in return switch l(6575.0) {
                                                            case true:
                                                                basics_or(r(6176.0, 6264.0), basics_or(r(6272.0, 6276.0), basics_or(r(6279.0, 6312.0), basics_or(e(6314.0), basics_or(r(6320.0, 6389.0), basics_or(r(6400.0, 6430.0), basics_or(r(6480.0, 6509.0), basics_or(r(6512.0, 6516.0), r(6528.0, 6571.0)))))))));

                                                            case false:
                                                                basics_or(r(6576.0, 6601.0), basics_or(r(6656.0, 6678.0), basics_or(r(6688.0, 6740.0), basics_or(e(6823.0), basics_or(r(6917.0, 6963.0), basics_or(r(6981.0, 6988.0), basics_or(r(7043.0, 7072.0), basics_or(r(7086.0, 7087.0), basics_or(r(7098.0, 7141.0), r(7168.0, 7203.0))))))))));
                                                         }
                                                        }());

                                                    case false:
                                                        ({ () in return switch l(7679.0) {
                                                            case true:
                                                                basics_or(r(7245.0, 7247.0), basics_or(r(7258.0, 7293.0), basics_or(r(7296.0, 7304.0), basics_or(r(7312.0, 7354.0), basics_or(r(7357.0, 7359.0), basics_or(r(7401.0, 7404.0), basics_or(r(7406.0, 7411.0), basics_or(r(7413.0, 7414.0), basics_or(e(7418.0), r(7424.0, 7615.0))))))))));

                                                            case false:
                                                                basics_or(r(7680.0, 7957.0), basics_or(r(7960.0, 7965.0), basics_or(r(7968.0, 8005.0), basics_or(r(8008.0, 8013.0), basics_or(r(8016.0, 8023.0), basics_or(r(8032.0, 8061.0), basics_or(r(8064.0, 8116.0), basics_or(r(8118.0, 8124.0), basics_or(e(8126.0), basics_or(r(8130.0, 8132.0), basics_and(basics_eq(basics_modBy(2.0, code), 1.0), r(8025.0, 8031.0))))))))))));
                                                         }
                                                        }());
                                                 }
                                                }());
                                         }
                                        }());

                                    case false:
                                        ({ () in return switch l(12336.0) {
                                            case true:
                                                ({ () in return switch l(8578.0) {
                                                    case true:
                                                        ({ () in return switch l(8449.0) {
                                                            case true:
                                                                basics_or(r(8134.0, 8140.0), basics_or(r(8144.0, 8147.0), basics_or(r(8150.0, 8155.0), basics_or(r(8160.0, 8172.0), basics_or(r(8178.0, 8180.0), basics_or(r(8182.0, 8188.0), basics_or(e(8305.0), basics_or(e(8319.0), r(8336.0, 8348.0)))))))));

                                                            case false:
                                                                basics_or(e(8450.0), basics_or(e(8455.0), basics_or(r(8458.0, 8467.0), basics_or(e(8469.0), basics_or(r(8473.0, 8477.0), basics_or(r(8490.0, 8493.0), basics_or(r(8495.0, 8505.0), basics_or(r(8508.0, 8511.0), basics_or(r(8517.0, 8521.0), basics_or(e(8526.0), basics_and(basics_eq(basics_modBy(2.0, code), 0.0), r(8484.0, 8488.0))))))))))));
                                                         }
                                                        }());

                                                    case false:
                                                        ({ () in return switch l(11679.0) {
                                                            case true:
                                                                basics_or(r(8579.0, 8580.0), basics_or(r(11264.0, 11492.0), basics_or(r(11499.0, 11502.0), basics_or(r(11506.0, 11507.0), basics_or(r(11520.0, 11557.0), basics_or(e(11559.0), basics_or(e(11565.0), basics_or(r(11568.0, 11623.0), basics_or(e(11631.0), r(11648.0, 11670.0))))))))));

                                                            case false:
                                                                basics_or(r(11680.0, 11686.0), basics_or(r(11688.0, 11694.0), basics_or(r(11696.0, 11702.0), basics_or(r(11704.0, 11710.0), basics_or(r(11712.0, 11718.0), basics_or(r(11720.0, 11726.0), basics_or(r(11728.0, 11734.0), basics_or(r(11736.0, 11742.0), basics_or(e(11823.0), r(12293.0, 12294.0))))))))));
                                                         }
                                                        }());
                                                 }
                                                }());

                                            case false:
                                                ({ () in return switch l(42785.0) {
                                                    case true:
                                                        ({ () in return switch l(13311.0) {
                                                            case true:
                                                                basics_or(r(12337.0, 12341.0), basics_or(r(12347.0, 12348.0), basics_or(r(12353.0, 12438.0), basics_or(r(12445.0, 12447.0), basics_or(r(12449.0, 12538.0), basics_or(r(12540.0, 12543.0), basics_or(r(12549.0, 12591.0), basics_or(r(12593.0, 12686.0), basics_or(r(12704.0, 12735.0), r(12784.0, 12799.0))))))))));

                                                            case false:
                                                                basics_or(r(13312.0, 19903.0), basics_or(r(19968.0, 42124.0), basics_or(r(42192.0, 42237.0), basics_or(r(42240.0, 42508.0), basics_or(r(42512.0, 42527.0), basics_or(r(42538.0, 42539.0), basics_or(r(42560.0, 42606.0), basics_or(r(42623.0, 42653.0), basics_or(r(42656.0, 42725.0), r(42775.0, 42783.0))))))))));
                                                         }
                                                        }());

                                                    case false:
                                                        ({ () in return switch l(43249.0) {
                                                            case true:
                                                                basics_or(r(42786.0, 42888.0), basics_or(r(42891.0, 42954.0), basics_or(r(42960.0, 42961.0), basics_or(r(42966.0, 42969.0), basics_or(r(42994.0, 43009.0), basics_or(r(43011.0, 43013.0), basics_or(r(43015.0, 43018.0), basics_or(r(43020.0, 43042.0), basics_or(r(43072.0, 43123.0), basics_or(r(43138.0, 43187.0), basics_and(basics_eq(basics_modBy(2.0, code), 1.0), r(42963.0, 42965.0))))))))))));

                                                            case false:
                                                                basics_or(r(43250.0, 43255.0), basics_or(e(43259.0), basics_or(r(43261.0, 43262.0), basics_or(r(43274.0, 43301.0), basics_or(r(43312.0, 43334.0), basics_or(r(43360.0, 43388.0), basics_or(r(43396.0, 43442.0), basics_or(e(43471.0), basics_or(r(43488.0, 43492.0), r(43494.0, 43503.0))))))))));
                                                         }
                                                        }());
                                                 }
                                                }());
                                         }
                                        }());
                                 }
                                }());
                         }
                        }());

                    case false:
                        ({ () in return switch l(70851.0) {
                            case true:
                                ({ () in return switch l(67071.0) {
                                    case true:
                                        ({ () in return switch l(65007.0) {
                                            case true:
                                                ({ () in return switch l(43867.0) {
                                                    case true:
                                                        ({ () in return switch l(43704.0) {
                                                            case true:
                                                                basics_or(r(43514.0, 43518.0), basics_or(r(43520.0, 43560.0), basics_or(r(43584.0, 43586.0), basics_or(r(43588.0, 43595.0), basics_or(r(43616.0, 43638.0), basics_or(e(43642.0), basics_or(r(43646.0, 43695.0), basics_or(e(43697.0), r(43701.0, 43702.0)))))))));

                                                            case false:
                                                                basics_or(r(43705.0, 43709.0), basics_or(r(43739.0, 43741.0), basics_or(r(43744.0, 43754.0), basics_or(r(43762.0, 43764.0), basics_or(r(43777.0, 43782.0), basics_or(r(43785.0, 43790.0), basics_or(r(43793.0, 43798.0), basics_or(r(43808.0, 43814.0), basics_or(r(43816.0, 43822.0), basics_or(r(43824.0, 43866.0), basics_and(basics_eq(basics_modBy(2.0, code), 0.0), r(43712.0, 43714.0))))))))))));
                                                         }
                                                        }());

                                                    case false:
                                                        ({ () in return switch l(64286.0) {
                                                            case true:
                                                                basics_or(r(43868.0, 43881.0), basics_or(r(43888.0, 44002.0), basics_or(r(44032.0, 55203.0), basics_or(r(55216.0, 55238.0), basics_or(r(55243.0, 55291.0), basics_or(r(63744.0, 64109.0), basics_or(r(64112.0, 64217.0), basics_or(r(64256.0, 64262.0), basics_or(r(64275.0, 64279.0), e(64285.0))))))))));

                                                            case false:
                                                                basics_or(r(64287.0, 64296.0), basics_or(r(64298.0, 64310.0), basics_or(r(64312.0, 64316.0), basics_or(e(64318.0), basics_or(r(64320.0, 64321.0), basics_or(r(64323.0, 64324.0), basics_or(r(64326.0, 64433.0), basics_or(r(64467.0, 64829.0), basics_or(r(64848.0, 64911.0), r(64914.0, 64967.0))))))))));
                                                         }
                                                        }());
                                                 }
                                                }());

                                            case false:
                                                ({ () in return switch l(66303.0) {
                                                    case true:
                                                        ({ () in return switch l(65497.0) {
                                                            case true:
                                                                basics_or(r(65008.0, 65019.0), basics_or(r(65136.0, 65140.0), basics_or(r(65142.0, 65276.0), basics_or(r(65313.0, 65338.0), basics_or(r(65345.0, 65370.0), basics_or(r(65382.0, 65470.0), basics_or(r(65474.0, 65479.0), basics_or(r(65482.0, 65487.0), r(65490.0, 65495.0)))))))));

                                                            case false:
                                                                basics_or(r(65498.0, 65500.0), basics_or(r(65536.0, 65547.0), basics_or(r(65549.0, 65574.0), basics_or(r(65576.0, 65594.0), basics_or(r(65596.0, 65597.0), basics_or(r(65599.0, 65613.0), basics_or(r(65616.0, 65629.0), basics_or(r(65664.0, 65786.0), basics_or(r(66176.0, 66204.0), r(66208.0, 66256.0))))))))));
                                                         }
                                                        }());

                                                    case false:
                                                        ({ () in return switch l(66815.0) {
                                                            case true:
                                                                basics_or(r(66304.0, 66335.0), basics_or(r(66349.0, 66368.0), basics_or(r(66370.0, 66377.0), basics_or(r(66384.0, 66421.0), basics_or(r(66432.0, 66461.0), basics_or(r(66464.0, 66499.0), basics_or(r(66504.0, 66511.0), basics_or(r(66560.0, 66717.0), basics_or(r(66736.0, 66771.0), r(66776.0, 66811.0))))))))));

                                                            case false:
                                                                basics_or(r(66816.0, 66855.0), basics_or(r(66864.0, 66915.0), basics_or(r(66928.0, 66938.0), basics_or(r(66940.0, 66954.0), basics_or(r(66956.0, 66962.0), basics_or(r(66964.0, 66965.0), basics_or(r(66967.0, 66977.0), basics_or(r(66979.0, 66993.0), basics_or(r(66995.0, 67001.0), r(67003.0, 67004.0))))))))));
                                                         }
                                                        }());
                                                 }
                                                }());
                                         }
                                        }());

                                    case false:
                                        ({ () in return switch l(69414.0) {
                                            case true:
                                                ({ () in return switch l(68029.0) {
                                                    case true:
                                                        ({ () in return switch l(67638.0) {
                                                            case true:
                                                                basics_or(r(67072.0, 67382.0), basics_or(r(67392.0, 67413.0), basics_or(r(67424.0, 67431.0), basics_or(r(67456.0, 67461.0), basics_or(r(67463.0, 67504.0), basics_or(r(67506.0, 67514.0), basics_or(r(67584.0, 67589.0), basics_or(e(67592.0), r(67594.0, 67637.0)))))))));

                                                            case false:
                                                                basics_or(r(67639.0, 67640.0), basics_or(e(67644.0), basics_or(r(67647.0, 67669.0), basics_or(r(67680.0, 67702.0), basics_or(r(67712.0, 67742.0), basics_or(r(67808.0, 67826.0), basics_or(r(67828.0, 67829.0), basics_or(r(67840.0, 67861.0), basics_or(r(67872.0, 67897.0), r(67968.0, 68023.0))))))))));
                                                         }
                                                        }());

                                                    case false:
                                                        ({ () in return switch l(68415.0) {
                                                            case true:
                                                                basics_or(r(68030.0, 68031.0), basics_or(e(68096.0), basics_or(r(68112.0, 68115.0), basics_or(r(68117.0, 68119.0), basics_or(r(68121.0, 68149.0), basics_or(r(68192.0, 68220.0), basics_or(r(68224.0, 68252.0), basics_or(r(68288.0, 68295.0), basics_or(r(68297.0, 68324.0), r(68352.0, 68405.0))))))))));

                                                            case false:
                                                                basics_or(r(68416.0, 68437.0), basics_or(r(68448.0, 68466.0), basics_or(r(68480.0, 68497.0), basics_or(r(68608.0, 68680.0), basics_or(r(68736.0, 68786.0), basics_or(r(68800.0, 68850.0), basics_or(r(68864.0, 68899.0), basics_or(r(69248.0, 69289.0), basics_or(r(69296.0, 69297.0), r(69376.0, 69404.0))))))))));
                                                         }
                                                        }());
                                                 }
                                                }());

                                            case false:
                                                ({ () in return switch l(70206.0) {
                                                    case true:
                                                        ({ () in return switch l(69839.0) {
                                                            case true:
                                                                basics_or(e(69415.0), basics_or(r(69424.0, 69445.0), basics_or(r(69488.0, 69505.0), basics_or(r(69552.0, 69572.0), basics_or(r(69600.0, 69622.0), basics_or(r(69635.0, 69687.0), basics_or(r(69745.0, 69746.0), basics_or(e(69749.0), r(69763.0, 69807.0)))))))));

                                                            case false:
                                                                basics_or(r(69840.0, 69864.0), basics_or(r(69891.0, 69926.0), basics_or(e(69956.0), basics_or(e(69959.0), basics_or(r(69968.0, 70002.0), basics_or(e(70006.0), basics_or(r(70019.0, 70066.0), basics_or(r(70081.0, 70084.0), basics_or(r(70144.0, 70161.0), basics_or(r(70163.0, 70187.0), basics_and(basics_eq(basics_modBy(2.0, code), 0.0), r(70106.0, 70108.0))))))))))));
                                                         }
                                                        }());

                                                    case false:
                                                        ({ () in return switch l(70441.0) {
                                                            case true:
                                                                basics_or(r(70207.0, 70208.0), basics_or(r(70272.0, 70278.0), basics_or(e(70280.0), basics_or(r(70282.0, 70285.0), basics_or(r(70287.0, 70301.0), basics_or(r(70303.0, 70312.0), basics_or(r(70320.0, 70366.0), basics_or(r(70405.0, 70412.0), basics_or(r(70415.0, 70416.0), r(70419.0, 70440.0))))))))));

                                                            case false:
                                                                basics_or(r(70442.0, 70448.0), basics_or(r(70450.0, 70451.0), basics_or(r(70453.0, 70457.0), basics_or(e(70461.0), basics_or(e(70480.0), basics_or(r(70493.0, 70497.0), basics_or(r(70656.0, 70708.0), basics_or(r(70727.0, 70730.0), basics_or(r(70751.0, 70753.0), r(70784.0, 70831.0))))))))));
                                                         }
                                                        }());
                                                 }
                                                }());
                                         }
                                        }());
                                 }
                                }());

                            case false:
                                ({ () in return switch l(113807.0) {
                                    case true:
                                        ({ () in return switch l(73473.0) {
                                            case true:
                                                ({ () in return switch l(72191.0) {
                                                    case true:
                                                        ({ () in return switch l(71487.0) {
                                                            case true:
                                                                basics_or(r(70852.0, 70853.0), basics_or(e(70855.0), basics_or(r(71040.0, 71086.0), basics_or(r(71128.0, 71131.0), basics_or(r(71168.0, 71215.0), basics_or(e(71236.0), basics_or(r(71296.0, 71338.0), basics_or(e(71352.0), r(71424.0, 71450.0)))))))));

                                                            case false:
                                                                basics_or(r(71488.0, 71494.0), basics_or(r(71680.0, 71723.0), basics_or(r(71840.0, 71903.0), basics_or(r(71935.0, 71942.0), basics_or(e(71945.0), basics_or(r(71948.0, 71955.0), basics_or(r(71957.0, 71958.0), basics_or(r(71960.0, 71983.0), basics_or(r(72096.0, 72103.0), basics_or(r(72106.0, 72144.0), basics_and(basics_eq(basics_modBy(2.0, code), 1.0), basics_or(r(71999.0, 72001.0), r(72161.0, 72163.0)))))))))))));
                                                         }
                                                        }());

                                                    case false:
                                                        ({ () in return switch l(72817.0) {
                                                            case true:
                                                                basics_or(e(72192.0), basics_or(r(72203.0, 72242.0), basics_or(e(72250.0), basics_or(e(72272.0), basics_or(r(72284.0, 72329.0), basics_or(e(72349.0), basics_or(r(72368.0, 72440.0), basics_or(r(72704.0, 72712.0), basics_or(r(72714.0, 72750.0), e(72768.0))))))))));

                                                            case false:
                                                                basics_or(r(72818.0, 72847.0), basics_or(r(72960.0, 72966.0), basics_or(r(72968.0, 72969.0), basics_or(r(72971.0, 73008.0), basics_or(e(73030.0), basics_or(r(73056.0, 73061.0), basics_or(r(73063.0, 73064.0), basics_or(r(73066.0, 73097.0), basics_or(e(73112.0), r(73440.0, 73458.0))))))))));
                                                         }
                                                        }());
                                                 }
                                                }());

                                            case false:
                                                ({ () in return switch l(93951.0) {
                                                    case true:
                                                        ({ () in return switch l(82943.0) {
                                                            case true:
                                                                basics_or(e(73474.0), basics_or(r(73476.0, 73488.0), basics_or(r(73490.0, 73523.0), basics_or(e(73648.0), basics_or(r(73728.0, 74649.0), basics_or(r(74880.0, 75075.0), basics_or(r(77712.0, 77808.0), basics_or(r(77824.0, 78895.0), r(78913.0, 78918.0)))))))));

                                                            case false:
                                                                basics_or(r(82944.0, 83526.0), basics_or(r(92160.0, 92728.0), basics_or(r(92736.0, 92766.0), basics_or(r(92784.0, 92862.0), basics_or(r(92880.0, 92909.0), basics_or(r(92928.0, 92975.0), basics_or(r(92992.0, 92995.0), basics_or(r(93027.0, 93047.0), basics_or(r(93053.0, 93071.0), r(93760.0, 93823.0))))))))));
                                                         }
                                                        }());

                                                    case false:
                                                        ({ () in return switch l(110588.0) {
                                                            case true:
                                                                basics_or(r(93952.0, 94026.0), basics_or(e(94032.0), basics_or(r(94099.0, 94111.0), basics_or(r(94176.0, 94177.0), basics_or(e(94179.0), basics_or(r(94208.0, 100343.0), basics_or(r(100352.0, 101589.0), basics_or(r(101632.0, 101640.0), basics_or(r(110576.0, 110579.0), r(110581.0, 110587.0))))))))));

                                                            case false:
                                                                basics_or(r(110589.0, 110590.0), basics_or(r(110592.0, 110882.0), basics_or(e(110898.0), basics_or(r(110928.0, 110930.0), basics_or(e(110933.0), basics_or(r(110948.0, 110951.0), basics_or(r(110960.0, 111355.0), basics_or(r(113664.0, 113770.0), basics_or(r(113776.0, 113788.0), r(113792.0, 113800.0))))))))));
                                                         }
                                                        }());
                                                 }
                                                }());
                                         }
                                        }());

                                    case false:
                                        ({ () in return switch l(124111.0) {
                                            case true:
                                                ({ () in return switch l(120145.0) {
                                                    case true:
                                                        ({ () in return switch l(119996.0) {
                                                            case true:
                                                                basics_or(r(113808.0, 113817.0), basics_or(r(119808.0, 119892.0), basics_or(r(119894.0, 119964.0), basics_or(r(119966.0, 119967.0), basics_or(e(119970.0), basics_or(r(119973.0, 119974.0), basics_or(r(119977.0, 119980.0), basics_or(r(119982.0, 119993.0), e(119995.0)))))))));

                                                            case false:
                                                                basics_or(r(119997.0, 120003.0), basics_or(r(120005.0, 120069.0), basics_or(r(120071.0, 120074.0), basics_or(r(120077.0, 120084.0), basics_or(r(120086.0, 120092.0), basics_or(r(120094.0, 120121.0), basics_or(r(120123.0, 120126.0), basics_or(r(120128.0, 120132.0), basics_or(e(120134.0), r(120138.0, 120144.0))))))))));
                                                         }
                                                        }());

                                                    case false:
                                                        ({ () in return switch l(120745.0) {
                                                            case true:
                                                                basics_or(r(120146.0, 120485.0), basics_or(r(120488.0, 120512.0), basics_or(r(120514.0, 120538.0), basics_or(r(120540.0, 120570.0), basics_or(r(120572.0, 120596.0), basics_or(r(120598.0, 120628.0), basics_or(r(120630.0, 120654.0), basics_or(r(120656.0, 120686.0), basics_or(r(120688.0, 120712.0), r(120714.0, 120744.0))))))))));

                                                            case false:
                                                                basics_or(r(120746.0, 120770.0), basics_or(r(120772.0, 120779.0), basics_or(r(122624.0, 122654.0), basics_or(r(122661.0, 122666.0), basics_or(r(122928.0, 122989.0), basics_or(r(123136.0, 123180.0), basics_or(r(123191.0, 123197.0), basics_or(e(123214.0), basics_or(r(123536.0, 123565.0), r(123584.0, 123627.0))))))))));
                                                         }
                                                        }());
                                                 }
                                                }());

                                            case false:
                                                ({ () in return switch l(126563.0) {
                                                    case true:
                                                        ({ () in return switch l(126496.0) {
                                                            case true:
                                                                basics_or(r(124112.0, 124139.0), basics_or(r(124896.0, 124902.0), basics_or(r(124904.0, 124907.0), basics_or(r(124909.0, 124910.0), basics_or(r(124912.0, 124926.0), basics_or(r(124928.0, 125124.0), basics_or(r(125184.0, 125251.0), basics_or(e(125259.0), basics_or(r(126464.0, 126467.0), r(126469.0, 126495.0))))))))));

                                                            case false:
                                                                basics_or(r(126497.0, 126498.0), basics_or(e(126500.0), basics_or(e(126503.0), basics_or(r(126505.0, 126514.0), basics_or(r(126516.0, 126519.0), basics_or(e(126530.0), basics_or(r(126541.0, 126543.0), basics_or(r(126545.0, 126546.0), basics_or(e(126548.0), basics_or(r(126561.0, 126562.0), basics_and(basics_eq(basics_modBy(2.0, code), 1.0), basics_or(r(126521.0, 126523.0), basics_or(r(126535.0, 126539.0), r(126551.0, 126559.0))))))))))))));
                                                         }
                                                        }());

                                                    case false:
                                                        ({ () in return switch l(126634.0) {
                                                            case true:
                                                                basics_or(e(126564.0), basics_or(r(126567.0, 126570.0), basics_or(r(126572.0, 126578.0), basics_or(r(126580.0, 126583.0), basics_or(r(126585.0, 126588.0), basics_or(e(126590.0), basics_or(r(126592.0, 126601.0), basics_or(r(126603.0, 126619.0), basics_or(r(126625.0, 126627.0), r(126629.0, 126633.0))))))))));

                                                            case false:
                                                                basics_or(r(126635.0, 126651.0), basics_or(r(131072.0, 173791.0), basics_or(r(173824.0, 177977.0), basics_or(r(177984.0, 178205.0), basics_or(r(178208.0, 183969.0), basics_or(r(183984.0, 191456.0), basics_or(r(191472.0, 192093.0), basics_or(r(194560.0, 195101.0), basics_or(r(196608.0, 201546.0), r(201552.0, 205743.0))))))))));
                                                         }
                                                        }());
                                                 }
                                                }());
                                         }
                                        }());
                                 }
                                }());
                         }
                        }());
                 }
                }());
          }
         }())
        }())
    }

    static public func unicode_isAlphaNum(_ c: Character) -> Bool {
        ({ () in let code =
            char_toCode(c);

         let e =
            { (hex) in
                basics_eq(hex, code)
            };

         let l =
            { (hex) in
                basics_lt(code, hex)
            };

         let r =
            { (from, to) in
                basics_and(basics_le(from, code), basics_le(code, to))
            };

         return ({ () in return switch l(256.0) {
            case true:
                basics_or(r(48.0, 57.0), basics_or(r(65.0, 90.0), basics_or(r(97.0, 122.0), basics_or(e(170.0), basics_or(r(178.0, 179.0), basics_or(e(181.0), basics_or(r(185.0, 186.0), basics_or(r(188.0, 190.0), basics_or(r(192.0, 214.0), basics_or(r(216.0, 246.0), r(248.0, 255.0)))))))))));

            case false:
                ({ () in return switch l(43700.0) {
                    case true:
                        ({ () in return switch l(4347.0) {
                            case true:
                                ({ () in return switch l(2868.0) {
                                    case true:
                                        ({ () in return switch l(2364.0) {
                                            case true:
                                                ({ () in return switch l(1648.0) {
                                                    case true:
                                                        ({ () in return switch l(930.0) {
                                                            case true:
                                                                basics_or(r(256.0, 705.0), basics_or(r(710.0, 721.0), basics_or(r(736.0, 740.0), basics_or(r(880.0, 884.0), basics_or(r(886.0, 887.0), basics_or(r(890.0, 893.0), basics_or(e(895.0), basics_or(e(902.0), basics_or(r(904.0, 906.0), basics_or(e(908.0), basics_or(r(910.0, 929.0), basics_and(basics_eq(basics_modBy(2.0, code), 0.0), r(748.0, 750.0)))))))))))));

                                                            case false:
                                                                basics_or(r(931.0, 1013.0), basics_or(r(1015.0, 1153.0), basics_or(r(1162.0, 1327.0), basics_or(r(1329.0, 1366.0), basics_or(e(1369.0), basics_or(r(1376.0, 1416.0), basics_or(r(1488.0, 1514.0), basics_or(r(1519.0, 1522.0), basics_or(r(1568.0, 1610.0), basics_or(r(1632.0, 1641.0), r(1646.0, 1647.0)))))))))));
                                                         }
                                                        }());

                                                    case false:
                                                        ({ () in return switch l(2041.0) {
                                                            case true:
                                                                basics_or(r(1649.0, 1747.0), basics_or(e(1749.0), basics_or(r(1765.0, 1766.0), basics_or(r(1774.0, 1788.0), basics_or(e(1791.0), basics_or(e(1808.0), basics_or(r(1810.0, 1839.0), basics_or(r(1869.0, 1957.0), basics_or(e(1969.0), basics_or(r(1984.0, 2026.0), r(2036.0, 2037.0)))))))))));

                                                            case false:
                                                                basics_or(e(2042.0), basics_or(r(2048.0, 2069.0), basics_or(e(2074.0), basics_or(e(2084.0), basics_or(e(2088.0), basics_or(r(2112.0, 2136.0), basics_or(r(2144.0, 2154.0), basics_or(r(2160.0, 2183.0), basics_or(r(2185.0, 2190.0), basics_or(r(2208.0, 2249.0), r(2308.0, 2361.0)))))))))));
                                                         }
                                                        }());
                                                 }
                                                }());

                                            case false:
                                                ({ () in return switch l(2609.0) {
                                                    case true:
                                                        ({ () in return switch l(2492.0) {
                                                            case true:
                                                                basics_or(e(2365.0), basics_or(e(2384.0), basics_or(r(2392.0, 2401.0), basics_or(r(2406.0, 2415.0), basics_or(r(2417.0, 2432.0), basics_or(r(2437.0, 2444.0), basics_or(r(2447.0, 2448.0), basics_or(r(2451.0, 2472.0), basics_or(r(2474.0, 2480.0), basics_or(e(2482.0), r(2486.0, 2489.0)))))))))));

                                                            case false:
                                                                basics_or(e(2493.0), basics_or(e(2510.0), basics_or(r(2524.0, 2525.0), basics_or(r(2527.0, 2529.0), basics_or(r(2534.0, 2545.0), basics_or(r(2548.0, 2553.0), basics_or(e(2556.0), basics_or(r(2565.0, 2570.0), basics_or(r(2575.0, 2576.0), basics_or(r(2579.0, 2600.0), r(2602.0, 2608.0)))))))))));
                                                         }
                                                        }());

                                                    case false:
                                                        ({ () in return switch l(2737.0) {
                                                            case true:
                                                                basics_or(r(2610.0, 2611.0), basics_or(r(2613.0, 2614.0), basics_or(r(2616.0, 2617.0), basics_or(r(2649.0, 2652.0), basics_or(e(2654.0), basics_or(r(2662.0, 2671.0), basics_or(r(2674.0, 2676.0), basics_or(r(2693.0, 2701.0), basics_or(r(2703.0, 2705.0), basics_or(r(2707.0, 2728.0), r(2730.0, 2736.0)))))))))));

                                                            case false:
                                                                basics_or(r(2738.0, 2739.0), basics_or(r(2741.0, 2745.0), basics_or(e(2749.0), basics_or(e(2768.0), basics_or(r(2784.0, 2785.0), basics_or(r(2790.0, 2799.0), basics_or(e(2809.0), basics_or(r(2821.0, 2828.0), basics_or(r(2831.0, 2832.0), basics_or(r(2835.0, 2856.0), basics_or(r(2858.0, 2864.0), r(2866.0, 2867.0))))))))))));
                                                         }
                                                        }());
                                                 }
                                                }());
                                         }
                                        }());

                                    case false:
                                        ({ () in return switch l(3411.0) {
                                            case true:
                                                ({ () in return switch l(3132.0) {
                                                    case true:
                                                        ({ () in return switch l(2971.0) {
                                                            case true:
                                                                basics_or(r(2869.0, 2873.0), basics_or(e(2877.0), basics_or(r(2908.0, 2909.0), basics_or(r(2911.0, 2913.0), basics_or(r(2918.0, 2927.0), basics_or(r(2929.0, 2935.0), basics_or(e(2947.0), basics_or(r(2949.0, 2954.0), basics_or(r(2958.0, 2960.0), basics_or(r(2962.0, 2965.0), r(2969.0, 2970.0)))))))))));

                                                            case false:
                                                                basics_or(e(2972.0), basics_or(r(2974.0, 2975.0), basics_or(r(2979.0, 2980.0), basics_or(r(2984.0, 2986.0), basics_or(r(2990.0, 3001.0), basics_or(e(3024.0), basics_or(r(3046.0, 3058.0), basics_or(r(3077.0, 3084.0), basics_or(r(3086.0, 3088.0), basics_or(r(3090.0, 3112.0), r(3114.0, 3129.0)))))))))));
                                                         }
                                                        }());

                                                    case false:
                                                        ({ () in return switch l(3252.0) {
                                                            case true:
                                                                basics_or(e(3133.0), basics_or(r(3160.0, 3162.0), basics_or(e(3165.0), basics_or(r(3168.0, 3169.0), basics_or(r(3174.0, 3183.0), basics_or(r(3192.0, 3198.0), basics_or(e(3200.0), basics_or(r(3205.0, 3212.0), basics_or(r(3214.0, 3216.0), basics_or(r(3218.0, 3240.0), r(3242.0, 3251.0)))))))))));

                                                            case false:
                                                                basics_or(r(3253.0, 3257.0), basics_or(e(3261.0), basics_or(r(3293.0, 3294.0), basics_or(r(3296.0, 3297.0), basics_or(r(3302.0, 3311.0), basics_or(r(3313.0, 3314.0), basics_or(r(3332.0, 3340.0), basics_or(r(3342.0, 3344.0), basics_or(r(3346.0, 3386.0), basics_or(e(3389.0), e(3406.0)))))))))));
                                                         }
                                                        }());
                                                 }
                                                }());

                                            case false:
                                                ({ () in return switch l(3775.0) {
                                                    case true:
                                                        ({ () in return switch l(3633.0) {
                                                            case true:
                                                                basics_or(r(3412.0, 3414.0), basics_or(r(3416.0, 3425.0), basics_or(r(3430.0, 3448.0), basics_or(r(3450.0, 3455.0), basics_or(r(3461.0, 3478.0), basics_or(r(3482.0, 3505.0), basics_or(r(3507.0, 3515.0), basics_or(e(3517.0), basics_or(r(3520.0, 3526.0), basics_or(r(3558.0, 3567.0), r(3585.0, 3632.0)))))))))));

                                                            case false:
                                                                basics_or(r(3634.0, 3635.0), basics_or(r(3648.0, 3654.0), basics_or(r(3664.0, 3673.0), basics_or(r(3713.0, 3714.0), basics_or(e(3716.0), basics_or(r(3718.0, 3722.0), basics_or(r(3724.0, 3747.0), basics_or(e(3749.0), basics_or(r(3751.0, 3760.0), basics_or(r(3762.0, 3763.0), e(3773.0)))))))))));
                                                         }
                                                        }());

                                                    case false:
                                                        ({ () in return switch l(4175.0) {
                                                            case true:
                                                                basics_or(r(3776.0, 3780.0), basics_or(e(3782.0), basics_or(r(3792.0, 3801.0), basics_or(r(3804.0, 3807.0), basics_or(e(3840.0), basics_or(r(3872.0, 3891.0), basics_or(r(3904.0, 3911.0), basics_or(r(3913.0, 3948.0), basics_or(r(3976.0, 3980.0), basics_or(r(4096.0, 4138.0), r(4159.0, 4169.0)))))))))));

                                                            case false:
                                                                basics_or(r(4176.0, 4181.0), basics_or(r(4186.0, 4189.0), basics_or(e(4193.0), basics_or(r(4197.0, 4198.0), basics_or(r(4206.0, 4208.0), basics_or(r(4213.0, 4225.0), basics_or(e(4238.0), basics_or(r(4240.0, 4249.0), basics_or(r(4256.0, 4293.0), basics_or(e(4295.0), basics_or(e(4301.0), r(4304.0, 4346.0))))))))))));
                                                         }
                                                        }());
                                                 }
                                                }());
                                         }
                                        }());
                                 }
                                }());

                            case false:
                                ({ () in return switch l(8454.0) {
                                    case true:
                                        ({ () in return switch l(6527.0) {
                                            case true:
                                                ({ () in return switch l(5760.0) {
                                                    case true:
                                                        ({ () in return switch l(4801.0) {
                                                            case true:
                                                                basics_or(r(4348.0, 4680.0), basics_or(r(4682.0, 4685.0), basics_or(r(4688.0, 4694.0), basics_or(e(4696.0), basics_or(r(4698.0, 4701.0), basics_or(r(4704.0, 4744.0), basics_or(r(4746.0, 4749.0), basics_or(r(4752.0, 4784.0), basics_or(r(4786.0, 4789.0), basics_or(r(4792.0, 4798.0), e(4800.0)))))))))));

                                                            case false:
                                                                basics_or(r(4802.0, 4805.0), basics_or(r(4808.0, 4822.0), basics_or(r(4824.0, 4880.0), basics_or(r(4882.0, 4885.0), basics_or(r(4888.0, 4954.0), basics_or(r(4969.0, 4988.0), basics_or(r(4992.0, 5007.0), basics_or(r(5024.0, 5109.0), basics_or(r(5112.0, 5117.0), basics_or(r(5121.0, 5740.0), r(5743.0, 5759.0)))))))))));
                                                         }
                                                        }());

                                                    case false:
                                                        ({ () in return switch l(6111.0) {
                                                            case true:
                                                                basics_or(r(5761.0, 5786.0), basics_or(r(5792.0, 5866.0), basics_or(r(5870.0, 5880.0), basics_or(r(5888.0, 5905.0), basics_or(r(5919.0, 5937.0), basics_or(r(5952.0, 5969.0), basics_or(r(5984.0, 5996.0), basics_or(r(5998.0, 6000.0), basics_or(r(6016.0, 6067.0), basics_or(e(6103.0), e(6108.0)))))))))));

                                                            case false:
                                                                basics_or(r(6112.0, 6121.0), basics_or(r(6128.0, 6137.0), basics_or(r(6160.0, 6169.0), basics_or(r(6176.0, 6264.0), basics_or(r(6272.0, 6276.0), basics_or(r(6279.0, 6312.0), basics_or(e(6314.0), basics_or(r(6320.0, 6389.0), basics_or(r(6400.0, 6430.0), basics_or(r(6470.0, 6509.0), r(6512.0, 6516.0)))))))))));
                                                         }
                                                        }());
                                                 }
                                                }());

                                            case false:
                                                ({ () in return switch l(7417.0) {
                                                    case true:
                                                        ({ () in return switch l(7042.0) {
                                                            case true:
                                                                basics_or(r(6528.0, 6571.0), basics_or(r(6576.0, 6601.0), basics_or(r(6608.0, 6618.0), basics_or(r(6656.0, 6678.0), basics_or(r(6688.0, 6740.0), basics_or(r(6784.0, 6793.0), basics_or(r(6800.0, 6809.0), basics_or(e(6823.0), basics_or(r(6917.0, 6963.0), basics_or(r(6981.0, 6988.0), r(6992.0, 7001.0)))))))))));

                                                            case false:
                                                                basics_or(r(7043.0, 7072.0), basics_or(r(7086.0, 7141.0), basics_or(r(7168.0, 7203.0), basics_or(r(7232.0, 7241.0), basics_or(r(7245.0, 7293.0), basics_or(r(7296.0, 7304.0), basics_or(r(7312.0, 7354.0), basics_or(r(7357.0, 7359.0), basics_or(r(7401.0, 7404.0), basics_or(r(7406.0, 7411.0), r(7413.0, 7414.0)))))))))));
                                                         }
                                                        }());

                                                    case false:
                                                        ({ () in return switch l(8129.0) {
                                                            case true:
                                                                basics_or(e(7418.0), basics_or(r(7424.0, 7615.0), basics_or(r(7680.0, 7957.0), basics_or(r(7960.0, 7965.0), basics_or(r(7968.0, 8005.0), basics_or(r(8008.0, 8013.0), basics_or(r(8016.0, 8023.0), basics_or(r(8032.0, 8061.0), basics_or(r(8064.0, 8116.0), basics_or(r(8118.0, 8124.0), basics_or(e(8126.0), basics_and(basics_eq(basics_modBy(2.0, code), 1.0), r(8025.0, 8031.0)))))))))))));

                                                            case false:
                                                                basics_or(r(8130.0, 8132.0), basics_or(r(8134.0, 8140.0), basics_or(r(8144.0, 8147.0), basics_or(r(8150.0, 8155.0), basics_or(r(8160.0, 8172.0), basics_or(r(8178.0, 8180.0), basics_or(r(8182.0, 8188.0), basics_or(r(8304.0, 8305.0), basics_or(r(8308.0, 8313.0), basics_or(r(8319.0, 8329.0), basics_or(r(8336.0, 8348.0), e(8450.0))))))))))));
                                                         }
                                                        }());
                                                 }
                                                }());
                                         }
                                        }());

                                    case false:
                                        ({ () in return switch l(12783.0) {
                                            case true:
                                                ({ () in return switch l(11647.0) {
                                                    case true:
                                                        ({ () in return switch l(9449.0) {
                                                            case true:
                                                                basics_or(e(8455.0), basics_or(r(8458.0, 8467.0), basics_or(e(8469.0), basics_or(r(8473.0, 8477.0), basics_or(r(8490.0, 8493.0), basics_or(r(8495.0, 8505.0), basics_or(r(8508.0, 8511.0), basics_or(r(8517.0, 8521.0), basics_or(e(8526.0), basics_or(r(8528.0, 8585.0), basics_or(r(9312.0, 9371.0), basics_and(basics_eq(basics_modBy(2.0, code), 0.0), r(8484.0, 8488.0)))))))))))));

                                                            case false:
                                                                basics_or(r(9450.0, 9471.0), basics_or(r(10102.0, 10131.0), basics_or(r(11264.0, 11492.0), basics_or(r(11499.0, 11502.0), basics_or(r(11506.0, 11507.0), basics_or(e(11517.0), basics_or(r(11520.0, 11557.0), basics_or(e(11559.0), basics_or(e(11565.0), basics_or(r(11568.0, 11623.0), e(11631.0)))))))))));
                                                         }
                                                        }());

                                                    case false:
                                                        ({ () in return switch l(12320.0) {
                                                            case true:
                                                                basics_or(r(11648.0, 11670.0), basics_or(r(11680.0, 11686.0), basics_or(r(11688.0, 11694.0), basics_or(r(11696.0, 11702.0), basics_or(r(11704.0, 11710.0), basics_or(r(11712.0, 11718.0), basics_or(r(11720.0, 11726.0), basics_or(r(11728.0, 11734.0), basics_or(r(11736.0, 11742.0), basics_or(e(11823.0), r(12293.0, 12295.0)))))))))));

                                                            case false:
                                                                basics_or(r(12321.0, 12329.0), basics_or(r(12337.0, 12341.0), basics_or(r(12344.0, 12348.0), basics_or(r(12353.0, 12438.0), basics_or(r(12445.0, 12447.0), basics_or(r(12449.0, 12538.0), basics_or(r(12540.0, 12543.0), basics_or(r(12549.0, 12591.0), basics_or(r(12593.0, 12686.0), basics_or(r(12690.0, 12693.0), r(12704.0, 12735.0)))))))))));
                                                         }
                                                        }());
                                                 }
                                                }());

                                            case false:
                                                ({ () in return switch l(43019.0) {
                                                    case true:
                                                        ({ () in return switch l(42559.0) {
                                                            case true:
                                                                basics_or(r(12784.0, 12799.0), basics_or(r(12832.0, 12841.0), basics_or(r(12872.0, 12879.0), basics_or(r(12881.0, 12895.0), basics_or(r(12928.0, 12937.0), basics_or(r(12977.0, 12991.0), basics_or(r(13312.0, 19903.0), basics_or(r(19968.0, 42124.0), basics_or(r(42192.0, 42237.0), basics_or(r(42240.0, 42508.0), r(42512.0, 42539.0)))))))))));

                                                            case false:
                                                                basics_or(r(42560.0, 42606.0), basics_or(r(42623.0, 42653.0), basics_or(r(42656.0, 42735.0), basics_or(r(42775.0, 42783.0), basics_or(r(42786.0, 42888.0), basics_or(r(42891.0, 42954.0), basics_or(r(42960.0, 42961.0), basics_or(r(42966.0, 42969.0), basics_or(r(42994.0, 43009.0), basics_or(r(43011.0, 43013.0), basics_or(r(43015.0, 43018.0), basics_and(basics_eq(basics_modBy(2.0, code), 1.0), r(42963.0, 42965.0)))))))))))));
                                                         }
                                                        }());

                                                    case false:
                                                        ({ () in return switch l(43395.0) {
                                                            case true:
                                                                basics_or(r(43020.0, 43042.0), basics_or(r(43056.0, 43061.0), basics_or(r(43072.0, 43123.0), basics_or(r(43138.0, 43187.0), basics_or(r(43216.0, 43225.0), basics_or(r(43250.0, 43255.0), basics_or(e(43259.0), basics_or(r(43261.0, 43262.0), basics_or(r(43264.0, 43301.0), basics_or(r(43312.0, 43334.0), r(43360.0, 43388.0)))))))))));

                                                            case false:
                                                                basics_or(r(43396.0, 43442.0), basics_or(r(43471.0, 43481.0), basics_or(r(43488.0, 43492.0), basics_or(r(43494.0, 43518.0), basics_or(r(43520.0, 43560.0), basics_or(r(43584.0, 43586.0), basics_or(r(43588.0, 43595.0), basics_or(r(43600.0, 43609.0), basics_or(r(43616.0, 43638.0), basics_or(e(43642.0), basics_or(r(43646.0, 43695.0), e(43697.0))))))))))));
                                                         }
                                                        }());
                                                 }
                                                }());
                                         }
                                        }());
                                 }
                                }());
                         }
                        }());

                    case false:
                        ({ () in return switch l(71351.0) {
                            case true:
                                ({ () in return switch l(67671.0) {
                                    case true:
                                        ({ () in return switch l(65548.0) {
                                            case true:
                                                ({ () in return switch l(64286.0) {
                                                    case true:
                                                        ({ () in return switch l(43867.0) {
                                                            case true:
                                                                basics_or(r(43701.0, 43702.0), basics_or(r(43705.0, 43709.0), basics_or(r(43739.0, 43741.0), basics_or(r(43744.0, 43754.0), basics_or(r(43762.0, 43764.0), basics_or(r(43777.0, 43782.0), basics_or(r(43785.0, 43790.0), basics_or(r(43793.0, 43798.0), basics_or(r(43808.0, 43814.0), basics_or(r(43816.0, 43822.0), basics_or(r(43824.0, 43866.0), basics_and(basics_eq(basics_modBy(2.0, code), 0.0), r(43712.0, 43714.0)))))))))))));

                                                            case false:
                                                                basics_or(r(43868.0, 43881.0), basics_or(r(43888.0, 44002.0), basics_or(r(44016.0, 44025.0), basics_or(r(44032.0, 55203.0), basics_or(r(55216.0, 55238.0), basics_or(r(55243.0, 55291.0), basics_or(r(63744.0, 64109.0), basics_or(r(64112.0, 64217.0), basics_or(r(64256.0, 64262.0), basics_or(r(64275.0, 64279.0), e(64285.0)))))))))));
                                                         }
                                                        }());

                                                    case false:
                                                        ({ () in return switch l(65135.0) {
                                                            case true:
                                                                basics_or(r(64287.0, 64296.0), basics_or(r(64298.0, 64310.0), basics_or(r(64312.0, 64316.0), basics_or(e(64318.0), basics_or(r(64320.0, 64321.0), basics_or(r(64323.0, 64324.0), basics_or(r(64326.0, 64433.0), basics_or(r(64467.0, 64829.0), basics_or(r(64848.0, 64911.0), basics_or(r(64914.0, 64967.0), r(65008.0, 65019.0)))))))))));

                                                            case false:
                                                                basics_or(r(65136.0, 65140.0), basics_or(r(65142.0, 65276.0), basics_or(r(65296.0, 65305.0), basics_or(r(65313.0, 65338.0), basics_or(r(65345.0, 65370.0), basics_or(r(65382.0, 65470.0), basics_or(r(65474.0, 65479.0), basics_or(r(65482.0, 65487.0), basics_or(r(65490.0, 65495.0), basics_or(r(65498.0, 65500.0), r(65536.0, 65547.0)))))))))));
                                                         }
                                                        }());
                                                 }
                                                }());

                                            case false:
                                                ({ () in return switch l(66775.0) {
                                                    case true:
                                                        ({ () in return switch l(66272.0) {
                                                            case true:
                                                                basics_or(r(65549.0, 65574.0), basics_or(r(65576.0, 65594.0), basics_or(r(65596.0, 65597.0), basics_or(r(65599.0, 65613.0), basics_or(r(65616.0, 65629.0), basics_or(r(65664.0, 65786.0), basics_or(r(65799.0, 65843.0), basics_or(r(65856.0, 65912.0), basics_or(r(65930.0, 65931.0), basics_or(r(66176.0, 66204.0), r(66208.0, 66256.0)))))))))));

                                                            case false:
                                                                basics_or(r(66273.0, 66299.0), basics_or(r(66304.0, 66339.0), basics_or(r(66349.0, 66378.0), basics_or(r(66384.0, 66421.0), basics_or(r(66432.0, 66461.0), basics_or(r(66464.0, 66499.0), basics_or(r(66504.0, 66511.0), basics_or(r(66513.0, 66517.0), basics_or(r(66560.0, 66717.0), basics_or(r(66720.0, 66729.0), r(66736.0, 66771.0)))))))))));
                                                         }
                                                        }());

                                                    case false:
                                                        ({ () in return switch l(67071.0) {
                                                            case true:
                                                                basics_or(r(66776.0, 66811.0), basics_or(r(66816.0, 66855.0), basics_or(r(66864.0, 66915.0), basics_or(r(66928.0, 66938.0), basics_or(r(66940.0, 66954.0), basics_or(r(66956.0, 66962.0), basics_or(r(66964.0, 66965.0), basics_or(r(66967.0, 66977.0), basics_or(r(66979.0, 66993.0), basics_or(r(66995.0, 67001.0), r(67003.0, 67004.0)))))))))));

                                                            case false:
                                                                basics_or(r(67072.0, 67382.0), basics_or(r(67392.0, 67413.0), basics_or(r(67424.0, 67431.0), basics_or(r(67456.0, 67461.0), basics_or(r(67463.0, 67504.0), basics_or(r(67506.0, 67514.0), basics_or(r(67584.0, 67589.0), basics_or(e(67592.0), basics_or(r(67594.0, 67637.0), basics_or(r(67639.0, 67640.0), basics_or(e(67644.0), r(67647.0, 67669.0))))))))))));
                                                         }
                                                        }());
                                                 }
                                                }());
                                         }
                                        }());

                                    case false:
                                        ({ () in return switch l(69871.0) {
                                            case true:
                                                ({ () in return switch l(68471.0) {
                                                    case true:
                                                        ({ () in return switch l(68116.0) {
                                                            case true:
                                                                basics_or(r(67672.0, 67702.0), basics_or(r(67705.0, 67742.0), basics_or(r(67751.0, 67759.0), basics_or(r(67808.0, 67826.0), basics_or(r(67828.0, 67829.0), basics_or(r(67835.0, 67867.0), basics_or(r(67872.0, 67897.0), basics_or(r(67968.0, 68023.0), basics_or(r(68028.0, 68047.0), basics_or(r(68050.0, 68096.0), r(68112.0, 68115.0)))))))))));

                                                            case false:
                                                                basics_or(r(68117.0, 68119.0), basics_or(r(68121.0, 68149.0), basics_or(r(68160.0, 68168.0), basics_or(r(68192.0, 68222.0), basics_or(r(68224.0, 68255.0), basics_or(r(68288.0, 68295.0), basics_or(r(68297.0, 68324.0), basics_or(r(68331.0, 68335.0), basics_or(r(68352.0, 68405.0), basics_or(r(68416.0, 68437.0), r(68440.0, 68466.0)))))))))));
                                                         }
                                                        }());

                                                    case false:
                                                        ({ () in return switch l(69423.0) {
                                                            case true:
                                                                basics_or(r(68472.0, 68497.0), basics_or(r(68521.0, 68527.0), basics_or(r(68608.0, 68680.0), basics_or(r(68736.0, 68786.0), basics_or(r(68800.0, 68850.0), basics_or(r(68858.0, 68899.0), basics_or(r(68912.0, 68921.0), basics_or(r(69216.0, 69246.0), basics_or(r(69248.0, 69289.0), basics_or(r(69296.0, 69297.0), r(69376.0, 69415.0)))))))))));

                                                            case false:
                                                                basics_or(r(69424.0, 69445.0), basics_or(r(69457.0, 69460.0), basics_or(r(69488.0, 69505.0), basics_or(r(69552.0, 69579.0), basics_or(r(69600.0, 69622.0), basics_or(r(69635.0, 69687.0), basics_or(r(69714.0, 69743.0), basics_or(r(69745.0, 69746.0), basics_or(e(69749.0), basics_or(r(69763.0, 69807.0), r(69840.0, 69864.0)))))))))));
                                                         }
                                                        }());
                                                 }
                                                }());

                                            case false:
                                                ({ () in return switch l(70404.0) {
                                                    case true:
                                                        ({ () in return switch l(70112.0) {
                                                            case true:
                                                                basics_or(r(69872.0, 69881.0), basics_or(r(69891.0, 69926.0), basics_or(r(69942.0, 69951.0), basics_or(e(69956.0), basics_or(e(69959.0), basics_or(r(69968.0, 70002.0), basics_or(e(70006.0), basics_or(r(70019.0, 70066.0), basics_or(r(70081.0, 70084.0), basics_or(r(70096.0, 70106.0), e(70108.0)))))))))));

                                                            case false:
                                                                basics_or(r(70113.0, 70132.0), basics_or(r(70144.0, 70161.0), basics_or(r(70163.0, 70187.0), basics_or(r(70207.0, 70208.0), basics_or(r(70272.0, 70278.0), basics_or(e(70280.0), basics_or(r(70282.0, 70285.0), basics_or(r(70287.0, 70301.0), basics_or(r(70303.0, 70312.0), basics_or(r(70320.0, 70366.0), r(70384.0, 70393.0)))))))))));
                                                         }
                                                        }());

                                                    case false:
                                                        ({ () in return switch l(70735.0) {
                                                            case true:
                                                                basics_or(r(70405.0, 70412.0), basics_or(r(70415.0, 70416.0), basics_or(r(70419.0, 70440.0), basics_or(r(70442.0, 70448.0), basics_or(r(70450.0, 70451.0), basics_or(r(70453.0, 70457.0), basics_or(e(70461.0), basics_or(e(70480.0), basics_or(r(70493.0, 70497.0), basics_or(r(70656.0, 70708.0), r(70727.0, 70730.0)))))))))));

                                                            case false:
                                                                basics_or(r(70736.0, 70745.0), basics_or(r(70751.0, 70753.0), basics_or(r(70784.0, 70831.0), basics_or(r(70852.0, 70853.0), basics_or(e(70855.0), basics_or(r(70864.0, 70873.0), basics_or(r(71040.0, 71086.0), basics_or(r(71128.0, 71131.0), basics_or(r(71168.0, 71215.0), basics_or(e(71236.0), basics_or(r(71248.0, 71257.0), r(71296.0, 71338.0))))))))))));
                                                         }
                                                        }());
                                                 }
                                                }());
                                         }
                                        }());
                                 }
                                }());

                            case false:
                                ({ () in return switch l(119893.0) {
                                    case true:
                                        ({ () in return switch l(73727.0) {
                                            case true:
                                                ({ () in return switch l(72703.0) {
                                                    case true:
                                                        ({ () in return switch l(71959.0) {
                                                            case true:
                                                                basics_or(e(71352.0), basics_or(r(71360.0, 71369.0), basics_or(r(71424.0, 71450.0), basics_or(r(71472.0, 71483.0), basics_or(r(71488.0, 71494.0), basics_or(r(71680.0, 71723.0), basics_or(r(71840.0, 71922.0), basics_or(r(71935.0, 71942.0), basics_or(e(71945.0), basics_or(r(71948.0, 71955.0), r(71957.0, 71958.0)))))))))));

                                                            case false:
                                                                basics_or(r(71960.0, 71983.0), basics_or(r(72016.0, 72025.0), basics_or(r(72096.0, 72103.0), basics_or(r(72106.0, 72144.0), basics_or(e(72192.0), basics_or(r(72203.0, 72242.0), basics_or(e(72250.0), basics_or(e(72272.0), basics_or(r(72284.0, 72329.0), basics_or(e(72349.0), basics_or(r(72368.0, 72440.0), basics_and(basics_eq(basics_modBy(2.0, code), 1.0), basics_or(r(71999.0, 72001.0), r(72161.0, 72163.0))))))))))))));
                                                         }
                                                        }());

                                                    case false:
                                                        ({ () in return switch l(73062.0) {
                                                            case true:
                                                                basics_or(r(72704.0, 72712.0), basics_or(r(72714.0, 72750.0), basics_or(e(72768.0), basics_or(r(72784.0, 72812.0), basics_or(r(72818.0, 72847.0), basics_or(r(72960.0, 72966.0), basics_or(r(72968.0, 72969.0), basics_or(r(72971.0, 73008.0), basics_or(e(73030.0), basics_or(r(73040.0, 73049.0), r(73056.0, 73061.0)))))))))));

                                                            case false:
                                                                basics_or(r(73063.0, 73064.0), basics_or(r(73066.0, 73097.0), basics_or(e(73112.0), basics_or(r(73120.0, 73129.0), basics_or(r(73440.0, 73458.0), basics_or(e(73474.0), basics_or(r(73476.0, 73488.0), basics_or(r(73490.0, 73523.0), basics_or(r(73552.0, 73561.0), basics_or(e(73648.0), r(73664.0, 73684.0)))))))))));
                                                         }
                                                        }());
                                                 }
                                                }());

                                            case false:
                                                ({ () in return switch l(94098.0) {
                                                    case true:
                                                        ({ () in return switch l(92863.0) {
                                                            case true:
                                                                basics_or(r(73728.0, 74649.0), basics_or(r(74752.0, 74862.0), basics_or(r(74880.0, 75075.0), basics_or(r(77712.0, 77808.0), basics_or(r(77824.0, 78895.0), basics_or(r(78913.0, 78918.0), basics_or(r(82944.0, 83526.0), basics_or(r(92160.0, 92728.0), basics_or(r(92736.0, 92766.0), basics_or(r(92768.0, 92777.0), r(92784.0, 92862.0)))))))))));

                                                            case false:
                                                                basics_or(r(92864.0, 92873.0), basics_or(r(92880.0, 92909.0), basics_or(r(92928.0, 92975.0), basics_or(r(92992.0, 92995.0), basics_or(r(93008.0, 93017.0), basics_or(r(93019.0, 93025.0), basics_or(r(93027.0, 93047.0), basics_or(r(93053.0, 93071.0), basics_or(r(93760.0, 93846.0), basics_or(r(93952.0, 94026.0), e(94032.0)))))))))));
                                                         }
                                                        }());

                                                    case false:
                                                        ({ () in return switch l(110927.0) {
                                                            case true:
                                                                basics_or(r(94099.0, 94111.0), basics_or(r(94176.0, 94177.0), basics_or(e(94179.0), basics_or(r(94208.0, 100343.0), basics_or(r(100352.0, 101589.0), basics_or(r(101632.0, 101640.0), basics_or(r(110576.0, 110579.0), basics_or(r(110581.0, 110587.0), basics_or(r(110589.0, 110590.0), basics_or(r(110592.0, 110882.0), e(110898.0)))))))))));

                                                            case false:
                                                                basics_or(r(110928.0, 110930.0), basics_or(e(110933.0), basics_or(r(110948.0, 110951.0), basics_or(r(110960.0, 111355.0), basics_or(r(113664.0, 113770.0), basics_or(r(113776.0, 113788.0), basics_or(r(113792.0, 113800.0), basics_or(r(113808.0, 113817.0), basics_or(r(119488.0, 119507.0), basics_or(r(119520.0, 119539.0), basics_or(r(119648.0, 119672.0), r(119808.0, 119892.0))))))))))));
                                                         }
                                                        }());
                                                 }
                                                }());
                                         }
                                        }());

                                    case false:
                                        ({ () in return switch l(124911.0) {
                                            case true:
                                                ({ () in return switch l(120597.0) {
                                                    case true:
                                                        ({ () in return switch l(120085.0) {
                                                            case true:
                                                                basics_or(r(119894.0, 119964.0), basics_or(r(119966.0, 119967.0), basics_or(e(119970.0), basics_or(r(119973.0, 119974.0), basics_or(r(119977.0, 119980.0), basics_or(r(119982.0, 119993.0), basics_or(e(119995.0), basics_or(r(119997.0, 120003.0), basics_or(r(120005.0, 120069.0), basics_or(r(120071.0, 120074.0), r(120077.0, 120084.0)))))))))));

                                                            case false:
                                                                basics_or(r(120086.0, 120092.0), basics_or(r(120094.0, 120121.0), basics_or(r(120123.0, 120126.0), basics_or(r(120128.0, 120132.0), basics_or(e(120134.0), basics_or(r(120138.0, 120144.0), basics_or(r(120146.0, 120485.0), basics_or(r(120488.0, 120512.0), basics_or(r(120514.0, 120538.0), basics_or(r(120540.0, 120570.0), r(120572.0, 120596.0)))))))))));
                                                         }
                                                        }());

                                                    case false:
                                                        ({ () in return switch l(123135.0) {
                                                            case true:
                                                                basics_or(r(120598.0, 120628.0), basics_or(r(120630.0, 120654.0), basics_or(r(120656.0, 120686.0), basics_or(r(120688.0, 120712.0), basics_or(r(120714.0, 120744.0), basics_or(r(120746.0, 120770.0), basics_or(r(120772.0, 120779.0), basics_or(r(120782.0, 120831.0), basics_or(r(122624.0, 122654.0), basics_or(r(122661.0, 122666.0), r(122928.0, 122989.0)))))))))));

                                                            case false:
                                                                basics_or(r(123136.0, 123180.0), basics_or(r(123191.0, 123197.0), basics_or(r(123200.0, 123209.0), basics_or(e(123214.0), basics_or(r(123536.0, 123565.0), basics_or(r(123584.0, 123627.0), basics_or(r(123632.0, 123641.0), basics_or(r(124112.0, 124139.0), basics_or(r(124144.0, 124153.0), basics_or(r(124896.0, 124902.0), basics_or(r(124904.0, 124907.0), r(124909.0, 124910.0))))))))))));
                                                         }
                                                        }());
                                                 }
                                                }());

                                            case false:
                                                ({ () in return switch l(126560.0) {
                                                    case true:
                                                        ({ () in return switch l(126463.0) {
                                                            case true:
                                                                basics_or(r(124912.0, 124926.0), basics_or(r(124928.0, 125124.0), basics_or(r(125127.0, 125135.0), basics_or(r(125184.0, 125251.0), basics_or(e(125259.0), basics_or(r(125264.0, 125273.0), basics_or(r(126065.0, 126123.0), basics_or(r(126125.0, 126127.0), basics_or(r(126129.0, 126132.0), basics_or(r(126209.0, 126253.0), r(126255.0, 126269.0)))))))))));

                                                            case false:
                                                                basics_or(r(126464.0, 126467.0), basics_or(r(126469.0, 126495.0), basics_or(r(126497.0, 126498.0), basics_or(e(126500.0), basics_or(e(126503.0), basics_or(r(126505.0, 126514.0), basics_or(r(126516.0, 126519.0), basics_or(e(126530.0), basics_or(r(126541.0, 126543.0), basics_or(r(126545.0, 126546.0), basics_or(e(126548.0), basics_and(basics_eq(basics_modBy(2.0, code), 1.0), basics_or(r(126521.0, 126523.0), basics_or(r(126535.0, 126539.0), r(126551.0, 126559.0)))))))))))))));
                                                         }
                                                        }());

                                                    case false:
                                                        ({ () in return switch l(126634.0) {
                                                            case true:
                                                                basics_or(r(126561.0, 126562.0), basics_or(e(126564.0), basics_or(r(126567.0, 126570.0), basics_or(r(126572.0, 126578.0), basics_or(r(126580.0, 126583.0), basics_or(r(126585.0, 126588.0), basics_or(e(126590.0), basics_or(r(126592.0, 126601.0), basics_or(r(126603.0, 126619.0), basics_or(r(126625.0, 126627.0), r(126629.0, 126633.0)))))))))));

                                                            case false:
                                                                basics_or(r(126635.0, 126651.0), basics_or(r(127232.0, 127244.0), basics_or(r(130032.0, 130041.0), basics_or(r(131072.0, 173791.0), basics_or(r(173824.0, 177977.0), basics_or(r(177984.0, 178205.0), basics_or(r(178208.0, 183969.0), basics_or(r(183984.0, 191456.0), basics_or(r(191472.0, 192093.0), basics_or(r(194560.0, 195101.0), basics_or(r(196608.0, 201546.0), r(201552.0, 205743.0))))))))))));
                                                         }
                                                        }());
                                                 }
                                                }());
                                         }
                                        }());
                                 }
                                }());
                         }
                        }());
                 }
                }());
          }
         }())
        }())
    }

    static public func unicode_isDigit(_ c: Character) -> Bool {
        ({ () in let code =
            char_toCode(c);

         let e =
            { (hex) in
                basics_eq(hex, code)
            };

         let l =
            { (hex) in
                basics_lt(code, hex)
            };

         let r =
            { (from, to) in
                basics_and(basics_le(from, code), basics_le(code, to))
            };

         return ({ () in return switch l(256.0) {
            case true:
                basics_or(r(48.0, 57.0), basics_or(r(178.0, 179.0), basics_or(e(185.0), r(188.0, 190.0))));

            case false:
                ({ () in return switch l(66272.0) {
                    case true:
                        ({ () in return switch l(7231.0) {
                            case true:
                                ({ () in return switch l(3557.0) {
                                    case true:
                                        ({ () in return switch l(2917.0) {
                                            case true:
                                                basics_or(r(1632.0, 1641.0), basics_or(r(1776.0, 1785.0), basics_or(r(1984.0, 1993.0), basics_or(r(2406.0, 2415.0), basics_or(r(2534.0, 2543.0), basics_or(r(2548.0, 2553.0), basics_or(r(2662.0, 2671.0), r(2790.0, 2799.0))))))));

                                            case false:
                                                basics_or(r(2918.0, 2927.0), basics_or(r(2930.0, 2935.0), basics_or(r(3046.0, 3058.0), basics_or(r(3174.0, 3183.0), basics_or(r(3192.0, 3198.0), basics_or(r(3302.0, 3311.0), basics_or(r(3416.0, 3422.0), r(3430.0, 3448.0))))))));
                                         }
                                        }());

                                    case false:
                                        ({ () in return switch l(6111.0) {
                                            case true:
                                                basics_or(r(3558.0, 3567.0), basics_or(r(3664.0, 3673.0), basics_or(r(3792.0, 3801.0), basics_or(r(3872.0, 3891.0), basics_or(r(4160.0, 4169.0), basics_or(r(4240.0, 4249.0), basics_or(r(4969.0, 4988.0), r(5870.0, 5872.0))))))));

                                            case false:
                                                basics_or(r(6112.0, 6121.0), basics_or(r(6128.0, 6137.0), basics_or(r(6160.0, 6169.0), basics_or(r(6470.0, 6479.0), basics_or(r(6608.0, 6618.0), basics_or(r(6784.0, 6793.0), basics_or(r(6800.0, 6809.0), basics_or(r(6992.0, 7001.0), r(7088.0, 7097.0)))))))));
                                         }
                                        }());
                                 }
                                }());

                            case false:
                                ({ () in return switch l(12871.0) {
                                    case true:
                                        ({ () in return switch l(9449.0) {
                                            case true:
                                                basics_or(r(7232.0, 7241.0), basics_or(r(7248.0, 7257.0), basics_or(e(8304.0), basics_or(r(8308.0, 8313.0), basics_or(r(8320.0, 8329.0), basics_or(r(8528.0, 8578.0), basics_or(r(8581.0, 8585.0), r(9312.0, 9371.0))))))));

                                            case false:
                                                basics_or(r(9450.0, 9471.0), basics_or(r(10102.0, 10131.0), basics_or(e(11517.0), basics_or(e(12295.0), basics_or(r(12321.0, 12329.0), basics_or(r(12344.0, 12346.0), basics_or(r(12690.0, 12693.0), r(12832.0, 12841.0))))))));
                                         }
                                        }());

                                    case false:
                                        ({ () in return switch l(43263.0) {
                                            case true:
                                                basics_or(r(12872.0, 12879.0), basics_or(r(12881.0, 12895.0), basics_or(r(12928.0, 12937.0), basics_or(r(12977.0, 12991.0), basics_or(r(42528.0, 42537.0), basics_or(r(42726.0, 42735.0), basics_or(r(43056.0, 43061.0), r(43216.0, 43225.0))))))));

                                            case false:
                                                basics_or(r(43264.0, 43273.0), basics_or(r(43472.0, 43481.0), basics_or(r(43504.0, 43513.0), basics_or(r(43600.0, 43609.0), basics_or(r(44016.0, 44025.0), basics_or(r(65296.0, 65305.0), basics_or(r(65799.0, 65843.0), basics_or(r(65856.0, 65912.0), r(65930.0, 65931.0)))))))));
                                         }
                                        }());
                                 }
                                }());
                         }
                        }());

                    case false:
                        ({ () in return switch l(70735.0) {
                            case true:
                                ({ () in return switch l(68252.0) {
                                    case true:
                                        ({ () in return switch l(67750.0) {
                                            case true:
                                                basics_or(r(66273.0, 66299.0), basics_or(r(66336.0, 66339.0), basics_or(e(66369.0), basics_or(e(66378.0), basics_or(r(66513.0, 66517.0), basics_or(r(66720.0, 66729.0), basics_or(r(67672.0, 67679.0), r(67705.0, 67711.0))))))));

                                            case false:
                                                basics_or(r(67751.0, 67759.0), basics_or(r(67835.0, 67839.0), basics_or(r(67862.0, 67867.0), basics_or(r(68028.0, 68029.0), basics_or(r(68032.0, 68047.0), basics_or(r(68050.0, 68095.0), basics_or(r(68160.0, 68168.0), r(68221.0, 68222.0))))))));
                                         }
                                        }());

                                    case false:
                                        ({ () in return switch l(69404.0) {
                                            case true:
                                                basics_or(r(68253.0, 68255.0), basics_or(r(68331.0, 68335.0), basics_or(r(68440.0, 68447.0), basics_or(r(68472.0, 68479.0), basics_or(r(68521.0, 68527.0), basics_or(r(68858.0, 68863.0), basics_or(r(68912.0, 68921.0), r(69216.0, 69246.0))))))));

                                            case false:
                                                basics_or(r(69405.0, 69414.0), basics_or(r(69457.0, 69460.0), basics_or(r(69573.0, 69579.0), basics_or(r(69714.0, 69743.0), basics_or(r(69872.0, 69881.0), basics_or(r(69942.0, 69951.0), basics_or(r(70096.0, 70105.0), basics_or(r(70113.0, 70132.0), r(70384.0, 70393.0)))))))));
                                         }
                                        }());
                                 }
                                }());

                            case false:
                                ({ () in return switch l(93823.0) {
                                    case true:
                                        ({ () in return switch l(73039.0) {
                                            case true:
                                                basics_or(r(70736.0, 70745.0), basics_or(r(70864.0, 70873.0), basics_or(r(71248.0, 71257.0), basics_or(r(71360.0, 71369.0), basics_or(r(71472.0, 71483.0), basics_or(r(71904.0, 71922.0), basics_or(r(72016.0, 72025.0), r(72784.0, 72812.0))))))));

                                            case false:
                                                basics_or(r(73040.0, 73049.0), basics_or(r(73120.0, 73129.0), basics_or(r(73552.0, 73561.0), basics_or(r(73664.0, 73684.0), basics_or(r(74752.0, 74862.0), basics_or(r(92768.0, 92777.0), basics_or(r(92864.0, 92873.0), basics_or(r(93008.0, 93017.0), r(93019.0, 93025.0)))))))));
                                         }
                                        }());

                                    case false:
                                        ({ () in return switch l(125126.0) {
                                            case true:
                                                basics_or(r(93824.0, 93846.0), basics_or(r(119488.0, 119507.0), basics_or(r(119520.0, 119539.0), basics_or(r(119648.0, 119672.0), basics_or(r(120782.0, 120831.0), basics_or(r(123200.0, 123209.0), basics_or(r(123632.0, 123641.0), r(124144.0, 124153.0))))))));

                                            case false:
                                                basics_or(r(125127.0, 125135.0), basics_or(r(125264.0, 125273.0), basics_or(r(126065.0, 126123.0), basics_or(r(126125.0, 126127.0), basics_or(r(126129.0, 126132.0), basics_or(r(126209.0, 126253.0), basics_or(r(126255.0, 126269.0), basics_or(r(127232.0, 127244.0), r(130032.0, 130041.0)))))))));
                                         }
                                        }());
                                 }
                                }());
                         }
                        }());
                 }
                }());
          }
         }())
        }())
    }

    static public func unicode_isLower(_ c: Character) -> Bool {
        ({ () in let simple =
            basics_and(basics_eq(char_toLower(c), c), basics_neq(char_toUpper(c), c));

         let code =
            char_toCode(c);

         let e =
            { (hex) in
                basics_eq(hex, code)
            };

         let l =
            { (hex) in
                basics_lt(code, hex)
            };

         let r =
            { (from, to) in
                basics_and(basics_le(from, code), basics_le(code, to))
            };

         return ({ () in return switch simple {
            case true:
                basics_or(basics_le(code, 836.0), basics_or(r(838.0, 8559.0), basics_or(r(8576.0, 9423.0), r(9450.0, 983040.0))));

            case false:
                ({ () in return switch l(43001.0) {
                    case true:
                        ({ () in return switch l(8457.0) {
                            case true:
                                ({ () in return switch l(590.0) {
                                    case true:
                                        basics_or(r(311.0, 312.0), basics_or(r(396.0, 397.0), basics_or(r(409.0, 411.0), basics_or(r(426.0, 427.0), basics_or(r(441.0, 442.0), basics_or(r(445.0, 447.0), basics_or(e(545.0), r(563.0, 569.0))))))));

                                    case false:
                                        basics_or(r(591.0, 659.0), basics_or(r(661.0, 687.0), basics_or(r(1019.0, 1020.0), basics_or(r(1376.0, 1416.0), basics_or(r(7424.0, 7467.0), basics_or(r(7531.0, 7543.0), basics_or(r(7545.0, 7578.0), basics_or(r(7829.0, 7837.0), e(7839.0)))))))));
                                 }
                                }());

                            case false:
                                ({ () in return switch l(11376.0) {
                                    case true:
                                        basics_or(e(8458.0), basics_or(r(8462.0, 8463.0), basics_or(e(8467.0), basics_or(e(8495.0), basics_or(e(8500.0), basics_or(e(8505.0), basics_or(r(8508.0, 8509.0), r(8518.0, 8521.0))))))));

                                    case false:
                                        basics_or(e(11377.0), basics_or(r(11379.0, 11380.0), basics_or(r(11382.0, 11387.0), basics_or(r(11491.0, 11492.0), basics_or(r(42799.0, 42801.0), basics_or(r(42865.0, 42872.0), basics_or(e(42894.0), basics_or(r(42899.0, 42901.0), basics_or(e(42927.0), basics_and(basics_eq(basics_modBy(2.0, code), 1.0), r(42963.0, 42965.0)))))))))));
                                 }
                                }());
                         }
                        }());

                    case false:
                        ({ () in return switch l(120353.0) {
                            case true:
                                ({ () in return switch l(119994.0) {
                                    case true:
                                        basics_or(e(43002.0), basics_or(r(43824.0, 43866.0), basics_or(r(43872.0, 43880.0), basics_or(r(119834.0, 119859.0), basics_or(r(119886.0, 119892.0), basics_or(r(119894.0, 119911.0), basics_or(r(119938.0, 119963.0), r(119990.0, 119993.0))))))));

                                    case false:
                                        basics_or(e(119995.0), basics_or(r(119997.0, 120003.0), basics_or(r(120005.0, 120015.0), basics_or(r(120042.0, 120067.0), basics_or(r(120094.0, 120119.0), basics_or(r(120146.0, 120171.0), basics_or(r(120198.0, 120223.0), basics_or(r(120250.0, 120275.0), r(120302.0, 120327.0)))))))));
                                 }
                                }());

                            case false:
                                ({ () in return switch l(120655.0) {
                                    case true:
                                        basics_or(r(120354.0, 120379.0), basics_or(r(120406.0, 120431.0), basics_or(r(120458.0, 120485.0), basics_or(r(120514.0, 120538.0), basics_or(r(120540.0, 120545.0), basics_or(r(120572.0, 120596.0), basics_or(r(120598.0, 120603.0), r(120630.0, 120654.0))))))));

                                    case false:
                                        basics_or(r(120656.0, 120661.0), basics_or(r(120688.0, 120712.0), basics_or(r(120714.0, 120719.0), basics_or(r(120746.0, 120770.0), basics_or(r(120772.0, 120777.0), basics_or(e(120779.0), basics_or(r(122624.0, 122633.0), basics_or(r(122635.0, 122654.0), r(122661.0, 122666.0)))))))));
                                 }
                                }());
                         }
                        }());
                 }
                }());
          }
         }())
        }())
    }

    static public func unicode_isSeparator(_ c: Character) -> Bool {
        ({ () in let code =
            char_toCode(c);

         let e =
            { (hex) in
                basics_eq(hex, code)
            };

         let l =
            { (hex) in
                basics_lt(code, hex)
            };

         let r =
            { (from, to) in
                basics_and(basics_le(from, code), basics_le(code, to))
            };

         return ({ () in return switch l(256.0) {
            case true:
                basics_or(e(32.0), e(160.0));

            case false:
                basics_or(e(5760.0), basics_or(r(8192.0, 8202.0), basics_or(r(8232.0, 8233.0), basics_or(e(8239.0), basics_or(e(8287.0), e(12288.0))))));
          }
         }())
        }())
    }

    static public func unicode_isSpace(_ c: Character) -> Bool {
        ({ () in let code =
            char_toCode(c);

         let e =
            { (hex) in
                basics_eq(hex, code)
            };

         let l =
            { (hex) in
                basics_lt(code, hex)
            };

         let r =
            { (from, to) in
                basics_and(basics_le(from, code), basics_le(code, to))
            };

         return ({ () in return switch l(256.0) {
            case true:
                basics_or(e(32.0), e(160.0));

            case false:
                basics_or(e(5760.0), basics_or(r(8192.0, 8202.0), basics_or(e(8239.0), basics_or(e(8287.0), e(12288.0)))));
          }
         }())
        }())
    }

    static public func unicode_isUpper(_ c: Character) -> Bool {
        ({ () in let simple =
            basics_and(basics_eq(char_toUpper(c), c), basics_neq(char_toLower(c), c));

         let code =
            char_toCode(c);

         let e =
            { (hex) in
                basics_eq(hex, code)
            };

         let l =
            { (hex) in
                basics_lt(code, hex)
            };

         let r =
            { (from, to) in
                basics_and(basics_le(from, code), basics_le(code, to))
            };

         return ({ () in return switch simple {
            case true:
                basics_or(basics_le(code, 8543.0), basics_or(r(8560.0, 9397.0), r(9424.0, 983040.0)));

            case false:
                ({ () in return switch l(120015.0) {
                    case true:
                        ({ () in return switch l(8509.0) {
                            case true:
                                basics_or(r(978.0, 980.0), basics_or(e(8450.0), basics_or(e(8455.0), basics_or(r(8459.0, 8461.0), basics_or(r(8464.0, 8466.0), basics_or(e(8469.0), basics_or(r(8473.0, 8477.0), basics_or(e(8484.0), basics_or(e(8488.0), basics_or(r(8490.0, 8493.0), r(8496.0, 8499.0)))))))))));

                            case false:
                                basics_or(r(8510.0, 8511.0), basics_or(e(8517.0), basics_or(r(119808.0, 119833.0), basics_or(r(119860.0, 119885.0), basics_or(r(119912.0, 119937.0), basics_or(e(119964.0), basics_or(r(119966.0, 119967.0), basics_or(e(119970.0), basics_or(r(119973.0, 119974.0), basics_or(r(119977.0, 119980.0), r(119982.0, 119989.0)))))))))));
                         }
                        }());

                    case false:
                        ({ () in return switch l(120223.0) {
                            case true:
                                basics_or(r(120016.0, 120041.0), basics_or(r(120068.0, 120069.0), basics_or(r(120071.0, 120074.0), basics_or(r(120077.0, 120084.0), basics_or(r(120086.0, 120092.0), basics_or(r(120120.0, 120121.0), basics_or(r(120123.0, 120126.0), basics_or(r(120128.0, 120132.0), basics_or(e(120134.0), basics_or(r(120138.0, 120144.0), r(120172.0, 120197.0)))))))))));

                            case false:
                                basics_or(r(120224.0, 120249.0), basics_or(r(120276.0, 120301.0), basics_or(r(120328.0, 120353.0), basics_or(r(120380.0, 120405.0), basics_or(r(120432.0, 120457.0), basics_or(r(120488.0, 120512.0), basics_or(r(120546.0, 120570.0), basics_or(r(120604.0, 120628.0), basics_or(r(120662.0, 120686.0), basics_or(r(120720.0, 120744.0), e(120778.0)))))))))));
                         }
                        }());
                 }
                }());
          }
         }())
        }())
    }
}
